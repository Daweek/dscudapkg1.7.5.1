# 1 "./dscudatmp/mr3.cu"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/local/cuda/include/cuda_runtime.h" 1
# 59 "/usr/local/cuda/include/cuda_runtime.h"
# 1 "/usr/local/cuda/include/host_config.h" 1
# 119 "/usr/local/cuda/include/host_config.h"
# 1 "/usr/include/features.h" 1 3 4
# 324 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/predefs.h" 1 3 4
# 325 "/usr/include/features.h" 2 3 4
# 357 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 378 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 379 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 358 "/usr/include/features.h" 2 3 4
# 389 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 390 "/usr/include/features.h" 2 3 4
# 120 "/usr/local/cuda/include/host_config.h" 2
# 60 "/usr/local/cuda/include/cuda_runtime.h" 2







# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 56 "/usr/local/cuda/include/builtin_types.h"
# 1 "/usr/local/cuda/include/device_types.h" 1
# 53 "/usr/local/cuda/include/device_types.h"
# 1 "/usr/local/cuda/include/host_defines.h" 1
# 54 "/usr/local/cuda/include/device_types.h" 2







enum __attribute__((device_builtin)) cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
};
# 57 "/usr/local/cuda/include/builtin_types.h" 2
# 1 "/usr/local/cuda/include/driver_types.h" 1
# 70 "/usr/local/cuda/include/driver_types.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include-fixed/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include-fixed/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include-fixed/limits.h" 1 3 4
# 169 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 145 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 157 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 40 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 158 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 146 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 150 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 154 "/usr/include/limits.h" 2 3 4
# 170 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include-fixed/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include-fixed/limits.h" 2 3 4
# 71 "/usr/local/cuda/include/driver_types.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 1 3 4
# 150 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 212 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 72 "/usr/local/cuda/include/driver_types.h" 2
# 128 "/usr/local/cuda/include/driver_types.h"
enum __attribute__((device_builtin)) cudaError
{





    cudaSuccess = 0,





    cudaErrorMissingConfiguration = 1,





    cudaErrorMemoryAllocation = 2,





    cudaErrorInitializationError = 3,
# 163 "/usr/local/cuda/include/driver_types.h"
    cudaErrorLaunchFailure = 4,
# 172 "/usr/local/cuda/include/driver_types.h"
    cudaErrorPriorLaunchFailure = 5,
# 182 "/usr/local/cuda/include/driver_types.h"
    cudaErrorLaunchTimeout = 6,
# 191 "/usr/local/cuda/include/driver_types.h"
    cudaErrorLaunchOutOfResources = 7,





    cudaErrorInvalidDeviceFunction = 8,
# 206 "/usr/local/cuda/include/driver_types.h"
    cudaErrorInvalidConfiguration = 9,





    cudaErrorInvalidDevice = 10,





    cudaErrorInvalidValue = 11,





    cudaErrorInvalidPitchValue = 12,





    cudaErrorInvalidSymbol = 13,




    cudaErrorMapBufferObjectFailed = 14,




    cudaErrorUnmapBufferObjectFailed = 15,





    cudaErrorInvalidHostPointer = 16,





    cudaErrorInvalidDevicePointer = 17,





    cudaErrorInvalidTexture = 18,





    cudaErrorInvalidTextureBinding = 19,






    cudaErrorInvalidChannelDescriptor = 20,





    cudaErrorInvalidMemcpyDirection = 21,
# 287 "/usr/local/cuda/include/driver_types.h"
    cudaErrorAddressOfConstant = 22,
# 296 "/usr/local/cuda/include/driver_types.h"
    cudaErrorTextureFetchFailed = 23,
# 305 "/usr/local/cuda/include/driver_types.h"
    cudaErrorTextureNotBound = 24,
# 314 "/usr/local/cuda/include/driver_types.h"
    cudaErrorSynchronizationError = 25,





    cudaErrorInvalidFilterSetting = 26,





    cudaErrorInvalidNormSetting = 27,







    cudaErrorMixedDeviceExecution = 28,






    cudaErrorCudartUnloading = 29,




    cudaErrorUnknown = 30,







    cudaErrorNotYetImplemented = 31,
# 363 "/usr/local/cuda/include/driver_types.h"
    cudaErrorMemoryValueTooLarge = 32,






    cudaErrorInvalidResourceHandle = 33,







    cudaErrorNotReady = 34,






    cudaErrorInsufficientDriver = 35,
# 398 "/usr/local/cuda/include/driver_types.h"
    cudaErrorSetOnActiveProcess = 36,





    cudaErrorInvalidSurface = 37,





    cudaErrorNoDevice = 38,





    cudaErrorECCUncorrectable = 39,




    cudaErrorSharedObjectSymbolNotFound = 40,




    cudaErrorSharedObjectInitFailed = 41,





    cudaErrorUnsupportedLimit = 42,





    cudaErrorDuplicateVariableName = 43,





    cudaErrorDuplicateTextureName = 44,





    cudaErrorDuplicateSurfaceName = 45,
# 460 "/usr/local/cuda/include/driver_types.h"
    cudaErrorDevicesUnavailable = 46,




    cudaErrorInvalidKernelImage = 47,







    cudaErrorNoKernelImageForDevice = 48,
# 486 "/usr/local/cuda/include/driver_types.h"
    cudaErrorIncompatibleDriverContext = 49,






    cudaErrorPeerAccessAlreadyEnabled = 50,






    cudaErrorPeerAccessNotEnabled = 51,





    cudaErrorDeviceAlreadyInUse = 54,






    cudaErrorProfilerDisabled = 55,







    cudaErrorProfilerNotInitialized = 56,






    cudaErrorProfilerAlreadyStarted = 57,






     cudaErrorProfilerAlreadyStopped = 58,







    cudaErrorAssert = 59,






    cudaErrorTooManyPeers = 60,





    cudaErrorHostMemoryAlreadyRegistered = 61,





    cudaErrorHostMemoryNotRegistered = 62,




    cudaErrorOperatingSystem = 63,





    cudaErrorPeerAccessUnsupported = 64,






    cudaErrorLaunchMaxDepthExceeded = 65,







    cudaErrorLaunchFileScopedTex = 66,







    cudaErrorLaunchFileScopedSurf = 67,
# 611 "/usr/local/cuda/include/driver_types.h"
    cudaErrorSyncDepthExceeded = 68,
# 623 "/usr/local/cuda/include/driver_types.h"
    cudaErrorLaunchPendingCountExceeded = 69,




    cudaErrorNotPermitted = 70,





    cudaErrorNotSupported = 71,
# 643 "/usr/local/cuda/include/driver_types.h"
    cudaErrorHardwareStackError = 72,







    cudaErrorIllegalInstruction = 73,
# 660 "/usr/local/cuda/include/driver_types.h"
    cudaErrorMisalignedAddress = 74,
# 671 "/usr/local/cuda/include/driver_types.h"
    cudaErrorInvalidAddressSpace = 75,







    cudaErrorInvalidPc = 76,







    cudaErrorIllegalAddress = 77,





    cudaErrorStartupFailure = 0x7f,







    cudaErrorApiFailureBase = 10000
};




enum __attribute__((device_builtin)) cudaChannelFormatKind
{
    cudaChannelFormatKindSigned = 0,
    cudaChannelFormatKindUnsigned = 1,
    cudaChannelFormatKindFloat = 2,
    cudaChannelFormatKindNone = 3
};




struct __attribute__((device_builtin)) cudaChannelFormatDesc
{
    int x;
    int y;
    int z;
    int w;
    enum cudaChannelFormatKind f;
};




typedef struct cudaArray *cudaArray_t;




typedef const struct cudaArray *cudaArray_const_t;

struct cudaArray;




typedef struct cudaMipmappedArray *cudaMipmappedArray_t;




typedef const struct cudaMipmappedArray *cudaMipmappedArray_const_t;

struct cudaMipmappedArray;




enum __attribute__((device_builtin)) cudaMemoryType
{
    cudaMemoryTypeHost = 1,
    cudaMemoryTypeDevice = 2
};




enum __attribute__((device_builtin)) cudaMemcpyKind
{
    cudaMemcpyHostToHost = 0,
    cudaMemcpyHostToDevice = 1,
    cudaMemcpyDeviceToHost = 2,
    cudaMemcpyDeviceToDevice = 3,
    cudaMemcpyDefault = 4
};





struct __attribute__((device_builtin)) cudaPitchedPtr
{
    void *ptr;
    size_t pitch;
    size_t xsize;
    size_t ysize;
};





struct __attribute__((device_builtin)) cudaExtent
{
    size_t width;
    size_t height;
    size_t depth;
};





struct __attribute__((device_builtin)) cudaPos
{
    size_t x;
    size_t y;
    size_t z;
};




struct __attribute__((device_builtin)) cudaMemcpy3DParms
{
    cudaArray_t srcArray;
    struct cudaPos srcPos;
    struct cudaPitchedPtr srcPtr;

    cudaArray_t dstArray;
    struct cudaPos dstPos;
    struct cudaPitchedPtr dstPtr;

    struct cudaExtent extent;
    enum cudaMemcpyKind kind;
};




struct __attribute__((device_builtin)) cudaMemcpy3DPeerParms
{
    cudaArray_t srcArray;
    struct cudaPos srcPos;
    struct cudaPitchedPtr srcPtr;
    int srcDevice;

    cudaArray_t dstArray;
    struct cudaPos dstPos;
    struct cudaPitchedPtr dstPtr;
    int dstDevice;

    struct cudaExtent extent;
};




struct cudaGraphicsResource;




enum __attribute__((device_builtin)) cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone = 0,
    cudaGraphicsRegisterFlagsReadOnly = 1,
    cudaGraphicsRegisterFlagsWriteDiscard = 2,
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,
    cudaGraphicsRegisterFlagsTextureGather = 8
};




enum __attribute__((device_builtin)) cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone = 0,
    cudaGraphicsMapFlagsReadOnly = 1,
    cudaGraphicsMapFlagsWriteDiscard = 2
};




enum __attribute__((device_builtin)) cudaGraphicsCubeFace
{
    cudaGraphicsCubeFacePositiveX = 0x00,
    cudaGraphicsCubeFaceNegativeX = 0x01,
    cudaGraphicsCubeFacePositiveY = 0x02,
    cudaGraphicsCubeFaceNegativeY = 0x03,
    cudaGraphicsCubeFacePositiveZ = 0x04,
    cudaGraphicsCubeFaceNegativeZ = 0x05
};




enum __attribute__((device_builtin)) cudaResourceType
{
    cudaResourceTypeArray = 0x00,
    cudaResourceTypeMipmappedArray = 0x01,
    cudaResourceTypeLinear = 0x02,
    cudaResourceTypePitch2D = 0x03
};




enum __attribute__((device_builtin)) cudaResourceViewFormat
{
    cudaResViewFormatNone = 0x00,
    cudaResViewFormatUnsignedChar1 = 0x01,
    cudaResViewFormatUnsignedChar2 = 0x02,
    cudaResViewFormatUnsignedChar4 = 0x03,
    cudaResViewFormatSignedChar1 = 0x04,
    cudaResViewFormatSignedChar2 = 0x05,
    cudaResViewFormatSignedChar4 = 0x06,
    cudaResViewFormatUnsignedShort1 = 0x07,
    cudaResViewFormatUnsignedShort2 = 0x08,
    cudaResViewFormatUnsignedShort4 = 0x09,
    cudaResViewFormatSignedShort1 = 0x0a,
    cudaResViewFormatSignedShort2 = 0x0b,
    cudaResViewFormatSignedShort4 = 0x0c,
    cudaResViewFormatUnsignedInt1 = 0x0d,
    cudaResViewFormatUnsignedInt2 = 0x0e,
    cudaResViewFormatUnsignedInt4 = 0x0f,
    cudaResViewFormatSignedInt1 = 0x10,
    cudaResViewFormatSignedInt2 = 0x11,
    cudaResViewFormatSignedInt4 = 0x12,
    cudaResViewFormatHalf1 = 0x13,
    cudaResViewFormatHalf2 = 0x14,
    cudaResViewFormatHalf4 = 0x15,
    cudaResViewFormatFloat1 = 0x16,
    cudaResViewFormatFloat2 = 0x17,
    cudaResViewFormatFloat4 = 0x18,
    cudaResViewFormatUnsignedBlockCompressed1 = 0x19,
    cudaResViewFormatUnsignedBlockCompressed2 = 0x1a,
    cudaResViewFormatUnsignedBlockCompressed3 = 0x1b,
    cudaResViewFormatUnsignedBlockCompressed4 = 0x1c,
    cudaResViewFormatSignedBlockCompressed4 = 0x1d,
    cudaResViewFormatUnsignedBlockCompressed5 = 0x1e,
    cudaResViewFormatSignedBlockCompressed5 = 0x1f,
    cudaResViewFormatUnsignedBlockCompressed6H = 0x20,
    cudaResViewFormatSignedBlockCompressed6H = 0x21,
    cudaResViewFormatUnsignedBlockCompressed7 = 0x22
};




struct __attribute__((device_builtin)) cudaResourceDesc {
 enum cudaResourceType resType;

 union {
  struct {
   cudaArray_t array;
  } array;
        struct {
            cudaMipmappedArray_t mipmap;
        } mipmap;
  struct {
   void *devPtr;
   struct cudaChannelFormatDesc desc;
   size_t sizeInBytes;
  } linear;
  struct {
   void *devPtr;
   struct cudaChannelFormatDesc desc;
   size_t width;
   size_t height;
   size_t pitchInBytes;
  } pitch2D;
 } res;
};




struct __attribute__((device_builtin)) cudaResourceViewDesc
{
    enum cudaResourceViewFormat format;
    size_t width;
    size_t height;
    size_t depth;
    unsigned int firstMipmapLevel;
    unsigned int lastMipmapLevel;
    unsigned int firstLayer;
    unsigned int lastLayer;
};




struct __attribute__((device_builtin)) cudaPointerAttributes
{




    enum cudaMemoryType memoryType;
# 997 "/usr/local/cuda/include/driver_types.h"
    int device;





    void *devicePointer;





    void *hostPointer;




    int isManaged;
};




struct __attribute__((device_builtin)) cudaFuncAttributes
{





   size_t sharedSizeBytes;





   size_t constSizeBytes;




   size_t localSizeBytes;






   int maxThreadsPerBlock;




   int numRegs;






   int ptxVersion;






   int binaryVersion;





   int cacheModeCA;
};




enum __attribute__((device_builtin)) cudaFuncCache
{
    cudaFuncCachePreferNone = 0,
    cudaFuncCachePreferShared = 1,
    cudaFuncCachePreferL1 = 2,
    cudaFuncCachePreferEqual = 3
};





enum __attribute__((device_builtin)) cudaSharedMemConfig
{
    cudaSharedMemBankSizeDefault = 0,
    cudaSharedMemBankSizeFourByte = 1,
    cudaSharedMemBankSizeEightByte = 2
};




enum __attribute__((device_builtin)) cudaComputeMode
{
    cudaComputeModeDefault = 0,
    cudaComputeModeExclusive = 1,
    cudaComputeModeProhibited = 2,
    cudaComputeModeExclusiveProcess = 3
};




enum __attribute__((device_builtin)) cudaLimit
{
    cudaLimitStackSize = 0x00,
    cudaLimitPrintfFifoSize = 0x01,
    cudaLimitMallocHeapSize = 0x02,
    cudaLimitDevRuntimeSyncDepth = 0x03,
    cudaLimitDevRuntimePendingLaunchCount = 0x04
};




enum __attribute__((device_builtin)) cudaOutputMode
{
    cudaKeyValuePair = 0x00,
    cudaCSV = 0x01
};




enum __attribute__((device_builtin)) cudaDeviceAttr
{
    cudaDevAttrMaxThreadsPerBlock = 1,
    cudaDevAttrMaxBlockDimX = 2,
    cudaDevAttrMaxBlockDimY = 3,
    cudaDevAttrMaxBlockDimZ = 4,
    cudaDevAttrMaxGridDimX = 5,
    cudaDevAttrMaxGridDimY = 6,
    cudaDevAttrMaxGridDimZ = 7,
    cudaDevAttrMaxSharedMemoryPerBlock = 8,
    cudaDevAttrTotalConstantMemory = 9,
    cudaDevAttrWarpSize = 10,
    cudaDevAttrMaxPitch = 11,
    cudaDevAttrMaxRegistersPerBlock = 12,
    cudaDevAttrClockRate = 13,
    cudaDevAttrTextureAlignment = 14,
    cudaDevAttrGpuOverlap = 15,
    cudaDevAttrMultiProcessorCount = 16,
    cudaDevAttrKernelExecTimeout = 17,
    cudaDevAttrIntegrated = 18,
    cudaDevAttrCanMapHostMemory = 19,
    cudaDevAttrComputeMode = 20,
    cudaDevAttrMaxTexture1DWidth = 21,
    cudaDevAttrMaxTexture2DWidth = 22,
    cudaDevAttrMaxTexture2DHeight = 23,
    cudaDevAttrMaxTexture3DWidth = 24,
    cudaDevAttrMaxTexture3DHeight = 25,
    cudaDevAttrMaxTexture3DDepth = 26,
    cudaDevAttrMaxTexture2DLayeredWidth = 27,
    cudaDevAttrMaxTexture2DLayeredHeight = 28,
    cudaDevAttrMaxTexture2DLayeredLayers = 29,
    cudaDevAttrSurfaceAlignment = 30,
    cudaDevAttrConcurrentKernels = 31,
    cudaDevAttrEccEnabled = 32,
    cudaDevAttrPciBusId = 33,
    cudaDevAttrPciDeviceId = 34,
    cudaDevAttrTccDriver = 35,
    cudaDevAttrMemoryClockRate = 36,
    cudaDevAttrGlobalMemoryBusWidth = 37,
    cudaDevAttrL2CacheSize = 38,
    cudaDevAttrMaxThreadsPerMultiProcessor = 39,
    cudaDevAttrAsyncEngineCount = 40,
    cudaDevAttrUnifiedAddressing = 41,
    cudaDevAttrMaxTexture1DLayeredWidth = 42,
    cudaDevAttrMaxTexture1DLayeredLayers = 43,
    cudaDevAttrMaxTexture2DGatherWidth = 45,
    cudaDevAttrMaxTexture2DGatherHeight = 46,
    cudaDevAttrMaxTexture3DWidthAlt = 47,
    cudaDevAttrMaxTexture3DHeightAlt = 48,
    cudaDevAttrMaxTexture3DDepthAlt = 49,
    cudaDevAttrPciDomainId = 50,
    cudaDevAttrTexturePitchAlignment = 51,
    cudaDevAttrMaxTextureCubemapWidth = 52,
    cudaDevAttrMaxTextureCubemapLayeredWidth = 53,
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54,
    cudaDevAttrMaxSurface1DWidth = 55,
    cudaDevAttrMaxSurface2DWidth = 56,
    cudaDevAttrMaxSurface2DHeight = 57,
    cudaDevAttrMaxSurface3DWidth = 58,
    cudaDevAttrMaxSurface3DHeight = 59,
    cudaDevAttrMaxSurface3DDepth = 60,
    cudaDevAttrMaxSurface1DLayeredWidth = 61,
    cudaDevAttrMaxSurface1DLayeredLayers = 62,
    cudaDevAttrMaxSurface2DLayeredWidth = 63,
    cudaDevAttrMaxSurface2DLayeredHeight = 64,
    cudaDevAttrMaxSurface2DLayeredLayers = 65,
    cudaDevAttrMaxSurfaceCubemapWidth = 66,
    cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67,
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68,
    cudaDevAttrMaxTexture1DLinearWidth = 69,
    cudaDevAttrMaxTexture2DLinearWidth = 70,
    cudaDevAttrMaxTexture2DLinearHeight = 71,
    cudaDevAttrMaxTexture2DLinearPitch = 72,
    cudaDevAttrMaxTexture2DMipmappedWidth = 73,
    cudaDevAttrMaxTexture2DMipmappedHeight = 74,
    cudaDevAttrComputeCapabilityMajor = 75,
    cudaDevAttrComputeCapabilityMinor = 76,
    cudaDevAttrMaxTexture1DMipmappedWidth = 77,
    cudaDevAttrStreamPrioritiesSupported = 78,
    cudaDevAttrGlobalL1CacheSupported = 79,
    cudaDevAttrLocalL1CacheSupported = 80,
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81,
    cudaDevAttrMaxRegistersPerMultiprocessor = 82,
    cudaDevAttrManagedMemory = 83,
    cudaDevAttrIsMultiGpuBoard = 84,
    cudaDevAttrMultiGpuBoardGroupID = 85
};




struct __attribute__((device_builtin)) cudaDeviceProp
{
    char name[256];
    size_t totalGlobalMem;
    size_t sharedMemPerBlock;
    int regsPerBlock;
    int warpSize;
    size_t memPitch;
    int maxThreadsPerBlock;
    int maxThreadsDim[3];
    int maxGridSize[3];
    int clockRate;
    size_t totalConstMem;
    int major;
    int minor;
    size_t textureAlignment;
    size_t texturePitchAlignment;
    int deviceOverlap;
    int multiProcessorCount;
    int kernelExecTimeoutEnabled;
    int integrated;
    int canMapHostMemory;
    int computeMode;
    int maxTexture1D;
    int maxTexture1DMipmap;
    int maxTexture1DLinear;
    int maxTexture2D[2];
    int maxTexture2DMipmap[2];
    int maxTexture2DLinear[3];
    int maxTexture2DGather[2];
    int maxTexture3D[3];
    int maxTexture3DAlt[3];
    int maxTextureCubemap;
    int maxTexture1DLayered[2];
    int maxTexture2DLayered[3];
    int maxTextureCubemapLayered[2];
    int maxSurface1D;
    int maxSurface2D[2];
    int maxSurface3D[3];
    int maxSurface1DLayered[2];
    int maxSurface2DLayered[3];
    int maxSurfaceCubemap;
    int maxSurfaceCubemapLayered[2];
    size_t surfaceAlignment;
    int concurrentKernels;
    int ECCEnabled;
    int pciBusID;
    int pciDeviceID;
    int pciDomainID;
    int tccDriver;
    int asyncEngineCount;
    int unifiedAddressing;
    int memoryClockRate;
    int memoryBusWidth;
    int l2CacheSize;
    int maxThreadsPerMultiProcessor;
    int streamPrioritiesSupported;
    int globalL1CacheSupported;
    int localL1CacheSupported;
    size_t sharedMemPerMultiprocessor;
    int regsPerMultiprocessor;
    int managedMemory;
    int isMultiGpuBoard;
    int multiGpuBoardGroupID;
};
# 1361 "/usr/local/cuda/include/driver_types.h"
typedef __attribute__((device_builtin)) struct __attribute__((device_builtin)) cudaIpcEventHandle_st
{
    char reserved[64];
}cudaIpcEventHandle_t;




typedef __attribute__((device_builtin)) struct __attribute__((device_builtin)) cudaIpcMemHandle_st
{
    char reserved[64];
}cudaIpcMemHandle_t;
# 1383 "/usr/local/cuda/include/driver_types.h"
typedef __attribute__((device_builtin)) enum cudaError cudaError_t;




typedef __attribute__((device_builtin)) struct CUstream_st *cudaStream_t;




typedef __attribute__((device_builtin)) struct CUevent_st *cudaEvent_t;




typedef __attribute__((device_builtin)) struct cudaGraphicsResource *cudaGraphicsResource_t;




typedef __attribute__((device_builtin)) struct CUuuid_st cudaUUID_t;




typedef __attribute__((device_builtin)) enum cudaOutputMode cudaOutputMode_t;
# 58 "/usr/local/cuda/include/builtin_types.h" 2
# 1 "/usr/local/cuda/include/surface_types.h" 1
# 84 "/usr/local/cuda/include/surface_types.h"
enum __attribute__((device_builtin)) cudaSurfaceBoundaryMode
{
    cudaBoundaryModeZero = 0,
    cudaBoundaryModeClamp = 1,
    cudaBoundaryModeTrap = 2
};




enum __attribute__((device_builtin)) cudaSurfaceFormatMode
{
    cudaFormatModeForced = 0,
    cudaFormatModeAuto = 1
};




struct __attribute__((device_builtin)) surfaceReference
{



    struct cudaChannelFormatDesc channelDesc;
};




typedef __attribute__((device_builtin)) unsigned long long cudaSurfaceObject_t;
# 59 "/usr/local/cuda/include/builtin_types.h" 2
# 1 "/usr/local/cuda/include/texture_types.h" 1
# 84 "/usr/local/cuda/include/texture_types.h"
enum __attribute__((device_builtin)) cudaTextureAddressMode
{
    cudaAddressModeWrap = 0,
    cudaAddressModeClamp = 1,
    cudaAddressModeMirror = 2,
    cudaAddressModeBorder = 3
};




enum __attribute__((device_builtin)) cudaTextureFilterMode
{
    cudaFilterModePoint = 0,
    cudaFilterModeLinear = 1
};




enum __attribute__((device_builtin)) cudaTextureReadMode
{
    cudaReadModeElementType = 0,
    cudaReadModeNormalizedFloat = 1
};




struct __attribute__((device_builtin)) textureReference
{



    int normalized;



    enum cudaTextureFilterMode filterMode;



    enum cudaTextureAddressMode addressMode[3];



    struct cudaChannelFormatDesc channelDesc;



    int sRGB;



    unsigned int maxAnisotropy;



    enum cudaTextureFilterMode mipmapFilterMode;



    float mipmapLevelBias;



    float minMipmapLevelClamp;



    float maxMipmapLevelClamp;
    int __cudaReserved[15];
};




struct __attribute__((device_builtin)) cudaTextureDesc
{



    enum cudaTextureAddressMode addressMode[3];



    enum cudaTextureFilterMode filterMode;



    enum cudaTextureReadMode readMode;



    int sRGB;



    int normalizedCoords;



    unsigned int maxAnisotropy;



    enum cudaTextureFilterMode mipmapFilterMode;



    float mipmapLevelBias;



    float minMipmapLevelClamp;



    float maxMipmapLevelClamp;
};




typedef __attribute__((device_builtin)) unsigned long long cudaTextureObject_t;
# 60 "/usr/local/cuda/include/builtin_types.h" 2
# 1 "/usr/local/cuda/include/vector_types.h" 1
# 60 "/usr/local/cuda/include/vector_types.h"
# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 60 "/usr/local/cuda/include/builtin_types.h"
# 1 "/usr/local/cuda/include/vector_types.h" 1
# 60 "/usr/local/cuda/include/builtin_types.h" 2
# 61 "/usr/local/cuda/include/vector_types.h" 2
# 96 "/usr/local/cuda/include/vector_types.h"
struct __attribute__((device_builtin)) char1
{
    signed char x;
};

struct __attribute__((device_builtin)) uchar1
{
    unsigned char x;
};


struct __attribute__((device_builtin)) __attribute__((aligned(2))) char2
{
    signed char x, y;
};

struct __attribute__((device_builtin)) __attribute__((aligned(2))) uchar2
{
    unsigned char x, y;
};

struct __attribute__((device_builtin)) char3
{
    signed char x, y, z;
};

struct __attribute__((device_builtin)) uchar3
{
    unsigned char x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(4))) char4
{
    signed char x, y, z, w;
};

struct __attribute__((device_builtin)) __attribute__((aligned(4))) uchar4
{
    unsigned char x, y, z, w;
};

struct __attribute__((device_builtin)) short1
{
    short x;
};

struct __attribute__((device_builtin)) ushort1
{
    unsigned short x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(4))) short2
{
    short x, y;
};

struct __attribute__((device_builtin)) __attribute__((aligned(4))) ushort2
{
    unsigned short x, y;
};

struct __attribute__((device_builtin)) short3
{
    short x, y, z;
};

struct __attribute__((device_builtin)) ushort3
{
    unsigned short x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(8))) short4 { short x; short y; short z; short w; };
struct __attribute__((device_builtin)) __attribute__((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; };

struct __attribute__((device_builtin)) int1
{
    int x;
};

struct __attribute__((device_builtin)) uint1
{
    unsigned int x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(8))) int2 { int x; int y; };
struct __attribute__((device_builtin)) __attribute__((aligned(8))) uint2 { unsigned int x; unsigned int y; };

struct __attribute__((device_builtin)) int3
{
    int x, y, z;
};

struct __attribute__((device_builtin)) uint3
{
    unsigned int x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) int4
{
    int x, y, z, w;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) uint4
{
    unsigned int x, y, z, w;
};

struct __attribute__((device_builtin)) long1
{
    long int x;
};

struct __attribute__((device_builtin)) ulong1
{
    unsigned long x;
};






struct __attribute__((device_builtin)) __attribute__((aligned(2*sizeof(long int)))) long2
{
    long int x, y;
};

struct __attribute__((device_builtin)) __attribute__((aligned(2*sizeof(unsigned long int)))) ulong2
{
    unsigned long int x, y;
};



struct __attribute__((device_builtin)) long3
{
    long int x, y, z;
};

struct __attribute__((device_builtin)) ulong3
{
    unsigned long int x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) long4
{
    long int x, y, z, w;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) ulong4
{
    unsigned long int x, y, z, w;
};

struct __attribute__((device_builtin)) float1
{
    float x;
};
# 272 "/usr/local/cuda/include/vector_types.h"
struct __attribute__((device_builtin)) __attribute__((aligned(8))) float2 { float x; float y; };




struct __attribute__((device_builtin)) float3
{
    float x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) float4
{
    float x, y, z, w;
};

struct __attribute__((device_builtin)) longlong1
{
    long long int x;
};

struct __attribute__((device_builtin)) ulonglong1
{
    unsigned long long int x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) longlong2
{
    long long int x, y;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) ulonglong2
{
    unsigned long long int x, y;
};

struct __attribute__((device_builtin)) longlong3
{
    long long int x, y, z;
};

struct __attribute__((device_builtin)) ulonglong3
{
    unsigned long long int x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) longlong4
{
    long long int x, y, z ,w;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) ulonglong4
{
    unsigned long long int x, y, z, w;
};

struct __attribute__((device_builtin)) double1
{
    double x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) double2
{
    double x, y;
};

struct __attribute__((device_builtin)) double3
{
    double x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) double4
{
    double x, y, z, w;
};
# 360 "/usr/local/cuda/include/vector_types.h"
typedef __attribute__((device_builtin)) struct char1 char1;
typedef __attribute__((device_builtin)) struct uchar1 uchar1;
typedef __attribute__((device_builtin)) struct char2 char2;
typedef __attribute__((device_builtin)) struct uchar2 uchar2;
typedef __attribute__((device_builtin)) struct char3 char3;
typedef __attribute__((device_builtin)) struct uchar3 uchar3;
typedef __attribute__((device_builtin)) struct char4 char4;
typedef __attribute__((device_builtin)) struct uchar4 uchar4;
typedef __attribute__((device_builtin)) struct short1 short1;
typedef __attribute__((device_builtin)) struct ushort1 ushort1;
typedef __attribute__((device_builtin)) struct short2 short2;
typedef __attribute__((device_builtin)) struct ushort2 ushort2;
typedef __attribute__((device_builtin)) struct short3 short3;
typedef __attribute__((device_builtin)) struct ushort3 ushort3;
typedef __attribute__((device_builtin)) struct short4 short4;
typedef __attribute__((device_builtin)) struct ushort4 ushort4;
typedef __attribute__((device_builtin)) struct int1 int1;
typedef __attribute__((device_builtin)) struct uint1 uint1;
typedef __attribute__((device_builtin)) struct int2 int2;
typedef __attribute__((device_builtin)) struct uint2 uint2;
typedef __attribute__((device_builtin)) struct int3 int3;
typedef __attribute__((device_builtin)) struct uint3 uint3;
typedef __attribute__((device_builtin)) struct int4 int4;
typedef __attribute__((device_builtin)) struct uint4 uint4;
typedef __attribute__((device_builtin)) struct long1 long1;
typedef __attribute__((device_builtin)) struct ulong1 ulong1;
typedef __attribute__((device_builtin)) struct long2 long2;
typedef __attribute__((device_builtin)) struct ulong2 ulong2;
typedef __attribute__((device_builtin)) struct long3 long3;
typedef __attribute__((device_builtin)) struct ulong3 ulong3;
typedef __attribute__((device_builtin)) struct long4 long4;
typedef __attribute__((device_builtin)) struct ulong4 ulong4;
typedef __attribute__((device_builtin)) struct float1 float1;
typedef __attribute__((device_builtin)) struct float2 float2;
typedef __attribute__((device_builtin)) struct float3 float3;
typedef __attribute__((device_builtin)) struct float4 float4;
typedef __attribute__((device_builtin)) struct longlong1 longlong1;
typedef __attribute__((device_builtin)) struct ulonglong1 ulonglong1;
typedef __attribute__((device_builtin)) struct longlong2 longlong2;
typedef __attribute__((device_builtin)) struct ulonglong2 ulonglong2;
typedef __attribute__((device_builtin)) struct longlong3 longlong3;
typedef __attribute__((device_builtin)) struct ulonglong3 ulonglong3;
typedef __attribute__((device_builtin)) struct longlong4 longlong4;
typedef __attribute__((device_builtin)) struct ulonglong4 ulonglong4;
typedef __attribute__((device_builtin)) struct double1 double1;
typedef __attribute__((device_builtin)) struct double2 double2;
typedef __attribute__((device_builtin)) struct double3 double3;
typedef __attribute__((device_builtin)) struct double4 double4;







struct __attribute__((device_builtin)) dim3
{
    unsigned int x, y, z;

    __attribute__((host)) __attribute__((device)) dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) : x(vx), y(vy), z(vz) {}
    __attribute__((host)) __attribute__((device)) dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
    __attribute__((host)) __attribute__((device)) operator uint3(void) { uint3 t; t.x = x; t.y = y; t.z = z; return t; }

};

typedef __attribute__((device_builtin)) struct dim3 dim3;
# 60 "/usr/local/cuda/include/builtin_types.h" 2
# 68 "/usr/local/cuda/include/cuda_runtime.h" 2
# 1 "/usr/local/cuda/include/channel_descriptor.h" 1
# 62 "/usr/local/cuda/include/channel_descriptor.h"
# 1 "/usr/local/cuda/include/cuda_runtime_api.h" 1
# 143 "/usr/local/cuda/include/cuda_runtime_api.h"
# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 144 "/usr/local/cuda/include/cuda_runtime_api.h" 2
# 1 "/usr/local/cuda/include/cuda_device_runtime_api.h" 1
# 145 "/usr/local/cuda/include/cuda_runtime_api.h" 2
# 174 "/usr/local/cuda/include/cuda_runtime_api.h"
extern "C" {
# 207 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceReset(void);
# 224 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceSynchronize(void);
# 309 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceSetLimit(enum cudaLimit limit, size_t value);
# 338 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit);
# 369 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig);
# 404 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetStreamPriorityRange(int *leastPriority, int *greatestPriority);
# 446 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceSetCacheConfig(enum cudaFuncCache cacheConfig);
# 475 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig);
# 517 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceSetSharedMemConfig(enum cudaSharedMemConfig config);
# 540 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceGetByPCIBusId(int *device, const char *pciBusId);
# 567 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceGetPCIBusId(char *pciBusId, int len, int device);
# 609 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t *handle, cudaEvent_t event);
# 644 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcOpenEventHandle(cudaEvent_t *event, cudaIpcEventHandle_t handle);
# 682 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t *handle, void *devPtr);
# 732 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcOpenMemHandle(void **devPtr, cudaIpcMemHandle_t handle, unsigned int flags);
# 762 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcCloseMemHandle(void *devPtr);
# 802 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadExit(void);
# 826 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadSynchronize(void);
# 885 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadSetLimit(enum cudaLimit limit, size_t value);
# 916 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadGetLimit(size_t *pValue, enum cudaLimit limit);
# 951 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadGetCacheConfig(enum cudaFuncCache *pCacheConfig);
# 997 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadSetCacheConfig(enum cudaFuncCache cacheConfig);
# 1051 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaGetLastError(void);
# 1092 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaPeekAtLastError(void);
# 1106 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) const char* cudaGetErrorString(cudaError_t error);
# 1136 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaGetDeviceCount(int *count);
# 1372 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaGetDeviceProperties(struct cudaDeviceProp *prop, int device);
# 1532 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device);
# 1551 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaChooseDevice(int *device, const struct cudaDeviceProp *prop);
# 1585 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetDevice(int device);
# 1602 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaGetDevice(int *device);
# 1631 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetValidDevices(int *device_arr, int len);
# 1691 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetDeviceFlags( unsigned int flags );
# 1729 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamCreate(cudaStream_t *pStream);
# 1758 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags);
# 1801 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamCreateWithPriority(cudaStream_t *pStream, unsigned int flags, int priority);
# 1825 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int *priority);
# 1846 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned int *flags);
# 1867 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamDestroy(cudaStream_t stream);
# 1899 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags);
# 1913 "/usr/local/cuda/include/cuda_runtime_api.h"
typedef void ( *cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void *userData);
# 1975 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamAddCallback(cudaStream_t stream,
        cudaStreamCallback_t callback, void *userData, unsigned int flags);
# 1995 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamSynchronize(cudaStream_t stream);
# 2016 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamQuery(cudaStream_t stream);
# 2082 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void *devPtr, size_t length, unsigned int flags);
# 2118 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventCreate(cudaEvent_t *event);
# 2152 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags);
# 2183 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0);
# 2215 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventQuery(cudaEvent_t event);
# 2247 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventSynchronize(cudaEvent_t event);
# 2272 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaEventDestroy(cudaEvent_t event);
# 2313 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end);
# 2360 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaConfigureCall(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, cudaStream_t stream = 0);
# 2387 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetupArgument(const void *arg, size_t size, size_t offset);
# 2433 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFuncSetCacheConfig(const void *func, enum cudaFuncCache cacheConfig);
# 2484 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFuncSetSharedMemConfig(const void *func, enum cudaSharedMemConfig config);
# 2519 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaLaunch(const void *func);
# 2552 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func);
# 2574 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetDoubleForDevice(double *d);
# 2596 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetDoubleForHost(double *d);
# 2683 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMallocManaged(void **devPtr, size_t size, unsigned int flags);
# 2706 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMalloc(void **devPtr, size_t size);
# 2735 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMallocHost(void **ptr, size_t size);
# 2774 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMallocPitch(void **devPtr, size_t *pitch, size_t width, size_t height);
# 2816 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMallocArray(cudaArray_t *array, const struct cudaChannelFormatDesc *desc, size_t width, size_t height = 0, unsigned int flags = 0);
# 2840 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaFree(void *devPtr);
# 2860 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFreeHost(void *ptr);
# 2882 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFreeArray(cudaArray_t array);
# 2904 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray);
# 2963 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostAlloc(void **pHost, size_t size, unsigned int flags);
# 3016 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostRegister(void *ptr, size_t size, unsigned int flags);
# 3035 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostUnregister(void *ptr);
# 3062 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostGetDevicePointer(void **pDevice, void *pHost, unsigned int flags);
# 3081 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostGetFlags(unsigned int *pFlags, void *pHost);
# 3116 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMalloc3D(struct cudaPitchedPtr* pitchedDevPtr, struct cudaExtent extent);
# 3251 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMalloc3DArray(cudaArray_t *array, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int flags = 0);
# 3372 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t *mipmappedArray, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int numLevels, unsigned int flags = 0);
# 3398 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t *levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level);
# 3495 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy3D(const struct cudaMemcpy3DParms *p);
# 3523 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy3DPeer(const struct cudaMemcpy3DPeerParms *p);
# 3628 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream = 0);
# 3651 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy3DPeerAsync(const struct cudaMemcpy3DPeerParms *p, cudaStream_t stream = 0);
# 3670 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemGetInfo(size_t *free, size_t *total);
# 3691 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaArrayGetInfo(struct cudaChannelFormatDesc *desc, struct cudaExtent *extent, unsigned int *flags, cudaArray_t array);
# 3726 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind);
# 3758 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyPeer(void *dst, int dstDevice, const void *src, int srcDevice, size_t count);
# 3792 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind);
# 3826 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyFromArray(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind);
# 3861 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);
# 3903 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);
# 3945 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);
# 3987 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DFromArray(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind);
# 4027 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);
# 4062 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyToSymbol(const void *symbol, const void *src, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyHostToDevice);
# 4097 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyFromSymbol(void *dst, const void *symbol, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost);
# 4140 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4172 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyPeerAsync(void *dst, int dstDevice, const void *src, int srcDevice, size_t count, cudaStream_t stream = 0);
# 4214 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4256 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyFromArrayAsync(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4308 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4359 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4409 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DFromArrayAsync(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4452 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyToSymbolAsync(const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4495 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyFromSymbolAsync(void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4521 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemset(void *devPtr, int value, size_t count);
# 4551 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemset2D(void *devPtr, size_t pitch, int value, size_t width, size_t height);
# 4594 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemset3D(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent);
# 4623 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream = 0);
# 4657 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0);
# 4704 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream = 0);
# 4727 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetSymbolAddress(void **devPtr, const void *symbol);
# 4749 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetSymbolSize(size_t *size, const void *symbol);
# 4903 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaPointerGetAttributes(struct cudaPointerAttributes *attributes, const void *ptr);
# 4941 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceCanAccessPeer(int *canAccessPeer, int device, int peerDevice);
# 4978 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags);
# 4997 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceDisablePeerAccess(int peerDevice);
# 5055 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource);
# 5087 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags);
# 5123 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);
# 5155 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);
# 5184 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsResourceGetMappedPointer(void **devPtr, size_t *size, cudaGraphicsResource_t resource);
# 5218 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t *array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel);
# 5243 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t *mipmappedArray, cudaGraphicsResource_t resource);
# 5283 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetChannelDesc(struct cudaChannelFormatDesc *desc, cudaArray_const_t array);
# 5318 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) struct cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, enum cudaChannelFormatKind f);
# 5365 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindTexture(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t size = (2147483647 * 2U + 1U));
# 5416 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindTexture2D(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t width, size_t height, size_t pitch);
# 5444 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindTextureToArray(const struct textureReference *texref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);
# 5472 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindTextureToMipmappedArray(const struct textureReference *texref, cudaMipmappedArray_const_t mipmappedArray, const struct cudaChannelFormatDesc *desc);
# 5493 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaUnbindTexture(const struct textureReference *texref);
# 5518 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureAlignmentOffset(size_t *offset, const struct textureReference *texref);
# 5543 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureReference(const struct textureReference **texref, const void *symbol);
# 5583 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindSurfaceToArray(const struct surfaceReference *surfref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);
# 5602 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetSurfaceReference(const struct surfaceReference **surfref, const void *symbol);
# 5817 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaCreateTextureObject(cudaTextureObject_t *pTexObject, const struct cudaResourceDesc *pResDesc, const struct cudaTextureDesc *pTexDesc, const struct cudaResourceViewDesc *pResViewDesc);
# 5832 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject);
# 5848 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaTextureObject_t texObject);
# 5864 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureObjectTextureDesc(struct cudaTextureDesc *pTexDesc, cudaTextureObject_t texObject);
# 5881 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureObjectResourceViewDesc(struct cudaResourceViewDesc *pResViewDesc, cudaTextureObject_t texObject);
# 5918 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t *pSurfObject, const struct cudaResourceDesc *pResDesc);
# 5933 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject);
# 5948 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetSurfaceObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaSurfaceObject_t surfObject);
# 5975 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDriverGetVersion(int *driverVersion);
# 5992 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaRuntimeGetVersion(int *runtimeVersion);




extern __attribute__((host)) cudaError_t cudaGetExportTable(const void **ppExportTable, const cudaUUID_t *pExportTableId);
# 6133 "/usr/local/cuda/include/cuda_runtime_api.h"
}
# 63 "/usr/local/cuda/include/channel_descriptor.h" 2
# 107 "/usr/local/cuda/include/channel_descriptor.h"
template<class T> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc(void)
{
  return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf1(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf2(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf4(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char>(void)
{
  int e = (int)sizeof(char) * 8;




  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);

}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<signed char>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned char>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char1>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uchar1>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char2>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uchar2>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char4>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uchar4>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned short>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short1>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<ushort1>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short2>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<ushort2>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short4>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<ushort4>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned int>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int1>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uint1>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int2>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uint2>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int4>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uint4>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}
# 379 "/usr/local/cuda/include/channel_descriptor.h"
template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float1>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float2>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float4>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}
# 69 "/usr/local/cuda/include/cuda_runtime.h" 2

# 1 "/usr/local/cuda/include/driver_functions.h" 1
# 53 "/usr/local/cuda/include/driver_functions.h"
# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 54 "/usr/local/cuda/include/driver_functions.h" 2
# 79 "/usr/local/cuda/include/driver_functions.h"
static __inline__ __attribute__((host)) struct cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz)
{
  struct cudaPitchedPtr s;

  s.ptr = d;
  s.pitch = p;
  s.xsize = xsz;
  s.ysize = ysz;

  return s;
}
# 106 "/usr/local/cuda/include/driver_functions.h"
static __inline__ __attribute__((host)) struct cudaPos make_cudaPos(size_t x, size_t y, size_t z)
{
  struct cudaPos p;

  p.x = x;
  p.y = y;
  p.z = z;

  return p;
}
# 132 "/usr/local/cuda/include/driver_functions.h"
static __inline__ __attribute__((host)) struct cudaExtent make_cudaExtent(size_t w, size_t h, size_t d)
{
  struct cudaExtent e;

  e.width = w;
  e.height = h;
  e.depth = d;

  return e;
}
# 71 "/usr/local/cuda/include/cuda_runtime.h" 2

# 1 "/usr/local/cuda/include/vector_functions.h" 1
# 59 "/usr/local/cuda/include/vector_functions.h"
# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 60 "/usr/local/cuda/include/vector_functions.h" 2
# 69 "/usr/local/cuda/include/vector_functions.h"
static __inline__ __attribute__((host)) __attribute__((device)) char1 make_char1(signed char x)
{
  char1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar1 make_uchar1(unsigned char x)
{
  uchar1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) char2 make_char2(signed char x, signed char y)
{
  char2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar2 make_uchar2(unsigned char x, unsigned char y)
{
  uchar2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) char3 make_char3(signed char x, signed char y, signed char z)
{
  char3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z)
{
  uchar3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) char4 make_char4(signed char x, signed char y, signed char z, signed char w)
{
  char4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w)
{
  uchar4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short1 make_short1(short x)
{
  short1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort1 make_ushort1(unsigned short x)
{
  ushort1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short2 make_short2(short x, short y)
{
  short2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort2 make_ushort2(unsigned short x, unsigned short y)
{
  ushort2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short3 make_short3(short x,short y, short z)
{
  short3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z)
{
  ushort3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short4 make_short4(short x, short y, short z, short w)
{
  short4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w)
{
  ushort4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int1 make_int1(int x)
{
  int1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint1 make_uint1(unsigned int x)
{
  uint1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int2 make_int2(int x, int y)
{
  int2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint2 make_uint2(unsigned int x, unsigned int y)
{
  uint2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int3 make_int3(int x, int y, int z)
{
  int3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint3 make_uint3(unsigned int x, unsigned int y, unsigned int z)
{
  uint3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int4 make_int4(int x, int y, int z, int w)
{
  int4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint4 make_uint4(unsigned int x, unsigned int y, unsigned int z, unsigned int w)
{
  uint4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long1 make_long1(long int x)
{
  long1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong1 make_ulong1(unsigned long int x)
{
  ulong1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long2 make_long2(long int x, long int y)
{
  long2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong2 make_ulong2(unsigned long int x, unsigned long int y)
{
  ulong2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long3 make_long3(long int x, long int y, long int z)
{
  long3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong3 make_ulong3(unsigned long int x, unsigned long int y, unsigned long int z)
{
  ulong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long4 make_long4(long int x, long int y, long int z, long int w)
{
  long4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong4 make_ulong4(unsigned long int x, unsigned long int y, unsigned long int z, unsigned long int w)
{
  ulong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float1 make_float1(float x)
{
  float1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float2 make_float2(float x, float y)
{
  float2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float3 make_float3(float x, float y, float z)
{
  float3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float4 make_float4(float x, float y, float z, float w)
{
  float4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong1 make_longlong1(long long int x)
{
  longlong1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong1 make_ulonglong1(unsigned long long int x)
{
  ulonglong1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong2 make_longlong2(long long int x, long long int y)
{
  longlong2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong2 make_ulonglong2(unsigned long long int x, unsigned long long int y)
{
  ulonglong2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong3 make_longlong3(long long int x, long long int y, long long int z)
{
  longlong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong3 make_ulonglong3(unsigned long long int x, unsigned long long int y, unsigned long long int z)
{
  ulonglong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong4 make_longlong4(long long int x, long long int y, long long int z, long long int w)
{
  longlong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong4 make_ulonglong4(unsigned long long int x, unsigned long long int y, unsigned long long int z, unsigned long long int w)
{
  ulonglong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double1 make_double1(double x)
{
  double1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double2 make_double2(double x, double y)
{
  double2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double3 make_double3(double x, double y, double z)
{
  double3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double4 make_double4(double x, double y, double z, double w)
{
  double4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}
# 73 "/usr/local/cuda/include/cuda_runtime.h" 2



# 1 "/usr/local/cuda/include/common_functions.h" 1
# 61 "/usr/local/cuda/include/common_functions.h"
# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 62 "/usr/local/cuda/include/common_functions.h" 2


# 1 "/usr/include/string.h" 1 3 4
# 29 "/usr/include/string.h" 3 4
extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 1 3 4
# 35 "/usr/include/string.h" 2 3 4









extern void *memcpy (void *__restrict __dest,
       __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, __const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, __const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (__const void *__s1, __const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const void *memchr (__const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 93 "/usr/include/string.h" 3 4
}










extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const void *rawmemchr (__const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const void *memrchr (__const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern char *strcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, __const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (__const char *__s1, __const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));






# 1 "/usr/include/xlocale.h" 1 3 4
# 28 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 163 "/usr/include/string.h" 2 3 4


extern int strcoll_l (__const char *__s1, __const char *__s2, __locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, __const char *__src, size_t __n,
    __locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (__const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (__const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 210 "/usr/include/string.h" 3 4



extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *strchr (__const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 233 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *strrchr (__const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 260 "/usr/include/string.h" 3 4
}










extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const char *strchrnul (__const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern size_t strcspn (__const char *__s, __const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (__const char *__s, __const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, __const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern __const char *strpbrk (__const char *__s, __const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 312 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strstr (char *__haystack, __const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern __const char *strstr (__const char *__haystack,
        __const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 340 "/usr/include/string.h" 3 4
}







extern char *strtok (char *__restrict __s, __const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    __const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, __const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, __const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" __const char *strcasestr (__const char *__haystack,
           __const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 382 "/usr/include/string.h" 3 4
extern void *memmem (__const void *__haystack, size_t __haystacklen,
       __const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (__const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (__const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) throw ();

# 438 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));





extern char *strerror_l (int __errnum, __locale_t __l) throw ();





extern void __bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern void bcopy (__const void *__src, void *__dest, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int bcmp (__const void *__s1, __const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *index (__const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 487 "/usr/include/string.h" 3 4
}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *rindex (__const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 515 "/usr/include/string.h" 3 4
}







extern int ffs (int __i) throw () __attribute__ ((__const__));




extern int ffsl (long int __l) throw () __attribute__ ((__const__));

__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));




extern int strcasecmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (__const char *__s1, __const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (__const char *__s1, __const char *__s2,
    __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (__const char *__s1, __const char *__s2,
     size_t __n, __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       __const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" __const char *basename (__const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 646 "/usr/include/string.h" 3 4
}
# 65 "/usr/local/cuda/include/common_functions.h" 2
# 1 "/usr/include/time.h" 1 3 4
# 30 "/usr/include/time.h" 3 4
extern "C" {







# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 1 3 4
# 39 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 131 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 132 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef long int __swblk_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;

typedef long int __ssize_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 28 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4



struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 86 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  long int offset;
  long int freq;
  long int maxerror;
  long int esterror;
  int status;
  long int constant;
  long int precision;
  long int tolerance;
  struct timeval time;
  long int tick;

  long int ppsfreq;
  long int jitter;
  int shift;
  long int stabil;
  long int jitcnt;
  long int calcnt;
  long int errcnt;
  long int stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 87 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 43 "/usr/include/time.h" 2 3 4
# 58 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 74 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 92 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 104 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    long int tv_nsec;
  };








struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  __const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;





typedef __pid_t pid_t;








extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   __const char *__restrict __format,
   __const struct tm *__restrict __tp) throw ();





extern char *strptime (__const char *__restrict __s,
         __const char *__restrict __fmt, struct tm *__tp)
     throw ();







extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     __const char *__restrict __format,
     __const struct tm *__restrict __tp,
     __locale_t __loc) throw ();



extern char *strptime_l (__const char *__restrict __s,
    __const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) throw ();






extern struct tm *gmtime (__const time_t *__timer) throw ();



extern struct tm *localtime (__const time_t *__timer) throw ();





extern struct tm *gmtime_r (__const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (__const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();





extern char *asctime (__const struct tm *__tp) throw ();


extern char *ctime (__const time_t *__timer) throw ();







extern char *asctime_r (__const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (__const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;





extern int stime (__const time_t *__when) throw ();
# 313 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 328 "/usr/include/time.h" 3 4
extern int nanosleep (__const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, __const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       __const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     __const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();
# 390 "/usr/include/time.h" 3 4
extern int getdate_err;
# 399 "/usr/include/time.h" 3 4
extern struct tm *getdate (__const char *__string);
# 413 "/usr/include/time.h" 3 4
extern int getdate_r (__const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 66 "/usr/local/cuda/include/common_functions.h" 2

extern "C"
{
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) clock_t clock(void) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) void* memset(void*, int, size_t) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) void* memcpy(void*, const void*, size_t) throw ();
}




# 1 "/usr/include/c++/4.6/new" 1 3
# 39 "/usr/include/c++/4.6/new" 3
       
# 40 "/usr/include/c++/4.6/new" 3

# 1 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/c++config.h" 1 3
# 153 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;




}
# 393 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/c++config.h" 3
# 1 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/os_defines.h" 1 3
# 394 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/c++config.h" 2 3


# 1 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/cpu_defines.h" 1 3
# 397 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/c++config.h" 2 3
# 42 "/usr/include/c++/4.6/new" 2 3
# 1 "/usr/include/c++/4.6/exception" 1 3
# 35 "/usr/include/c++/4.6/exception" 3
       
# 36 "/usr/include/c++/4.6/exception" 3

#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 61 "/usr/include/c++/4.6/exception" 3
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();



    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }



    virtual ~bad_exception() throw();


    virtual const char* what() const throw();
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();



  void terminate() throw() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();



  void unexpected() __attribute__ ((__noreturn__));
# 118 "/usr/include/c++/4.6/exception" 3
  bool uncaught_exception() throw() __attribute__ ((__pure__));


}

namespace __gnu_cxx
{

# 143 "/usr/include/c++/4.6/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop
# 43 "/usr/include/c++/4.6/new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };

  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();
}
# 93 "/usr/include/c++/4.6/new" 3
void* operator new(std::size_t) throw (std::bad_alloc);
void* operator new[](std::size_t) throw (std::bad_alloc);
void operator delete(void*) throw();
void operator delete[](void*) throw();
void* operator new(std::size_t, const std::nothrow_t&) throw();
void* operator new[](std::size_t, const std::nothrow_t&) throw();
void operator delete(void*, const std::nothrow_t&) throw();
void operator delete[](void*, const std::nothrow_t&) throw();


inline void* operator new(std::size_t, void* __p) throw() { return __p; }
inline void* operator new[](std::size_t, void* __p) throw() { return __p; }


inline void operator delete (void*, void*) throw() { }
inline void operator delete[](void*, void*) throw() { }

}

#pragma GCC visibility pop
# 78 "/usr/local/cuda/include/common_functions.h" 2
# 91 "/usr/local/cuda/include/common_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void* operator new(std:: size_t, void*) throw();
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void* operator new[](std:: size_t, void*) throw();
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void operator delete(void*, void*) throw();
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void operator delete[](void*, void*) throw();
# 167 "/usr/local/cuda/include/common_functions.h"
# 1 "/usr/local/cuda/include/math_functions.h" 1
# 83 "/usr/local/cuda/include/math_functions.h"
# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 84 "/usr/local/cuda/include/math_functions.h" 2
# 92 "/usr/local/cuda/include/math_functions.h"
extern "C"
{
# 149 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) int abs(int) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) long int labs(long int) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) long long int llabs(long long int) throw ();
# 194 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fabs(double x) throw ();
# 235 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fabsf(float x) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int min(int, int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) unsigned int umin(unsigned int, unsigned int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llmin(long long int, long long int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) unsigned long long int ullmin(unsigned long long int, unsigned long long int);
# 255 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fminf(float x, float y) throw ();
# 271 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fmin(double x, double y) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int max(int, int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) unsigned int umax(unsigned int, unsigned int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llmax(long long int, long long int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) unsigned long long int ullmax(unsigned long long int, unsigned long long int);
# 291 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fmaxf(float x, float y) throw ();
# 307 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fmax(double, double) throw ();
# 348 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double sin(double x) throw ();
# 381 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cos(double x) throw ();
# 396 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) void sincos(double x, double *sptr, double *cptr) throw ();
# 412 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) void sincosf(float x, float *sptr, float *cptr) throw ();
# 453 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double tan(double x) throw ();
# 522 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double sqrt(double x) throw ();
# 591 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rsqrt(double x);
# 660 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rsqrtf(float x);
# 711 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double log2(double x) throw ();
# 732 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double exp2(double x) throw ();
# 753 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float exp2f(float x) throw ();
# 774 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double exp10(double x) throw ();
# 796 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float exp10f(float x) throw ();
# 837 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double expm1(double x) throw ();
# 878 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float expm1f(float x) throw ();
# 929 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float log2f(float x) throw ();
# 980 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double log10(double x) throw ();
# 1051 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double log(double x) throw ();
# 1144 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double log1p(double x) throw ();
# 1237 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float log1pf(float x) throw ();
# 1309 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double floor(double x) throw ();
# 1348 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double exp(double x) throw ();
# 1379 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cosh(double x) throw ();
# 1409 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double sinh(double x) throw ();
# 1439 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double tanh(double x) throw ();
# 1473 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double acosh(double x) throw ();
# 1507 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float acoshf(float x) throw ();
# 1519 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double asinh(double x) throw ();
# 1531 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float asinhf(float x) throw ();
# 1581 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double atanh(double x) throw ();
# 1631 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float atanhf(float x) throw ();
# 1687 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double ldexp(double x, int exp) throw ();
# 1743 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float ldexpf(float x, int exp) throw ();
# 1794 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double logb(double x) throw ();
# 1845 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float logbf(float x) throw ();
# 1871 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int ilogb(double x) throw ();
# 1897 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int ilogbf(float x) throw ();
# 1969 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double scalbn(double x, int n) throw ();
# 2041 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float scalbnf(float x, int n) throw ();
# 2113 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double scalbln(double x, long int n) throw ();
# 2185 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float scalblnf(float x, long int n) throw ();
# 2260 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double frexp(double x, int *nptr) throw ();
# 2335 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float frexpf(float x, int *nptr) throw ();
# 2348 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double round(double x) throw ();
# 2361 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float roundf(float x) throw ();
# 2375 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int lround(double x) throw ();
# 2389 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int lroundf(float x) throw ();
# 2403 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llround(double x) throw ();
# 2417 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llroundf(float x) throw ();
# 2428 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rint(double x) throw ();
# 2439 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rintf(float x) throw ();
# 2451 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int lrint(double x) throw ();
# 2463 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int lrintf(float x) throw ();
# 2475 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llrint(double x) throw ();
# 2487 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llrintf(float x) throw ();
# 2536 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double nearbyint(double x) throw ();
# 2585 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float nearbyintf(float x) throw ();
# 2644 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double ceil(double x) throw ();
# 2655 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double trunc(double x) throw ();
# 2666 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float truncf(float x) throw ();
# 2688 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fdim(double x, double y) throw ();
# 2710 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fdimf(float x, float y) throw ();
# 2743 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double atan2(double y, double x) throw ();
# 2774 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double atan(double x) throw ();
# 2797 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double acos(double x) throw ();
# 2829 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double asin(double x) throw ();
# 2869 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double hypot(double x, double y) throw ();
# 2919 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rhypot(double x, double y) throw ();
# 2960 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float hypotf(float x, float y) throw ();
# 3010 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rhypotf(float x, float y) throw ();
# 3093 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cbrt(double x) throw ();
# 3175 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cbrtf(float x) throw ();
# 3224 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rcbrt(double x);
# 3273 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rcbrtf(float x);
# 3333 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double sinpi(double x);
# 3393 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float sinpif(float x);
# 3445 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cospi(double x);
# 3497 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cospif(float x);
# 3527 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) void sincospi(double x, double *sptr, double *cptr);
# 3557 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) void sincospif(float x, float *sptr, float *cptr);
# 3865 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double pow(double x, double y) throw ();
# 3921 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double modf(double x, double *iptr) throw ();
# 3980 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fmod(double x, double y) throw ();
# 4065 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double remainder(double x, double y) throw ();
# 4151 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float remainderf(float x, float y) throw ();
# 4201 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double remquo(double x, double y, int *quo) throw ();
# 4251 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float remquof(float x, float y, int *quo) throw ();
# 4289 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double j0(double x) throw ();
# 4327 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float j0f(float x) throw ();
# 4384 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double j1(double x) throw ();
# 4441 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float j1f(float x) throw ();
# 4480 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double jn(int n, double x) throw ();
# 4519 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float jnf(int n, float x) throw ();
# 4567 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double y0(double x) throw ();
# 4615 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float y0f(float x) throw ();
# 4663 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double y1(double x) throw ();
# 4711 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float y1f(float x) throw ();
# 4760 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double yn(int n, double x) throw ();
# 4809 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float ynf(int n, float x) throw ();
# 4836 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cyl_bessel_i0(double x) throw ();
# 4862 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cyl_bessel_i0f(float x) throw ();
# 4889 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cyl_bessel_i1(double x) throw ();
# 4915 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cyl_bessel_i1f(float x) throw ();
# 4994 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erf(double x) throw ();
# 5072 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erff(float x) throw ();
# 5129 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erfinv(double y);
# 5186 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erfinvf(float y);
# 5220 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erfc(double x) throw ();
# 5254 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erfcf(float x) throw ();
# 5378 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double lgamma(double x) throw ();
# 5434 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erfcinv(double y);
# 5490 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erfcinvf(float y);
# 5548 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double normcdfinv(double y);
# 5606 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float normcdfinvf(float y);
# 5649 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double normcdf(double y);
# 5692 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float normcdff(float y);
# 5767 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erfcx(double x);
# 5842 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erfcxf(float x);
# 5971 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float lgammaf(float x) throw ();
# 6076 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double tgamma(double x) throw ();
# 6181 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float tgammaf(float x) throw ();
# 6190 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double copysign(double x, double y) throw ();
# 6199 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float copysignf(float x, float y) throw ();
# 6232 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double nextafter(double x, double y) throw ();
# 6265 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float nextafterf(float x, float y) throw ();
# 6277 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double nan(const char *tagp) throw ();
# 6289 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float nanf(const char *tagp) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isinff(float) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isnanf(float) throw ();
# 6300 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __finite(double) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __finitef(float) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __signbit(double) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isnan(double) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isinf(double) throw ();


extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __signbitf(float) throw ();
# 6461 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fma(double x, double y, double z) throw ();
# 6615 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fmaf(float x, float y, float z) throw ();




extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __signbitl(long double) throw ();





extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __finitel(long double) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isinfl(long double) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isnanl(long double) throw ();
# 6675 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float acosf(float x) throw ();
# 6715 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float asinf(float x) throw ();
# 6755 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float atanf(float x) throw ();
# 6788 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float atan2f(float y, float x) throw ();
# 6812 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cosf(float x) throw ();
# 6854 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float sinf(float x) throw ();
# 6896 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float tanf(float x) throw ();
# 6920 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float coshf(float x) throw ();
# 6961 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float sinhf(float x) throw ();
# 6991 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float tanhf(float x) throw ();
# 7042 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float logf(float x) throw ();
# 7092 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float expf(float x) throw ();
# 7143 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float log10f(float x) throw ();
# 7198 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float modff(float x, float *iptr) throw ();
# 7506 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float powf(float x, float y) throw ();
# 7575 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float sqrtf(float x) throw ();
# 7634 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float ceilf(float x) throw ();
# 7706 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float floorf(float x) throw ();
# 7765 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fmodf(float x, float y) throw ();


}

# 1 "/usr/include/math.h" 1 3 4
# 30 "/usr/include/math.h" 3 4
extern "C" {



# 1 "/usr/include/x86_64-linux-gnu/bits/huge_val.h" 1 3 4
# 35 "/usr/include/math.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/huge_valf.h" 1 3 4
# 37 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/huge_vall.h" 1 3 4
# 38 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/inf.h" 1 3 4
# 41 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/nan.h" 1 3 4
# 44 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 2 3 4




typedef float float_t;
typedef double double_t;
# 48 "/usr/include/math.h" 2 3 4
# 71 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();




extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ()
                                                           ;





extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();







extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw ()
     __attribute__ ((__nonnull__ (2)));




extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();

extern double pow10 (double __x) throw (); extern double __pow10 (double __x) throw ();





extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();






extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();








extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();





extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();






extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();








extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();




extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));





extern int isinf (double __value) throw () __attribute__ ((__const__));


extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();





extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));






extern double nan (__const char *__tagb) throw () __attribute__ ((__const__)); extern double __nan (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnan (double __value) throw () __attribute__ ((__const__));



extern int isnan (double __value) throw () __attribute__ ((__const__));


extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();






extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();






extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();






extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();







extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw () __attribute__ ((__const__)); extern double __nextafter (double __x, double __y) throw () __attribute__ ((__const__));

extern double nexttoward (double __x, long double __y) throw () __attribute__ ((__const__)); extern double __nexttoward (double __x, long double __y) throw () __attribute__ ((__const__));



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw (); extern double __fmax (double __x, double __y) throw ();


extern double fmin (double __x, double __y) throw (); extern double __fmin (double __x, double __y) throw ();



extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();








extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 72 "/usr/include/math.h" 2 3 4
# 94 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();




extern void
 sincosf
# 82 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 (float __x, float *__sinx, float *__cosx) throw (); extern void
 __sincosf
# 82 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 (float __x, float *__sinx, float *__cosx) throw ()
                                                           ;





extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();







extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw ()
     __attribute__ ((__nonnull__ (2)));




extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();

extern float pow10f (float __x) throw (); extern float __pow10f (float __x) throw ();





extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();






extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();








extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();





extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();






extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();








extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();




extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));





extern int isinff (float __value) throw () __attribute__ ((__const__));


extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();





extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));






extern float nanf (__const char *__tagb) throw () __attribute__ ((__const__)); extern float __nanf (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanf (float __value) throw () __attribute__ ((__const__));



extern int isnanf (float __value) throw () __attribute__ ((__const__));


extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();






extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();






extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();






extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();







extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __nextafterf (float __x, float __y) throw () __attribute__ ((__const__));

extern float nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__)); extern float __nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__));



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw (); extern float __fmaxf (float __x, float __y) throw ();


extern float fminf (float __x, float __y) throw (); extern float __fminf (float __x, float __y) throw ();



extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();








extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 95 "/usr/include/math.h" 2 3 4
# 146 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();




extern void
 sincosl
# 82 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 (long double __x, long double *__sinx, long double *__cosx) throw (); extern void
 __sincosl
# 82 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 (long double __x, long double *__sinx, long double *__cosx) throw ()
                                                           ;





extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();







extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw ()
     __attribute__ ((__nonnull__ (2)));




extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();

extern long double pow10l (long double __x) throw (); extern long double __pow10l (long double __x) throw ();





extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();






extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();








extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();





extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();






extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();








extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();




extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));





extern int isinfl (long double __value) throw () __attribute__ ((__const__));


extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();





extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));






extern long double nanl (__const char *__tagb) throw () __attribute__ ((__const__)); extern long double __nanl (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanl (long double __value) throw () __attribute__ ((__const__));



extern int isnanl (long double __value) throw () __attribute__ ((__const__));


extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();






extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();






extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();






extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();







extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__));

extern long double nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw (); extern long double __fmaxl (long double __x, long double __y) throw ();


extern long double fminl (long double __x, long double __y) throw (); extern long double __fminl (long double __x, long double __y) throw ();



extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();








extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 147 "/usr/include/math.h" 2 3 4
# 162 "/usr/include/math.h" 3 4
extern int signgam;
# 203 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN,

    FP_INFINITE,

    FP_ZERO,

    FP_SUBNORMAL,

    FP_NORMAL

  };
# 296 "/usr/include/math.h" 3 4
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;




extern _LIB_VERSION_TYPE _LIB_VERSION;
# 319 "/usr/include/math.h" 3 4
struct __exception



  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };


extern int matherr (struct __exception *__exc) throw ();
# 483 "/usr/include/math.h" 3 4
}
# 7771 "/usr/local/cuda/include/math_functions.h" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 33 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 1 3 4
# 34 "/usr/include/stdlib.h" 2 3 4

extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 43 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 38 "/usr/include/endian.h" 2 3 4
# 61 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 62 "/usr/include/endian.h" 2 3 4
# 66 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 44 "/usr/include/stdlib.h" 2 3 4
# 96 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 140 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;




extern double atof (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (__const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern float strtof (__const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1))) ;

extern long double strtold (__const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern long int strtol (__const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

extern unsigned long int strtoul (__const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;




__extension__
extern long long int strtoq (__const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtouq (__const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;





__extension__
extern long long int strtoll (__const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtoull (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

# 240 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4))) ;

extern unsigned long int strtoul_l (__const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern long long int strtoll_l (__const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern unsigned long long int strtoull_l (__const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

extern double strtod_l (__const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;

extern float strtof_l (__const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;

extern long double strtold_l (__const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;
# 311 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (__const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;
# 105 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 137 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 1 3 4
# 148 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 195 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 220 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 32 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 35 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;







# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 47 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 55 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 65 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 97 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 107 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 119 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 132 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 221 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
extern "C" {

__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     throw () __attribute__ ((__const__));
# 64 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
}
# 224 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 263 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


typedef union
{
  char __size[56];
  long int __align;
} pthread_attr_t;



typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 76 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    int __spins;
    __pthread_list_t __list;
# 101 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    unsigned long int __pad1;
    unsigned long int __pad2;


    unsigned int __flags;
  } __data;
# 187 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 272 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 321 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();




extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    unsigned long long int __a;
  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) throw ();




extern void cfree (void *__ptr) throw ();



# 1 "/usr/include/alloca.h" 1 3 4
# 25 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 1 3 4
# 26 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 498 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));






extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));









extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) throw () __attribute__ ((__noreturn__));







extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));







extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));






extern char *getenv (__const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *__secure_getenv (__const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (__const char *__name, __const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 606 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 620 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 630 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 642 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 652 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 663 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 674 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 684 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 694 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 706 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;









extern int system (__const char *__command) ;






extern char *canonicalize_file_name (__const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 734 "/usr/include/stdlib.h" 3 4
extern char *realpath (__const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (__const void *, __const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (__const void *, __const void *, void *);





extern void *bsearch (__const void *__key, __const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;



extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;

# 808 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));







extern int mblen (__const char *__s, size_t __n) throw () ;


extern int mbtowc (wchar_t *__restrict __pwc,
     __const char *__restrict __s, size_t __n) throw () ;


extern int wctomb (char *__s, wchar_t __wchar) throw () ;



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   __const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   __const wchar_t *__restrict __pwcs, size_t __n)
     throw ();








extern int rpmatch (__const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 896 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *__const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (__const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 964 "/usr/include/stdlib.h" 3 4
}
# 7772 "/usr/local/cuda/include/math_functions.h" 2


# 1 "/usr/include/c++/4.6/cmath" 1 3
# 41 "/usr/include/c++/4.6/cmath" 3
       
# 42 "/usr/include/c++/4.6/cmath" 3


# 1 "/usr/include/c++/4.6/bits/cpp_type_traits.h" 1 3
# 36 "/usr/include/c++/4.6/bits/cpp_type_traits.h" 3
       
# 37 "/usr/include/c++/4.6/bits/cpp_type_traits.h" 3
# 69 "/usr/include/c++/4.6/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  template<typename _Iterator, typename _Container>
    class __normal_iterator;


}

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };




  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 199 "/usr/include/c++/4.6/bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_fundamental
    : public __traitor<__is_void<_Tp>, __is_arithmetic<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };
# 422 "/usr/include/c++/4.6/bits/cpp_type_traits.h" 3

}
# 45 "/usr/include/c++/4.6/cmath" 2 3
# 1 "/usr/include/c++/4.6/ext/type_traits.h" 1 3
# 33 "/usr/include/c++/4.6/ext/type_traits.h" 3
       
# 34 "/usr/include/c++/4.6/ext/type_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
# 46 "/usr/include/c++/4.6/cmath" 2 3
# 77 "/usr/include/c++/4.6/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  inline double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::acos;

  inline float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline long double
  acos(long double __x)
  { return __builtin_acosl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;

  inline float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline long double
  asin(long double __x)
  { return __builtin_asinl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;

  inline float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline long double
  atan(long double __x)
  { return __builtin_atanl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;

  inline float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }

  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;

  inline float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;

  inline float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline long double
  cos(long double __x)
  { return __builtin_cosl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;

  inline float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;

  inline float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline long double
  exp(long double __x)
  { return __builtin_expl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;

  inline float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;

  inline float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline long double
  floor(long double __x)
  { return __builtin_floorl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;

  inline float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }

  using ::frexp;

  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;

  inline float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
  ldexp(_Tp __x, int __exp)
  { return __builtin_ldexp(__x, __exp); }

  using ::log;

  inline float
  log(float __x)
  { return __builtin_logf(__x); }

  inline long double
  log(long double __x)
  { return __builtin_logl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;

  inline float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline long double
  log10(long double __x)
  { return __builtin_log10l(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;

  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }

  using ::pow;

  inline float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }




  inline double
  pow(double __x, int __i)
  { return __builtin_powi(__x, __i); }

  inline float
  pow(float __x, int __n)
  { return __builtin_powif(__x, __n); }

  inline long double
  pow(long double __x, int __n)
  { return __builtin_powil(__x, __n); }


  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;

  inline float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline long double
  sin(long double __x)
  { return __builtin_sinl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;

  inline float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;

  inline float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;

  inline float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline long double
  tan(long double __x)
  { return __builtin_tanl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;

  inline float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }


}
# 481 "/usr/include/c++/4.6/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 731 "/usr/include/c++/4.6/cmath" 3
  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    fpclassify(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL,
      FP_SUBNORMAL, FP_ZERO, __type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isfinite(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isfinite(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isinf(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isinf(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isnan(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isnan(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isnormal(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isnormal(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    signbit(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_signbit(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isgreater(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isgreater(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isgreaterequal(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isgreaterequal(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isless(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isless(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    islessequal(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_islessequal(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    islessgreater(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_islessgreater(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isunordered(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isunordered(__type(__f1), __type(__f2));
    }




}
# 7775 "/usr/local/cuda/include/math_functions.h" 2
# 1 "/usr/include/c++/4.6/cstdlib" 1 3
# 41 "/usr/include/c++/4.6/cstdlib" 3
       
# 42 "/usr/include/c++/4.6/cstdlib" 3
# 98 "/usr/include/c++/4.6/cstdlib" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;
  using ::abs;
  using ::atexit;
  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;
  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;


  inline long
  abs(long __i) { return labs(__i); }

  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }


}
# 158 "/usr/include/c++/4.6/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;


  inline long long
  abs(long long __x) { return __x >= 0 ? __x : -__x; }


  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 193 "/usr/include/c++/4.6/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;
  using ::__gnu_cxx::abs;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}
# 7776 "/usr/local/cuda/include/math_functions.h" 2
# 7827 "/usr/local/cuda/include/math_functions.h"
namespace __gnu_cxx
{


extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) long long int abs(long long int a);


}




namespace std
{
  template<typename T> extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) T __pow_helper(T, int);
  template<typename T> extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) T __cmath_power(T, unsigned int);
}

using std::abs;
using std::fabs;
using std::ceil;
using std::floor;
using std::sqrt;
using std::pow;
using std::log;
using std::log10;
using std::fmod;
using std::modf;
using std::exp;
using std::frexp;
using std::ldexp;
using std::asin;
using std::sin;
using std::sinh;
using std::acos;
using std::cos;
using std::cosh;
using std::atan;
using std::atan2;
using std::tan;
using std::tanh;
# 8037 "/usr/local/cuda/include/math_functions.h"
namespace std {
# 8048 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) long int abs(long int);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float abs(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) double abs(double);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float fabs(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float ceil(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float floor(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float sqrt(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float pow(float, float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float pow(float, int);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) double pow(double, int);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float log(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float log10(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float fmod(float, float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float modf(float, float*);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float exp(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float frexp(float, int*);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float ldexp(float, int);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float asin(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float sin(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float sinh(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float acos(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float cos(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float cosh(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float atan(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float atan2(float, float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float tan(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float tanh(float);


}


static __inline__ __attribute__((host)) __attribute__((device)) float logb(float a)
{
  return logbf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) int ilogb(float a)
{
  return ilogbf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float scalbn(float a, int b)
{
  return scalbnf(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) float scalbln(float a, long int b)
{
  return scalblnf(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) float exp2(float a)
{
  return exp2f(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float exp10(float a)
{
  return exp10f(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float expm1(float a)
{
  return expm1f(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float log2(float a)
{
  return log2f(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float log1p(float a)
{
  return log1pf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float rsqrt(float a)
{
  return rsqrtf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float acosh(float a)
{
  return acoshf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float asinh(float a)
{
  return asinhf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float atanh(float a)
{
  return atanhf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float hypot(float a, float b)
{
  return hypotf(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) float cbrt(float a)
{
  return cbrtf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float rcbrt(float a)
{
  return rcbrtf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float sinpi(float a)
{
  return sinpif(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float cospi(float a)
{
  return cospif(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) void sincospi(float a, float *sptr, float *cptr)
{
  sincospif(a, sptr, cptr);
}

static __inline__ __attribute__((host)) __attribute__((device)) void sincos(float a, float *sptr, float *cptr)
{
  sincosf(a, sptr, cptr);
}

static __inline__ __attribute__((host)) __attribute__((device)) float j0(float a)
{
  return j0f(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float j1(float a)
{
  return j1f(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float jn(int n, float a)
{
  return jnf(n, a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float y0(float a)
{
  return y0f(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float y1(float a)
{
  return y1f(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float yn(int n, float a)
{
  return ynf(n, a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float cyl_bessel_i0(float a)
{
  return cyl_bessel_i0f(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float cyl_bessel_i1(float a)
{
  return cyl_bessel_i1f(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float erf(float a)
{
  return erff(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float erfinv(float a)
{
  return erfinvf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float erfc(float a)
{
  return erfcf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float erfcinv(float a)
{
  return erfcinvf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float normcdfinv(float a)
{
  return normcdfinvf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float normcdf(float a)
{
  return normcdff(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float erfcx(float a)
{
  return erfcxf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float lgamma(float a)
{
  return lgammaf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float tgamma(float a)
{
  return tgammaf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float copysign(float a, float b)
{
  return copysignf(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) double copysign(double a, float b)
{
  return copysign(a, (double)b);
}

static __inline__ __attribute__((host)) __attribute__((device)) float copysign(float a, double b)
{
  return copysignf(a, (float)b);
}

static __inline__ __attribute__((host)) __attribute__((device)) float nextafter(float a, float b)
{
  return nextafterf(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) float remainder(float a, float b)
{
  return remainderf(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) float remquo(float a, float b, int *quo)
{
  return remquof(a, b, quo);
}

static __inline__ __attribute__((host)) __attribute__((device)) float round(float a)
{
  return roundf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) long int lround(float a)
{
  return lroundf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) long long int llround(float a)
{
  return llroundf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float trunc(float a)
{
  return truncf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float rint(float a)
{
  return rintf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) long int lrint(float a)
{
  return lrintf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) long long int llrint(float a)
{
  return llrintf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float nearbyint(float a)
{
  return nearbyintf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float fdim(float a, float b)
{
  return fdimf(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) float fma(float a, float b, float c)
{
  return fmaf(a, b, c);
}

static __inline__ __attribute__((host)) __attribute__((device)) float fmax(float a, float b)
{
  return fmaxf(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) float fmin(float a, float b)
{
  return fminf(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) unsigned int min(unsigned int a, unsigned int b)
{
  return umin(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) unsigned int min(int a, unsigned int b)
{
  return umin((unsigned int)a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) unsigned int min(unsigned int a, int b)
{
  return umin(a, (unsigned int)b);
}

static __inline__ __attribute__((host)) __attribute__((device)) long long int min(long long int a, long long int b)
{
  return llmin(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) unsigned long long int min(unsigned long long int a, unsigned long long int b)
{
  return ullmin(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) unsigned long long int min(long long int a, unsigned long long int b)
{
  return ullmin((unsigned long long int)a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) unsigned long long int min(unsigned long long int a, long long int b)
{
  return ullmin(a, (unsigned long long int)b);
}

static __inline__ __attribute__((host)) __attribute__((device)) float min(float a, float b)
{
  return fminf(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) double min(double a, double b)
{
  return fmin(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) double min(float a, double b)
{
  return fmin((double)a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) double min(double a, float b)
{
  return fmin(a, (double)b);
}

static __inline__ __attribute__((host)) __attribute__((device)) unsigned int max(unsigned int a, unsigned int b)
{
  return umax(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) unsigned int max(int a, unsigned int b)
{
  return umax((unsigned int)a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) unsigned int max(unsigned int a, int b)
{
  return umax(a, (unsigned int)b);
}

static __inline__ __attribute__((host)) __attribute__((device)) long long int max(long long int a, long long int b)
{
  return llmax(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) unsigned long long int max(unsigned long long int a, unsigned long long int b)
{
  return ullmax(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) unsigned long long int max(long long int a, unsigned long long int b)
{
  return ullmax((unsigned long long int)a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) unsigned long long int max(unsigned long long int a, long long int b)
{
  return ullmax(a, (unsigned long long int)b);
}

static __inline__ __attribute__((host)) __attribute__((device)) float max(float a, float b)
{
  return fmaxf(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) double max(double a, double b)
{
  return fmax(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) double max(float a, double b)
{
  return fmax((double)a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) double max(double a, float b)
{
  return fmax(a, (double)b);
}
# 14064 "/usr/local/cuda/include/math_functions.h"
# 1 "/usr/local/cuda/include/math_functions_dbl_ptx1.h" 1
# 14065 "/usr/local/cuda/include/math_functions.h" 2
# 168 "/usr/local/cuda/include/common_functions.h" 2
# 77 "/usr/local/cuda/include/cuda_runtime.h" 2
# 1 "/usr/local/cuda/include/cuda_surface_types.h" 1
# 61 "/usr/local/cuda/include/cuda_surface_types.h"
# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 62 "/usr/local/cuda/include/cuda_surface_types.h" 2
# 73 "/usr/local/cuda/include/cuda_surface_types.h"
template<class T, int dim = 1>
struct __attribute__((device_builtin_surface_type)) surface : public surfaceReference
{
  __attribute__((host)) surface(void)
  {
    channelDesc = cudaCreateChannelDesc<T>();
  }

  __attribute__((host)) surface(struct cudaChannelFormatDesc desc)
  {
    channelDesc = desc;
  }
};

template<int dim>
struct __attribute__((device_builtin_surface_type)) surface<void, dim> : public surfaceReference
{
  __attribute__((host)) surface(void)
  {
    channelDesc = cudaCreateChannelDesc<void>();
  }
};
# 78 "/usr/local/cuda/include/cuda_runtime.h" 2
# 1 "/usr/local/cuda/include/cuda_texture_types.h" 1
# 61 "/usr/local/cuda/include/cuda_texture_types.h"
# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 62 "/usr/local/cuda/include/cuda_texture_types.h" 2
# 73 "/usr/local/cuda/include/cuda_texture_types.h"
template<class T, int texType = 0x01, enum cudaTextureReadMode mode = cudaReadModeElementType>
struct __attribute__((device_builtin_texture_type)) texture : public textureReference
{
  __attribute__((host)) texture(int norm = 0,
                   enum cudaTextureFilterMode fMode = cudaFilterModePoint,
                   enum cudaTextureAddressMode aMode = cudaAddressModeClamp)
  {
    normalized = norm;
    filterMode = fMode;
    addressMode[0] = aMode;
    addressMode[1] = aMode;
    addressMode[2] = aMode;
    channelDesc = cudaCreateChannelDesc<T>();
    sRGB = 0;
  }

  __attribute__((host)) texture(int norm,
                   enum cudaTextureFilterMode fMode,
                   enum cudaTextureAddressMode aMode,
                   struct cudaChannelFormatDesc desc)
  {
    normalized = norm;
    filterMode = fMode;
    addressMode[0] = aMode;
    addressMode[1] = aMode;
    addressMode[2] = aMode;
    channelDesc = desc;
    sRGB = 0;
  }
};
# 79 "/usr/local/cuda/include/cuda_runtime.h" 2
# 1 "/usr/local/cuda/include/device_functions.h" 1
# 61 "/usr/local/cuda/include/device_functions.h"
# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 62 "/usr/local/cuda/include/device_functions.h" 2
# 71 "/usr/local/cuda/include/device_functions.h"
extern "C"
{
# 82 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __mulhi(int x, int y);
# 92 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __umulhi(unsigned int x, unsigned int y);
# 102 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __mul64hi(long long int x, long long int y);
# 112 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __umul64hi(unsigned long long int x, unsigned long long int y);
# 121 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __int_as_float(int x);
# 130 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __float_as_int(float x);
extern __attribute__((device)) __attribute__((device_builtin)) void __syncthreads(void);
extern __attribute__((device)) __attribute__((device_builtin)) void __prof_trigger(int);
extern __attribute__((device)) __attribute__((device_builtin)) void __threadfence(void);
extern __attribute__((device)) __attribute__((device_builtin)) void __threadfence_block(void);
extern __attribute__((device)) __attribute__((device_builtin)) void __trap(void);
extern __attribute__((device)) __attribute__((device_builtin)) void __brkpt(int c = 0);
# 159 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __saturatef(float x);
# 228 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __sad(int x, int y, unsigned int z);
# 296 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __usad(unsigned int x, unsigned int y, unsigned int z);
# 306 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __mul24(int x, int y);
# 316 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __umul24(unsigned int x, unsigned int y);
# 329 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float fdividef(float x, float y);
# 404 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fdividef(float x, float y);
extern __attribute__((device)) __attribute__((device_builtin)) double fdivide(double x, double y);
# 417 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __sinf(float x) throw ();
# 429 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __cosf(float x) throw ();
# 443 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __tanf(float x) throw ();
# 458 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) void __sincosf(float x, float *sptr, float *cptr) throw ();
# 508 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __expf(float x) throw ();
# 540 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __exp10f(float x) throw ();
# 566 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __log2f(float x) throw ();
# 594 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __log10f(float x) throw ();
# 638 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __logf(float x) throw ();
# 681 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __powf(float x, float y) throw ();
# 690 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __float2int_rn(float x);
# 699 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __float2int_rz(float x);
# 708 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __float2int_ru(float);
# 717 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __float2int_rd(float x);
# 726 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __float2uint_rn(float x);
# 735 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __float2uint_rz(float x);
# 744 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __float2uint_ru(float x);
# 753 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __float2uint_rd(float x);
# 762 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __int2float_rn(int x);
# 771 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __int2float_rz(int x);
# 780 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __int2float_ru(int x);
# 789 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __int2float_rd(int x);
# 798 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __uint2float_rn(unsigned int x);
# 807 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __uint2float_rz(unsigned int x);
# 816 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __uint2float_ru(unsigned int x);
# 825 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __uint2float_rd(unsigned int x);
# 834 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __float2ll_rn(float x);
# 843 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __float2ll_rz(float x);
# 852 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __float2ll_ru(float x);
# 861 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __float2ll_rd(float x);
# 870 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __float2ull_rn(float x);
# 879 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __float2ull_rz(float x);
# 888 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __float2ull_ru(float x);
# 897 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __float2ull_rd(float x);
# 906 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __ll2float_rn(long long int x);
# 915 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __ll2float_rz(long long int x);
# 924 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __ll2float_ru(long long int x);
# 933 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __ll2float_rd(long long int x);
# 942 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __ull2float_rn(unsigned long long int x);
# 951 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __ull2float_rz(unsigned long long int x);
# 960 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __ull2float_ru(unsigned long long int x);
# 969 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __ull2float_rd(unsigned long long int x);
# 978 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned short __float2half_rn(float x);
# 987 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __half2float(unsigned short x);
# 999 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fadd_rn(float x, float y);
# 1011 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fadd_rz(float x, float y);
# 1023 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fadd_ru(float x, float y);
# 1035 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fadd_rd(float x, float y);
# 1047 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fsub_rn(float x, float y);
# 1059 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fsub_rz(float x, float y);
# 1071 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fsub_ru(float x, float y);
# 1083 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fsub_rd(float x, float y);
# 1095 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fmul_rn(float x, float y);
# 1107 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fmul_rz(float x, float y);
# 1119 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fmul_ru(float x, float y);
# 1131 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fmul_rd(float x, float y);
# 1284 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fmaf_rn(float x, float y, float z);
# 1437 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fmaf_rz(float x, float y, float z);
# 1590 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fmaf_ru(float x, float y, float z);
# 1743 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fmaf_rd(float x, float y, float z);
# 1776 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __frcp_rn(float x);
# 1809 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __frcp_rz(float x);
# 1842 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __frcp_ru(float x);
# 1875 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __frcp_rd(float x);
# 1906 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fsqrt_rn(float x);
# 1937 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fsqrt_rz(float x);
# 1968 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fsqrt_ru(float x);
# 1999 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fsqrt_rd(float x);
# 2038 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __frsqrt_rn(float x);
# 2049 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fdiv_rn(float x, float y);
# 2060 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fdiv_rz(float x, float y);
# 2071 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fdiv_ru(float x, float y);
# 2082 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fdiv_rd(float x, float y);
# 2091 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __clz(int x);
# 2102 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __ffs(int x);
# 2111 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __popc(unsigned int x);
# 2120 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __brev(unsigned int x);
# 2129 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __clzll(long long int x);
# 2140 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __ffsll(long long int x);
# 2151 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __popcll(unsigned long long int x);
# 2160 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __brevll(unsigned long long int x);
# 2184 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __byte_perm(unsigned int x, unsigned int y, unsigned int s);
# 2196 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __hadd(int, int);
# 2209 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __rhadd(int, int);
# 2221 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uhadd(unsigned int, unsigned int);
# 2234 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __urhadd(unsigned int, unsigned int);
# 2294 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vabs2(unsigned int a);
# 2305 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vabsss2(unsigned int a);
# 2316 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vadd2(unsigned int a, unsigned int b);
# 2327 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vaddss2 (unsigned int a, unsigned int b);
# 2337 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vaddus2 (unsigned int a, unsigned int b);
# 2348 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vavgs2(unsigned int a, unsigned int b);
# 2359 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vavgu2(unsigned int a, unsigned int b);
# 2370 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vhaddu2(unsigned int a, unsigned int b);
# 2381 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpeq2(unsigned int a, unsigned int b);
# 2392 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpges2(unsigned int a, unsigned int b);
# 2403 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpgeu2(unsigned int a, unsigned int b);
# 2414 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpgts2(unsigned int a, unsigned int b);
# 2425 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpgtu2(unsigned int a, unsigned int b);
# 2436 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmples2(unsigned int a, unsigned int b);
# 2448 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpleu2(unsigned int a, unsigned int b);
# 2459 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmplts2(unsigned int a, unsigned int b);
# 2470 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpltu2(unsigned int a, unsigned int b);
# 2481 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpne2(unsigned int a, unsigned int b);
# 2492 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vabsdiffu2(unsigned int a, unsigned int b);
# 2503 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vmaxs2(unsigned int a, unsigned int b);
# 2514 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vmaxu2(unsigned int a, unsigned int b);
# 2525 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vmins2(unsigned int a, unsigned int b);
# 2536 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vminu2(unsigned int a, unsigned int b);
# 2547 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vseteq2(unsigned int a, unsigned int b);
# 2558 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetges2(unsigned int a, unsigned int b);
# 2569 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetgeu2(unsigned int a, unsigned int b);
# 2580 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetgts2(unsigned int a, unsigned int b);
# 2591 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetgtu2(unsigned int a, unsigned int b);
# 2602 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetles2(unsigned int a, unsigned int b);
# 2613 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetleu2(unsigned int a, unsigned int b);
# 2624 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetlts2(unsigned int a, unsigned int b);
# 2635 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetltu2(unsigned int a, unsigned int b);
# 2646 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetne2(unsigned int a, unsigned int b);
# 2657 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsadu2(unsigned int a, unsigned int b);
# 2668 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsub2(unsigned int a, unsigned int b);
# 2679 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsubss2 (unsigned int a, unsigned int b);
# 2690 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsubus2 (unsigned int a, unsigned int b);
# 2700 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vneg2(unsigned int a);
# 2710 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vnegss2(unsigned int a);
# 2721 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vabsdiffs2(unsigned int a, unsigned int b);
# 2732 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsads2(unsigned int a, unsigned int b);
# 2742 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vabs4(unsigned int a);
# 2753 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vabsss4(unsigned int a);
# 2764 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vadd4(unsigned int a, unsigned int b);
# 2775 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vaddss4 (unsigned int a, unsigned int b);
# 2785 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vaddus4 (unsigned int a, unsigned int b);
# 2796 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vavgs4(unsigned int a, unsigned int b);
# 2807 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vavgu4(unsigned int a, unsigned int b);
# 2818 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vhaddu4(unsigned int a, unsigned int b);
# 2829 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpeq4(unsigned int a, unsigned int b);
# 2840 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpges4(unsigned int a, unsigned int b);
# 2851 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpgeu4(unsigned int a, unsigned int b);
# 2862 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpgts4(unsigned int a, unsigned int b);
# 2873 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpgtu4(unsigned int a, unsigned int b);
# 2884 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmples4(unsigned int a, unsigned int b);
# 2895 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpleu4(unsigned int a, unsigned int b);
# 2906 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmplts4(unsigned int a, unsigned int b);
# 2917 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpltu4(unsigned int a, unsigned int b);
# 2928 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpne4(unsigned int a, unsigned int b);
# 2939 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vabsdiffu4(unsigned int a, unsigned int b);
# 2950 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vmaxs4(unsigned int a, unsigned int b);
# 2961 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vmaxu4(unsigned int a, unsigned int b);
# 2972 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vmins4(unsigned int a, unsigned int b);
# 2983 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vminu4(unsigned int a, unsigned int b);
# 2994 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vseteq4(unsigned int a, unsigned int b);
# 3005 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetles4(unsigned int a, unsigned int b);
# 3016 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetleu4(unsigned int a, unsigned int b);
# 3027 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetlts4(unsigned int a, unsigned int b);
# 3038 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetltu4(unsigned int a, unsigned int b);
# 3049 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetges4(unsigned int a, unsigned int b);
# 3060 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetgeu4(unsigned int a, unsigned int b);
# 3071 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetgts4(unsigned int a, unsigned int b);
# 3082 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetgtu4(unsigned int a, unsigned int b);
# 3093 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetne4(unsigned int a, unsigned int b);
# 3104 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsadu4(unsigned int a, unsigned int b);
# 3115 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsub4(unsigned int a, unsigned int b);
# 3126 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsubss4(unsigned int a, unsigned int b);
# 3137 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsubus4(unsigned int a, unsigned int b);
# 3147 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vneg4(unsigned int a);
# 3157 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vnegss4(unsigned int a);
# 3168 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vabsdiffs4(unsigned int a, unsigned int b);
# 3179 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __vsads4(unsigned int a, unsigned int b);






}







static __inline__ __attribute__((device)) int mulhi(int a, int b)
{
  return __mulhi(a, b);
}

static __inline__ __attribute__((device)) unsigned int mulhi(unsigned int a, unsigned int b)
{
  return __umulhi(a, b);
}

static __inline__ __attribute__((device)) unsigned int mulhi(int a, unsigned int b)
{
  return __umulhi((unsigned int)a, b);
}

static __inline__ __attribute__((device)) unsigned int mulhi(unsigned int a, int b)
{
  return __umulhi(a, (unsigned int)b);
}

static __inline__ __attribute__((device)) long long int mul64hi(long long int a, long long int b)
{
  return __mul64hi(a, b);
}

static __inline__ __attribute__((device)) unsigned long long int mul64hi(unsigned long long int a, unsigned long long int b)
{
  return __umul64hi(a, b);
}

static __inline__ __attribute__((device)) unsigned long long int mul64hi(long long int a, unsigned long long int b)
{
  return __umul64hi((unsigned long long int)a, b);
}

static __inline__ __attribute__((device)) unsigned long long int mul64hi(unsigned long long int a, long long int b)
{
  return __umul64hi(a, (unsigned long long int)b);
}

static __inline__ __attribute__((device)) int float_as_int(float a)
{
  return __float_as_int(a);
}

static __inline__ __attribute__((device)) float int_as_float(int a)
{
  return __int_as_float(a);
}

static __inline__ __attribute__((device)) float saturate(float a)
{
  return __saturatef(a);
}

static __inline__ __attribute__((device)) int mul24(int a, int b)
{
  return __mul24(a, b);
}

static __inline__ __attribute__((device)) unsigned int umul24(unsigned int a, unsigned int b)
{
  return __umul24(a, b);
}

static __inline__ __attribute__((device)) void trap(void)
{
  __trap();
}


static __inline__ __attribute__((device)) void brkpt(int c = 0)
{
  __brkpt(c);
}

static __inline__ __attribute__((device)) void syncthreads(void)
{
  __syncthreads();
}

static __inline__ __attribute__((device)) void prof_trigger(int e)
{
       if (e == 0) __prof_trigger( 0);
  else if (e == 1) __prof_trigger( 1);
  else if (e == 2) __prof_trigger( 2);
  else if (e == 3) __prof_trigger( 3);
  else if (e == 4) __prof_trigger( 4);
  else if (e == 5) __prof_trigger( 5);
  else if (e == 6) __prof_trigger( 6);
  else if (e == 7) __prof_trigger( 7);
  else if (e == 8) __prof_trigger( 8);
  else if (e == 9) __prof_trigger( 9);
  else if (e == 10) __prof_trigger(10);
  else if (e == 11) __prof_trigger(11);
  else if (e == 12) __prof_trigger(12);
  else if (e == 13) __prof_trigger(13);
  else if (e == 14) __prof_trigger(14);
  else if (e == 15) __prof_trigger(15);
}

static __inline__ __attribute__((device)) void threadfence(bool global = true)
{
  global ? __threadfence() : __threadfence_block();
}

static __inline__ __attribute__((device)) int float2int(float a, enum cudaRoundMode mode = cudaRoundZero)
{
  return mode == cudaRoundNearest ? __float2int_rn(a) :
         mode == cudaRoundPosInf ? __float2int_ru(a) :
         mode == cudaRoundMinInf ? __float2int_rd(a) :
                                    __float2int_rz(a);
}

static __inline__ __attribute__((device)) unsigned int float2uint(float a, enum cudaRoundMode mode = cudaRoundZero)
{
  return mode == cudaRoundNearest ? __float2uint_rn(a) :
         mode == cudaRoundPosInf ? __float2uint_ru(a) :
         mode == cudaRoundMinInf ? __float2uint_rd(a) :
                                    __float2uint_rz(a);
}

static __inline__ __attribute__((device)) float int2float(int a, enum cudaRoundMode mode = cudaRoundNearest)
{
  return mode == cudaRoundZero ? __int2float_rz(a) :
         mode == cudaRoundPosInf ? __int2float_ru(a) :
         mode == cudaRoundMinInf ? __int2float_rd(a) :
                                   __int2float_rn(a);
}

static __inline__ __attribute__((device)) float uint2float(unsigned int a, enum cudaRoundMode mode = cudaRoundNearest)
{
  return mode == cudaRoundZero ? __uint2float_rz(a) :
         mode == cudaRoundPosInf ? __uint2float_ru(a) :
         mode == cudaRoundMinInf ? __uint2float_rd(a) :
                                   __uint2float_rn(a);
}
# 9405 "/usr/local/cuda/include/device_functions.h"
# 1 "/usr/local/cuda/include/sm_11_atomic_functions.h" 1
# 9406 "/usr/local/cuda/include/device_functions.h" 2
# 1 "/usr/local/cuda/include/sm_12_atomic_functions.h" 1
# 9407 "/usr/local/cuda/include/device_functions.h" 2
# 1 "/usr/local/cuda/include/sm_13_double_functions.h" 1
# 9408 "/usr/local/cuda/include/device_functions.h" 2
# 1 "/usr/local/cuda/include/sm_20_atomic_functions.h" 1
# 9409 "/usr/local/cuda/include/device_functions.h" 2
# 1 "/usr/local/cuda/include/sm_32_atomic_functions.h" 1
# 9410 "/usr/local/cuda/include/device_functions.h" 2
# 1 "/usr/local/cuda/include/sm_35_atomic_functions.h" 1
# 9411 "/usr/local/cuda/include/device_functions.h" 2
# 1 "/usr/local/cuda/include/sm_20_intrinsics.h" 1
# 9412 "/usr/local/cuda/include/device_functions.h" 2
# 1 "/usr/local/cuda/include/sm_30_intrinsics.h" 1
# 9413 "/usr/local/cuda/include/device_functions.h" 2
# 1 "/usr/local/cuda/include/sm_32_intrinsics.h" 1
# 9414 "/usr/local/cuda/include/device_functions.h" 2
# 1 "/usr/local/cuda/include/sm_35_intrinsics.h" 1
# 9415 "/usr/local/cuda/include/device_functions.h" 2
# 1 "/usr/local/cuda/include/surface_functions.h" 1
# 61 "/usr/local/cuda/include/surface_functions.h"
# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 62 "/usr/local/cuda/include/surface_functions.h" 2
# 73 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf1Dreadc1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf1Dreadc2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf1Dreadc4(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf1Dreads1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf1Dreads2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf1Dreads4(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf1Dreadu1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf1Dreadu2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf1Dreadu4(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf1Dreadl1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf1Dreadl2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
# 99 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(T *res, surface<void, 0x01> surf, int x, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s == 1) ? (void)(*(uchar1 *)res = __surf1Dreadc1(surf, x, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(*(ushort1*)res = __surf1Dreads1(surf, x, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(*(uint1 *)res = __surf1Dreadu1(surf, x, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(*(uint2 *)res = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(*(uint4 *)res = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;

  surf1Dread(&tmp, surf, x, (int)sizeof(T), mode);

  return tmp;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(T *res, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surf1Dread<T>(surf, x, mode);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return (char)__surf1Dreadc1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) signed char surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)__surf1Dreadc1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadc1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)__surf1Dreadc1(surf, x, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadc1(surf, x, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = __surf1Dreadc2(surf, x, cudaBoundaryModeTrap);

  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadc2(surf, x, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = __surf1Dreadc4(surf, x, cudaBoundaryModeTrap);

  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadc4(surf, x, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return (short)__surf1Dreads1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreads1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)__surf1Dreads1(surf, x, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreads1(surf, x, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = __surf1Dreads2(surf, x, cudaBoundaryModeTrap);

  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreads2(surf, x, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = __surf1Dreads4(surf, x, cudaBoundaryModeTrap);

  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreads4(surf, x, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return (int)__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadu1(surf, x, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap);

  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadu2(surf, x, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap);

  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadu4(surf, x, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) long long int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)__surf1Dreadl1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned long long int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadl1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)__surf1Dreadl1(surf, x, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadl1(surf, x, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = __surf1Dreadl2(surf, x, cudaBoundaryModeTrap);

  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadl2(surf, x, cudaBoundaryModeTrap);
}
# 386 "/usr/local/cuda/include/surface_functions.h"
template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap);

  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap);

  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}
# 421 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf2Dreadc1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf2Dreadc2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf2Dreadc4(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf2Dreads1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf2Dreads2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf2Dreads4(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf2Dreadu1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf2Dreadu2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf2Dreadu4(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf2Dreadl1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf2Dreadl2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
# 447 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(T *res, surface<void, 0x02> surf, int x, int y, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s == 1) ? (void)(*(uchar1 *)res = __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(*(ushort1*)res = __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(*(uint1 *)res = __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(*(uint2 *)res = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(*(uint4 *)res = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;

  surf2Dread(&tmp, surf, x, y, (int)sizeof(T), mode);

  return tmp;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(T *res, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surf2Dread<T>(surf, x, y, mode);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return (char)__surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) signed char surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)__surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)__surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = __surf2Dreadc2(surf, x, y, cudaBoundaryModeTrap);

  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadc2(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = __surf2Dreadc4(surf, x, y, cudaBoundaryModeTrap);

  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadc4(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return (short)__surf2Dreads1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)__surf2Dreads1(surf, x, y, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = __surf2Dreads2(surf, x, y, cudaBoundaryModeTrap);

  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreads2(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = __surf2Dreads4(surf, x, y, cudaBoundaryModeTrap);

  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreads4(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return (int)__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap);

  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap);

  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) long long int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)__surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned long long int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)__surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = __surf2Dreadl2(surf, x, y, cudaBoundaryModeTrap);

  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadl2(surf, x, y, cudaBoundaryModeTrap);
}
# 734 "/usr/local/cuda/include/surface_functions.h"
template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap);

  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap);

  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}
# 769 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf3Dreadc1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf3Dreadc2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf3Dreadc4(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf3Dreads1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf3Dreads2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf3Dreads4(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf3Dreadu1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf3Dreadu2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf3Dreadu4(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf3Dreadl1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf3Dreadl2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
# 795 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(T *res, surface<void, 0x03> surf, int x, int y, int z, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s == 1) ? (void)(*(uchar1 *)res = __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(*(ushort1*)res = __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(*(uint1 *)res = __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(*(uint2 *)res = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(*(uint4 *)res = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;

  surf3Dread(&tmp, surf, x, y, z, (int)sizeof(T), mode);

  return tmp;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(T *res, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surf3Dread<T>(surf, x, y, z, mode);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return (char)__surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) signed char surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)__surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)__surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = __surf3Dreadc2(surf, x, y, z, cudaBoundaryModeTrap);

  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadc2(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = __surf3Dreadc4(surf, x, y, z, cudaBoundaryModeTrap);

  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadc4(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return (short)__surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)__surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = __surf3Dreads2(surf, x, y, z, cudaBoundaryModeTrap);

  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreads2(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = __surf3Dreads4(surf, x, y, z, cudaBoundaryModeTrap);

  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreads4(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return (int)__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap);

  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap);

  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) long long int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)__surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned long long int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)__surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = __surf3Dreadl2(surf, x, y, z, cudaBoundaryModeTrap);

  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadl2(surf, x, y, z, cudaBoundaryModeTrap);
}
# 1082 "/usr/local/cuda/include/surface_functions.h"
template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap);

  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap);

  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}
# 1117 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf1DLayeredreadc1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf1DLayeredreadc2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf1DLayeredreadc4(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf1DLayeredreads1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf1DLayeredreads2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf1DLayeredreads4(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf1DLayeredreadu1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf1DLayeredreadu2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf1DLayeredreadu4(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf1DLayeredreadl1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf1DLayeredreadl2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
# 1143 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(T *res, surface<void, 0xF1> surf, int x, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s == 1) ? (void)(*(uchar1 *)res = __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(*(ushort1*)res = __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(*(uint1 *)res = __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(*(uint2 *)res = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(*(uint4 *)res = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;

  surf1DLayeredread(&tmp, surf, x, layer, (int)sizeof(T), mode);

  return tmp;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(T *res, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surf1DLayeredread<T>(surf, x, layer, mode);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (char)__surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) signed char surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)__surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)__surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = __surf1DLayeredreadc2(surf, x, layer, cudaBoundaryModeTrap);

  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadc2(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = __surf1DLayeredreadc4(surf, x, layer, cudaBoundaryModeTrap);

  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadc4(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (short)__surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)__surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = __surf1DLayeredreads2(surf, x, layer, cudaBoundaryModeTrap);

  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreads2(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = __surf1DLayeredreads4(surf, x, layer, cudaBoundaryModeTrap);

  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreads4(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (int)__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap);

  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap);

  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) long long int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)__surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned long long int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)__surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = __surf1DLayeredreadl2(surf, x, layer, cudaBoundaryModeTrap);

  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadl2(surf, x, layer, cudaBoundaryModeTrap);
}
# 1430 "/usr/local/cuda/include/surface_functions.h"
template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap);

  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap);

  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}
# 1465 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf2DLayeredreadc1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf2DLayeredreadc2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf2DLayeredreadc4(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf2DLayeredreads1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf2DLayeredreads2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf2DLayeredreads4(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf2DLayeredreadu1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf2DLayeredreadu2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf2DLayeredreadu4(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf2DLayeredreadl1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf2DLayeredreadl2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
# 1491 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(T *res, surface<void, 0xF2> surf, int x, int y, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s == 1) ? (void)(*(uchar1 *)res = __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(*(ushort1*)res = __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(*(uint1 *)res = __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(*(uint2 *)res = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(*(uint4 *)res = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;

  surf2DLayeredread(&tmp, surf, x, y, layer, (int)sizeof(T), mode);

  return tmp;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(T *res, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surf2DLayeredread<T>(surf, x, y, layer, mode);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (char)__surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) signed char surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)__surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)__surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = __surf2DLayeredreadc2(surf, x, y, layer, cudaBoundaryModeTrap);

  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadc2(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = __surf2DLayeredreadc4(surf, x, y, layer, cudaBoundaryModeTrap);

  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadc4(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (short)__surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)__surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = __surf2DLayeredreads2(surf, x, y, layer, cudaBoundaryModeTrap);

  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreads2(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = __surf2DLayeredreads4(surf, x, y, layer, cudaBoundaryModeTrap);

  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreads4(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (int)__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap);

  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap);

  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) long long int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)__surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned long long int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)__surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = __surf2DLayeredreadl2(surf, x, y, layer, cudaBoundaryModeTrap);

  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadl2(surf, x, y, layer, cudaBoundaryModeTrap);
}
# 1778 "/usr/local/cuda/include/surface_functions.h"
template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap);

  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap);

  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}
# 1813 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surfCubemapreadc1(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surfCubemapreadc2(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surfCubemapreadc4(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surfCubemapreads1(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surfCubemapreads2(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surfCubemapreads4(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surfCubemapreadu1(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surfCubemapreadu2(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surfCubemapreadu4(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surfCubemapreadl1(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surfCubemapreadl2(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
# 1839 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(T *res, surface<void, 0x0C> surf, int x, int y, int face, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s == 1) ? (void)(*(uchar1 *)res = __surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(*(ushort1*)res = __surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(*(uint1 *)res = __surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(*(uint2 *)res = __surfCubemapreadu2(surf, x, y, face, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(*(uint4 *)res = __surfCubemapreadu4(surf, x, y, face, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;

  surfCubemapread(&tmp, surf, x, y, face, (int)sizeof(T), mode);

  return tmp;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(T *res, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surfCubemapread<T>(surf, x, y, face, mode);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return (char)__surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) signed char surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)__surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)__surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = __surfCubemapreadc2(surf, x, y, face, cudaBoundaryModeTrap);

  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadc2(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = __surfCubemapreadc4(surf, x, y, face, cudaBoundaryModeTrap);

  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadc4(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return (short)__surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)__surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = __surfCubemapreads2(surf, x, y, face, cudaBoundaryModeTrap);

  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreads2(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = __surfCubemapreads4(surf, x, y, face, cudaBoundaryModeTrap);

  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreads4(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return (int)__surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)__surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surfCubemapreadu2(surf, x, y, face, cudaBoundaryModeTrap);

  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadu2(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surfCubemapreadu4(surf, x, y, face, cudaBoundaryModeTrap);

  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadu4(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) long long int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)__surfCubemapreadl1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned long long int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadl1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)__surfCubemapreadl1(surf, x, y, face, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadl1(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = __surfCubemapreadl2(surf, x, y, face, cudaBoundaryModeTrap);

  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadl2(surf, x, y, face, cudaBoundaryModeTrap);
}
# 2126 "/usr/local/cuda/include/surface_functions.h"
template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)__surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)__surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surfCubemapreadu2(surf, x, y, face, cudaBoundaryModeTrap);

  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surfCubemapreadu4(surf, x, y, face, cudaBoundaryModeTrap);

  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}
# 2161 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surfCubemapLayeredreadc1(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surfCubemapLayeredreadc2(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surfCubemapLayeredreadc4(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surfCubemapLayeredreads1(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surfCubemapLayeredreads2(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surfCubemapLayeredreads4(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surfCubemapLayeredreadu1(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surfCubemapLayeredreadu2(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surfCubemapLayeredreadu4(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surfCubemapLayeredreadl1(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surfCubemapLayeredreadl2(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
# 2188 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(T *res, surface<void, 0xFC> surf, int x, int y, int layerFace, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s == 1) ? (void)(*(uchar1 *)res = __surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(*(ushort1*)res = __surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(*(uint1 *)res = __surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(*(uint2 *)res = __surfCubemapLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(*(uint4 *)res = __surfCubemapLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;

  surfCubemapLayeredread(&tmp, surf, x, y, layerFace, (int)sizeof(T), mode);

  return tmp;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(T *res, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surfCubemapLayeredread<T>(surf, x, y, layerFace, mode);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return (char)__surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) signed char surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)__surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)__surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = __surfCubemapLayeredreadc2(surf, x, y, layerFace, cudaBoundaryModeTrap);

  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadc2(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = __surfCubemapLayeredreadc4(surf, x, y, layerFace, cudaBoundaryModeTrap);

  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadc4(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return (short)__surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)__surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = __surfCubemapLayeredreads2(surf, x, y, layerFace, cudaBoundaryModeTrap);

  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreads2(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = __surfCubemapLayeredreads4(surf, x, y, layerFace, cudaBoundaryModeTrap);

  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreads4(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return (int)__surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)__surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surfCubemapLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap);

  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surfCubemapLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap);

  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) long long int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)__surfCubemapLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned long long int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)__surfCubemapLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = __surfCubemapLayeredreadl2(surf, x, y, layerFace, cudaBoundaryModeTrap);

  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadl2(surf, x, y, layerFace, cudaBoundaryModeTrap);
}
# 2475 "/usr/local/cuda/include/surface_functions.h"
template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)__surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)__surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surfCubemapLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap);

  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surfCubemapLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap);

  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}
# 2511 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritec1( uchar1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritec2( uchar2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritec4( uchar4 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwrites1( ushort1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwrites2( ushort2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwrites4( ushort4 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwriteu1( uint1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwriteu2( uint2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwriteu4( uint4 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritel1(ulonglong1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritel2(ulonglong2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
# 2537 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(T val, surface<void, 0x01> surf, int x, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(__surf1Dwritec1(tmp.c1, surf, x, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(__surf1Dwrites1(tmp.s1, surf, x, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(__surf1Dwriteu1(tmp.u1, surf, x, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(__surf1Dwriteu2(tmp.u2, surf, x, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(__surf1Dwriteu4(tmp.u4, surf, x, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(T val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surf1Dwrite(val, surf, x, (int)sizeof(T), mode);
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec1(make_uchar1((unsigned char)val), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(signed char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec1(make_uchar1((unsigned char)val), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(unsigned char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec1(make_uchar1(val), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(char1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec1(make_uchar1((unsigned char)val.x), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uchar1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec1(val, surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(char2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uchar2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec2(val, surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(char4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uchar4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec4(val, surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(short val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwrites1(make_ushort1((unsigned short)val), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(unsigned short val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwrites1(make_ushort1(val), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(short1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwrites1(make_ushort1((unsigned short)val.x), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ushort1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwrites1(val, surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(short2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ushort2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwrites2(val, surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(short4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ushort4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwrites4(val, surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu1(make_uint1((unsigned int)val), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(unsigned int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu1(make_uint1(val), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(int1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu1(make_uint1((unsigned int)val.x), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uint1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu1(val, surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(int2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uint2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu2(val, surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(int4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uint4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu4(val, surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(long long int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritel1(make_ulonglong1((unsigned long long int)val), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(unsigned long long int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritel1(make_ulonglong1(val), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(longlong1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ulonglong1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritel1(val, surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(longlong2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ulonglong2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritel2(val, surf, x, cudaBoundaryModeTrap);
}
# 2765 "/usr/local/cuda/include/surface_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(float val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(float1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(float2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu2(make_uint2((unsigned int)__float_as_int(val.x), __float_as_int((unsigned int)val.y)), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(float4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, cudaBoundaryModeTrap);
}
# 2793 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritec1( uchar1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritec2( uchar2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritec4( uchar4 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwrites1( ushort1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwrites2( ushort2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwrites4( ushort4 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwriteu1( uint1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwriteu2( uint2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwriteu4( uint4 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritel1(ulonglong1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritel2(ulonglong2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
# 2819 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(T val, surface<void, 0x02> surf, int x, int y, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(__surf2Dwritec1(tmp.c1, surf, x, y, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(__surf2Dwrites1(tmp.s1, surf, x, y, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(__surf2Dwriteu1(tmp.u1, surf, x, y, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(__surf2Dwriteu2(tmp.u2, surf, x, y, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(__surf2Dwriteu4(tmp.u4, surf, x, y, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(T val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surf2Dwrite(val, surf, x, y, (int)sizeof(T), mode);
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec1(make_uchar1((unsigned char)val), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(signed char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec1(make_uchar1((unsigned char)val), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(unsigned char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec1(make_uchar1(val), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(char1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec1(make_uchar1((unsigned char)val.x), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uchar1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec1(val, surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(char2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uchar2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec2(val, surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(char4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uchar4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec4(val, surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(short val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwrites1(make_ushort1((unsigned short)val), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(unsigned short val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwrites1(make_ushort1(val), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(short1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwrites1(make_ushort1((unsigned short)val.x), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ushort1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwrites1(val, surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(short2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ushort2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwrites2(val, surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(short4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ushort4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwrites4(val, surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu1(make_uint1((unsigned int)val), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(unsigned int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu1(make_uint1(val), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(int1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu1(make_uint1((unsigned int)val.x), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uint1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu1(val, surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(int2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uint2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu2(val, surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(int4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uint4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu4(val, surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(long long int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(unsigned long long int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritel1(make_ulonglong1(val), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(longlong1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ulonglong1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritel1(val, surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(longlong2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ulonglong2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritel2(val, surf, x, y, cudaBoundaryModeTrap);
}
# 3047 "/usr/local/cuda/include/surface_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(float val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(float1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(float2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu2(make_uint2((unsigned int)__float_as_int(val.x), __float_as_int((unsigned int)val.y)), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(float4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, cudaBoundaryModeTrap);
}
# 3075 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritec1( uchar1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritec2( uchar2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritec4( uchar4 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwrites1( ushort1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwrites2( ushort2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwrites4( ushort4 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwriteu1( uint1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwriteu2( uint2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwriteu4( uint4 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritel1(ulonglong1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritel2(ulonglong2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
# 3101 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(T val, surface<void, 0x03> surf, int x, int y, int z, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(__surf3Dwritec1(tmp.c1, surf, x, y, z, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(__surf3Dwrites1(tmp.s1, surf, x, y, z, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(__surf3Dwriteu1(tmp.u1, surf, x, y, z, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(__surf3Dwriteu2(tmp.u2, surf, x, y, z, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(__surf3Dwriteu4(tmp.u4, surf, x, y, z, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(T val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surf3Dwrite(val, surf, x, y, z, (int)sizeof(T), mode);
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec1(make_uchar1((unsigned char)val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(signed char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec1(make_uchar1((unsigned char)val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(unsigned char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec1(make_uchar1(val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(char1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec1(make_uchar1((unsigned char)val.x), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uchar1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec1(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(char2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uchar2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec2(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(char4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uchar4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec4(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(short val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwrites1(make_ushort1((unsigned short)val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(unsigned short val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwrites1(make_ushort1(val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(short1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwrites1(make_ushort1((unsigned short)val.x), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ushort1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwrites1(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(short2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ushort2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwrites2(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(short4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ushort4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwrites4(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu1(make_uint1((unsigned int)val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(unsigned int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu1(make_uint1(val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(int1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu1(make_uint1((unsigned int)val.x), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uint1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu1(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(int2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uint2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu2(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(int4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uint4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu4(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(long long int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(unsigned long long int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritel1(make_ulonglong1(val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(longlong1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ulonglong1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritel1(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(longlong2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ulonglong2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritel2(val, surf, x, y, z, cudaBoundaryModeTrap);
}
# 3329 "/usr/local/cuda/include/surface_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(float val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(float1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(float2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu2(make_uint2((unsigned int)__float_as_int(val.x), __float_as_int((unsigned int)val.y)), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(float4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, z, cudaBoundaryModeTrap);
}
# 3357 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritec1( uchar1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritec2( uchar2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritec4( uchar4 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwrites1( ushort1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwrites2( ushort2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwrites4( ushort4 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwriteu1( uint1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwriteu2( uint2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwriteu4( uint4 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritel1(ulonglong1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritel2(ulonglong2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
# 3383 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(T val, surface<void, 0xF1> surf, int x, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(__surf1DLayeredwritec1(tmp.c1, surf, x, layer, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(__surf1DLayeredwrites1(tmp.s1, surf, x, layer, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(__surf1DLayeredwriteu1(tmp.u1, surf, x, layer, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(__surf1DLayeredwriteu2(tmp.u2, surf, x, layer, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(__surf1DLayeredwriteu4(tmp.u4, surf, x, layer, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(T val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surf1DLayeredwrite(val, surf, x, layer, (int)sizeof(T), mode);
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(signed char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(unsigned char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec1(make_uchar1(val), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(char1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec1(make_uchar1((unsigned char)val.x), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uchar1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec1(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(char2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uchar2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec2(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(char4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uchar4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec4(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(short val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(unsigned short val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwrites1(make_ushort1(val), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(short1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwrites1(make_ushort1((unsigned short)val.x), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ushort1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwrites1(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(short2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ushort2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwrites2(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(short4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ushort4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwrites4(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu1(make_uint1((unsigned int)val), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(unsigned int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu1(make_uint1(val), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(int1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uint1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu1(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(int2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uint2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu2(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(int4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uint4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu4(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(long long int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritel1(make_ulonglong1((unsigned long long int)val), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(unsigned long long int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritel1(make_ulonglong1(val), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(longlong1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ulonglong1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritel1(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(longlong2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ulonglong2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritel2(val, surf, x, layer, cudaBoundaryModeTrap);
}
# 3611 "/usr/local/cuda/include/surface_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(float val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(float1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(float2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu2(make_uint2((unsigned int)__float_as_int(val.x), __float_as_int((unsigned int)val.y)), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(float4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, layer, cudaBoundaryModeTrap);
}
# 3639 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritec1( uchar1 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritec2( uchar2 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritec4( uchar4 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwrites1( ushort1 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwrites2( ushort2 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwrites4( ushort4 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwriteu1( uint1 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwriteu2( uint2 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwriteu4( uint4 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritel1(ulonglong1 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritel2(ulonglong2 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
# 3665 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(T val, surface<void, 0xF2> surf, int x, int y, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(__surf2DLayeredwritec1(tmp.c1, surf, x, y, layer, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(__surf2DLayeredwrites1(tmp.s1, surf, x, y, layer, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(__surf2DLayeredwriteu1(tmp.u1, surf, x, y, layer, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(__surf2DLayeredwriteu2(tmp.u2, surf, x, y, layer, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(__surf2DLayeredwriteu4(tmp.u4, surf, x, y, layer, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(T val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surf2DLayeredwrite(val, surf, x, y, layer, (int)sizeof(T), mode);
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(signed char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(unsigned char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec1(make_uchar1(val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(char1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec1(make_uchar1((unsigned char)val.x), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uchar1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec1(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(char2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uchar2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec2(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(char4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uchar4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec4(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(short val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(unsigned short val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwrites1(make_ushort1(val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(short1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwrites1(make_ushort1((unsigned short)val.x), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ushort1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwrites1(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(short2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ushort2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwrites2(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(short4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ushort4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwrites4(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu1(make_uint1((unsigned int)val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(unsigned int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu1(make_uint1(val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(int1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uint1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu1(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(int2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uint2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu2(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(int4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uint4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu4(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(long long int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(unsigned long long int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritel1(make_ulonglong1(val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(longlong1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ulonglong1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritel1(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(longlong2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ulonglong2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritel2(val, surf, x, y, layer, cudaBoundaryModeTrap);
}
# 3893 "/usr/local/cuda/include/surface_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(float val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(float1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(float2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu2(make_uint2((unsigned int)__float_as_int(val.x), __float_as_int((unsigned int)val.y)), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(float4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, layer, cudaBoundaryModeTrap);
}
# 3920 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapwritec1( uchar1 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapwritec2( uchar2 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapwritec4( uchar4 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapwrites1( ushort1 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapwrites2( ushort2 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapwrites4( ushort4 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapwriteu1( uint1 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapwriteu2( uint2 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapwriteu4( uint4 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapwritel1(ulonglong1 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapwritel2(ulonglong2 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
# 3947 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(T val, surface<void, 0x0C> surf, int x, int y, int face, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(__surfCubemapwritec1(tmp.c1, surf, x, y, face, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(__surfCubemapwrites1(tmp.s1, surf, x, y, face, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(__surfCubemapwriteu1(tmp.u1, surf, x, y, face, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(__surfCubemapwriteu2(tmp.u2, surf, x, y, face, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(__surfCubemapwriteu4(tmp.u4, surf, x, y, face, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(T val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surfCubemapwrite(val, surf, x, y, face, (int)sizeof(T), mode);
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec1(make_uchar1((unsigned char)val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(signed char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec1(make_uchar1((unsigned char)val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(unsigned char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec1(make_uchar1(val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(char1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec1(make_uchar1((unsigned char)val.x), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uchar1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec1(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(char2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uchar2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec2(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(char4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uchar4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec4(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(short val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwrites1(make_ushort1((unsigned short)val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(unsigned short val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwrites1(make_ushort1(val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(short1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwrites1(make_ushort1((unsigned short)val.x), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ushort1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwrites1(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(short2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ushort2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwrites2(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(short4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ushort4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwrites4(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu1(make_uint1((unsigned int)val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(unsigned int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu1(make_uint1(val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(int1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu1(make_uint1((unsigned int)val.x), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uint1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu1(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(int2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uint2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu2(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(int4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uint4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu4(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(long long int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(unsigned long long int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritel1(make_ulonglong1(val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(longlong1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ulonglong1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritel1(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(longlong2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ulonglong2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritel2(val, surf, x, y, face, cudaBoundaryModeTrap);
}
# 4175 "/usr/local/cuda/include/surface_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(float val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(float1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(float2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu2(make_uint2((unsigned int)__float_as_int(val.x), __float_as_int((unsigned int)val.y)), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(float4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, face, cudaBoundaryModeTrap);
}
# 4202 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapLayeredwritec1( uchar1 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapLayeredwritec2( uchar2 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapLayeredwritec4( uchar4 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapLayeredwrites1( ushort1 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapLayeredwrites2( ushort2 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapLayeredwrites4( ushort4 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapLayeredwriteu1( uint1 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapLayeredwriteu2( uint2 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapLayeredwriteu4( uint4 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapLayeredwritel1(ulonglong1 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapLayeredwritel2(ulonglong2 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
# 4229 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(T val, surface<void, 0xFC> surf, int x, int y, int layerFace, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(__surfCubemapLayeredwritec1(tmp.c1, surf, x, y, layerFace, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(__surfCubemapLayeredwrites1(tmp.s1, surf, x, y, layerFace, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(__surfCubemapLayeredwriteu1(tmp.u1, surf, x, y, layerFace, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(__surfCubemapLayeredwriteu2(tmp.u2, surf, x, y, layerFace, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(__surfCubemapLayeredwriteu4(tmp.u4, surf, x, y, layerFace, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(T val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surfCubemapLayeredwrite(val, surf, x, y, layerFace, (int)sizeof(T), mode);
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(signed char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(unsigned char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec1(make_uchar1(val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(char1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec1(make_uchar1((unsigned char)val.x), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uchar1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec1(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(char2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uchar2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec2(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(char4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uchar4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec4(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(short val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(unsigned short val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwrites1(make_ushort1(val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(short1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwrites1(make_ushort1((unsigned short)val.x), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ushort1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwrites1(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(short2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ushort2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwrites2(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(short4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ushort4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwrites4(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu1(make_uint1((unsigned int)val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(unsigned int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu1(make_uint1(val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(int1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uint1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu1(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(int2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uint2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu2(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(int4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uint4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu4(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(long long int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(unsigned long long int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritel1(make_ulonglong1(val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(longlong1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ulonglong1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritel1(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(longlong2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ulonglong2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritel2(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}
# 4457 "/usr/local/cuda/include/surface_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(float val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(float1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(float2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu2(make_uint2((unsigned int)__float_as_int(val.x), __float_as_int((unsigned int)val.y)), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(float4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, layerFace, cudaBoundaryModeTrap);
}
# 9416 "/usr/local/cuda/include/device_functions.h" 2
# 1 "/usr/local/cuda/include/texture_fetch_functions.h" 1
# 61 "/usr/local/cuda/include/texture_fetch_functions.h"
# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 62 "/usr/local/cuda/include/texture_fetch_functions.h" 2
# 74 "/usr/local/cuda/include/texture_fetch_functions.h"
template<class T, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchi(texture<T, 0x01, readMode> t, int4 i);
template<class T, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchi(texture<T, 0x01, readMode> t, int4 i);
template<class T, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchi(texture<T, 0x01, readMode> t, int4 i);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetch(texture<T, texType, readMode> t, float4 i, int d = texType);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetch(texture<T, texType, readMode> t, float4 i, int d = texType);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetch(texture<T, texType, readMode> t, float4 i, int d = texType);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchc(texture<T, texType, readMode> t, float4 i);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchc(texture<T, texType, readMode> t, float4 i);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchc(texture<T, texType, readMode> t, float4 i);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchl(texture<T, texType, readMode> t, float4 i, int l, int d = (texType & 0xF));
template<class T, int texType, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchl(texture<T, texType, readMode> t, float4 i, int l, int d = (texType & 0xF));
template<class T, int texType, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchl(texture<T, texType, readMode> t, float4 i, int l, int d = (texType & 0xF));
template<class T, int texType, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchlc(texture<T, texType, readMode> t, float4 i, int l);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchlc(texture<T, texType, readMode> t, float4 i, int l);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchlc(texture<T, texType, readMode> t, float4 i, int l);







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex1Dfetch(texture<char, 0x01, cudaReadModeElementType> t, int x)
{



  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex1Dfetch(texture<signed char, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex1Dfetch(texture<unsigned char, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex1Dfetch(texture<char1, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex1Dfetch(texture<uchar1, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex1Dfetch(texture<char2, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex1Dfetch(texture<uchar2, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex1Dfetch(texture<char4, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex1Dfetch(texture<uchar4, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex1Dfetch(texture<short, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex1Dfetch(texture<unsigned short, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex1Dfetch(texture<short1, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex1Dfetch(texture<ushort1, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex1Dfetch(texture<short2, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex1Dfetch(texture<ushort2, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex1Dfetch(texture<short4, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex1Dfetch(texture<ushort4, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex1Dfetch(texture<int, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex1Dfetch(texture<unsigned int, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex1Dfetch(texture<int1, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex1Dfetch(texture<uint1, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex1Dfetch(texture<int2, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex1Dfetch(texture<uint2, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex1Dfetch(texture<int4, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex1Dfetch(texture<uint4, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 359 "/usr/local/cuda/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1Dfetch(texture<float, 0x01, cudaReadModeElementType> t, int x)
{
  float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0));

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1Dfetch(texture<float1, 0x01, cudaReadModeElementType> t, int x)
{
  float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0));

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1Dfetch(texture<float2, 0x01, cudaReadModeElementType> t, int x)
{
  float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0));

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1Dfetch(texture<float4, 0x01, cudaReadModeElementType> t, int x)
{
  float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1Dfetch(texture<char, 0x01, cudaReadModeNormalizedFloat> t, int x)
{



  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1Dfetch(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1Dfetch(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1Dfetch(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1Dfetch(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1Dfetch(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1Dfetch(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1Dfetch(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1Dfetch(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1Dfetch(texture<short, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1Dfetch(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1Dfetch(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1Dfetch(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1Dfetch(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1Dfetch(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1Dfetch(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1Dfetch(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex1D(texture<char, 0x01, cudaReadModeElementType> t, float x)
{



  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex1D(texture<signed char, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex1D(texture<unsigned char, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex1D(texture<char1, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex1D(texture<uchar1, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex1D(texture<char2, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex1D(texture<uchar2, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex1D(texture<char4, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex1D(texture<uchar4, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex1D(texture<short, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex1D(texture<unsigned short, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex1D(texture<short1, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex1D(texture<ushort1, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex1D(texture<short2, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex1D(texture<ushort2, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex1D(texture<short4, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex1D(texture<ushort4, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex1D(texture<int, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex1D(texture<unsigned int, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex1D(texture<int1, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex1D(texture<uint1, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex1D(texture<int2, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex1D(texture<uint2, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex1D(texture<int4, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex1D(texture<uint4, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 814 "/usr/local/cuda/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1D(texture<float, 0x01, cudaReadModeElementType> t, float x)
{
  float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0));

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1D(texture<float1, 0x01, cudaReadModeElementType> t, float x)
{
  float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0));

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1D(texture<float2, 0x01, cudaReadModeElementType> t, float x)
{
  float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0));

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1D(texture<float4, 0x01, cudaReadModeElementType> t, float x)
{
  float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1D(texture<char, 0x01, cudaReadModeNormalizedFloat> t, float x)
{



  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1D(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1D(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1D(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1D(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1D(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1D(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1D(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1D(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1D(texture<short, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1D(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1D(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1D(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1D(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1D(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1D(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1D(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex2D(texture<char, 0x02, cudaReadModeElementType> t, float x, float y)
{



  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex2D(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex2D(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex2D(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex2D(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex2D(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex2D(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2D(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex2D(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex2D(texture<short, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex2D(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex2D(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex2D(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex2D(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex2D(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex2D(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex2D(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex2D(texture<int, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex2D(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex2D(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex2D(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex2D(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex2D(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex2D(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex2D(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 1263 "/usr/local/cuda/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2D(texture<float, 0x02, cudaReadModeElementType> t, float x, float y)
{
  float4 v = __ftexfetch(t, make_float4(x, y, 0, 0));

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2D(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  float4 v = __ftexfetch(t, make_float4(x, y, 0, 0));

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2D(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  float4 v = __ftexfetch(t, make_float4(x, y, 0, 0));

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2D(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  float4 v = __ftexfetch(t, make_float4(x, y, 0, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2D(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{



  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2D(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2D(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2D(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2D(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2D(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2D(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2D(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2D(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2D(texture<short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2D(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2D(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2D(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2D(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2D(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2D(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2D(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex1DLayered(texture<char, 0xF1, cudaReadModeElementType> t, float x, int layer)
{



  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex1DLayered(texture<signed char, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex1DLayered(texture<unsigned char, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex1DLayered(texture<char1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex1DLayered(texture<uchar1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex1DLayered(texture<char2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex1DLayered(texture<uchar2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex1DLayered(texture<char4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex1DLayered(texture<uchar4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex1DLayered(texture<short, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex1DLayered(texture<unsigned short, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex1DLayered(texture<short1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex1DLayered(texture<ushort1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex1DLayered(texture<short2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex1DLayered(texture<ushort2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex1DLayered(texture<short4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex1DLayered(texture<ushort4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex1DLayered(texture<int, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex1DLayered(texture<unsigned int, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex1DLayered(texture<int1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex1DLayered(texture<uint1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex1DLayered(texture<int2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex1DLayered(texture<uint2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex1DLayered(texture<int4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex1DLayered(texture<uint4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 1712 "/usr/local/cuda/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayered(texture<float, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayered(texture<float1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayered(texture<float2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayered(texture<float4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayered(texture<char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{



  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayered(texture<signed char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayered(texture<unsigned char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayered(texture<char1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayered(texture<uchar1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayered(texture<char2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayered(texture<uchar2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayered(texture<char4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayered(texture<uchar4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayered(texture<short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayered(texture<unsigned short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayered(texture<short1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayered(texture<ushort1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayered(texture<short2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayered(texture<ushort2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayered(texture<short4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayered(texture<ushort4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex2DLayered(texture<char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{



  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex2DLayered(texture<signed char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex2DLayered(texture<unsigned char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex2DLayered(texture<char1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex2DLayered(texture<uchar1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex2DLayered(texture<char2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex2DLayered(texture<uchar2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2DLayered(texture<char4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex2DLayered(texture<uchar4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex2DLayered(texture<short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex2DLayered(texture<unsigned short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex2DLayered(texture<short1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex2DLayered(texture<ushort1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex2DLayered(texture<short2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex2DLayered(texture<ushort2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex2DLayered(texture<short4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex2DLayered(texture<ushort4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex2DLayered(texture<int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex2DLayered(texture<unsigned int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex2DLayered(texture<int1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex2DLayered(texture<uint1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex2DLayered(texture<int2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex2DLayered(texture<uint2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex2DLayered(texture<int4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex2DLayered(texture<uint4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 2161 "/usr/local/cuda/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayered(texture<float, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer);

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayered(texture<float1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayered(texture<float2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayered(texture<float4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayered(texture<char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{



  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayered(texture<signed char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayered(texture<unsigned char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayered(texture<char1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayered(texture<uchar1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayered(texture<char2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayered(texture<uchar2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayered(texture<char4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayered(texture<uchar4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayered(texture<short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayered(texture<unsigned short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayered(texture<short1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayered(texture<ushort1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayered(texture<short2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayered(texture<ushort2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayered(texture<short4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayered(texture<ushort4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex3D(texture<char, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{



  int4 v = __itexfetch(t, make_float4(x, y, z, 0));


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex3D(texture<signed char, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex3D(texture<unsigned char, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex3D(texture<char1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex3D(texture<uchar1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex3D(texture<char2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex3D(texture<uchar2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex3D(texture<char4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex3D(texture<uchar4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex3D(texture<short, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex3D(texture<unsigned short, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex3D(texture<short1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex3D(texture<ushort1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex3D(texture<short2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex3D(texture<ushort2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex3D(texture<short4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex3D(texture<ushort4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex3D(texture<int, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex3D(texture<unsigned int, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex3D(texture<int1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex3D(texture<uint1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex3D(texture<int2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex3D(texture<uint2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex3D(texture<int4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex3D(texture<uint4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 2610 "/usr/local/cuda/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3D(texture<float, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetch(t, make_float4(x, y, z, 0));

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3D(texture<float1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetch(t, make_float4(x, y, z, 0));

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3D(texture<float2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetch(t, make_float4(x, y, z, 0));

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3D(texture<float4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetch(t, make_float4(x, y, z, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3D(texture<char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{



  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3D(texture<signed char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3D(texture<unsigned char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3D(texture<char1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3D(texture<uchar1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3D(texture<char2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3D(texture<uchar2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3D(texture<char4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3D(texture<uchar4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3D(texture<short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3D(texture<unsigned short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3D(texture<short1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3D(texture<ushort1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3D(texture<short2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3D(texture<ushort2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3D(texture<short4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3D(texture<ushort4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) char texCubemap(texture<char, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{



  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char texCubemap(texture<signed char, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char texCubemap(texture<unsigned char, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 texCubemap(texture<char1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 texCubemap(texture<uchar1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 texCubemap(texture<char2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 texCubemap(texture<uchar2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 texCubemap(texture<char4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 texCubemap(texture<uchar4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short texCubemap(texture<short, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short texCubemap(texture<unsigned short, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 texCubemap(texture<short1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 texCubemap(texture<ushort1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 texCubemap(texture<short2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 texCubemap(texture<ushort2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 texCubemap(texture<short4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 texCubemap(texture<ushort4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int texCubemap(texture<int, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int texCubemap(texture<unsigned int, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 texCubemap(texture<int1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 texCubemap(texture<uint1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 texCubemap(texture<int2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 texCubemap(texture<uint2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 texCubemap(texture<int4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 texCubemap(texture<uint4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 3059 "/usr/local/cuda/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemap(texture<float, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetchc(t, make_float4(x, y, z, 0));

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemap(texture<float1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetchc(t, make_float4(x, y, z, 0));

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemap(texture<float2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetchc(t, make_float4(x, y, z, 0));

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemap(texture<float4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetchc(t, make_float4(x, y, z, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemap(texture<char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{



  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemap(texture<signed char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemap(texture<unsigned char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemap(texture<char1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemap(texture<uchar1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemap(texture<char2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemap(texture<uchar2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemap(texture<char4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemap(texture<uchar4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemap(texture<short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemap(texture<unsigned short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemap(texture<short1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemap(texture<ushort1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemap(texture<short2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemap(texture<ushort2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemap(texture<short4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemap(texture<ushort4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) char texCubemapLayered(texture<char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{



  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char texCubemapLayered(texture<signed char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char texCubemapLayered(texture<unsigned char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 texCubemapLayered(texture<char1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 texCubemapLayered(texture<uchar1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 texCubemapLayered(texture<char2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 texCubemapLayered(texture<uchar2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 texCubemapLayered(texture<char4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 texCubemapLayered(texture<uchar4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short texCubemapLayered(texture<short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short texCubemapLayered(texture<unsigned short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 texCubemapLayered(texture<short1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 texCubemapLayered(texture<ushort1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 texCubemapLayered(texture<short2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 texCubemapLayered(texture<ushort2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 texCubemapLayered(texture<short4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 texCubemapLayered(texture<ushort4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int texCubemapLayered(texture<int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int texCubemapLayered(texture<unsigned int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 texCubemapLayered(texture<int1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 texCubemapLayered(texture<uint1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 texCubemapLayered(texture<int2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 texCubemapLayered(texture<uint2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 texCubemapLayered(texture<int4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 texCubemapLayered(texture<uint4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 3508 "/usr/local/cuda/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayered(texture<float, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer);

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayered(texture<float1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayered(texture<float2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayered(texture<float4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayered(texture<char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{



  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayered(texture<signed char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayered(texture<unsigned char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayered(texture<char1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayered(texture<uchar1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayered(texture<char2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayered(texture<uchar2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayered(texture<char4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayered(texture<uchar4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayered(texture<short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayered(texture<unsigned short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayered(texture<short1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayered(texture<ushort1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayered(texture<short2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayered(texture<ushort2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayered(texture<short4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayered(texture<ushort4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}
# 9417 "/usr/local/cuda/include/device_functions.h" 2
# 1 "/usr/local/cuda/include/texture_indirect_functions.h" 1
# 9418 "/usr/local/cuda/include/device_functions.h" 2
# 1 "/usr/local/cuda/include/surface_indirect_functions.h" 1
# 9419 "/usr/local/cuda/include/device_functions.h" 2
# 80 "/usr/local/cuda/include/cuda_runtime.h" 2
# 1 "/usr/local/cuda/include/device_launch_parameters.h" 1
# 63 "/usr/local/cuda/include/device_launch_parameters.h"
extern "C" {


uint3 __attribute__((device_builtin)) extern const threadIdx;
uint3 __attribute__((device_builtin)) extern const blockIdx;
dim3 __attribute__((device_builtin)) extern const blockDim;
dim3 __attribute__((device_builtin)) extern const gridDim;
int __attribute__((device_builtin)) extern const warpSize;




}
# 81 "/usr/local/cuda/include/cuda_runtime.h" 2
# 92 "/usr/local/cuda/include/cuda_runtime.h"
namespace
{
# 123 "/usr/local/cuda/include/cuda_runtime.h"
template<class T>
__inline__ __attribute__((host)) cudaError_t cudaSetupArgument(
  T arg,
  size_t offset
)
{
  return ::cudaSetupArgument((const void*)&arg, sizeof(T), offset);
}
# 162 "/usr/local/cuda/include/cuda_runtime.h"
static __inline__ __attribute__((host)) cudaError_t cudaEventCreate(
  cudaEvent_t *event,
  unsigned int flags
)
{
  return ::cudaEventCreateWithFlags(event, flags);
}
# 225 "/usr/local/cuda/include/cuda_runtime.h"
__inline__ __attribute__((host)) cudaError_t cudaMallocHost(
  void **ptr,
  size_t size,
  unsigned int flags
)
{
  return ::cudaHostAlloc(ptr, size, flags);
}

template<class T>
__inline__ __attribute__((host)) cudaError_t cudaHostAlloc(
  T **ptr,
  size_t size,
  unsigned int flags
)
{
  return ::cudaHostAlloc((void**)(void*)ptr, size, flags);
}

template<class T>
__inline__ __attribute__((host)) cudaError_t cudaHostGetDevicePointer(
  T **pDevice,
  void *pHost,
  unsigned int flags
)
{
  return ::cudaHostGetDevicePointer((void**)(void*)pDevice, pHost, flags);
}
# 323 "/usr/local/cuda/include/cuda_runtime.h"
template<class T>
__inline__ __attribute__((host)) cudaError_t cudaMallocManaged(
  T **devPtr,
  size_t size,
  unsigned int flags = 0x01
)
{
  return ::cudaMallocManaged((void**)(void*)devPtr, size, flags);
}
# 399 "/usr/local/cuda/include/cuda_runtime.h"
template<class T>
__inline__ __attribute__((host)) cudaError_t cudaStreamAttachMemAsync(
  cudaStream_t stream,
  T *devPtr,
  size_t length = 0,
  unsigned int flags = 0x04
)
{
  return ::cudaStreamAttachMemAsync(stream, (void*)devPtr, length, flags);
}

template<class T>
__inline__ __attribute__((host)) cudaError_t cudaMalloc(
  T **devPtr,
  size_t size
)
{
  return ::cudaMalloc((void**)(void*)devPtr, size);
}

template<class T>
__inline__ __attribute__((host)) cudaError_t cudaMallocHost(
  T **ptr,
  size_t size,
  unsigned int flags = 0
)
{
  return cudaMallocHost((void**)(void*)ptr, size, flags);
}

template<class T>
__inline__ __attribute__((host)) cudaError_t cudaMallocPitch(
  T **devPtr,
  size_t *pitch,
  size_t width,
  size_t height
)
{
  return ::cudaMallocPitch((void**)(void*)devPtr, pitch, width, height);
}
# 475 "/usr/local/cuda/include/cuda_runtime.h"
template<class T>
__inline__ __attribute__((host)) cudaError_t cudaMemcpyToSymbol(
  const T &symbol,
  const void *src,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyHostToDevice
)
{
  return ::cudaMemcpyToSymbol((const void*)&symbol, src, count, offset, kind);
}
# 527 "/usr/local/cuda/include/cuda_runtime.h"
template<class T>
__inline__ __attribute__((host)) cudaError_t cudaMemcpyToSymbolAsync(
  const T &symbol,
  const void *src,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyHostToDevice,
        cudaStream_t stream = 0
)
{
  return ::cudaMemcpyToSymbolAsync((const void*)&symbol, src, count, offset, kind, stream);
}
# 573 "/usr/local/cuda/include/cuda_runtime.h"
template<class T>
__inline__ __attribute__((host)) cudaError_t cudaMemcpyFromSymbol(
        void *dst,
  const T &symbol,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost
)
{
  return ::cudaMemcpyFromSymbol(dst, (const void*)&symbol, count, offset, kind);
}
# 625 "/usr/local/cuda/include/cuda_runtime.h"
template<class T>
__inline__ __attribute__((host)) cudaError_t cudaMemcpyFromSymbolAsync(
        void *dst,
  const T &symbol,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost,
        cudaStream_t stream = 0
)
{
  return ::cudaMemcpyFromSymbolAsync(dst, (const void*)&symbol, count, offset, kind, stream);
}
# 658 "/usr/local/cuda/include/cuda_runtime.h"
template<class T>
__inline__ __attribute__((host)) cudaError_t cudaGetSymbolAddress(
        void **devPtr,
  const T &symbol
)
{
  return ::cudaGetSymbolAddress(devPtr, (const void*)&symbol);
}
# 687 "/usr/local/cuda/include/cuda_runtime.h"
template<class T>
__inline__ __attribute__((host)) cudaError_t cudaGetSymbolSize(
        size_t *size,
  const T &symbol
)
{
  return ::cudaGetSymbolSize(size, (const void*)&symbol);
}
# 730 "/usr/local/cuda/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
__inline__ __attribute__((host)) cudaError_t cudaBindTexture(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
  const struct cudaChannelFormatDesc &desc,
        size_t size = (2147483647 * 2U + 1U)
)
{
  return ::cudaBindTexture(offset, &tex, devPtr, &desc, size);
}
# 775 "/usr/local/cuda/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
__inline__ __attribute__((host)) cudaError_t cudaBindTexture(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
        size_t size = (2147483647 * 2U + 1U)
)
{
  return cudaBindTexture(offset, tex, devPtr, tex.channelDesc, size);
}
# 831 "/usr/local/cuda/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
__inline__ __attribute__((host)) cudaError_t cudaBindTexture2D(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
  const struct cudaChannelFormatDesc &desc,
  size_t width,
  size_t height,
  size_t pitch
)
{
  return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch);
}
# 889 "/usr/local/cuda/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
__inline__ __attribute__((host)) cudaError_t cudaBindTexture2D(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
  size_t width,
  size_t height,
  size_t pitch
)
{
  return ::cudaBindTexture2D(offset, &tex, devPtr, &tex.channelDesc, width, height, pitch);
}
# 931 "/usr/local/cuda/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
__inline__ __attribute__((host)) cudaError_t cudaBindTextureToArray(
  const struct texture<T, dim, readMode> &tex,
  cudaArray_const_t array,
  const struct cudaChannelFormatDesc &desc
)
{
  return ::cudaBindTextureToArray(&tex, array, &desc);
}
# 969 "/usr/local/cuda/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
__inline__ __attribute__((host)) cudaError_t cudaBindTextureToArray(
  const struct texture<T, dim, readMode> &tex,
  cudaArray_const_t array
)
{
  struct cudaChannelFormatDesc desc;
  cudaError_t err = ::cudaGetChannelDesc(&desc, array);

  return err == cudaSuccess ? cudaBindTextureToArray(tex, array, desc) : err;
}
# 1010 "/usr/local/cuda/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
__inline__ __attribute__((host)) cudaError_t cudaBindTextureToMipmappedArray(
  const struct texture<T, dim, readMode> &tex,
  cudaMipmappedArray_const_t mipmappedArray,
  const struct cudaChannelFormatDesc &desc
)
{
  return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc);
}
# 1048 "/usr/local/cuda/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
__inline__ __attribute__((host)) cudaError_t cudaBindTextureToMipmappedArray(
  const struct texture<T, dim, readMode> &tex,
  cudaMipmappedArray_const_t mipmappedArray
)
{
  struct cudaChannelFormatDesc desc;
  cudaArray_t levelArray;
  cudaError_t err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0);

  if (err != cudaSuccess) {
      return err;
  }
  err = ::cudaGetChannelDesc(&desc, levelArray);

  return err == cudaSuccess ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err;
}
# 1087 "/usr/local/cuda/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
__inline__ __attribute__((host)) cudaError_t cudaUnbindTexture(
  const struct texture<T, dim, readMode> &tex
)
{
  return ::cudaUnbindTexture(&tex);
}
# 1121 "/usr/local/cuda/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
__inline__ __attribute__((host)) cudaError_t cudaGetTextureAlignmentOffset(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex
)
{
  return ::cudaGetTextureAlignmentOffset(offset, &tex);
}
# 1174 "/usr/local/cuda/include/cuda_runtime.h"
template<class T>
__inline__ __attribute__((host)) cudaError_t cudaFuncSetCacheConfig(
  T *func,
  enum cudaFuncCache cacheConfig
)
{
  return ::cudaFuncSetCacheConfig((const void*)func, cacheConfig);
}

template<class T>
__inline__ __attribute__((host)) cudaError_t cudaFuncSetSharedMemConfig(
  T *func,
  enum cudaSharedMemConfig config
)
{
  return ::cudaFuncSetSharedMemConfig((const void*)func, config);
}
# 1226 "/usr/local/cuda/include/cuda_runtime.h"
template<class T>
__inline__ __attribute__((host)) cudaError_t cudaLaunch(
  T *func
)
{
  return ::cudaLaunch((const void*)func);
}
# 1264 "/usr/local/cuda/include/cuda_runtime.h"
template<class T>
__inline__ __attribute__((host)) cudaError_t cudaFuncGetAttributes(
  struct cudaFuncAttributes *attr,
  T *entry
)
{
  return ::cudaFuncGetAttributes(attr, (const void*)entry);
}
# 1293 "/usr/local/cuda/include/cuda_runtime.h"
template<class T, int dim>
__inline__ __attribute__((host)) cudaError_t cudaBindSurfaceToArray(
  const struct surface<T, dim> &surf,
  cudaArray_const_t array,
  const struct cudaChannelFormatDesc &desc
)
{
  return ::cudaBindSurfaceToArray(&surf, array, &desc);
}
# 1322 "/usr/local/cuda/include/cuda_runtime.h"
template<class T, int dim>
__inline__ __attribute__((host)) cudaError_t cudaBindSurfaceToArray(
  const struct surface<T, dim> &surf,
  cudaArray_const_t array
)
{
  struct cudaChannelFormatDesc desc;
  cudaError_t err = ::cudaGetChannelDesc(&desc, array);

  return err == cudaSuccess ? cudaBindSurfaceToArray(surf, array, desc) : err;
}





}
# 1 "<command-line>" 2
# 1 "./dscudatmp/mr3.cu"
static char *Ptxdata =
    "	.version 1.4\n"
    "	.target sm_10, map_f64_to_f32\n"
    "	// compiled with /usr/local/cuda-6.0/open64/lib//be\n"
    "	// nvopencc 4.1 built on 2014-03-13\n"
    "\n"
    "	//-----------------------------------------------------------\n"
    "	// Compiling /tmp/tmpxft_0000784f_00000000-9_mr3.cpp3.i (/tmp/ccBI#.eMAVk1)\n"
    "	//-----------------------------------------------------------\n"
    "\n"
    "	//-----------------------------------------------------------\n"
    "	// Options:\n"
    "	//-----------------------------------------------------------\n"
    "	//  Target:ptx, ISA:sm_10, Endian:little, Pointer Size:64\n"
    "	//  -O3	(Optimization level)\n"
    "	//  -g0	(Debug level)\n"
    "	//  -m2	(Report advisories)\n"
    "	//-----------------------------------------------------------\n"
    "\n"
    "	.file	1	\"<command-line>\"\n"
    "	.file	2	\"/tmp/tmpxft_0000784f_00000000-8_mr3.cudafe2.gpu\"\n"
    "	.file	3	\"mr3.cu\"\n"
    "	.file	4	\"/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h\"\n"
    "	.file	5	\"/usr/local/cuda/include/crt/device_runtime.h\"\n"
    "	.file	6	\"/usr/local/cuda/include/host_defines.h\"\n"
    "	.file	7	\"/usr/local/cuda/include/builtin_types.h\"\n"
    "	.file	8	\"/usr/local/cuda/include/device_types.h\"\n"
    "	.file	9	\"/usr/local/cuda/include/driver_types.h\"\n"
    "	.file	10	\"/usr/local/cuda/include/surface_types.h\"\n"
    "	.file	11	\"/usr/local/cuda/include/texture_types.h\"\n"
    "	.file	12	\"/usr/local/cuda/include/vector_types.h\"\n"
    "	.file	13	\"/usr/local/cuda/include/device_launch_parameters.h\"\n"
    "	.file	14	\"/usr/local/cuda/include/crt/storage_class.h\"\n"
    "	.file	15	\"/usr/local/cuda/include/common_functions.h\"\n"
    "	.file	16	\"/usr/local/cuda/include/math_functions.h\"\n"
    "	.file	17	\"/usr/local/cuda/include/math_constants.h\"\n"
    "	.file	18	\"/usr/local/cuda/include/device_functions.h\"\n"
    "	.file	19	\"/usr/local/cuda/include/sm_11_atomic_functions.h\"\n"
    "	.file	20	\"/usr/local/cuda/include/sm_12_atomic_functions.h\"\n"
    "	.file	21	\"/usr/local/cuda/include/sm_13_double_functions.h\"\n"
    "	.file	22	\"/usr/local/cuda/include/sm_20_atomic_functions.h\"\n"
    "	.file	23	\"/usr/local/cuda/include/sm_32_atomic_functions.h\"\n"
    "	.file	24	\"/usr/local/cuda/include/sm_35_atomic_functions.h\"\n"
    "	.file	25	\"/usr/local/cuda/include/sm_20_intrinsics.h\"\n"
    "	.file	26	\"/usr/local/cuda/include/sm_30_intrinsics.h\"\n"
    "	.file	27	\"/usr/local/cuda/include/sm_32_intrinsics.h\"\n"
    "	.file	28	\"/usr/local/cuda/include/sm_35_intrinsics.h\"\n"
    "	.file	29	\"/usr/local/cuda/include/surface_functions.h\"\n"
    "	.file	30	\"/usr/local/cuda/include/texture_fetch_functions.h\"\n"
    "	.file	31	\"/usr/local/cuda/include/texture_indirect_functions.h\"\n"
    "	.file	32	\"/usr/local/cuda/include/surface_indirect_functions.h\"\n"
    "	.file	33	\"/usr/local/cuda/include/math_functions_dbl_ptx1.h\"\n"
    "\n"
    "	.const .align 4 .b8 c_matrix[96] = {0,0,160,63,143,194,21,64,138,228,73,64,209,59,149,61,138,32,14,61,0,0,128,63,0,0,128,63,236,81,48,64,138,228,73,64,174,184,248,62,50,87,26,63,0,0,128,191,0,0,128,63,236,81,48,64,138,228,73,64,174,184,248,62,50,87,26,63,0,0,128,191,0,0,64,63,72,225,74,64,138,228,73,64,176,0,161,64,89,178,33,65,0,0,128,63};\n"
    "\n"
    "	.entry nacl_kernel_if2 (\n"
    "		.param .u64 __cudaparm_nacl_kernel_if2_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_if2_n,\n"
    "		.param .s32 __cudaparm_nacl_kernel_if2_nat,\n"
    "		.param .f32 __cudaparm_nacl_kernel_if2_xmax,\n"
    "		.param .u64 __cudaparm_nacl_kernel_if2_fvec)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<99>;\n"
    "	.reg .u64 %rd<67>;\n"
    "	.reg .f32 %f<1124>;\n"
    "	.reg .pred %p<21>;\n"
    "	.shared .align 4 .b8 __cuda___cuda_local_var_16245_33_non_const_s_fi32[3072];\n"
    "	.shared .align 4 .b8 __cuda___cuda_local_var_16244_35_non_const_s_xj3104[4096];\n"
    "	.loc	3	94	0\n"
    "$LDWbegin_nacl_kernel_if2:\n"
    "	.loc	3	106	0\n"
    "	cvt.s32.u16 	%r1, %tid.x;\n"
    "	cvt.s64.s32 	%rd1, %r1;\n"
    "	mov.u64 	%rd2, __cuda___cuda_local_var_16245_33_non_const_s_fi32;\n"
    "	mul.wide.s32 	%rd3, %r1, 12;\n"
    "	add.u64 	%rd4, %rd2, %rd3;\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	st.shared.f32 	[%rd4+0], %f1;\n"
    "	mov.f32 	%f2, 0f00000000;     	// 0\n"
    "	st.shared.f32 	[%rd4+4], %f2;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	st.shared.f32 	[%rd4+8], %f3;\n"
    "	.loc	3	107	0\n"
    "	and.b32 	%r2, %r1, 15;\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	mul.wide.u16 	%r3, %rh1, 16;\n"
    "	add.u32 	%r4, %r2, %r3;\n"
    "	ld.param.u64 	%rd5, [__cudaparm_nacl_kernel_if2_x];\n"
    "	cvt.s64.s32 	%rd6, %r4;\n"
    "	mul.wide.s32 	%rd7, %r4, 16;\n"
    "	add.u64 	%rd8, %rd5, %rd7;\n"
    "	ld.global.f32 	%f4, [%rd8+0];\n"
    "	mov.f32 	%f5, %f4;\n"
    "	ld.global.f32 	%f6, [%rd8+4];\n"
    "	mov.f32 	%f7, %f6;\n"
    "	ld.global.f32 	%f8, [%rd8+8];\n"
    "	mov.f32 	%f9, %f8;\n"
    "	.loc	3	108	0\n"
    "	ld.global.s32 	%r5, [%rd8+12];\n"
    "	ld.param.s32 	%r6, [__cudaparm_nacl_kernel_if2_nat];\n"
    "	mul.lo.s32 	%r7, %r5, %r6;\n"
    "	ld.param.s32 	%r8, [__cudaparm_nacl_kernel_if2_n];\n"
    "	shr.s32 	%r9, %r8, 31;\n"
    "	mov.s32 	%r10, 255;\n"
    "	and.b32 	%r11, %r9, %r10;\n"
    "	add.s32 	%r12, %r11, %r8;\n"
    "	shr.s32 	%r13, %r12, 8;\n"
    "	shr.s32 	%r14, %r1, 31;\n"
    "	mov.s32 	%r15, 15;\n"
    "	and.b32 	%r16, %r14, %r15;\n"
    "	add.s32 	%r17, %r16, %r1;\n"
    "	shr.s32 	%r18, %r17, 4;\n"
    "	mul.lo.s32 	%r19, %r13, 256;\n"
    "	mov.u32 	%r20, 0;\n"
    "	setp.le.s32 	%p1, %r19, %r20;\n"
    "	@%p1 bra 	$Lt_0_23042;\n"
    "	mov.u64 	%rd9, __cuda___cuda_local_var_16244_35_non_const_s_xj3104;\n"
    "	ld.param.f32 	%f10, [__cudaparm_nacl_kernel_if2_xmax];\n"
    "	rcp.approx.f32 	%f11, %f10;\n"
    "	add.s32 	%r21, %r19, 255;\n"
    "	shr.s32 	%r22, %r21, 31;\n"
    "	mov.s32 	%r23, 255;\n"
    "	and.b32 	%r24, %r22, %r23;\n"
    "	add.s32 	%r25, %r24, %r21;\n"
    "	shr.s32 	%r26, %r25, 8;\n"
    "	mov.s32 	%r27, 271;\n"
    "	sub.s32 	%r28, %r27, %r18;\n"
    "	mul.lo.u64 	%rd10, %rd1, 16;\n"
    "	add.u64 	%rd11, %rd9, %rd10;\n"
    "	shr.s32 	%r29, %r28, 31;\n"
    "	mov.s32 	%r30, 15;\n"
    "	and.b32 	%r31, %r29, %r30;\n"
    "	add.s32 	%r32, %r31, %r28;\n"
    "	shr.s32 	%r33, %r32, 4;\n"
    "	shr.s32 	%r34, %r33, 31;\n"
    "	mov.s32 	%r35, 15;\n"
    "	and.b32 	%r36, %r34, %r35;\n"
    "	add.s32 	%r37, %r36, %r33;\n"
    "	shr.s32 	%r38, %r37, 4;\n"
    "	mul.lo.s32 	%r39, %r38, 256;\n"
    "	add.s32 	%r40, %r18, %r39;\n"
    "	setp.lt.s32 	%p2, %r18, %r40;\n"
    "	mov.s32 	%r41, 0;\n"
    "	mov.u64 	%rd12, c_matrix;\n"
    "	mov.s32 	%r42, %r26;\n"
    "$Lt_0_23554:\n"
    " //<loop> Loop body line 108, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	113	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	114	0\n"
    "	add.s32 	%r43, %r41, %r1;\n"
    "	cvt.s64.s32 	%rd13, %r43;\n"
    "	mul.wide.s32 	%rd14, %r43, 16;\n"
    "	add.u64 	%rd15, %rd5, %rd14;\n"
    "	ld.global.f32 	%f12, [%rd15+0];\n"
    "	st.shared.f32 	[%rd11+0], %f12;\n"
    "	ld.global.f32 	%f13, [%rd15+4];\n"
    "	st.shared.f32 	[%rd11+4], %f13;\n"
    "	ld.global.f32 	%f14, [%rd15+8];\n"
    "	st.shared.f32 	[%rd11+8], %f14;\n"
    "	ld.global.s32 	%r44, [%rd15+12];\n"
    "	st.shared.s32 	[%rd11+12], %r44;\n"
    "	.loc	3	115	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	24	0\n"
    "	mov.s32 	%r45, %r18;\n"
    "	@!%p2 bra 	$Lt_0_23810;\n"
    "	add.s32 	%r46, %r39, 255;\n"
    "	shr.s32 	%r47, %r46, 31;\n"
    "	mov.s32 	%r48, 255;\n"
    "	and.b32 	%r49, %r47, %r48;\n"
    "	add.s32 	%r50, %r49, %r46;\n"
    "	shr.s32 	%r51, %r50, 8;\n"
    "	cvt.s64.s32 	%rd16, %r18;\n"
    "	mul.wide.s32 	%rd17, %r18, 16;\n"
    "	ld.shared.f32 	%f15, [%rd4+0];\n"
    "	ld.shared.f32 	%f16, [%rd4+4];\n"
    "	ld.shared.f32 	%f17, [%rd4+8];\n"
    "	mov.s32 	%r52, %r51;\n"
    "$Lt_0_24322:\n"
    " //<loop> Loop body line 24, nesting depth: 2, estimated iterations: unknown\n"
    "	.loc	3	118	0\n"
    "	add.u64 	%rd18, %rd17, %rd9;\n"
    "	ld.shared.s32 	%r53, [%rd18+12];\n"
    "	add.s32 	%r54, %r53, %r7;\n"
    "	.loc	3	58	0\n"
    "	add.u64 	%rd19, %rd17, %rd9;\n"
    "	ld.shared.f32 	%f18, [%rd19+0];\n"
    "	mov.f32 	%f19, %f5;\n"
    "	sub.f32 	%f20, %f19, %f18;\n"
    "	mov.f32 	%f21, %f20;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f22, %f11, %f21;\n"
    "	cvt.rni.f32.f32 	%f23, %f22;\n"
    "	mul.f32 	%f24, %f10, %f23;\n"
    "	sub.f32 	%f25, %f20, %f24;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	.loc	3	60	0\n"
    "	mov.f32 	%f27, 0f00000000;    	// 0\n"
    "	mad.f32 	%f28, %f25, %f25, %f27;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f29, [%rd19+4];\n"
    "	mov.f32 	%f30, %f7;\n"
    "	sub.f32 	%f31, %f30, %f29;\n"
    "	mov.f32 	%f32, %f31;\n"
    "	mov.f32 	%f33, %f32;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f34, %f11, %f32;\n"
    "	cvt.rni.f32.f32 	%f35, %f34;\n"
    "	mul.f32 	%f36, %f10, %f35;\n"
    "	sub.f32 	%f37, %f31, %f36;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f39, %f37, %f37, %f28;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f40, [%rd19+8];\n"
    "	mov.f32 	%f41, %f9;\n"
    "	sub.f32 	%f42, %f41, %f40;\n"
    "	mov.f32 	%f43, %f42;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f44, %f42, %f11;\n"
    "	cvt.rni.f32.f32 	%f45, %f44;\n"
    "	mul.f32 	%f46, %f10, %f45;\n"
    "	sub.f32 	%f47, %f42, %f46;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f49, %f47, %f47, %f39;\n"
    "	.loc	16	9180	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd20, %r54;\n"
    "	mul.wide.s32 	%rd21, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd21;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f55, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f56, %f54, %f55;\n"
    "	cvt.rzi.f32.f32 	%f57, %f56;\n"
    "	mov.f32 	%f58, %f57;\n"
    "	mov.f32 	%f59, 0fbf317200;    	// -0.693146\n"
    "	mov.f32 	%f60, %f59;\n"
    "	mov.f32 	%f61, %f54;\n"
    "	mad.f32 %f62, %f58, %f60, %f61;\n"
    "	mov.f32 	%f63, %f62;\n"
    "	mov.f32 	%f64, %f57;\n"
    "	mov.f32 	%f65, 0fb5bfbe8e;    	// -1.42861e-06\n"
    "	mov.f32 	%f66, %f65;\n"
    "	mov.f32 	%f67, %f63;\n"
    "	mad.f32 %f68, %f64, %f66, %f67;\n"
    "	mov.f32 	%f63, %f68;\n"
    "	.loc	16	9209	0\n"
    "	mov.f32 	%f69, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f69;\n"
    "	mov.f32 	%f71, %f70;\n"
    "	ex2.approx.ftz.f32 %f72,%f71;\n"
    "	mov.f32 	%f73, %f72;\n"
    "	.loc	3	87	0\n"
    "	mov.f32 	%f74, 0f00000000;    	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f74;\n"
    "	rcp.approx.f32 	%f75, %f50;\n"
    "	mul.f32 	%f76, %f75, %f75;\n"
    "	ld.const.f32 	%f77, [%rd22+12];\n"
    "	ld.const.f32 	%f78, [%rd22+0];\n"
    "	ld.const.f32 	%f79, [%rd22+16];\n"
    "	ld.const.f32 	%f80, [%rd22+20];\n"
    "	mul.f32 	%f81, %f76, %f76;\n"
    "	mul.f32 	%f82, %f75, %f76;\n"
    "	mov.f32 	%f83, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f84, %f77, %f83;\n"
    "	mov.f32 	%f85, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f86, %f78, %f85;\n"
    "	mov.f32 	%f87, 0f41000000;    	// 8\n"
    "	mul.f32 	%f88, %f79, %f87;\n"
    "	mul.f32 	%f89, %f81, %f81;\n"
    "	mul.f32 	%f90, %f84, %f89;\n"
    "	mul.f32 	%f91, %f88, %f89;\n"
    "	mov.f32 	%f92, 0f42d20000;    	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f92;\n"
    "	mov.f32 	%f93, 0fc2d20000;    	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f93;\n"
    "	ex2.approx.f32 	%f94, %f57;\n"
    "	mul.f32 	%f95, %f94, %f73;\n"
    "	mov.f32 	%f96, 0f00000000;    	// 0\n"
    "	selp.f32 	%f97, %f96, %f95, %p5;\n"
    "	mov.f32 	%f98, 0f7f800000;    	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f99, %f98, %f97, %p4;\n"
    "	mul.f32 	%f100, %f86, %f99;\n"
    "	mul.f32 	%f101, %f51, %f100;\n"
    "	mul.f32 	%f102, %f75, %f101;\n"
    "	sub.f32 	%f103, %f102, %f90;\n"
    "	mul.f32 	%f104, %f76, %f91;\n"
    "	sub.f32 	%f105, %f103, %f104;\n"
    "	mad.f32 	%f106, %f80, %f82, %f105;\n"
    "	mov.f32 	%f107, 0f00000000;   	// 0\n"
    "	selp.f32 	%f108, %f107, %f106, %p3;\n"
    "	mov.f32 	%f109, %f26;\n"
    "	mad.f32 	%f15, %f109, %f108, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f110, %f38;\n"
    "	mad.f32 	%f16, %f110, %f108, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f111, %f48;\n"
    "	mad.f32 	%f17, %f111, %f108, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	.loc	3	118	0\n"
    "	ld.shared.s32 	%r55, [%rd18+268];\n"
    "	add.s32 	%r54, %r55, %r7;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f112, [%rd19+256];\n"
    "	mov.f32 	%f113, %f5;\n"
    "	sub.f32 	%f114, %f113, %f112;\n"
    "	mov.f32 	%f115, %f114;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f116, %f11, %f115;\n"
    "	cvt.rni.f32.f32 	%f117, %f116;\n"
    "	mul.f32 	%f118, %f10, %f117;\n"
    "	sub.f32 	%f25, %f114, %f118;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	.loc	3	60	0\n"
    "	mov.f32 	%f119, 0f00000000;   	// 0\n"
    "	mad.f32 	%f120, %f25, %f25, %f119;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f121, [%rd19+260];\n"
    "	mov.f32 	%f122, %f7;\n"
    "	sub.f32 	%f123, %f122, %f121;\n"
    "	mov.f32 	%f124, %f123;\n"
    "	mov.f32 	%f125, %f124;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f126, %f11, %f124;\n"
    "	cvt.rni.f32.f32 	%f127, %f126;\n"
    "	mul.f32 	%f128, %f10, %f127;\n"
    "	sub.f32 	%f37, %f123, %f128;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f129, %f37, %f37, %f120;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f130, [%rd19+264];\n"
    "	mov.f32 	%f131, %f9;\n"
    "	sub.f32 	%f132, %f131, %f130;\n"
    "	mov.f32 	%f133, %f132;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f134, %f132, %f11;\n"
    "	cvt.rni.f32.f32 	%f135, %f134;\n"
    "	mul.f32 	%f136, %f10, %f135;\n"
    "	sub.f32 	%f47, %f132, %f136;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f49, %f47, %f47, %f129;\n"
    "	.loc	16	9180	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd23, %r54;\n"
    "	mul.wide.s32 	%rd24, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd24;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f137, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f138, %f54, %f137;\n"
    "	cvt.rzi.f32.f32 	%f57, %f138;\n"
    "	mov.f32 	%f139, %f57;\n"
    "	mov.f32 	%f140, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f141, %f140;\n"
    "	mov.f32 	%f142, %f54;\n"
    "	mad.f32 %f143, %f139, %f141, %f142;\n"
    "	mov.f32 	%f63, %f143;\n"
    "	mov.f32 	%f144, %f57;\n"
    "	mov.f32 	%f145, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f146, %f145;\n"
    "	mov.f32 	%f147, %f63;\n"
    "	mad.f32 %f148, %f144, %f146, %f147;\n"
    "	mov.f32 	%f63, %f148;\n"
    "	.loc	16	9209	0\n"
    "	mov.f32 	%f149, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f150, %f63, %f149;\n"
    "	mov.f32 	%f151, %f150;\n"
    "	ex2.approx.ftz.f32 %f152,%f151;\n"
    "	mov.f32 	%f73, %f152;\n"
    "	.loc	3	87	0\n"
    "	mov.f32 	%f153, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f153;\n"
    "	rcp.approx.f32 	%f75, %f50;\n"
    "	mul.f32 	%f76, %f75, %f75;\n"
    "	ld.const.f32 	%f77, [%rd22+12];\n"
    "	ld.const.f32 	%f78, [%rd22+0];\n"
    "	ld.const.f32 	%f79, [%rd22+16];\n"
    "	ld.const.f32 	%f80, [%rd22+20];\n"
    "	mul.f32 	%f81, %f76, %f76;\n"
    "	mul.f32 	%f82, %f75, %f76;\n"
    "	mov.f32 	%f154, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f84, %f77, %f154;\n"
    "	mov.f32 	%f155, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f86, %f78, %f155;\n"
    "	mov.f32 	%f156, 0f41000000;   	// 8\n"
    "	mul.f32 	%f88, %f79, %f156;\n"
    "	mul.f32 	%f89, %f81, %f81;\n"
    "	mul.f32 	%f90, %f84, %f89;\n"
    "	mul.f32 	%f91, %f88, %f89;\n"
    "	mov.f32 	%f157, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f157;\n"
    "	mov.f32 	%f158, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f158;\n"
    "	ex2.approx.f32 	%f94, %f57;\n"
    "	mul.f32 	%f95, %f94, %f73;\n"
    "	mov.f32 	%f159, 0f00000000;   	// 0\n"
    "	selp.f32 	%f97, %f159, %f95, %p5;\n"
    "	mov.f32 	%f160, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f99, %f160, %f97, %p4;\n"
    "	mul.f32 	%f100, %f86, %f99;\n"
    "	mul.f32 	%f101, %f51, %f100;\n"
    "	mul.f32 	%f161, %f75, %f101;\n"
    "	sub.f32 	%f103, %f161, %f90;\n"
    "	mul.f32 	%f162, %f76, %f91;\n"
    "	sub.f32 	%f105, %f103, %f162;\n"
    "	mad.f32 	%f106, %f80, %f82, %f105;\n"
    "	mov.f32 	%f163, 0f00000000;   	// 0\n"
    "	selp.f32 	%f108, %f163, %f106, %p3;\n"
    "	mov.f32 	%f164, %f26;\n"
    "	mad.f32 	%f15, %f164, %f108, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f165, %f38;\n"
    "	mad.f32 	%f16, %f165, %f108, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f166, %f48;\n"
    "	mad.f32 	%f17, %f166, %f108, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	.loc	3	118	0\n"
    "	ld.shared.s32 	%r56, [%rd18+524];\n"
    "	add.s32 	%r54, %r56, %r7;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f167, [%rd19+512];\n"
    "	mov.f32 	%f168, %f5;\n"
    "	sub.f32 	%f169, %f168, %f167;\n"
    "	mov.f32 	%f170, %f169;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f171, %f11, %f170;\n"
    "	cvt.rni.f32.f32 	%f172, %f171;\n"
    "	mul.f32 	%f173, %f10, %f172;\n"
    "	sub.f32 	%f25, %f169, %f173;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	.loc	3	60	0\n"
    "	mov.f32 	%f174, 0f00000000;   	// 0\n"
    "	mad.f32 	%f175, %f25, %f25, %f174;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f176, [%rd19+516];\n"
    "	mov.f32 	%f177, %f7;\n"
    "	sub.f32 	%f178, %f177, %f176;\n"
    "	mov.f32 	%f179, %f178;\n"
    "	mov.f32 	%f180, %f179;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f181, %f11, %f179;\n"
    "	cvt.rni.f32.f32 	%f182, %f181;\n"
    "	mul.f32 	%f183, %f10, %f182;\n"
    "	sub.f32 	%f37, %f178, %f183;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f184, %f37, %f37, %f175;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f185, [%rd19+520];\n"
    "	mov.f32 	%f186, %f9;\n"
    "	sub.f32 	%f187, %f186, %f185;\n"
    "	mov.f32 	%f188, %f187;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f189, %f187, %f11;\n"
    "	cvt.rni.f32.f32 	%f190, %f189;\n"
    "	mul.f32 	%f191, %f10, %f190;\n"
    "	sub.f32 	%f47, %f187, %f191;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f49, %f47, %f47, %f184;\n"
    "	.loc	16	9180	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd25, %r54;\n"
    "	mul.wide.s32 	%rd26, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd26;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f192, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f193, %f54, %f192;\n"
    "	cvt.rzi.f32.f32 	%f57, %f193;\n"
    "	mov.f32 	%f194, %f57;\n"
    "	mov.f32 	%f195, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f196, %f195;\n"
    "	mov.f32 	%f197, %f54;\n"
    "	mad.f32 %f198, %f194, %f196, %f197;\n"
    "	mov.f32 	%f63, %f198;\n"
    "	mov.f32 	%f199, %f57;\n"
    "	mov.f32 	%f200, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f201, %f200;\n"
    "	mov.f32 	%f202, %f63;\n"
    "	mad.f32 %f203, %f199, %f201, %f202;\n"
    "	mov.f32 	%f63, %f203;\n"
    "	.loc	16	9209	0\n"
    "	mov.f32 	%f204, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f205, %f63, %f204;\n"
    "	mov.f32 	%f206, %f205;\n"
    "	ex2.approx.ftz.f32 %f207,%f206;\n"
    "	mov.f32 	%f73, %f207;\n"
    "	.loc	3	87	0\n"
    "	mov.f32 	%f208, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f208;\n"
    "	rcp.approx.f32 	%f75, %f50;\n"
    "	mul.f32 	%f76, %f75, %f75;\n"
    "	ld.const.f32 	%f77, [%rd22+12];\n"
    "	ld.const.f32 	%f78, [%rd22+0];\n"
    "	ld.const.f32 	%f79, [%rd22+16];\n"
    "	ld.const.f32 	%f80, [%rd22+20];\n"
    "	mul.f32 	%f81, %f76, %f76;\n"
    "	mul.f32 	%f82, %f75, %f76;\n"
    "	mov.f32 	%f209, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f84, %f77, %f209;\n"
    "	mov.f32 	%f210, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f86, %f78, %f210;\n"
    "	mov.f32 	%f211, 0f41000000;   	// 8\n"
    "	mul.f32 	%f88, %f79, %f211;\n"
    "	mul.f32 	%f89, %f81, %f81;\n"
    "	mul.f32 	%f90, %f84, %f89;\n"
    "	mul.f32 	%f91, %f88, %f89;\n"
    "	mov.f32 	%f212, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f212;\n"
    "	mov.f32 	%f213, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f213;\n"
    "	ex2.approx.f32 	%f94, %f57;\n"
    "	mul.f32 	%f95, %f94, %f73;\n"
    "	mov.f32 	%f214, 0f00000000;   	// 0\n"
    "	selp.f32 	%f97, %f214, %f95, %p5;\n"
    "	mov.f32 	%f215, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f99, %f215, %f97, %p4;\n"
    "	mul.f32 	%f100, %f86, %f99;\n"
    "	mul.f32 	%f101, %f51, %f100;\n"
    "	mul.f32 	%f216, %f75, %f101;\n"
    "	sub.f32 	%f103, %f216, %f90;\n"
    "	mul.f32 	%f217, %f76, %f91;\n"
    "	sub.f32 	%f105, %f103, %f217;\n"
    "	mad.f32 	%f106, %f80, %f82, %f105;\n"
    "	mov.f32 	%f218, 0f00000000;   	// 0\n"
    "	selp.f32 	%f108, %f218, %f106, %p3;\n"
    "	mov.f32 	%f219, %f26;\n"
    "	mad.f32 	%f15, %f219, %f108, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f220, %f38;\n"
    "	mad.f32 	%f16, %f220, %f108, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f221, %f48;\n"
    "	mad.f32 	%f17, %f221, %f108, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	.loc	3	118	0\n"
    "	ld.shared.s32 	%r57, [%rd18+780];\n"
    "	add.s32 	%r54, %r57, %r7;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f222, [%rd19+768];\n"
    "	mov.f32 	%f223, %f5;\n"
    "	sub.f32 	%f224, %f223, %f222;\n"
    "	mov.f32 	%f225, %f224;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f226, %f11, %f225;\n"
    "	cvt.rni.f32.f32 	%f227, %f226;\n"
    "	mul.f32 	%f228, %f10, %f227;\n"
    "	sub.f32 	%f25, %f224, %f228;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	.loc	3	60	0\n"
    "	mov.f32 	%f229, 0f00000000;   	// 0\n"
    "	mad.f32 	%f230, %f25, %f25, %f229;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f231, [%rd19+772];\n"
    "	mov.f32 	%f232, %f7;\n"
    "	sub.f32 	%f233, %f232, %f231;\n"
    "	mov.f32 	%f234, %f233;\n"
    "	mov.f32 	%f235, %f234;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f236, %f11, %f234;\n"
    "	cvt.rni.f32.f32 	%f237, %f236;\n"
    "	mul.f32 	%f238, %f10, %f237;\n"
    "	sub.f32 	%f37, %f233, %f238;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f239, %f37, %f37, %f230;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f240, [%rd19+776];\n"
    "	mov.f32 	%f241, %f9;\n"
    "	sub.f32 	%f242, %f241, %f240;\n"
    "	mov.f32 	%f243, %f242;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f244, %f242, %f11;\n"
    "	cvt.rni.f32.f32 	%f245, %f244;\n"
    "	mul.f32 	%f246, %f10, %f245;\n"
    "	sub.f32 	%f47, %f242, %f246;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f49, %f47, %f47, %f239;\n"
    "	.loc	16	9180	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd27, %r54;\n"
    "	mul.wide.s32 	%rd28, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd28;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f247, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f248, %f54, %f247;\n"
    "	cvt.rzi.f32.f32 	%f57, %f248;\n"
    "	mov.f32 	%f249, %f57;\n"
    "	mov.f32 	%f250, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f251, %f250;\n"
    "	mov.f32 	%f252, %f54;\n"
    "	mad.f32 %f253, %f249, %f251, %f252;\n"
    "	mov.f32 	%f63, %f253;\n"
    "	mov.f32 	%f254, %f57;\n"
    "	mov.f32 	%f255, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f256, %f255;\n"
    "	mov.f32 	%f257, %f63;\n"
    "	mad.f32 %f258, %f254, %f256, %f257;\n"
    "	mov.f32 	%f63, %f258;\n"
    "	.loc	16	9209	0\n"
    "	mov.f32 	%f259, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f260, %f63, %f259;\n"
    "	mov.f32 	%f261, %f260;\n"
    "	ex2.approx.ftz.f32 %f262,%f261;\n"
    "	mov.f32 	%f73, %f262;\n"
    "	.loc	3	87	0\n"
    "	mov.f32 	%f263, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f263;\n"
    "	rcp.approx.f32 	%f75, %f50;\n"
    "	mul.f32 	%f76, %f75, %f75;\n"
    "	ld.const.f32 	%f77, [%rd22+12];\n"
    "	ld.const.f32 	%f78, [%rd22+0];\n"
    "	ld.const.f32 	%f79, [%rd22+16];\n"
    "	ld.const.f32 	%f80, [%rd22+20];\n"
    "	mul.f32 	%f81, %f76, %f76;\n"
    "	mul.f32 	%f82, %f75, %f76;\n"
    "	mov.f32 	%f264, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f84, %f77, %f264;\n"
    "	mov.f32 	%f265, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f86, %f78, %f265;\n"
    "	mov.f32 	%f266, 0f41000000;   	// 8\n"
    "	mul.f32 	%f88, %f79, %f266;\n"
    "	mul.f32 	%f89, %f81, %f81;\n"
    "	mul.f32 	%f90, %f84, %f89;\n"
    "	mul.f32 	%f91, %f88, %f89;\n"
    "	mov.f32 	%f267, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f267;\n"
    "	mov.f32 	%f268, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f268;\n"
    "	ex2.approx.f32 	%f94, %f57;\n"
    "	mul.f32 	%f95, %f94, %f73;\n"
    "	mov.f32 	%f269, 0f00000000;   	// 0\n"
    "	selp.f32 	%f97, %f269, %f95, %p5;\n"
    "	mov.f32 	%f270, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f99, %f270, %f97, %p4;\n"
    "	mul.f32 	%f100, %f86, %f99;\n"
    "	mul.f32 	%f101, %f51, %f100;\n"
    "	mul.f32 	%f271, %f75, %f101;\n"
    "	sub.f32 	%f103, %f271, %f90;\n"
    "	mul.f32 	%f272, %f76, %f91;\n"
    "	sub.f32 	%f105, %f103, %f272;\n"
    "	mad.f32 	%f106, %f80, %f82, %f105;\n"
    "	mov.f32 	%f273, 0f00000000;   	// 0\n"
    "	selp.f32 	%f108, %f273, %f106, %p3;\n"
    "	mov.f32 	%f274, %f26;\n"
    "	mad.f32 	%f15, %f274, %f108, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f275, %f38;\n"
    "	mad.f32 	%f16, %f275, %f108, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f276, %f48;\n"
    "	mad.f32 	%f17, %f276, %f108, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	.loc	3	118	0\n"
    "	ld.shared.s32 	%r58, [%rd18+1036];\n"
    "	add.s32 	%r54, %r58, %r7;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f277, [%rd19+1024];\n"
    "	mov.f32 	%f278, %f5;\n"
    "	sub.f32 	%f279, %f278, %f277;\n"
    "	mov.f32 	%f280, %f279;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f281, %f11, %f280;\n"
    "	cvt.rni.f32.f32 	%f282, %f281;\n"
    "	mul.f32 	%f283, %f10, %f282;\n"
    "	sub.f32 	%f25, %f279, %f283;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	.loc	3	60	0\n"
    "	mov.f32 	%f284, 0f00000000;   	// 0\n"
    "	mad.f32 	%f285, %f25, %f25, %f284;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f286, [%rd19+1028];\n"
    "	mov.f32 	%f287, %f7;\n"
    "	sub.f32 	%f288, %f287, %f286;\n"
    "	mov.f32 	%f289, %f288;\n"
    "	mov.f32 	%f290, %f289;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f291, %f11, %f289;\n"
    "	cvt.rni.f32.f32 	%f292, %f291;\n"
    "	mul.f32 	%f293, %f10, %f292;\n"
    "	sub.f32 	%f37, %f288, %f293;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f294, %f37, %f37, %f285;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f295, [%rd19+1032];\n"
    "	mov.f32 	%f296, %f9;\n"
    "	sub.f32 	%f297, %f296, %f295;\n"
    "	mov.f32 	%f298, %f297;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f299, %f297, %f11;\n"
    "	cvt.rni.f32.f32 	%f300, %f299;\n"
    "	mul.f32 	%f301, %f10, %f300;\n"
    "	sub.f32 	%f47, %f297, %f301;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f49, %f47, %f47, %f294;\n"
    "	.loc	16	9180	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd29, %r54;\n"
    "	mul.wide.s32 	%rd30, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd30;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f302, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f303, %f54, %f302;\n"
    "	cvt.rzi.f32.f32 	%f57, %f303;\n"
    "	mov.f32 	%f304, %f57;\n"
    "	mov.f32 	%f305, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f306, %f305;\n"
    "	mov.f32 	%f307, %f54;\n"
    "	mad.f32 %f308, %f304, %f306, %f307;\n"
    "	mov.f32 	%f63, %f308;\n"
    "	mov.f32 	%f309, %f57;\n"
    "	mov.f32 	%f310, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f311, %f310;\n"
    "	mov.f32 	%f312, %f63;\n"
    "	mad.f32 %f313, %f309, %f311, %f312;\n"
    "	mov.f32 	%f63, %f313;\n"
    "	.loc	16	9209	0\n"
    "	mov.f32 	%f314, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f315, %f63, %f314;\n"
    "	mov.f32 	%f316, %f315;\n"
    "	ex2.approx.ftz.f32 %f317,%f316;\n"
    "	mov.f32 	%f73, %f317;\n"
    "	.loc	3	87	0\n"
    "	mov.f32 	%f318, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f318;\n"
    "	rcp.approx.f32 	%f75, %f50;\n"
    "	mul.f32 	%f76, %f75, %f75;\n"
    "	ld.const.f32 	%f77, [%rd22+12];\n"
    "	ld.const.f32 	%f78, [%rd22+0];\n"
    "	ld.const.f32 	%f79, [%rd22+16];\n"
    "	ld.const.f32 	%f80, [%rd22+20];\n"
    "	mul.f32 	%f81, %f76, %f76;\n"
    "	mul.f32 	%f82, %f75, %f76;\n"
    "	mov.f32 	%f319, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f84, %f77, %f319;\n"
    "	mov.f32 	%f320, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f86, %f78, %f320;\n"
    "	mov.f32 	%f321, 0f41000000;   	// 8\n"
    "	mul.f32 	%f88, %f79, %f321;\n"
    "	mul.f32 	%f89, %f81, %f81;\n"
    "	mul.f32 	%f90, %f84, %f89;\n"
    "	mul.f32 	%f91, %f88, %f89;\n"
    "	mov.f32 	%f322, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f322;\n"
    "	mov.f32 	%f323, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f323;\n"
    "	ex2.approx.f32 	%f94, %f57;\n"
    "	mul.f32 	%f95, %f94, %f73;\n"
    "	mov.f32 	%f324, 0f00000000;   	// 0\n"
    "	selp.f32 	%f97, %f324, %f95, %p5;\n"
    "	mov.f32 	%f325, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f99, %f325, %f97, %p4;\n"
    "	mul.f32 	%f100, %f86, %f99;\n"
    "	mul.f32 	%f101, %f51, %f100;\n"
    "	mul.f32 	%f326, %f75, %f101;\n"
    "	sub.f32 	%f103, %f326, %f90;\n"
    "	mul.f32 	%f327, %f76, %f91;\n"
    "	sub.f32 	%f105, %f103, %f327;\n"
    "	mad.f32 	%f106, %f80, %f82, %f105;\n"
    "	mov.f32 	%f328, 0f00000000;   	// 0\n"
    "	selp.f32 	%f108, %f328, %f106, %p3;\n"
    "	mov.f32 	%f329, %f26;\n"
    "	mad.f32 	%f15, %f329, %f108, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f330, %f38;\n"
    "	mad.f32 	%f16, %f330, %f108, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f331, %f48;\n"
    "	mad.f32 	%f17, %f331, %f108, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	.loc	3	118	0\n"
    "	ld.shared.s32 	%r59, [%rd18+1292];\n"
    "	add.s32 	%r54, %r59, %r7;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f332, [%rd19+1280];\n"
    "	mov.f32 	%f333, %f5;\n"
    "	sub.f32 	%f334, %f333, %f332;\n"
    "	mov.f32 	%f335, %f334;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f336, %f11, %f335;\n"
    "	cvt.rni.f32.f32 	%f337, %f336;\n"
    "	mul.f32 	%f338, %f10, %f337;\n"
    "	sub.f32 	%f25, %f334, %f338;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	.loc	3	60	0\n"
    "	mov.f32 	%f339, 0f00000000;   	// 0\n"
    "	mad.f32 	%f340, %f25, %f25, %f339;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f341, [%rd19+1284];\n"
    "	mov.f32 	%f342, %f7;\n"
    "	sub.f32 	%f343, %f342, %f341;\n"
    "	mov.f32 	%f344, %f343;\n"
    "	mov.f32 	%f345, %f344;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f346, %f11, %f344;\n"
    "	cvt.rni.f32.f32 	%f347, %f346;\n"
    "	mul.f32 	%f348, %f10, %f347;\n"
    "	sub.f32 	%f37, %f343, %f348;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f349, %f37, %f37, %f340;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f350, [%rd19+1288];\n"
    "	mov.f32 	%f351, %f9;\n"
    "	sub.f32 	%f352, %f351, %f350;\n"
    "	mov.f32 	%f353, %f352;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f354, %f352, %f11;\n"
    "	cvt.rni.f32.f32 	%f355, %f354;\n"
    "	mul.f32 	%f356, %f10, %f355;\n"
    "	sub.f32 	%f47, %f352, %f356;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f49, %f47, %f47, %f349;\n"
    "	.loc	16	9180	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd31, %r54;\n"
    "	mul.wide.s32 	%rd32, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd32;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f357, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f358, %f54, %f357;\n"
    "	cvt.rzi.f32.f32 	%f57, %f358;\n"
    "	mov.f32 	%f359, %f57;\n"
    "	mov.f32 	%f360, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f361, %f360;\n"
    "	mov.f32 	%f362, %f54;\n"
    "	mad.f32 %f363, %f359, %f361, %f362;\n"
    "	mov.f32 	%f63, %f363;\n"
    "	mov.f32 	%f364, %f57;\n"
    "	mov.f32 	%f365, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f366, %f365;\n"
    "	mov.f32 	%f367, %f63;\n"
    "	mad.f32 %f368, %f364, %f366, %f367;\n"
    "	mov.f32 	%f63, %f368;\n"
    "	.loc	16	9209	0\n"
    "	mov.f32 	%f369, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f370, %f63, %f369;\n"
    "	mov.f32 	%f371, %f370;\n"
    "	ex2.approx.ftz.f32 %f372,%f371;\n"
    "	mov.f32 	%f73, %f372;\n"
    "	.loc	3	87	0\n"
    "	mov.f32 	%f373, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f373;\n"
    "	rcp.approx.f32 	%f75, %f50;\n"
    "	mul.f32 	%f76, %f75, %f75;\n"
    "	ld.const.f32 	%f77, [%rd22+12];\n"
    "	ld.const.f32 	%f78, [%rd22+0];\n"
    "	ld.const.f32 	%f79, [%rd22+16];\n"
    "	ld.const.f32 	%f80, [%rd22+20];\n"
    "	mul.f32 	%f81, %f76, %f76;\n"
    "	mul.f32 	%f82, %f75, %f76;\n"
    "	mov.f32 	%f374, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f84, %f77, %f374;\n"
    "	mov.f32 	%f375, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f86, %f78, %f375;\n"
    "	mov.f32 	%f376, 0f41000000;   	// 8\n"
    "	mul.f32 	%f88, %f79, %f376;\n"
    "	mul.f32 	%f89, %f81, %f81;\n"
    "	mul.f32 	%f90, %f84, %f89;\n"
    "	mul.f32 	%f91, %f88, %f89;\n"
    "	mov.f32 	%f377, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f377;\n"
    "	mov.f32 	%f378, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f378;\n"
    "	ex2.approx.f32 	%f94, %f57;\n"
    "	mul.f32 	%f95, %f94, %f73;\n"
    "	mov.f32 	%f379, 0f00000000;   	// 0\n"
    "	selp.f32 	%f97, %f379, %f95, %p5;\n"
    "	mov.f32 	%f380, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f99, %f380, %f97, %p4;\n"
    "	mul.f32 	%f100, %f86, %f99;\n"
    "	mul.f32 	%f101, %f51, %f100;\n"
    "	mul.f32 	%f381, %f75, %f101;\n"
    "	sub.f32 	%f103, %f381, %f90;\n"
    "	mul.f32 	%f382, %f76, %f91;\n"
    "	sub.f32 	%f105, %f103, %f382;\n"
    "	mad.f32 	%f106, %f80, %f82, %f105;\n"
    "	mov.f32 	%f383, 0f00000000;   	// 0\n"
    "	selp.f32 	%f108, %f383, %f106, %p3;\n"
    "	mov.f32 	%f384, %f26;\n"
    "	mad.f32 	%f15, %f384, %f108, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f385, %f38;\n"
    "	mad.f32 	%f16, %f385, %f108, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f386, %f48;\n"
    "	mad.f32 	%f17, %f386, %f108, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	.loc	3	118	0\n"
    "	ld.shared.s32 	%r60, [%rd18+1548];\n"
    "	add.s32 	%r54, %r60, %r7;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f387, [%rd19+1536];\n"
    "	mov.f32 	%f388, %f5;\n"
    "	sub.f32 	%f389, %f388, %f387;\n"
    "	mov.f32 	%f390, %f389;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f391, %f11, %f390;\n"
    "	cvt.rni.f32.f32 	%f392, %f391;\n"
    "	mul.f32 	%f393, %f10, %f392;\n"
    "	sub.f32 	%f25, %f389, %f393;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	.loc	3	60	0\n"
    "	mov.f32 	%f394, 0f00000000;   	// 0\n"
    "	mad.f32 	%f395, %f25, %f25, %f394;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f396, [%rd19+1540];\n"
    "	mov.f32 	%f397, %f7;\n"
    "	sub.f32 	%f398, %f397, %f396;\n"
    "	mov.f32 	%f399, %f398;\n"
    "	mov.f32 	%f400, %f399;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f401, %f11, %f399;\n"
    "	cvt.rni.f32.f32 	%f402, %f401;\n"
    "	mul.f32 	%f403, %f10, %f402;\n"
    "	sub.f32 	%f37, %f398, %f403;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f404, %f37, %f37, %f395;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f405, [%rd19+1544];\n"
    "	mov.f32 	%f406, %f9;\n"
    "	sub.f32 	%f407, %f406, %f405;\n"
    "	mov.f32 	%f408, %f407;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f409, %f407, %f11;\n"
    "	cvt.rni.f32.f32 	%f410, %f409;\n"
    "	mul.f32 	%f411, %f10, %f410;\n"
    "	sub.f32 	%f47, %f407, %f411;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f49, %f47, %f47, %f404;\n"
    "	.loc	16	9180	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd33, %r54;\n"
    "	mul.wide.s32 	%rd34, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd34;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f412, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f413, %f54, %f412;\n"
    "	cvt.rzi.f32.f32 	%f57, %f413;\n"
    "	mov.f32 	%f414, %f57;\n"
    "	mov.f32 	%f415, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f416, %f415;\n"
    "	mov.f32 	%f417, %f54;\n"
    "	mad.f32 %f418, %f414, %f416, %f417;\n"
    "	mov.f32 	%f63, %f418;\n"
    "	mov.f32 	%f419, %f57;\n"
    "	mov.f32 	%f420, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f421, %f420;\n"
    "	mov.f32 	%f422, %f63;\n"
    "	mad.f32 %f423, %f419, %f421, %f422;\n"
    "	mov.f32 	%f63, %f423;\n"
    "	.loc	16	9209	0\n"
    "	mov.f32 	%f424, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f425, %f63, %f424;\n"
    "	mov.f32 	%f426, %f425;\n"
    "	ex2.approx.ftz.f32 %f427,%f426;\n"
    "	mov.f32 	%f73, %f427;\n"
    "	.loc	3	87	0\n"
    "	mov.f32 	%f428, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f428;\n"
    "	rcp.approx.f32 	%f75, %f50;\n"
    "	mul.f32 	%f76, %f75, %f75;\n"
    "	ld.const.f32 	%f77, [%rd22+12];\n"
    "	ld.const.f32 	%f78, [%rd22+0];\n"
    "	ld.const.f32 	%f79, [%rd22+16];\n"
    "	ld.const.f32 	%f80, [%rd22+20];\n"
    "	mul.f32 	%f81, %f76, %f76;\n"
    "	mul.f32 	%f82, %f75, %f76;\n"
    "	mov.f32 	%f429, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f84, %f77, %f429;\n"
    "	mov.f32 	%f430, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f86, %f78, %f430;\n"
    "	mov.f32 	%f431, 0f41000000;   	// 8\n"
    "	mul.f32 	%f88, %f79, %f431;\n"
    "	mul.f32 	%f89, %f81, %f81;\n"
    "	mul.f32 	%f90, %f84, %f89;\n"
    "	mul.f32 	%f91, %f88, %f89;\n"
    "	mov.f32 	%f432, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f432;\n"
    "	mov.f32 	%f433, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f433;\n"
    "	ex2.approx.f32 	%f94, %f57;\n"
    "	mul.f32 	%f95, %f94, %f73;\n"
    "	mov.f32 	%f434, 0f00000000;   	// 0\n"
    "	selp.f32 	%f97, %f434, %f95, %p5;\n"
    "	mov.f32 	%f435, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f99, %f435, %f97, %p4;\n"
    "	mul.f32 	%f100, %f86, %f99;\n"
    "	mul.f32 	%f101, %f51, %f100;\n"
    "	mul.f32 	%f436, %f75, %f101;\n"
    "	sub.f32 	%f103, %f436, %f90;\n"
    "	mul.f32 	%f437, %f76, %f91;\n"
    "	sub.f32 	%f105, %f103, %f437;\n"
    "	mad.f32 	%f106, %f80, %f82, %f105;\n"
    "	mov.f32 	%f438, 0f00000000;   	// 0\n"
    "	selp.f32 	%f108, %f438, %f106, %p3;\n"
    "	mov.f32 	%f439, %f26;\n"
    "	mad.f32 	%f15, %f439, %f108, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f440, %f38;\n"
    "	mad.f32 	%f16, %f440, %f108, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f441, %f48;\n"
    "	mad.f32 	%f17, %f441, %f108, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	.loc	3	118	0\n"
    "	ld.shared.s32 	%r61, [%rd18+1804];\n"
    "	add.s32 	%r54, %r61, %r7;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f442, [%rd19+1792];\n"
    "	mov.f32 	%f443, %f5;\n"
    "	sub.f32 	%f444, %f443, %f442;\n"
    "	mov.f32 	%f445, %f444;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f446, %f11, %f445;\n"
    "	cvt.rni.f32.f32 	%f447, %f446;\n"
    "	mul.f32 	%f448, %f10, %f447;\n"
    "	sub.f32 	%f25, %f444, %f448;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	.loc	3	60	0\n"
    "	mov.f32 	%f449, 0f00000000;   	// 0\n"
    "	mad.f32 	%f450, %f25, %f25, %f449;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f451, [%rd19+1796];\n"
    "	mov.f32 	%f452, %f7;\n"
    "	sub.f32 	%f453, %f452, %f451;\n"
    "	mov.f32 	%f454, %f453;\n"
    "	mov.f32 	%f455, %f454;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f456, %f11, %f454;\n"
    "	cvt.rni.f32.f32 	%f457, %f456;\n"
    "	mul.f32 	%f458, %f10, %f457;\n"
    "	sub.f32 	%f37, %f453, %f458;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f459, %f37, %f37, %f450;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f460, [%rd19+1800];\n"
    "	mov.f32 	%f461, %f9;\n"
    "	sub.f32 	%f462, %f461, %f460;\n"
    "	mov.f32 	%f463, %f462;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f464, %f462, %f11;\n"
    "	cvt.rni.f32.f32 	%f465, %f464;\n"
    "	mul.f32 	%f466, %f10, %f465;\n"
    "	sub.f32 	%f47, %f462, %f466;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f49, %f47, %f47, %f459;\n"
    "	.loc	16	9180	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd35, %r54;\n"
    "	mul.wide.s32 	%rd36, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd36;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f467, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f468, %f54, %f467;\n"
    "	cvt.rzi.f32.f32 	%f57, %f468;\n"
    "	mov.f32 	%f469, %f57;\n"
    "	mov.f32 	%f470, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f471, %f470;\n"
    "	mov.f32 	%f472, %f54;\n"
    "	mad.f32 %f473, %f469, %f471, %f472;\n"
    "	mov.f32 	%f63, %f473;\n"
    "	mov.f32 	%f474, %f57;\n"
    "	mov.f32 	%f475, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f476, %f475;\n"
    "	mov.f32 	%f477, %f63;\n"
    "	mad.f32 %f478, %f474, %f476, %f477;\n"
    "	mov.f32 	%f63, %f478;\n"
    "	.loc	16	9209	0\n"
    "	mov.f32 	%f479, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f480, %f63, %f479;\n"
    "	mov.f32 	%f481, %f480;\n"
    "	ex2.approx.ftz.f32 %f482,%f481;\n"
    "	mov.f32 	%f73, %f482;\n"
    "	.loc	3	87	0\n"
    "	mov.f32 	%f483, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f483;\n"
    "	rcp.approx.f32 	%f75, %f50;\n"
    "	mul.f32 	%f76, %f75, %f75;\n"
    "	ld.const.f32 	%f77, [%rd22+12];\n"
    "	ld.const.f32 	%f78, [%rd22+0];\n"
    "	ld.const.f32 	%f79, [%rd22+16];\n"
    "	ld.const.f32 	%f80, [%rd22+20];\n"
    "	mul.f32 	%f81, %f76, %f76;\n"
    "	mul.f32 	%f82, %f75, %f76;\n"
    "	mov.f32 	%f484, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f84, %f77, %f484;\n"
    "	mov.f32 	%f485, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f86, %f78, %f485;\n"
    "	mov.f32 	%f486, 0f41000000;   	// 8\n"
    "	mul.f32 	%f88, %f79, %f486;\n"
    "	mul.f32 	%f89, %f81, %f81;\n"
    "	mul.f32 	%f90, %f84, %f89;\n"
    "	mul.f32 	%f91, %f88, %f89;\n"
    "	mov.f32 	%f487, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f487;\n"
    "	mov.f32 	%f488, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f488;\n"
    "	ex2.approx.f32 	%f94, %f57;\n"
    "	mul.f32 	%f95, %f94, %f73;\n"
    "	mov.f32 	%f489, 0f00000000;   	// 0\n"
    "	selp.f32 	%f97, %f489, %f95, %p5;\n"
    "	mov.f32 	%f490, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f99, %f490, %f97, %p4;\n"
    "	mul.f32 	%f100, %f86, %f99;\n"
    "	mul.f32 	%f101, %f51, %f100;\n"
    "	mul.f32 	%f491, %f75, %f101;\n"
    "	sub.f32 	%f103, %f491, %f90;\n"
    "	mul.f32 	%f492, %f76, %f91;\n"
    "	sub.f32 	%f105, %f103, %f492;\n"
    "	mad.f32 	%f106, %f80, %f82, %f105;\n"
    "	mov.f32 	%f493, 0f00000000;   	// 0\n"
    "	selp.f32 	%f108, %f493, %f106, %p3;\n"
    "	mov.f32 	%f494, %f26;\n"
    "	mad.f32 	%f15, %f494, %f108, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f495, %f38;\n"
    "	mad.f32 	%f16, %f495, %f108, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f496, %f48;\n"
    "	mad.f32 	%f17, %f496, %f108, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	.loc	3	118	0\n"
    "	ld.shared.s32 	%r62, [%rd18+2060];\n"
    "	add.s32 	%r54, %r62, %r7;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f497, [%rd19+2048];\n"
    "	mov.f32 	%f498, %f5;\n"
    "	sub.f32 	%f499, %f498, %f497;\n"
    "	mov.f32 	%f500, %f499;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f501, %f11, %f500;\n"
    "	cvt.rni.f32.f32 	%f502, %f501;\n"
    "	mul.f32 	%f503, %f10, %f502;\n"
    "	sub.f32 	%f25, %f499, %f503;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	.loc	3	60	0\n"
    "	mov.f32 	%f504, 0f00000000;   	// 0\n"
    "	mad.f32 	%f505, %f25, %f25, %f504;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f506, [%rd19+2052];\n"
    "	mov.f32 	%f507, %f7;\n"
    "	sub.f32 	%f508, %f507, %f506;\n"
    "	mov.f32 	%f509, %f508;\n"
    "	mov.f32 	%f510, %f509;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f511, %f11, %f509;\n"
    "	cvt.rni.f32.f32 	%f512, %f511;\n"
    "	mul.f32 	%f513, %f10, %f512;\n"
    "	sub.f32 	%f37, %f508, %f513;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f514, %f37, %f37, %f505;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f515, [%rd19+2056];\n"
    "	mov.f32 	%f516, %f9;\n"
    "	sub.f32 	%f517, %f516, %f515;\n"
    "	mov.f32 	%f518, %f517;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f519, %f517, %f11;\n"
    "	cvt.rni.f32.f32 	%f520, %f519;\n"
    "	mul.f32 	%f521, %f10, %f520;\n"
    "	sub.f32 	%f47, %f517, %f521;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f49, %f47, %f47, %f514;\n"
    "	.loc	16	9180	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd37, %r54;\n"
    "	mul.wide.s32 	%rd38, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd38;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f522, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f523, %f54, %f522;\n"
    "	cvt.rzi.f32.f32 	%f57, %f523;\n"
    "	mov.f32 	%f524, %f57;\n"
    "	mov.f32 	%f525, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f526, %f525;\n"
    "	mov.f32 	%f527, %f54;\n"
    "	mad.f32 %f528, %f524, %f526, %f527;\n"
    "	mov.f32 	%f63, %f528;\n"
    "	mov.f32 	%f529, %f57;\n"
    "	mov.f32 	%f530, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f531, %f530;\n"
    "	mov.f32 	%f532, %f63;\n"
    "	mad.f32 %f533, %f529, %f531, %f532;\n"
    "	mov.f32 	%f63, %f533;\n"
    "	.loc	16	9209	0\n"
    "	mov.f32 	%f534, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f535, %f63, %f534;\n"
    "	mov.f32 	%f536, %f535;\n"
    "	ex2.approx.ftz.f32 %f537,%f536;\n"
    "	mov.f32 	%f73, %f537;\n"
    "	.loc	3	87	0\n"
    "	mov.f32 	%f538, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f538;\n"
    "	rcp.approx.f32 	%f75, %f50;\n"
    "	mul.f32 	%f76, %f75, %f75;\n"
    "	ld.const.f32 	%f77, [%rd22+12];\n"
    "	ld.const.f32 	%f78, [%rd22+0];\n"
    "	ld.const.f32 	%f79, [%rd22+16];\n"
    "	ld.const.f32 	%f80, [%rd22+20];\n"
    "	mul.f32 	%f81, %f76, %f76;\n"
    "	mul.f32 	%f82, %f75, %f76;\n"
    "	mov.f32 	%f539, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f84, %f77, %f539;\n"
    "	mov.f32 	%f540, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f86, %f78, %f540;\n"
    "	mov.f32 	%f541, 0f41000000;   	// 8\n"
    "	mul.f32 	%f88, %f79, %f541;\n"
    "	mul.f32 	%f89, %f81, %f81;\n"
    "	mul.f32 	%f90, %f84, %f89;\n"
    "	mul.f32 	%f91, %f88, %f89;\n"
    "	mov.f32 	%f542, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f542;\n"
    "	mov.f32 	%f543, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f543;\n"
    "	ex2.approx.f32 	%f94, %f57;\n"
    "	mul.f32 	%f95, %f94, %f73;\n"
    "	mov.f32 	%f544, 0f00000000;   	// 0\n"
    "	selp.f32 	%f97, %f544, %f95, %p5;\n"
    "	mov.f32 	%f545, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f99, %f545, %f97, %p4;\n"
    "	mul.f32 	%f100, %f86, %f99;\n"
    "	mul.f32 	%f101, %f51, %f100;\n"
    "	mul.f32 	%f546, %f75, %f101;\n"
    "	sub.f32 	%f103, %f546, %f90;\n"
    "	mul.f32 	%f547, %f76, %f91;\n"
    "	sub.f32 	%f105, %f103, %f547;\n"
    "	mad.f32 	%f106, %f80, %f82, %f105;\n"
    "	mov.f32 	%f548, 0f00000000;   	// 0\n"
    "	selp.f32 	%f108, %f548, %f106, %p3;\n"
    "	mov.f32 	%f549, %f26;\n"
    "	mad.f32 	%f15, %f549, %f108, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f550, %f38;\n"
    "	mad.f32 	%f16, %f550, %f108, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f551, %f48;\n"
    "	mad.f32 	%f17, %f551, %f108, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	.loc	3	118	0\n"
    "	ld.shared.s32 	%r63, [%rd18+2316];\n"
    "	add.s32 	%r54, %r63, %r7;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f552, [%rd19+2304];\n"
    "	mov.f32 	%f553, %f5;\n"
    "	sub.f32 	%f554, %f553, %f552;\n"
    "	mov.f32 	%f555, %f554;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f556, %f11, %f555;\n"
    "	cvt.rni.f32.f32 	%f557, %f556;\n"
    "	mul.f32 	%f558, %f10, %f557;\n"
    "	sub.f32 	%f25, %f554, %f558;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	.loc	3	60	0\n"
    "	mov.f32 	%f559, 0f00000000;   	// 0\n"
    "	mad.f32 	%f560, %f25, %f25, %f559;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f561, [%rd19+2308];\n"
    "	mov.f32 	%f562, %f7;\n"
    "	sub.f32 	%f563, %f562, %f561;\n"
    "	mov.f32 	%f564, %f563;\n"
    "	mov.f32 	%f565, %f564;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f566, %f11, %f564;\n"
    "	cvt.rni.f32.f32 	%f567, %f566;\n"
    "	mul.f32 	%f568, %f10, %f567;\n"
    "	sub.f32 	%f37, %f563, %f568;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f569, %f37, %f37, %f560;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f570, [%rd19+2312];\n"
    "	mov.f32 	%f571, %f9;\n"
    "	sub.f32 	%f572, %f571, %f570;\n"
    "	mov.f32 	%f573, %f572;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f574, %f572, %f11;\n"
    "	cvt.rni.f32.f32 	%f575, %f574;\n"
    "	mul.f32 	%f576, %f10, %f575;\n"
    "	sub.f32 	%f47, %f572, %f576;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f49, %f47, %f47, %f569;\n"
    "	.loc	16	9180	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd39, %r54;\n"
    "	mul.wide.s32 	%rd40, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd40;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f577, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f578, %f54, %f577;\n"
    "	cvt.rzi.f32.f32 	%f57, %f578;\n"
    "	mov.f32 	%f579, %f57;\n"
    "	mov.f32 	%f580, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f581, %f580;\n"
    "	mov.f32 	%f582, %f54;\n"
    "	mad.f32 %f583, %f579, %f581, %f582;\n"
    "	mov.f32 	%f63, %f583;\n"
    "	mov.f32 	%f584, %f57;\n"
    "	mov.f32 	%f585, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f586, %f585;\n"
    "	mov.f32 	%f587, %f63;\n"
    "	mad.f32 %f588, %f584, %f586, %f587;\n"
    "	mov.f32 	%f63, %f588;\n"
    "	.loc	16	9209	0\n"
    "	mov.f32 	%f589, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f590, %f63, %f589;\n"
    "	mov.f32 	%f591, %f590;\n"
    "	ex2.approx.ftz.f32 %f592,%f591;\n"
    "	mov.f32 	%f73, %f592;\n"
    "	.loc	3	87	0\n"
    "	mov.f32 	%f593, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f593;\n"
    "	rcp.approx.f32 	%f75, %f50;\n"
    "	mul.f32 	%f76, %f75, %f75;\n"
    "	ld.const.f32 	%f77, [%rd22+12];\n"
    "	ld.const.f32 	%f78, [%rd22+0];\n"
    "	ld.const.f32 	%f79, [%rd22+16];\n"
    "	ld.const.f32 	%f80, [%rd22+20];\n"
    "	mul.f32 	%f81, %f76, %f76;\n"
    "	mul.f32 	%f82, %f75, %f76;\n"
    "	mov.f32 	%f594, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f84, %f77, %f594;\n"
    "	mov.f32 	%f595, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f86, %f78, %f595;\n"
    "	mov.f32 	%f596, 0f41000000;   	// 8\n"
    "	mul.f32 	%f88, %f79, %f596;\n"
    "	mul.f32 	%f89, %f81, %f81;\n"
    "	mul.f32 	%f90, %f84, %f89;\n"
    "	mul.f32 	%f91, %f88, %f89;\n"
    "	mov.f32 	%f597, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f597;\n"
    "	mov.f32 	%f598, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f598;\n"
    "	ex2.approx.f32 	%f94, %f57;\n"
    "	mul.f32 	%f95, %f94, %f73;\n"
    "	mov.f32 	%f599, 0f00000000;   	// 0\n"
    "	selp.f32 	%f97, %f599, %f95, %p5;\n"
    "	mov.f32 	%f600, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f99, %f600, %f97, %p4;\n"
    "	mul.f32 	%f100, %f86, %f99;\n"
    "	mul.f32 	%f101, %f51, %f100;\n"
    "	mul.f32 	%f601, %f75, %f101;\n"
    "	sub.f32 	%f103, %f601, %f90;\n"
    "	mul.f32 	%f602, %f76, %f91;\n"
    "	sub.f32 	%f105, %f103, %f602;\n"
    "	mad.f32 	%f106, %f80, %f82, %f105;\n"
    "	mov.f32 	%f603, 0f00000000;   	// 0\n"
    "	selp.f32 	%f108, %f603, %f106, %p3;\n"
    "	mov.f32 	%f604, %f26;\n"
    "	mad.f32 	%f15, %f604, %f108, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f605, %f38;\n"
    "	mad.f32 	%f16, %f605, %f108, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f606, %f48;\n"
    "	mad.f32 	%f17, %f606, %f108, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	.loc	3	118	0\n"
    "	ld.shared.s32 	%r64, [%rd18+2572];\n"
    "	add.s32 	%r54, %r64, %r7;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f607, [%rd19+2560];\n"
    "	mov.f32 	%f608, %f5;\n"
    "	sub.f32 	%f609, %f608, %f607;\n"
    "	mov.f32 	%f610, %f609;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f611, %f11, %f610;\n"
    "	cvt.rni.f32.f32 	%f612, %f611;\n"
    "	mul.f32 	%f613, %f10, %f612;\n"
    "	sub.f32 	%f25, %f609, %f613;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	.loc	3	60	0\n"
    "	mov.f32 	%f614, 0f00000000;   	// 0\n"
    "	mad.f32 	%f615, %f25, %f25, %f614;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f616, [%rd19+2564];\n"
    "	mov.f32 	%f617, %f7;\n"
    "	sub.f32 	%f618, %f617, %f616;\n"
    "	mov.f32 	%f619, %f618;\n"
    "	mov.f32 	%f620, %f619;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f621, %f11, %f619;\n"
    "	cvt.rni.f32.f32 	%f622, %f621;\n"
    "	mul.f32 	%f623, %f10, %f622;\n"
    "	sub.f32 	%f37, %f618, %f623;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f624, %f37, %f37, %f615;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f625, [%rd19+2568];\n"
    "	mov.f32 	%f626, %f9;\n"
    "	sub.f32 	%f627, %f626, %f625;\n"
    "	mov.f32 	%f628, %f627;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f629, %f627, %f11;\n"
    "	cvt.rni.f32.f32 	%f630, %f629;\n"
    "	mul.f32 	%f631, %f10, %f630;\n"
    "	sub.f32 	%f47, %f627, %f631;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f49, %f47, %f47, %f624;\n"
    "	.loc	16	9180	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd41, %r54;\n"
    "	mul.wide.s32 	%rd42, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd42;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f632, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f633, %f54, %f632;\n"
    "	cvt.rzi.f32.f32 	%f57, %f633;\n"
    "	mov.f32 	%f634, %f57;\n"
    "	mov.f32 	%f635, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f636, %f635;\n"
    "	mov.f32 	%f637, %f54;\n"
    "	mad.f32 %f638, %f634, %f636, %f637;\n"
    "	mov.f32 	%f63, %f638;\n"
    "	mov.f32 	%f639, %f57;\n"
    "	mov.f32 	%f640, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f641, %f640;\n"
    "	mov.f32 	%f642, %f63;\n"
    "	mad.f32 %f643, %f639, %f641, %f642;\n"
    "	mov.f32 	%f63, %f643;\n"
    "	.loc	16	9209	0\n"
    "	mov.f32 	%f644, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f645, %f63, %f644;\n"
    "	mov.f32 	%f646, %f645;\n"
    "	ex2.approx.ftz.f32 %f647,%f646;\n"
    "	mov.f32 	%f73, %f647;\n"
    "	.loc	3	87	0\n"
    "	mov.f32 	%f648, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f648;\n"
    "	rcp.approx.f32 	%f75, %f50;\n"
    "	mul.f32 	%f76, %f75, %f75;\n"
    "	ld.const.f32 	%f77, [%rd22+12];\n"
    "	ld.const.f32 	%f78, [%rd22+0];\n"
    "	ld.const.f32 	%f79, [%rd22+16];\n"
    "	ld.const.f32 	%f80, [%rd22+20];\n"
    "	mul.f32 	%f81, %f76, %f76;\n"
    "	mul.f32 	%f82, %f75, %f76;\n"
    "	mov.f32 	%f649, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f84, %f77, %f649;\n"
    "	mov.f32 	%f650, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f86, %f78, %f650;\n"
    "	mov.f32 	%f651, 0f41000000;   	// 8\n"
    "	mul.f32 	%f88, %f79, %f651;\n"
    "	mul.f32 	%f89, %f81, %f81;\n"
    "	mul.f32 	%f90, %f84, %f89;\n"
    "	mul.f32 	%f91, %f88, %f89;\n"
    "	mov.f32 	%f652, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f652;\n"
    "	mov.f32 	%f653, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f653;\n"
    "	ex2.approx.f32 	%f94, %f57;\n"
    "	mul.f32 	%f95, %f94, %f73;\n"
    "	mov.f32 	%f654, 0f00000000;   	// 0\n"
    "	selp.f32 	%f97, %f654, %f95, %p5;\n"
    "	mov.f32 	%f655, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f99, %f655, %f97, %p4;\n"
    "	mul.f32 	%f100, %f86, %f99;\n"
    "	mul.f32 	%f101, %f51, %f100;\n"
    "	mul.f32 	%f656, %f75, %f101;\n"
    "	sub.f32 	%f103, %f656, %f90;\n"
    "	mul.f32 	%f657, %f76, %f91;\n"
    "	sub.f32 	%f105, %f103, %f657;\n"
    "	mad.f32 	%f106, %f80, %f82, %f105;\n"
    "	mov.f32 	%f658, 0f00000000;   	// 0\n"
    "	selp.f32 	%f108, %f658, %f106, %p3;\n"
    "	mov.f32 	%f659, %f26;\n"
    "	mad.f32 	%f15, %f659, %f108, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f660, %f38;\n"
    "	mad.f32 	%f16, %f660, %f108, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f661, %f48;\n"
    "	mad.f32 	%f17, %f661, %f108, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	.loc	3	118	0\n"
    "	ld.shared.s32 	%r65, [%rd18+2828];\n"
    "	add.s32 	%r54, %r65, %r7;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f662, [%rd19+2816];\n"
    "	mov.f32 	%f663, %f5;\n"
    "	sub.f32 	%f664, %f663, %f662;\n"
    "	mov.f32 	%f665, %f664;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f666, %f11, %f665;\n"
    "	cvt.rni.f32.f32 	%f667, %f666;\n"
    "	mul.f32 	%f668, %f10, %f667;\n"
    "	sub.f32 	%f25, %f664, %f668;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	.loc	3	60	0\n"
    "	mov.f32 	%f669, 0f00000000;   	// 0\n"
    "	mad.f32 	%f670, %f25, %f25, %f669;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f671, [%rd19+2820];\n"
    "	mov.f32 	%f672, %f7;\n"
    "	sub.f32 	%f673, %f672, %f671;\n"
    "	mov.f32 	%f674, %f673;\n"
    "	mov.f32 	%f675, %f674;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f676, %f11, %f674;\n"
    "	cvt.rni.f32.f32 	%f677, %f676;\n"
    "	mul.f32 	%f678, %f10, %f677;\n"
    "	sub.f32 	%f37, %f673, %f678;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f679, %f37, %f37, %f670;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f680, [%rd19+2824];\n"
    "	mov.f32 	%f681, %f9;\n"
    "	sub.f32 	%f682, %f681, %f680;\n"
    "	mov.f32 	%f683, %f682;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f684, %f682, %f11;\n"
    "	cvt.rni.f32.f32 	%f685, %f684;\n"
    "	mul.f32 	%f686, %f10, %f685;\n"
    "	sub.f32 	%f47, %f682, %f686;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f49, %f47, %f47, %f679;\n"
    "	.loc	16	9180	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd43, %r54;\n"
    "	mul.wide.s32 	%rd44, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd44;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f687, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f688, %f54, %f687;\n"
    "	cvt.rzi.f32.f32 	%f57, %f688;\n"
    "	mov.f32 	%f689, %f57;\n"
    "	mov.f32 	%f690, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f691, %f690;\n"
    "	mov.f32 	%f692, %f54;\n"
    "	mad.f32 %f693, %f689, %f691, %f692;\n"
    "	mov.f32 	%f63, %f693;\n"
    "	mov.f32 	%f694, %f57;\n"
    "	mov.f32 	%f695, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f696, %f695;\n"
    "	mov.f32 	%f697, %f63;\n"
    "	mad.f32 %f698, %f694, %f696, %f697;\n"
    "	mov.f32 	%f63, %f698;\n"
    "	.loc	16	9209	0\n"
    "	mov.f32 	%f699, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f700, %f63, %f699;\n"
    "	mov.f32 	%f701, %f700;\n"
    "	ex2.approx.ftz.f32 %f702,%f701;\n"
    "	mov.f32 	%f73, %f702;\n"
    "	.loc	3	87	0\n"
    "	mov.f32 	%f703, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f703;\n"
    "	rcp.approx.f32 	%f75, %f50;\n"
    "	mul.f32 	%f76, %f75, %f75;\n"
    "	ld.const.f32 	%f77, [%rd22+12];\n"
    "	ld.const.f32 	%f78, [%rd22+0];\n"
    "	ld.const.f32 	%f79, [%rd22+16];\n"
    "	ld.const.f32 	%f80, [%rd22+20];\n"
    "	mul.f32 	%f81, %f76, %f76;\n"
    "	mul.f32 	%f82, %f75, %f76;\n"
    "	mov.f32 	%f704, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f84, %f77, %f704;\n"
    "	mov.f32 	%f705, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f86, %f78, %f705;\n"
    "	mov.f32 	%f706, 0f41000000;   	// 8\n"
    "	mul.f32 	%f88, %f79, %f706;\n"
    "	mul.f32 	%f89, %f81, %f81;\n"
    "	mul.f32 	%f90, %f84, %f89;\n"
    "	mul.f32 	%f91, %f88, %f89;\n"
    "	mov.f32 	%f707, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f707;\n"
    "	mov.f32 	%f708, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f708;\n"
    "	ex2.approx.f32 	%f94, %f57;\n"
    "	mul.f32 	%f95, %f94, %f73;\n"
    "	mov.f32 	%f709, 0f00000000;   	// 0\n"
    "	selp.f32 	%f97, %f709, %f95, %p5;\n"
    "	mov.f32 	%f710, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f99, %f710, %f97, %p4;\n"
    "	mul.f32 	%f100, %f86, %f99;\n"
    "	mul.f32 	%f101, %f51, %f100;\n"
    "	mul.f32 	%f711, %f75, %f101;\n"
    "	sub.f32 	%f103, %f711, %f90;\n"
    "	mul.f32 	%f712, %f76, %f91;\n"
    "	sub.f32 	%f105, %f103, %f712;\n"
    "	mad.f32 	%f106, %f80, %f82, %f105;\n"
    "	mov.f32 	%f713, 0f00000000;   	// 0\n"
    "	selp.f32 	%f108, %f713, %f106, %p3;\n"
    "	mov.f32 	%f714, %f26;\n"
    "	mad.f32 	%f15, %f714, %f108, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f715, %f38;\n"
    "	mad.f32 	%f16, %f715, %f108, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f716, %f48;\n"
    "	mad.f32 	%f17, %f716, %f108, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	.loc	3	118	0\n"
    "	ld.shared.s32 	%r66, [%rd18+3084];\n"
    "	add.s32 	%r54, %r66, %r7;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f717, [%rd19+3072];\n"
    "	mov.f32 	%f718, %f5;\n"
    "	sub.f32 	%f719, %f718, %f717;\n"
    "	mov.f32 	%f720, %f719;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f721, %f11, %f720;\n"
    "	cvt.rni.f32.f32 	%f722, %f721;\n"
    "	mul.f32 	%f723, %f10, %f722;\n"
    "	sub.f32 	%f25, %f719, %f723;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	.loc	3	60	0\n"
    "	mov.f32 	%f724, 0f00000000;   	// 0\n"
    "	mad.f32 	%f725, %f25, %f25, %f724;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f726, [%rd19+3076];\n"
    "	mov.f32 	%f727, %f7;\n"
    "	sub.f32 	%f728, %f727, %f726;\n"
    "	mov.f32 	%f729, %f728;\n"
    "	mov.f32 	%f730, %f729;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f731, %f11, %f729;\n"
    "	cvt.rni.f32.f32 	%f732, %f731;\n"
    "	mul.f32 	%f733, %f10, %f732;\n"
    "	sub.f32 	%f37, %f728, %f733;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f734, %f37, %f37, %f725;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f735, [%rd19+3080];\n"
    "	mov.f32 	%f736, %f9;\n"
    "	sub.f32 	%f737, %f736, %f735;\n"
    "	mov.f32 	%f738, %f737;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f739, %f737, %f11;\n"
    "	cvt.rni.f32.f32 	%f740, %f739;\n"
    "	mul.f32 	%f741, %f10, %f740;\n"
    "	sub.f32 	%f47, %f737, %f741;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f49, %f47, %f47, %f734;\n"
    "	.loc	16	9180	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd45, %r54;\n"
    "	mul.wide.s32 	%rd46, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd46;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f742, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f743, %f54, %f742;\n"
    "	cvt.rzi.f32.f32 	%f57, %f743;\n"
    "	mov.f32 	%f744, %f57;\n"
    "	mov.f32 	%f745, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f746, %f745;\n"
    "	mov.f32 	%f747, %f54;\n"
    "	mad.f32 %f748, %f744, %f746, %f747;\n"
    "	mov.f32 	%f63, %f748;\n"
    "	mov.f32 	%f749, %f57;\n"
    "	mov.f32 	%f750, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f751, %f750;\n"
    "	mov.f32 	%f752, %f63;\n"
    "	mad.f32 %f753, %f749, %f751, %f752;\n"
    "	mov.f32 	%f63, %f753;\n"
    "	.loc	16	9209	0\n"
    "	mov.f32 	%f754, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f755, %f63, %f754;\n"
    "	mov.f32 	%f756, %f755;\n"
    "	ex2.approx.ftz.f32 %f757,%f756;\n"
    "	mov.f32 	%f73, %f757;\n"
    "	.loc	3	87	0\n"
    "	mov.f32 	%f758, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f758;\n"
    "	rcp.approx.f32 	%f75, %f50;\n"
    "	mul.f32 	%f76, %f75, %f75;\n"
    "	ld.const.f32 	%f77, [%rd22+12];\n"
    "	ld.const.f32 	%f78, [%rd22+0];\n"
    "	ld.const.f32 	%f79, [%rd22+16];\n"
    "	ld.const.f32 	%f80, [%rd22+20];\n"
    "	mul.f32 	%f81, %f76, %f76;\n"
    "	mul.f32 	%f82, %f75, %f76;\n"
    "	mov.f32 	%f759, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f84, %f77, %f759;\n"
    "	mov.f32 	%f760, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f86, %f78, %f760;\n"
    "	mov.f32 	%f761, 0f41000000;   	// 8\n"
    "	mul.f32 	%f88, %f79, %f761;\n"
    "	mul.f32 	%f89, %f81, %f81;\n"
    "	mul.f32 	%f90, %f84, %f89;\n"
    "	mul.f32 	%f91, %f88, %f89;\n"
    "	mov.f32 	%f762, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f762;\n"
    "	mov.f32 	%f763, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f763;\n"
    "	ex2.approx.f32 	%f94, %f57;\n"
    "	mul.f32 	%f95, %f94, %f73;\n"
    "	mov.f32 	%f764, 0f00000000;   	// 0\n"
    "	selp.f32 	%f97, %f764, %f95, %p5;\n"
    "	mov.f32 	%f765, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f99, %f765, %f97, %p4;\n"
    "	mul.f32 	%f100, %f86, %f99;\n"
    "	mul.f32 	%f101, %f51, %f100;\n"
    "	mul.f32 	%f766, %f75, %f101;\n"
    "	sub.f32 	%f103, %f766, %f90;\n"
    "	mul.f32 	%f767, %f76, %f91;\n"
    "	sub.f32 	%f105, %f103, %f767;\n"
    "	mad.f32 	%f106, %f80, %f82, %f105;\n"
    "	mov.f32 	%f768, 0f00000000;   	// 0\n"
    "	selp.f32 	%f108, %f768, %f106, %p3;\n"
    "	mov.f32 	%f769, %f26;\n"
    "	mad.f32 	%f15, %f769, %f108, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f770, %f38;\n"
    "	mad.f32 	%f16, %f770, %f108, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f771, %f48;\n"
    "	mad.f32 	%f17, %f771, %f108, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	.loc	3	118	0\n"
    "	ld.shared.s32 	%r67, [%rd18+3340];\n"
    "	add.s32 	%r54, %r67, %r7;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f772, [%rd19+3328];\n"
    "	mov.f32 	%f773, %f5;\n"
    "	sub.f32 	%f774, %f773, %f772;\n"
    "	mov.f32 	%f775, %f774;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f776, %f11, %f775;\n"
    "	cvt.rni.f32.f32 	%f777, %f776;\n"
    "	mul.f32 	%f778, %f10, %f777;\n"
    "	sub.f32 	%f25, %f774, %f778;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	.loc	3	60	0\n"
    "	mov.f32 	%f779, 0f00000000;   	// 0\n"
    "	mad.f32 	%f780, %f25, %f25, %f779;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f781, [%rd19+3332];\n"
    "	mov.f32 	%f782, %f7;\n"
    "	sub.f32 	%f783, %f782, %f781;\n"
    "	mov.f32 	%f784, %f783;\n"
    "	mov.f32 	%f785, %f784;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f786, %f11, %f784;\n"
    "	cvt.rni.f32.f32 	%f787, %f786;\n"
    "	mul.f32 	%f788, %f10, %f787;\n"
    "	sub.f32 	%f37, %f783, %f788;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f789, %f37, %f37, %f780;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f790, [%rd19+3336];\n"
    "	mov.f32 	%f791, %f9;\n"
    "	sub.f32 	%f792, %f791, %f790;\n"
    "	mov.f32 	%f793, %f792;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f794, %f792, %f11;\n"
    "	cvt.rni.f32.f32 	%f795, %f794;\n"
    "	mul.f32 	%f796, %f10, %f795;\n"
    "	sub.f32 	%f47, %f792, %f796;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f49, %f47, %f47, %f789;\n"
    "	.loc	16	9180	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd47, %r54;\n"
    "	mul.wide.s32 	%rd48, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd48;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f797, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f798, %f54, %f797;\n"
    "	cvt.rzi.f32.f32 	%f57, %f798;\n"
    "	mov.f32 	%f799, %f57;\n"
    "	mov.f32 	%f800, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f801, %f800;\n"
    "	mov.f32 	%f802, %f54;\n"
    "	mad.f32 %f803, %f799, %f801, %f802;\n"
    "	mov.f32 	%f63, %f803;\n"
    "	mov.f32 	%f804, %f57;\n"
    "	mov.f32 	%f805, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f806, %f805;\n"
    "	mov.f32 	%f807, %f63;\n"
    "	mad.f32 %f808, %f804, %f806, %f807;\n"
    "	mov.f32 	%f63, %f808;\n"
    "	.loc	16	9209	0\n"
    "	mov.f32 	%f809, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f810, %f63, %f809;\n"
    "	mov.f32 	%f811, %f810;\n"
    "	ex2.approx.ftz.f32 %f812,%f811;\n"
    "	mov.f32 	%f73, %f812;\n"
    "	.loc	3	87	0\n"
    "	mov.f32 	%f813, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f813;\n"
    "	rcp.approx.f32 	%f75, %f50;\n"
    "	mul.f32 	%f76, %f75, %f75;\n"
    "	ld.const.f32 	%f77, [%rd22+12];\n"
    "	ld.const.f32 	%f78, [%rd22+0];\n"
    "	ld.const.f32 	%f79, [%rd22+16];\n"
    "	ld.const.f32 	%f80, [%rd22+20];\n"
    "	mul.f32 	%f81, %f76, %f76;\n"
    "	mul.f32 	%f82, %f75, %f76;\n"
    "	mov.f32 	%f814, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f84, %f77, %f814;\n"
    "	mov.f32 	%f815, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f86, %f78, %f815;\n"
    "	mov.f32 	%f816, 0f41000000;   	// 8\n"
    "	mul.f32 	%f88, %f79, %f816;\n"
    "	mul.f32 	%f89, %f81, %f81;\n"
    "	mul.f32 	%f90, %f84, %f89;\n"
    "	mul.f32 	%f91, %f88, %f89;\n"
    "	mov.f32 	%f817, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f817;\n"
    "	mov.f32 	%f818, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f818;\n"
    "	ex2.approx.f32 	%f94, %f57;\n"
    "	mul.f32 	%f95, %f94, %f73;\n"
    "	mov.f32 	%f819, 0f00000000;   	// 0\n"
    "	selp.f32 	%f97, %f819, %f95, %p5;\n"
    "	mov.f32 	%f820, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f99, %f820, %f97, %p4;\n"
    "	mul.f32 	%f100, %f86, %f99;\n"
    "	mul.f32 	%f101, %f51, %f100;\n"
    "	mul.f32 	%f821, %f75, %f101;\n"
    "	sub.f32 	%f103, %f821, %f90;\n"
    "	mul.f32 	%f822, %f76, %f91;\n"
    "	sub.f32 	%f105, %f103, %f822;\n"
    "	mad.f32 	%f106, %f80, %f82, %f105;\n"
    "	mov.f32 	%f823, 0f00000000;   	// 0\n"
    "	selp.f32 	%f108, %f823, %f106, %p3;\n"
    "	mov.f32 	%f824, %f26;\n"
    "	mad.f32 	%f15, %f824, %f108, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f825, %f38;\n"
    "	mad.f32 	%f16, %f825, %f108, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f826, %f48;\n"
    "	mad.f32 	%f17, %f826, %f108, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	.loc	3	118	0\n"
    "	ld.shared.s32 	%r68, [%rd18+3596];\n"
    "	add.s32 	%r54, %r68, %r7;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f827, [%rd19+3584];\n"
    "	mov.f32 	%f828, %f5;\n"
    "	sub.f32 	%f829, %f828, %f827;\n"
    "	mov.f32 	%f830, %f829;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f831, %f11, %f830;\n"
    "	cvt.rni.f32.f32 	%f832, %f831;\n"
    "	mul.f32 	%f833, %f10, %f832;\n"
    "	sub.f32 	%f25, %f829, %f833;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	.loc	3	60	0\n"
    "	mov.f32 	%f834, 0f00000000;   	// 0\n"
    "	mad.f32 	%f835, %f25, %f25, %f834;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f836, [%rd19+3588];\n"
    "	mov.f32 	%f837, %f7;\n"
    "	sub.f32 	%f838, %f837, %f836;\n"
    "	mov.f32 	%f839, %f838;\n"
    "	mov.f32 	%f840, %f839;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f841, %f11, %f839;\n"
    "	cvt.rni.f32.f32 	%f842, %f841;\n"
    "	mul.f32 	%f843, %f10, %f842;\n"
    "	sub.f32 	%f37, %f838, %f843;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f844, %f37, %f37, %f835;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f845, [%rd19+3592];\n"
    "	mov.f32 	%f846, %f9;\n"
    "	sub.f32 	%f847, %f846, %f845;\n"
    "	mov.f32 	%f848, %f847;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f849, %f847, %f11;\n"
    "	cvt.rni.f32.f32 	%f850, %f849;\n"
    "	mul.f32 	%f851, %f10, %f850;\n"
    "	sub.f32 	%f47, %f847, %f851;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f49, %f47, %f47, %f844;\n"
    "	.loc	16	9180	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd49, %r54;\n"
    "	mul.wide.s32 	%rd50, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd50;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f852, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f853, %f54, %f852;\n"
    "	cvt.rzi.f32.f32 	%f57, %f853;\n"
    "	mov.f32 	%f854, %f57;\n"
    "	mov.f32 	%f855, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f856, %f855;\n"
    "	mov.f32 	%f857, %f54;\n"
    "	mad.f32 %f858, %f854, %f856, %f857;\n"
    "	mov.f32 	%f63, %f858;\n"
    "	mov.f32 	%f859, %f57;\n"
    "	mov.f32 	%f860, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f861, %f860;\n"
    "	mov.f32 	%f862, %f63;\n"
    "	mad.f32 %f863, %f859, %f861, %f862;\n"
    "	mov.f32 	%f63, %f863;\n"
    "	.loc	16	9209	0\n"
    "	mov.f32 	%f864, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f865, %f63, %f864;\n"
    "	mov.f32 	%f866, %f865;\n"
    "	ex2.approx.ftz.f32 %f867,%f866;\n"
    "	mov.f32 	%f73, %f867;\n"
    "	.loc	3	87	0\n"
    "	mov.f32 	%f868, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f868;\n"
    "	rcp.approx.f32 	%f75, %f50;\n"
    "	mul.f32 	%f76, %f75, %f75;\n"
    "	ld.const.f32 	%f77, [%rd22+12];\n"
    "	ld.const.f32 	%f78, [%rd22+0];\n"
    "	ld.const.f32 	%f79, [%rd22+16];\n"
    "	ld.const.f32 	%f80, [%rd22+20];\n"
    "	mul.f32 	%f81, %f76, %f76;\n"
    "	mul.f32 	%f82, %f75, %f76;\n"
    "	mov.f32 	%f869, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f84, %f77, %f869;\n"
    "	mov.f32 	%f870, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f86, %f78, %f870;\n"
    "	mov.f32 	%f871, 0f41000000;   	// 8\n"
    "	mul.f32 	%f88, %f79, %f871;\n"
    "	mul.f32 	%f89, %f81, %f81;\n"
    "	mul.f32 	%f90, %f84, %f89;\n"
    "	mul.f32 	%f91, %f88, %f89;\n"
    "	mov.f32 	%f872, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f872;\n"
    "	mov.f32 	%f873, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f873;\n"
    "	ex2.approx.f32 	%f94, %f57;\n"
    "	mul.f32 	%f95, %f94, %f73;\n"
    "	mov.f32 	%f874, 0f00000000;   	// 0\n"
    "	selp.f32 	%f97, %f874, %f95, %p5;\n"
    "	mov.f32 	%f875, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f99, %f875, %f97, %p4;\n"
    "	mul.f32 	%f100, %f86, %f99;\n"
    "	mul.f32 	%f101, %f51, %f100;\n"
    "	mul.f32 	%f876, %f75, %f101;\n"
    "	sub.f32 	%f103, %f876, %f90;\n"
    "	mul.f32 	%f877, %f76, %f91;\n"
    "	sub.f32 	%f105, %f103, %f877;\n"
    "	mad.f32 	%f106, %f80, %f82, %f105;\n"
    "	mov.f32 	%f878, 0f00000000;   	// 0\n"
    "	selp.f32 	%f108, %f878, %f106, %p3;\n"
    "	mov.f32 	%f879, %f26;\n"
    "	mad.f32 	%f15, %f879, %f108, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f880, %f38;\n"
    "	mad.f32 	%f16, %f880, %f108, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f881, %f48;\n"
    "	mad.f32 	%f17, %f881, %f108, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	.loc	3	118	0\n"
    "	ld.shared.s32 	%r69, [%rd18+3852];\n"
    "	add.s32 	%r54, %r69, %r7;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f882, [%rd19+3840];\n"
    "	mov.f32 	%f883, %f5;\n"
    "	sub.f32 	%f884, %f883, %f882;\n"
    "	mov.f32 	%f885, %f884;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f886, %f11, %f885;\n"
    "	cvt.rni.f32.f32 	%f887, %f886;\n"
    "	mul.f32 	%f888, %f10, %f887;\n"
    "	sub.f32 	%f25, %f884, %f888;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	.loc	3	60	0\n"
    "	mov.f32 	%f889, 0f00000000;   	// 0\n"
    "	mad.f32 	%f890, %f25, %f25, %f889;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f891, [%rd19+3844];\n"
    "	mov.f32 	%f892, %f7;\n"
    "	sub.f32 	%f893, %f892, %f891;\n"
    "	mov.f32 	%f894, %f893;\n"
    "	mov.f32 	%f895, %f894;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f896, %f11, %f894;\n"
    "	cvt.rni.f32.f32 	%f897, %f896;\n"
    "	mul.f32 	%f898, %f10, %f897;\n"
    "	sub.f32 	%f37, %f893, %f898;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f899, %f37, %f37, %f890;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f900, [%rd19+3848];\n"
    "	mov.f32 	%f901, %f9;\n"
    "	sub.f32 	%f902, %f901, %f900;\n"
    "	mov.f32 	%f903, %f902;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f904, %f902, %f11;\n"
    "	cvt.rni.f32.f32 	%f905, %f904;\n"
    "	mul.f32 	%f906, %f10, %f905;\n"
    "	sub.f32 	%f47, %f902, %f906;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f49, %f47, %f47, %f899;\n"
    "	.loc	16	9180	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd51, %r54;\n"
    "	mul.wide.s32 	%rd52, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd52;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f907, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f908, %f54, %f907;\n"
    "	cvt.rzi.f32.f32 	%f57, %f908;\n"
    "	mov.f32 	%f909, %f57;\n"
    "	mov.f32 	%f910, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f911, %f910;\n"
    "	mov.f32 	%f912, %f54;\n"
    "	mad.f32 %f913, %f909, %f911, %f912;\n"
    "	mov.f32 	%f63, %f913;\n"
    "	mov.f32 	%f914, %f57;\n"
    "	mov.f32 	%f915, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f916, %f915;\n"
    "	mov.f32 	%f917, %f63;\n"
    "	mad.f32 %f918, %f914, %f916, %f917;\n"
    "	mov.f32 	%f63, %f918;\n"
    "	.loc	16	9209	0\n"
    "	mov.f32 	%f919, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f920, %f63, %f919;\n"
    "	mov.f32 	%f921, %f920;\n"
    "	ex2.approx.ftz.f32 %f922,%f921;\n"
    "	mov.f32 	%f73, %f922;\n"
    "	.loc	3	87	0\n"
    "	mov.f32 	%f923, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f923;\n"
    "	rcp.approx.f32 	%f75, %f50;\n"
    "	mul.f32 	%f76, %f75, %f75;\n"
    "	ld.const.f32 	%f77, [%rd22+12];\n"
    "	ld.const.f32 	%f78, [%rd22+0];\n"
    "	ld.const.f32 	%f79, [%rd22+16];\n"
    "	ld.const.f32 	%f80, [%rd22+20];\n"
    "	mul.f32 	%f81, %f76, %f76;\n"
    "	mul.f32 	%f82, %f75, %f76;\n"
    "	mov.f32 	%f924, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f84, %f77, %f924;\n"
    "	mov.f32 	%f925, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f86, %f78, %f925;\n"
    "	mov.f32 	%f926, 0f41000000;   	// 8\n"
    "	mul.f32 	%f88, %f79, %f926;\n"
    "	mul.f32 	%f89, %f81, %f81;\n"
    "	mul.f32 	%f90, %f84, %f89;\n"
    "	mul.f32 	%f91, %f88, %f89;\n"
    "	mov.f32 	%f927, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f927;\n"
    "	mov.f32 	%f928, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f928;\n"
    "	ex2.approx.f32 	%f94, %f57;\n"
    "	mul.f32 	%f95, %f94, %f73;\n"
    "	mov.f32 	%f929, 0f00000000;   	// 0\n"
    "	selp.f32 	%f97, %f929, %f95, %p5;\n"
    "	mov.f32 	%f930, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f99, %f930, %f97, %p4;\n"
    "	mul.f32 	%f100, %f86, %f99;\n"
    "	mul.f32 	%f101, %f51, %f100;\n"
    "	mul.f32 	%f931, %f75, %f101;\n"
    "	sub.f32 	%f103, %f931, %f90;\n"
    "	mul.f32 	%f932, %f76, %f91;\n"
    "	sub.f32 	%f105, %f103, %f932;\n"
    "	mad.f32 	%f106, %f80, %f82, %f105;\n"
    "	mov.f32 	%f933, 0f00000000;   	// 0\n"
    "	selp.f32 	%f108, %f933, %f106, %p3;\n"
    "	mov.f32 	%f934, %f26;\n"
    "	mad.f32 	%f15, %f934, %f108, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f935, %f38;\n"
    "	mad.f32 	%f16, %f935, %f108, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f936, %f48;\n"
    "	mad.f32 	%f17, %f936, %f108, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	add.s32 	%r45, %r45, 256;\n"
    "	add.u64 	%rd17, %rd17, 4096;\n"
    "	setp.gt.s32 	%p6, %r40, %r45;\n"
    "	@%p6 bra 	$Lt_0_24322;\n"
    "$Lt_0_23810:\n"
    "	mov.u32 	%r70, 255;\n"
    "	setp.gt.s32 	%p7, %r45, %r70;\n"
    "	@%p7 bra 	$Lt_0_24834;\n"
    "	mov.s32 	%r71, 271;\n"
    "	sub.s32 	%r72, %r71, %r45;\n"
    "	shr.s32 	%r73, %r72, 31;\n"
    "	mov.s32 	%r74, 15;\n"
    "	and.b32 	%r75, %r73, %r74;\n"
    "	add.s32 	%r76, %r75, %r72;\n"
    "	shr.s32 	%r77, %r76, 4;\n"
    "	cvt.s64.s32 	%rd53, %r45;\n"
    "	mul.wide.s32 	%rd17, %r45, 16;\n"
    "	add.u64 	%rd18, %rd17, %rd9;\n"
    "	add.u64 	%rd19, %rd17, %rd9;\n"
    "	ld.shared.f32 	%f15, [%rd4+0];\n"
    "	ld.shared.f32 	%f16, [%rd4+4];\n"
    "	ld.shared.f32 	%f17, [%rd4+8];\n"
    "	mov.s32 	%r78, %r77;\n"
    "$Lt_0_25346:\n"
    " //<loop> Loop body line 87, nesting depth: 2, estimated iterations: 15\n"
    "	.loc	3	118	0\n"
    "	ld.shared.s32 	%r79, [%rd18+12];\n"
    "	add.s32 	%r54, %r79, %r7;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f937, [%rd19+0];\n"
    "	mov.f32 	%f938, %f5;\n"
    "	sub.f32 	%f939, %f938, %f937;\n"
    "	mov.f32 	%f940, %f939;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f941, %f11, %f940;\n"
    "	cvt.rni.f32.f32 	%f942, %f941;\n"
    "	mul.f32 	%f943, %f10, %f942;\n"
    "	sub.f32 	%f25, %f939, %f943;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	.loc	3	60	0\n"
    "	mov.f32 	%f944, 0f00000000;   	// 0\n"
    "	mad.f32 	%f945, %f25, %f25, %f944;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f946, [%rd19+4];\n"
    "	mov.f32 	%f947, %f7;\n"
    "	sub.f32 	%f948, %f947, %f946;\n"
    "	mov.f32 	%f949, %f948;\n"
    "	mov.f32 	%f950, %f949;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f951, %f11, %f949;\n"
    "	cvt.rni.f32.f32 	%f952, %f951;\n"
    "	mul.f32 	%f953, %f10, %f952;\n"
    "	sub.f32 	%f37, %f948, %f953;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f954, %f37, %f37, %f945;\n"
    "	.loc	3	58	0\n"
    "	ld.shared.f32 	%f955, [%rd19+8];\n"
    "	mov.f32 	%f956, %f9;\n"
    "	sub.f32 	%f957, %f956, %f955;\n"
    "	mov.f32 	%f958, %f957;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f959, %f957, %f11;\n"
    "	cvt.rni.f32.f32 	%f960, %f959;\n"
    "	mul.f32 	%f961, %f10, %f960;\n"
    "	sub.f32 	%f47, %f957, %f961;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f49, %f47, %f47, %f954;\n"
    "	.loc	16	9180	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd54, %r54;\n"
    "	mul.wide.s32 	%rd55, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd55;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f962, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f963, %f54, %f962;\n"
    "	cvt.rzi.f32.f32 	%f57, %f963;\n"
    "	mov.f32 	%f964, %f57;\n"
    "	mov.f32 	%f965, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f966, %f965;\n"
    "	mov.f32 	%f967, %f54;\n"
    "	mad.f32 %f968, %f964, %f966, %f967;\n"
    "	mov.f32 	%f63, %f968;\n"
    "	mov.f32 	%f969, %f57;\n"
    "	mov.f32 	%f970, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f971, %f970;\n"
    "	mov.f32 	%f972, %f63;\n"
    "	mad.f32 %f973, %f969, %f971, %f972;\n"
    "	mov.f32 	%f63, %f973;\n"
    "	.loc	16	9209	0\n"
    "	mov.f32 	%f974, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f975, %f63, %f974;\n"
    "	mov.f32 	%f976, %f975;\n"
    "	ex2.approx.ftz.f32 %f977,%f976;\n"
    "	mov.f32 	%f73, %f977;\n"
    "	.loc	3	87	0\n"
    "	mov.f32 	%f978, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f978;\n"
    "	rcp.approx.f32 	%f75, %f50;\n"
    "	mul.f32 	%f76, %f75, %f75;\n"
    "	ld.const.f32 	%f77, [%rd22+12];\n"
    "	ld.const.f32 	%f78, [%rd22+0];\n"
    "	ld.const.f32 	%f79, [%rd22+16];\n"
    "	ld.const.f32 	%f80, [%rd22+20];\n"
    "	mul.f32 	%f81, %f76, %f76;\n"
    "	mul.f32 	%f82, %f75, %f76;\n"
    "	mov.f32 	%f979, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f84, %f77, %f979;\n"
    "	mov.f32 	%f980, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f86, %f78, %f980;\n"
    "	mov.f32 	%f981, 0f41000000;   	// 8\n"
    "	mul.f32 	%f88, %f79, %f981;\n"
    "	mul.f32 	%f89, %f81, %f81;\n"
    "	mul.f32 	%f90, %f84, %f89;\n"
    "	mul.f32 	%f91, %f88, %f89;\n"
    "	mov.f32 	%f982, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f982;\n"
    "	mov.f32 	%f983, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f983;\n"
    "	ex2.approx.f32 	%f94, %f57;\n"
    "	mul.f32 	%f95, %f94, %f73;\n"
    "	mov.f32 	%f984, 0f00000000;   	// 0\n"
    "	selp.f32 	%f97, %f984, %f95, %p5;\n"
    "	mov.f32 	%f985, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f99, %f985, %f97, %p4;\n"
    "	mul.f32 	%f100, %f86, %f99;\n"
    "	mul.f32 	%f101, %f51, %f100;\n"
    "	mul.f32 	%f986, %f75, %f101;\n"
    "	sub.f32 	%f103, %f986, %f90;\n"
    "	mul.f32 	%f987, %f76, %f91;\n"
    "	sub.f32 	%f105, %f103, %f987;\n"
    "	mad.f32 	%f106, %f80, %f82, %f105;\n"
    "	mov.f32 	%f988, 0f00000000;   	// 0\n"
    "	selp.f32 	%f108, %f988, %f106, %p3;\n"
    "	mov.f32 	%f989, %f26;\n"
    "	mad.f32 	%f15, %f989, %f108, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f990, %f38;\n"
    "	mad.f32 	%f16, %f990, %f108, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f991, %f48;\n"
    "	mad.f32 	%f17, %f991, %f108, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	add.s32 	%r45, %r45, 16;\n"
    "	add.u64 	%rd19, %rd19, 256;\n"
    "	add.u64 	%rd18, %rd18, 256;\n"
    "	mov.u32 	%r80, 255;\n"
    "	setp.le.s32 	%p8, %r45, %r80;\n"
    "	@%p8 bra 	$Lt_0_25346;\n"
    "$Lt_0_24834:\n"
    "	add.s32 	%r41, %r41, 256;\n"
    "	setp.gt.s32 	%p9, %r19, %r41;\n"
    "	@%p9 bra 	$Lt_0_23554;\n"
    "$Lt_0_23042:\n"
    "	mov.u64 	%rd12, c_matrix;\n"
    "	.loc	3	120	0\n"
    "	add.s32 	%r81, %r18, %r19;\n"
    "	mov.s32 	%r41, %r81;\n"
    "	setp.ge.s32 	%p10, %r81, %r8;\n"
    "	@%p10 bra 	$Lt_0_26114;\n"
    "	sub.s32 	%r82, %r8, %r81;\n"
    "	add.s32 	%r83, %r82, 15;\n"
    "	shr.s32 	%r84, %r83, 31;\n"
    "	mov.s32 	%r85, 15;\n"
    "	and.b32 	%r86, %r84, %r85;\n"
    "	add.s32 	%r87, %r86, %r83;\n"
    "	shr.s32 	%r88, %r87, 4;\n"
    "	ld.param.f32 	%f10, [__cudaparm_nacl_kernel_if2_xmax];\n"
    "	rcp.approx.f32 	%f11, %f10;\n"
    "	cvt.s64.s32 	%rd56, %r81;\n"
    "	mul.wide.s32 	%rd57, %r81, 16;\n"
    "	add.u64 	%rd58, %rd5, %rd57;\n"
    "	ld.shared.f32 	%f15, [%rd4+0];\n"
    "	ld.shared.f32 	%f16, [%rd4+4];\n"
    "	ld.shared.f32 	%f17, [%rd4+8];\n"
    "	mov.s32 	%r89, %r88;\n"
    "$Lt_0_26626:\n"
    " //<loop> Loop body line 120, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	121	0\n"
    "	ld.global.s32 	%r90, [%rd58+12];\n"
    "	add.s32 	%r91, %r90, %r7;\n"
    "	.loc	3	58	0\n"
    "	ld.global.f32 	%f992, [%rd58+0];\n"
    "	mov.f32 	%f993, %f5;\n"
    "	sub.f32 	%f994, %f993, %f992;\n"
    "	mov.f32 	%f995, %f994;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f996, %f11, %f995;\n"
    "	cvt.rni.f32.f32 	%f997, %f996;\n"
    "	.loc	3	120	0\n"
    "	ld.param.f32 	%f10, [__cudaparm_nacl_kernel_if2_xmax];\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f998, %f10, %f997;\n"
    "	sub.f32 	%f999, %f994, %f998;\n"
    "	mov.f32 	%f1000, %f999;\n"
    "	.loc	3	60	0\n"
    "	mov.f32 	%f1001, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1002, %f999, %f999, %f1001;\n"
    "	.loc	3	58	0\n"
    "	ld.global.f32 	%f1003, [%rd58+4];\n"
    "	mov.f32 	%f1004, %f7;\n"
    "	sub.f32 	%f1005, %f1004, %f1003;\n"
    "	mov.f32 	%f1006, %f1005;\n"
    "	mov.f32 	%f1007, %f1006;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f1008, %f11, %f1006;\n"
    "	cvt.rni.f32.f32 	%f1009, %f1008;\n"
    "	mul.f32 	%f1010, %f10, %f1009;\n"
    "	sub.f32 	%f1011, %f1005, %f1010;\n"
    "	mov.f32 	%f1012, %f1011;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f1013, %f1011, %f1011, %f1002;\n"
    "	.loc	3	58	0\n"
    "	ld.global.f32 	%f1014, [%rd58+8];\n"
    "	mov.f32 	%f1015, %f9;\n"
    "	sub.f32 	%f1016, %f1015, %f1014;\n"
    "	mov.f32 	%f1017, %f1016;\n"
    "	.loc	3	59	0\n"
    "	mul.f32 	%f1018, %f1016, %f11;\n"
    "	cvt.rni.f32.f32 	%f1019, %f1018;\n"
    "	mul.f32 	%f1020, %f10, %f1019;\n"
    "	sub.f32 	%f1021, %f1016, %f1020;\n"
    "	mov.f32 	%f1022, %f1021;\n"
    "	.loc	3	60	0\n"
    "	mad.f32 	%f1023, %f1021, %f1021, %f1013;\n"
    "	.loc	16	9180	0\n"
    "	sqrt.approx.f32 	%f1024, %f1023;\n"
    "	cvt.s64.s32 	%rd59, %r91;\n"
    "	mul.wide.s32 	%rd60, %r91, 24;\n"
    "	add.u64 	%rd61, %rd12, %rd60;\n"
    "	ld.const.f32 	%f1025, [%rd61+8];\n"
    "	ld.const.f32 	%f1026, [%rd61+4];\n"
    "	sub.f32 	%f1027, %f1026, %f1024;\n"
    "	mul.f32 	%f1028, %f1025, %f1027;\n"
    "	mov.f32 	%f1029, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1030, %f1028, %f1029;\n"
    "	cvt.rzi.f32.f32 	%f1031, %f1030;\n"
    "	mov.f32 	%f1032, %f1031;\n"
    "	mov.f32 	%f1033, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1034, %f1033;\n"
    "	mov.f32 	%f1035, %f1028;\n"
    "	mad.f32 %f1036, %f1032, %f1034, %f1035;\n"
    "	mov.f32 	%f63, %f1036;\n"
    "	mov.f32 	%f1037, %f1031;\n"
    "	mov.f32 	%f1038, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1039, %f1038;\n"
    "	mov.f32 	%f1040, %f63;\n"
    "	mad.f32 %f1041, %f1037, %f1039, %f1040;\n"
    "	mov.f32 	%f63, %f1041;\n"
    "	.loc	16	9209	0\n"
    "	mov.f32 	%f1042, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1043, %f63, %f1042;\n"
    "	mov.f32 	%f1044, %f1043;\n"
    "	ex2.approx.ftz.f32 %f1045,%f1044;\n"
    "	mov.f32 	%f73, %f1045;\n"
    "	.loc	3	87	0\n"
    "	mov.f32 	%f1046, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p11, %f1023, %f1046;\n"
    "	rcp.approx.f32 	%f1047, %f1024;\n"
    "	mul.f32 	%f1048, %f1047, %f1047;\n"
    "	ld.const.f32 	%f1049, [%rd61+12];\n"
    "	ld.const.f32 	%f1050, [%rd61+0];\n"
    "	ld.const.f32 	%f1051, [%rd61+16];\n"
    "	ld.const.f32 	%f1052, [%rd61+20];\n"
    "	mul.f32 	%f1053, %f1048, %f1048;\n"
    "	mul.f32 	%f1054, %f1047, %f1048;\n"
    "	mov.f32 	%f1055, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1056, %f1049, %f1055;\n"
    "	mov.f32 	%f1057, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1058, %f1050, %f1057;\n"
    "	mov.f32 	%f1059, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1060, %f1051, %f1059;\n"
    "	mul.f32 	%f1061, %f1053, %f1053;\n"
    "	mul.f32 	%f1062, %f1056, %f1061;\n"
    "	mul.f32 	%f1063, %f1060, %f1061;\n"
    "	mov.f32 	%f1064, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p12, %f1028, %f1064;\n"
    "	mov.f32 	%f1065, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p13, %f1028, %f1065;\n"
    "	ex2.approx.f32 	%f1066, %f1031;\n"
    "	mul.f32 	%f1067, %f1066, %f73;\n"
    "	mov.f32 	%f1068, 0f00000000;  	// 0\n"
    "	selp.f32 	%f1069, %f1068, %f1067, %p13;\n"
    "	mov.f32 	%f1070, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f1071, %f1070, %f1069, %p12;\n"
    "	mul.f32 	%f1072, %f1058, %f1071;\n"
    "	mul.f32 	%f1073, %f1025, %f1072;\n"
    "	mul.f32 	%f1074, %f1047, %f1073;\n"
    "	sub.f32 	%f1075, %f1074, %f1062;\n"
    "	mul.f32 	%f1076, %f1048, %f1063;\n"
    "	sub.f32 	%f1077, %f1075, %f1076;\n"
    "	mad.f32 	%f1078, %f1052, %f1054, %f1077;\n"
    "	mov.f32 	%f1079, 0f00000000;  	// 0\n"
    "	selp.f32 	%f1080, %f1079, %f1078, %p11;\n"
    "	mov.f32 	%f1081, %f1000;\n"
    "	mad.f32 	%f15, %f1081, %f1080, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f1082, %f1012;\n"
    "	mad.f32 	%f16, %f1082, %f1080, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f1083, %f1022;\n"
    "	mad.f32 	%f17, %f1083, %f1080, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	add.s32 	%r41, %r41, 16;\n"
    "	add.u64 	%rd58, %rd58, 256;\n"
    "	setp.gt.s32 	%p14, %r8, %r41;\n"
    "	@%p14 bra 	$Lt_0_26626;\n"
    "$Lt_0_26114:\n"
    "	.loc	3	128	0\n"
    "	bar.sync 	0;\n"
    "	mov.u32 	%r92, 127;\n"
    "	setp.gt.s32 	%p15, %r1, %r92;\n"
    "	@%p15 bra 	$Lt_0_27138;\n"
    "	.loc	3	129	0\n"
    "	ld.shared.f32 	%f1084, [%rd4+0];\n"
    "	ld.shared.f32 	%f1085, [%rd4+1536];\n"
    "	add.f32 	%f1086, %f1084, %f1085;\n"
    "	st.shared.f32 	[%rd4+0], %f1086;\n"
    "	ld.shared.f32 	%f1087, [%rd4+4];\n"
    "	ld.shared.f32 	%f1088, [%rd4+1540];\n"
    "	add.f32 	%f1089, %f1087, %f1088;\n"
    "	st.shared.f32 	[%rd4+4], %f1089;\n"
    "	ld.shared.f32 	%f1090, [%rd4+8];\n"
    "	ld.shared.f32 	%f1091, [%rd4+1544];\n"
    "	add.f32 	%f1092, %f1090, %f1091;\n"
    "	st.shared.f32 	[%rd4+8], %f1092;\n"
    "$Lt_0_27138:\n"
    "	.loc	3	132	0\n"
    "	bar.sync 	0;\n"
    "	mov.u32 	%r93, 63;\n"
    "	setp.gt.s32 	%p16, %r1, %r93;\n"
    "	@%p16 bra 	$Lt_0_27650;\n"
    "	.loc	3	133	0\n"
    "	ld.shared.f32 	%f1093, [%rd4+0];\n"
    "	ld.shared.f32 	%f1094, [%rd4+768];\n"
    "	add.f32 	%f1095, %f1093, %f1094;\n"
    "	st.shared.f32 	[%rd4+0], %f1095;\n"
    "	ld.shared.f32 	%f1096, [%rd4+4];\n"
    "	ld.shared.f32 	%f1097, [%rd4+772];\n"
    "	add.f32 	%f1098, %f1096, %f1097;\n"
    "	st.shared.f32 	[%rd4+4], %f1098;\n"
    "	ld.shared.f32 	%f1099, [%rd4+8];\n"
    "	ld.shared.f32 	%f1100, [%rd4+776];\n"
    "	add.f32 	%f1101, %f1099, %f1100;\n"
    "	st.shared.f32 	[%rd4+8], %f1101;\n"
    "$Lt_0_27650:\n"
    "	.loc	3	136	0\n"
    "	bar.sync 	0;\n"
    "	mov.u32 	%r94, 31;\n"
    "	setp.gt.s32 	%p17, %r1, %r94;\n"
    "	@%p17 bra 	$Lt_0_28162;\n"
    "	.loc	3	137	0\n"
    "	ld.shared.f32 	%f1102, [%rd4+0];\n"
    "	ld.shared.f32 	%f1103, [%rd4+384];\n"
    "	add.f32 	%f1104, %f1102, %f1103;\n"
    "	st.shared.f32 	[%rd4+0], %f1104;\n"
    "	ld.shared.f32 	%f1105, [%rd4+4];\n"
    "	ld.shared.f32 	%f1106, [%rd4+388];\n"
    "	add.f32 	%f1107, %f1105, %f1106;\n"
    "	st.shared.f32 	[%rd4+4], %f1107;\n"
    "	ld.shared.f32 	%f1108, [%rd4+8];\n"
    "	ld.shared.f32 	%f1109, [%rd4+392];\n"
    "	add.f32 	%f1110, %f1108, %f1109;\n"
    "	st.shared.f32 	[%rd4+8], %f1110;\n"
    "$Lt_0_28162:\n"
    "	mov.u32 	%r95, 15;\n"
    "	setp.gt.s32 	%p18, %r1, %r95;\n"
    "	@%p18 bra 	$Lt_0_28674;\n"
    "	.loc	3	140	0\n"
    "	ld.shared.f32 	%f1111, [%rd4+0];\n"
    "	ld.shared.f32 	%f1112, [%rd4+192];\n"
    "	add.f32 	%f1113, %f1111, %f1112;\n"
    "	st.shared.f32 	[%rd4+0], %f1113;\n"
    "	ld.shared.f32 	%f1114, [%rd4+4];\n"
    "	ld.shared.f32 	%f1115, [%rd4+196];\n"
    "	add.f32 	%f1116, %f1114, %f1115;\n"
    "	st.shared.f32 	[%rd4+4], %f1116;\n"
    "	ld.shared.f32 	%f1117, [%rd4+8];\n"
    "	ld.shared.f32 	%f1118, [%rd4+200];\n"
    "	add.f32 	%f1119, %f1117, %f1118;\n"
    "	st.shared.f32 	[%rd4+8], %f1119;\n"
    "$Lt_0_28674:\n"
    "	mov.u32 	%r96, 0;\n"
    "	setp.ne.s32 	%p19, %r18, %r96;\n"
    "	@%p19 bra 	$Lt_0_29186;\n"
    "	.loc	3	154	0\n"
    "	ld.param.u64 	%rd62, [__cudaparm_nacl_kernel_if2_fvec];\n"
    "	mul.lo.s32 	%r97, %r4, 3;\n"
    "	cvt.s64.s32 	%rd63, %r97;\n"
    "	mul.wide.s32 	%rd64, %r97, 4;\n"
    "	add.u64 	%rd65, %rd62, %rd64;\n"
    "	ld.shared.f32 	%f1120, [%rd4+0];\n"
    "	st.global.f32 	[%rd65+0], %f1120;\n"
    "	ld.shared.f32 	%f1121, [%rd4+4];\n"
    "	st.global.f32 	[%rd65+4], %f1121;\n"
    "	ld.shared.f32 	%f1122, [%rd4+8];\n"
    "	st.global.f32 	[%rd65+8], %f1122;\n"
    "$Lt_0_29186:\n"
    "	.loc	3	155	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel_if2:\n"
    "	} // nacl_kernel_if2\n"
    "\n";
#pragma dscuda endofptx
# 1 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h" 1



# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdint.h" 1 3 4


# 1 "/usr/include/stdint.h" 1 3 4
# 27 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 49 "/usr/include/stdint.h" 3 4
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;



typedef unsigned long int uint64_t;
# 66 "/usr/include/stdint.h" 3 4
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 91 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 104 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 120 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 135 "/usr/include/stdint.h" 3 4
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
# 4 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdint.h" 2 3 4
# 5 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include-fixed/limits.h" 1 3 4
# 6 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h" 2
# 1 "/usr/local/cuda/include/cuda_runtime_api.h" 1
# 7 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h" 2
# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 8 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h" 2
# 1 "/usr/local/cuda/include/driver_types.h" 1
# 9 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h" 2
# 1 "/usr/local/cuda/include/cuda_texture_types.h" 1
# 10 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h" 2
# 1 "/usr/local/cuda/include/texture_types.h" 1
# 11 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h" 2
# 1 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscudadefs.h" 1
# 12 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h" 2
# 1 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscudamacros.h" 1
# 14 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscudamacros.h"
int dscudaWarnLevel(void);
void dscudaSetWarnLevel(int level);
# 13 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h" 2
# 1 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/ibvdefs.h" 1
# 14 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h" 2
# 1 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/tcpdefs.h" 1



typedef struct {
    int svrsock;
    int sendbufsize;
    int recvbufsize;
    char *sendbuf;
    char *recvbuf;
} TcpConnection;
# 15 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h" 2

typedef unsigned long RCadr;
typedef unsigned long RCstream;
typedef unsigned long RCevent;
typedef unsigned long RCipaddr;
typedef unsigned int RCsize;
typedef unsigned long RCpid;
typedef struct {
    unsigned int x;
    unsigned int y;
    unsigned int z;
} RCdim3;

typedef unsigned int RCchannelformat;

typedef struct {
    int normalized;
    int filterMode;
    int addressMode[3];
    RCchannelformat f;
    int w;
    int x;
    int y;
    int z;
} RCtexture;

enum RCargType {
    dscudaArgTypeP = 0,
    dscudaArgTypeI = 1,
    dscudaArgTypeF = 2,
    dscudaArgTypeV = 3
};

typedef struct {
    int type;
    union {
        unsigned long pointerval;
        unsigned int intval;
        float floatval;
        char customval[64];
    } val;
    unsigned int offset;
    unsigned int size;
} RCArg;

typedef char *RCbuf;

typedef enum {
    RCMethodNone = 0,
    RCMethodMemcpyH2D,
    RCMethodMemcpyD2H,
    RCMethodMemcpyD2D,
    RCMethodMemset,
    RCMethodMalloc,
    RCMethodFree,
    RCMethodGetErrorString,
    RCMethodGetDeviceProperties,
    RCMethodRuntimeGetVersion,
    RCMethodThreadSynchronize,
    RCMethodThreadExit,
    RCMethodDeviceSynchronize,
    RCMethodCreateChannelDesc,
    RCMethodDeviceSetLimit,
    RCMethodDeviceSetSharedMemConfig,


    RCMethodDscudaMemcpyToSymbolH2D,
    RCMethodDscudaMemcpyToSymbolD2D,
    RCMethodDscudaMemcpyFromSymbolD2H,
    RCMethodDscudaMemcpyFromSymbolD2D,
    RCMethodDscudaMemcpyToSymbolAsyncH2D,
    RCMethodDscudaMemcpyToSymbolAsyncD2D,
    RCMethodDscudaMemcpyFromSymbolAsyncD2H,
    RCMethodDscudaMemcpyFromSymbolAsyncD2D,
    RCMethodDscudaLoadModule,
    RCMethodDscudaLaunchKernel,
    RCMethodDscudaBindTexture,
    RCMethodDscudaUnbindTexture,





    RCMethodLaunch,
    RCMethodConfigureCall,
    RCMethodSetupArgument,


    RCMethodDscudaRegisterFatBinary,
    RCMethodDscudaUnregisterFatBinary,
    RCMethodDscudaRegisterFunction,
    RCMethodDscudaRegisterVar,


    RCMethodDscudaSortByKey,

    RCMethodEnd,


    RCMethodSetDevice,

} RCMethod;


typedef struct {
    RCMethod method;
    int payload;
} RCHdr;


typedef struct {
    RCMethod method;
    int payload;
    size_t count;
    RCadr dstadr;
    void *srcbuf;
} RCMemcpyH2DInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCMemcpyH2DReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    size_t count;
    RCadr srcadr;
} RCMemcpyD2HInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
    void *dstbuf;
} RCMemcpyD2HReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    size_t count;
    RCadr dstadr;
    RCadr srcadr;
} RCMemcpyD2DInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCMemcpyD2DReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int value;
    size_t count;
    RCadr devptr;
} RCMemsetInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCMemsetReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    size_t size;
} RCMallocInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
    RCadr devAdr;
} RCMallocReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    RCadr devAdr;
} RCFreeInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCFreeReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int device;
    cudaError_t err;
} RCGetErrorStringInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    char *errmsg;
} RCGetErrorStringReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int device;
} RCGetDevicePropertiesInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
    cudaDeviceProp prop;
} RCGetDevicePropertiesReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    char dummy[8];
} RCRuntimeGetVersionInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
    int version;
} RCRuntimeGetVersionReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    char dummy[8];
} RCThreadSynchronizeInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCThreadSynchronizeReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    char dummy[8];
} RCThreadExitInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCThreadExitReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    char dummy[8];
} RCDeviceSynchronizeInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDeviceSynchronizeReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int x, y, z, w;
    enum cudaChannelFormatKind f;
} RCCreateChannelDescInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaChannelFormatDesc desc;
} RCCreateChannelDescReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    cudaLimit limit;
    size_t value;
} RCDeviceSetLimitInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDeviceSetLimitReturnHdr;
# 329 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h"
typedef struct {
    RCMethod method;
    int payload;
    int config;
} RCDeviceSetSharedMemConfigInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDeviceSetSharedMemConfigReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int moduleid;
    char symbol[128];
    size_t count;
    size_t offset;
    void *srcbuf;
} RCDscudaMemcpyToSymbolH2DInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaMemcpyToSymbolH2DReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int moduleid;
    char symbol[128];
    size_t count;
    size_t offset;
    RCadr srcadr;
} RCDscudaMemcpyToSymbolD2DInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaMemcpyToSymbolD2DReturnHdr;



typedef struct {
    RCMethod method;
    int payload;
    int moduleid;
    char symbol[128];
    size_t count;
    size_t offset;
} RCDscudaMemcpyFromSymbolD2HInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
    void *dstbuf;
} RCDscudaMemcpyFromSymbolD2HReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int moduleid;
    char symbol[128];
    size_t count;
    size_t offset;
    RCadr dstadr;
} RCDscudaMemcpyFromSymbolD2DInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaMemcpyFromSymbolD2DReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int moduleid;
    char symbol[128];
    size_t count;
    size_t offset;
    RCstream stream;
    void *src;
} RCDscudaMemcpyToSymbolAsyncH2DInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaMemcpyToSymbolAsyncH2DReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int moduleid;
    char symbol[128];
    size_t count;
    size_t offset;
    RCstream stream;
    RCadr srcadr;
} RCDscudaMemcpyToSymbolAsyncD2DInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaMemcpyToSymbolAsyncD2DReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int moduleid;
    char symbol[128];
    size_t count;
    size_t offset;
    RCstream stream;
} RCDscudaMemcpyFromSymbolAsyncD2HInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
    void *dst;
} RCDscudaMemcpyFromSymbolAsyncD2HReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int moduleid;
    char symbol[128];
    size_t count;
    size_t offset;
    RCstream stream;
    RCadr dstadr;
} RCDscudaMemcpyFromSymbolAsyncD2DInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaMemcpyFromSymbolAsyncD2DReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    unsigned long long int ipaddr;
    unsigned long int pid;
    char modulename[128];
    void *moduleimage;
} RCDscudaLoadModuleInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
    int moduleid;
} RCDscudaLoadModuleReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int moduleid;
    int kernelid;
    char kernelname[128];
    unsigned int gdim[3];
    unsigned int bdim[3];
    unsigned int smemsize;
    RCstream stream;
    int narg;
    void *args;
} RCDscudaLaunchKernelInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaLaunchKernelReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int moduleid;
    char texname[128];
    RCtexture texbuf;
    RCadr devptr;
    size_t size;
} RCDscudaBindTextureInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    size_t offset;
    cudaError_t err;
} RCDscudaBindTextureReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int moduleid;
    char texname[128];
} RCDscudaUnbindTextureInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaUnbindTextureReturnHdr;



typedef struct {
    RCMethod method;
    int payload;
    RCadr func;
} RCLaunchInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCLaunchReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    unsigned int gdim[3];
    unsigned int bdim[3];
    unsigned int smemsize;
    RCstream stream;
} RCConfigureCallInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCConfigureCallReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int size;
    int offset;
    void *argbuf;
} RCSetupArgumentInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCSetupArgumentReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    size_t count;
    int m;
    int v;
    char f[256];
    void *fatbinbuf;
} RCDscudaRegisterFatBinaryInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    RCadr handle;
    cudaError_t err;
} RCDscudaRegisterFatBinaryReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    RCadr handle;
    cudaError_t err;
} RCDscudaUnregisterFatBinaryInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaUnregisterFatBinaryReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    RCadr handle;
    RCadr hfunc;
    char dfunc[128];
    char dname[128];
    int tlimit;
} RCDscudaRegisterFunctionInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaRegisterFunctionReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    RCadr handle;
    RCadr hvar;
    char dvar[128];
    char dname[128];
    int ext;
    int size;
    int constant;
    int global;
} RCDscudaRegisterVarInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaRegisterVarReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int nitems;
    RCadr key;
    RCadr value;
} RCDscudaSortByKeyInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaSortByKeyReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    size_t count;
    RCadr srcadr;
    RCadr dstadr;
    unsigned int dstip;
    int port;
} RCDscudaSendP2PInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaSendP2PReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    unsigned int srcip;
    int port;
} RCDscudaRecvP2PInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaRecvP2PReturnHdr;


typedef struct {
    RCMethod dummy;
    int payload;
    int size;
    size_t count;
    RCadr dstadr;
    void *srcbuf;
} P2PInvokeHdr;

typedef struct {
    RCMethod dummy;
    int payload;
    int size;
    cudaError_t err;
} P2PReturnHdr;

typedef struct {int m; int v; unsigned long long* d; char* f;} fatDeviceText_t;

enum {
    RC_REMOTECALL_TYPE_TCP,
    RC_REMOTECALL_TYPE_IBV,
};


char *dscudaMemcpyKindName(cudaMemcpyKind kind);

unsigned int dscudaServerNameToAddr(char *svrname);
unsigned int dscudaServerNameToDevid(char *svrname);
unsigned int dscudaServerIpStrToAddr(char *ipstr);
char * dscudaAddrToServerIpStr(unsigned int addr);
int dscudaAlignUp(int off, int align);
unsigned int dscudaRoundUp(unsigned int src, unsigned int by);
double RCgetCputime(double *t0);


void *dscudaUvaOfAdr(void *adr, int devid);
int dscudaDevidOfUva(void *adr);
void *dscudaAdrOfUva(void *adr);
int dscudaNredundancy(void);
void dscudaSetAutoVerb(int verb);
int dscudaRemoteCallType(void);
void dscudaSetErrorHandler(void (*handler)(void *), void *handler_arg);
void dscudaGetMangledFunctionName(char *name, const char *funcif, const char *ptxdata);
int *dscudaLoadModule(char *srcname, char *strdata);
void dscudaLaunchKernelWrapper(int *moduleid, int kid, char *kname,
                               int *gdim, int *bdim, RCsize smemsize, RCstream stream,
                               int narg, RCArg *arg);

cudaError_t dscudaFuncGetAttributesWrapper(int *moduleid, struct cudaFuncAttributes *attr, const char *func);

cudaError_t dscudaMemcpyToSymbolWrapper(int *moduleid, const char *symbol, const void *src,
                                       size_t count, size_t offset = 0,
                                       enum cudaMemcpyKind kind = cudaMemcpyHostToDevice);

cudaError_t dscudaMemcpyToSymbolAsyncWrapper(int *moduleid, const char *symbol, const void *src,
         size_t count, size_t offset = 0,
         enum cudaMemcpyKind kind = cudaMemcpyHostToDevice, cudaStream_t stream = 0);

cudaError_t dscudaMemcpyFromSymbolWrapper(int *moduleid, void *dst, const char *symbol,
      size_t count, size_t offset = 0,
      enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost);

cudaError_t dscudaMemcpyFromSymbolAsyncWrapper(int *moduleid, void *dst, const char *symbol,
           size_t count, size_t offset = 0,
           enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost, cudaStream_t stream = 0);


cudaError_t dscudaBindTextureWrapper(int *moduleid, char *texname,
                                    size_t *offset,
                                    const struct textureReference *tex,
                                    const void *devPtr,
                                    const struct cudaChannelFormatDesc *desc,
                                    size_t size = (2147483647 * 2U + 1U));
# 866 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h"
cudaError_t dscudaSortByKey(const int nitems, uint64_t *key, int *value);
# 2546 "./dscudatmp/mr3.cu" 2

# 1 "/usr/include/stdio.h" 1 3 4
# 30 "/usr/include/stdio.h" 3 4
extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 1 3 4
# 35 "/usr/include/stdio.h" 2 3 4
# 45 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 65 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 75 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 32 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 83 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4

typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 53 "/usr/include/_G_config.h" 3 4
typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));
typedef int _G_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));
# 33 "/usr/include/libio.h" 2 3 4
# 53 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 54 "/usr/include/libio.h" 2 3 4
# 172 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 182 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 205 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 273 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 321 "/usr/include/libio.h" 3 4
  __off64_t _offset;
# 330 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 366 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 462 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 492 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 554 "/usr/include/libio.h" 3 4
}
# 76 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 109 "/usr/include/stdio.h" 3 4


typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 165 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 166 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (__const char *__filename) throw ();

extern int rename (__const char *__old, __const char *__new) throw ();




extern int renameat (int __oldfd, __const char *__old, int __newfd,
       __const char *__new) throw ();








extern FILE *tmpfile (void) ;
# 206 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;





extern char *tmpnam_r (char *__s) throw () ;
# 228 "/usr/include/stdio.h" 3 4
extern char *tempnam (__const char *__dir, __const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 253 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 263 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);









extern FILE *fopen (__const char *__restrict __filename,
      __const char *__restrict __modes) ;




extern FILE *freopen (__const char *__restrict __filename,
        __const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 296 "/usr/include/stdio.h" 3 4


extern FILE *fopen64 (__const char *__restrict __filename,
        __const char *__restrict __modes) ;
extern FILE *freopen64 (__const char *__restrict __filename,
   __const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, __const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     __const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, __const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();








extern int fprintf (FILE *__restrict __stream,
      __const char *__restrict __format, ...);




extern int printf (__const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      __const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (__const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg) throw ();





extern int snprintf (char *__restrict __s, size_t __maxlen,
       __const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        __const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, __const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         __const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       __const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
# 418 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, __const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, __const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     __const char *__restrict __format, ...) ;




extern int scanf (__const char *__restrict __format, ...) ;

extern int sscanf (__const char *__restrict __s,
     __const char *__restrict __format, ...) throw ();
# 469 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (__const char *__restrict __s,
      __const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 528 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 556 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 567 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 600 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;






extern char *gets (char *__s) ;

# 646 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 662 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (__const char *__restrict __s, FILE *__restrict __stream);





extern int puts (__const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 723 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (__const char *__restrict __s,
      FILE *__restrict __stream);
# 734 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (__const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 770 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 789 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, __const fpos_t *__pos);
# 812 "/usr/include/stdio.h" 3 4



extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, __const fpos64_t *__pos);




extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;




extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;








extern void perror (__const char *__s);






# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern __const char *__const sys_errlist[];


extern int _sys_nerr;
extern __const char *__const _sys_errlist[];
# 851 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 870 "/usr/include/stdio.h" 3 4
extern FILE *popen (__const char *__command, __const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      __const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       __const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 940 "/usr/include/stdio.h" 3 4
}
# 2548 "./dscudatmp/mr3.cu" 2


# 1 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h" 1
# 37 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
extern "C" {
# 60 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
    enum CUTBoolean
    {
        CUTFalse = 0,
        CUTTrue = 1
    };





   
    void
   cutFree( void* ptr);
# 88 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    void
    cutCheckBankAccess( unsigned int tidx, unsigned int tidy, unsigned int tidz,
                        unsigned int bdimx, unsigned int bdimy,
                        unsigned int bdimz, const char* file, const int line,
                        const char* aname, const int index);







   
    char*
    cutFindFilePath(const char* filename, const char* executablePath);
# 116 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutReadFilef( const char* filename, float** data, unsigned int* len,
                  bool verbose = false);
# 132 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutReadFiled( const char* filename, double** data, unsigned int* len,
                  bool verbose = false);
# 148 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutReadFilei( const char* filename, int** data, unsigned int* len, bool verbose = false);
# 163 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutReadFileui( const char* filename, unsigned int** data,
                   unsigned int* len, bool verbose = false);
# 179 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutReadFileb( const char* filename, char** data, unsigned int* len,
                  bool verbose = false);
# 195 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutReadFileub( const char* filename, unsigned char** data,
                   unsigned int* len, bool verbose = false);
# 209 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutWriteFilef( const char* filename, const float* data, unsigned int len,
                   const float epsilon, bool verbose = false);
# 223 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutWriteFiled( const char* filename, const float* data, unsigned int len,
                   const double epsilon, bool verbose = false);
# 235 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutWriteFilei( const char* filename, const int* data, unsigned int len,
                   bool verbose = false);
# 247 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutWriteFileui( const char* filename,const unsigned int* data,
                    unsigned int len, bool verbose = false);
# 259 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutWriteFileb( const char* filename, const char* data, unsigned int len,
                   bool verbose = false);
# 271 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutWriteFileub( const char* filename,const unsigned char* data,
                    unsigned int len, bool verbose = false);
# 287 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutLoadPGMub( const char* file, unsigned char** data,
                  unsigned int *w,unsigned int *h);
# 300 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutLoadPPMub( const char* file, unsigned char** data,
                  unsigned int *w,unsigned int *h);
# 314 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutLoadPPM4ub( const char* file, unsigned char** data,
                   unsigned int *w,unsigned int *h);
# 330 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
        cutLoadPGMi( const char* file, unsigned int** data,
                     unsigned int* w, unsigned int* h);
# 346 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
        cutLoadPGMs( const char* file, unsigned short** data,
                     unsigned int* w, unsigned int* h);
# 361 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
        cutLoadPGMf( const char* file, float** data,
                     unsigned int* w, unsigned int* h);
# 373 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
        cutSavePGMub( const char* file, unsigned char* data,
                      unsigned int w, unsigned int h);
# 385 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutSavePPMub( const char* file, unsigned char *data,
                unsigned int w, unsigned int h);
# 398 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutSavePPM4ub( const char* file, unsigned char *data,
                   unsigned int w, unsigned int h);
# 410 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutSavePGMi( const char* file, unsigned int* data,
                 unsigned int w, unsigned int h);
# 422 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutSavePGMs( const char* file, unsigned short* data,
                 unsigned int w, unsigned int h);
# 434 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutSavePGMf( const char* file, float* data,
                 unsigned int w, unsigned int h);
# 455 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutCheckCmdLineFlag( const int argc, const char** argv,
                         const char* flag_name);
# 469 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutGetCmdLineArgumenti( const int argc, const char** argv,
                            const char* arg_name, int* val);
# 483 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutGetCmdLineArgumentf( const int argc, const char** argv,
                            const char* arg_name, float* val);
# 497 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutGetCmdLineArgumentstr( const int argc, const char** argv,
                              const char* arg_name, char** val);
# 512 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutGetCmdLineArgumentListstr( const int argc, const char** argv,
                                  const char* arg_name, char** val,
                                  unsigned int* len);
# 526 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutCheckCondition( int val, const char* file, const int line);
# 538 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutComparef( const float* reference, const float* data,
                 const unsigned int len);
# 551 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutComparei( const int* reference, const int* data,
                 const unsigned int len );
# 565 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutCompareuit( const unsigned int* reference, const unsigned int* data,
                const unsigned int len, const float epsilon, const float threshold );
# 578 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutCompareub( const unsigned char* reference, const unsigned char* data,
                  const unsigned int len );
# 593 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutCompareubt( const unsigned char* reference, const unsigned char* data,
                 const unsigned int len, const float epsilon, const float threshold );
# 607 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutCompareube( const unsigned char* reference, const unsigned char* data,
                 const unsigned int len, const float epsilon );
# 621 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutComparefe( const float* reference, const float* data,
                  const unsigned int len, const float epsilon );
# 636 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutComparefet( const float* reference, const float* data,
                 const unsigned int len, const float epsilon, const float threshold );
# 651 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutCompareL2fe( const float* reference, const float* data,
                    const unsigned int len, const float epsilon );
# 666 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
 cutComparePPM( const char *src_file, const char *ref_file, const float epsilon, const float threshold, bool verboseErrors = false );
# 679 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    CUTBoolean
    cutCreateTimer( unsigned int* name);






   
    CUTBoolean
    cutDeleteTimer( unsigned int name);





   
    CUTBoolean
    cutStartTimer( const unsigned int name);





   
    CUTBoolean
    cutStopTimer( const unsigned int name);





   
    CUTBoolean
    cutResetTimer( const unsigned int name);






   
    float
    cutGetTimerValue( const unsigned int name);
# 732 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
   
    float
    cutGetAverageTimerValue( const unsigned int name);
# 926 "/usr/local/DSCUDA/dscudapkg1.7.5.1/include/common/inc/cutil.h"
}
# 2551 "./dscudatmp/mr3.cu" 2
# 2567 "./dscudatmp/mr3.cu"
typedef struct {
  float r[3];
  int atype;
} VG_XVEC;

typedef struct {
  float pol;
  float sigm;
  float ipotro;
  float pc;
  float pd;
  float zz;
} VG_MATRIX;



__attribute__((constant)) VG_MATRIX c_matrix[4]={
[0].pol=1.250000,[0].sigm=2.340000,[0].ipotro=3.154574,[0].pc=0.072868,[0].pd=0.034699,[0].zz=1.000000,
[1].pol=1.000000,[1].sigm=2.755000,[1].ipotro=3.154574,[1].pc=0.485784,[1].pd=0.602893,[1].zz=-1.000000,
[2].pol=1.000000,[2].sigm=2.755000,[2].ipotro=3.154574,[2].pc=0.485784,[2].pd=0.602893,[2].zz=-1.000000,
[3].pol=0.750000,[3].sigm=3.170000,[3].ipotro=3.154574,[3].pc=5.031334,[3].pd=10.106042,[3].zz=1.000000,
};

static int Dev=-1;


__attribute__((device)) __inline__
void inter_if(float xj[3], float xi[3], float fi[3],
           int t, float xmax, float xmax1)
{
  int k;
  float dn2,r,inr,inr2,inr4,inr8,d3,dr[3];
  float pb=(float)(0.338e-19/(14.39*1.60219e-19)),dphir;

  dn2 = 0.0f;
  for(k=0; k<3; k++){
    dr[k] = xi[k] - xj[k];
    dr[k] -= rintf(dr[k] * xmax1) * xmax;
    dn2 += dr[k] * dr[k];
  }
  r = sqrtf(dn2);

  inr = 1.0f / r;
# 2620 "./dscudatmp/mr3.cu"
  inr2 = inr * inr;
  inr4 = inr2 * inr2;
  inr8 = inr4 * inr4;
  d3 = pb * c_matrix[t].pol * expf( (c_matrix[t].sigm - r)
                               * c_matrix[t].ipotro);
  dphir = ( d3 * c_matrix[t].ipotro * inr
          - 6.0f * c_matrix[t].pc * inr8
          - 8.0f * c_matrix[t].pd * inr8 * inr2
          + inr2 * inr * c_matrix[t].zz );

  if(dn2 == 0.0f) dphir = 0.0f;

  for(k=0; k<3; k++) fi[k] += dphir * dr[k];
}



extern "C" __attribute__((global))
void nacl_kernel_if2(VG_XVEC *x, int n, int nat,
                 float xmax, float *fvec)
{
  int tid = threadIdx.x;
  int jdiv = tid/(256/(1<<4));
  int i = blockIdx.x * (256/(1<<4)) + (tid & ((256/(1<<4))-1));
  int j,k;
  float xmax1=1.0f/xmax;
  int atypei;
  float xi[3];
  __attribute__((shared)) VG_XVEC s_xj[256];
  __attribute__((shared)) float s_fi[256][3];

  for(k=0; k<3; k++) s_fi[tid][k] = 0.0f;
  for(k=0; k<3; k++) xi[k] = x[i].r[k];
  atypei = x[i].atype * nat;
  int na;
  na = n / 256;
  na = na * 256;
  for(j=0; j<na; j+=256){
    __syncthreads();
    s_xj[tid] = x[j+tid];
    __syncthreads();
#pragma unroll 16
    for(int js=jdiv; js<256; js+=(1<<4))
      inter_if(s_xj[js].r, xi, s_fi[tid], atypei + s_xj[js].atype, xmax, xmax1);
  }
  for(j=na+jdiv; j<n; j+=(1<<4)){
    inter_if(x[j].r, xi, s_fi[tid], atypei + x[j].atype, xmax, xmax1);
  }





  __syncthreads();
  if(tid<128) for(k=0;k<3;k++) s_fi[tid][k]+=s_fi[tid+128][k];


  __syncthreads();
  if(tid<64) for(k=0;k<3;k++) s_fi[tid][k]+=s_fi[tid+64][k];


  __syncthreads();
  if(tid<32) for(k=0;k<3;k++) s_fi[tid][k]+=s_fi[tid+32][k];


  if(tid<16) for(k=0;k<3;k++) s_fi[tid][k]+=s_fi[tid+16][k];
# 2699 "./dscudatmp/mr3.cu"
  if(jdiv==0) for(k=0; k<3; k++) fvec[i*3+k] = s_fi[tid][k];
}


extern "C"
void MR3calcnacl(double x[], int n, int atype[], int nat,
   double pol[], double sigm[], double ipotro[],
   double pc[], double pd[], double zz[],
   int tblno, double xmax, int periodicflag,
   double force[])
{
  int i,j;
  static VG_XVEC *d_x=__null;
  static float *d_force=__null;
  float xmaxf;
  VG_MATRIX *matrix=(VG_MATRIX *)force;
  static VG_XVEC *vec=__null;
  if((periodicflag & 1)==0) xmax*=2.0;
  xmaxf=xmax;
  static float *forcef=__null;
  static int n_bak=0;






  if(sizeof(double)*n*3<sizeof(VG_MATRIX)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }
  if(nat>32){
    fprintf(stderr,"** error : nat is too large **\n");
    exit(1);
  }

  if(n!=n_bak){

    int nalloc;
    static int nalloc_bak=0;
    if(n>8192) nalloc=n;
    else nalloc=8192;
    if(nalloc!=nalloc_bak){


      { cudaError err = cudaMalloc((void**)&d_x,sizeof(VG_XVEC)*(nalloc+(256/(1<<4)))); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 2744, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_force,sizeof(float)*(nalloc+(256/(1<<4)))*3); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 2745, cudaGetErrorString( err) ); exit(1); } };;


      free(vec);
      if((vec=(VG_XVEC *)malloc(sizeof(VG_XVEC)*(nalloc+(256/(1<<4)))))==__null){
 fprintf(stderr,"** error : can't malloc vec **\n");
 exit(1);
      }

      free(forcef);
      if((forcef=(float *)malloc(sizeof(float)*nalloc*3))==__null){
 fprintf(stderr,"** error : can't malloc forcef **\n");
 exit(1);
      }
      bzero(forcef,sizeof(float)*nalloc*3);
      nalloc_bak=nalloc;
    }


    for(i=0;i<nat;i++){
      for(j=0;j<nat;j++){
 matrix[i*nat+j].pol=(float)(pol[i*nat+j]);

 matrix[i*nat+j].sigm=(float)(sigm[i*nat+j]);

 matrix[i*nat+j].ipotro=(float)(ipotro[i*nat+j]);

 matrix[i*nat+j].pc=(float)(pc[i*nat+j]);

 matrix[i*nat+j].pd=(float)(pd[i*nat+j]);

 matrix[i*nat+j].zz=(float)(zz[i*nat+j]);

      }
    }






    n_bak=n;
  }

  for(i=0;i<(n+(256/(1<<4))-1)/(256/(1<<4))*(256/(1<<4));i++){
    if(i<n){
      for(j=0;j<3;j++){
 vec[i].r[j]=x[i*3+j];
      }
      vec[i].atype=atype[i];
    }
    else{
      for(j=0;j<3;j++){
 vec[i].r[j]=0.0f;
      }
      vec[i].atype=0;
    }
  }
  { cudaError err = cudaMemcpy(d_x,vec,sizeof(VG_XVEC)*((n+(256/(1<<4))-1)/(256/(1<<4))*(256/(1<<4))), cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n",
 "./dscudatmp/mr3.cu"
# 2803 "./dscudatmp/mr3.cu"
  ,
 2804
# 2803 "./dscudatmp/mr3.cu"
  , cudaGetErrorString( err) ); exit(1); } };
                                 ;


  dim3 threads(256);
  dim3 grid((n*(1<<4)+256 -1)/256);
  nacl_kernel_if2<<< grid, threads >>>(d_x,n,nat,xmaxf,d_force);




  { cudaError err = cudaMemcpy(forcef,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 2814, cudaGetErrorString( err) ); exit(1); } };;
  for(i=0;i<n;i++) for(j=0;j<3;j++) force[i*3+j]=forcef[i*3+j];
}
