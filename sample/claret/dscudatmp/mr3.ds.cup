# 1 "./dscudatmp/mr3.cu"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/local/cuda/include/cuda_runtime.h" 1
# 59 "/usr/local/cuda/include/cuda_runtime.h"
# 1 "/usr/local/cuda/include/host_config.h" 1
# 114 "/usr/local/cuda/include/host_config.h"
# 1 "/usr/include/features.h" 1 3 4
# 324 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/predefs.h" 1 3 4
# 325 "/usr/include/features.h" 2 3 4
# 357 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 378 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 379 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 358 "/usr/include/features.h" 2 3 4
# 389 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 390 "/usr/include/features.h" 2 3 4
# 115 "/usr/local/cuda/include/host_config.h" 2
# 60 "/usr/local/cuda/include/cuda_runtime.h" 2







# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 56 "/usr/local/cuda/include/builtin_types.h"
# 1 "/usr/local/cuda/include/device_types.h" 1
# 53 "/usr/local/cuda/include/device_types.h"
# 1 "/usr/local/cuda/include/host_defines.h" 1
# 54 "/usr/local/cuda/include/device_types.h" 2







enum __attribute__((device_builtin)) cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
};
# 57 "/usr/local/cuda/include/builtin_types.h" 2
# 1 "/usr/local/cuda/include/driver_types.h" 1
# 76 "/usr/local/cuda/include/driver_types.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include-fixed/limits.h" 1 3 4
# 11 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include-fixed/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include-fixed/limits.h" 1 3 4
# 122 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 145 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 157 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 40 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 158 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 146 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 150 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 154 "/usr/include/limits.h" 2 3 4
# 123 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include-fixed/syslimits.h" 2 3 4
# 12 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include-fixed/limits.h" 2 3 4
# 77 "/usr/local/cuda/include/driver_types.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include/stddef.h" 1 3 4
# 149 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 211 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 78 "/usr/local/cuda/include/driver_types.h" 2
# 126 "/usr/local/cuda/include/driver_types.h"
enum __attribute__((device_builtin)) cudaError
{





    cudaSuccess = 0,





    cudaErrorMissingConfiguration = 1,





    cudaErrorMemoryAllocation = 2,





    cudaErrorInitializationError = 3,
# 161 "/usr/local/cuda/include/driver_types.h"
    cudaErrorLaunchFailure = 4,
# 170 "/usr/local/cuda/include/driver_types.h"
    cudaErrorPriorLaunchFailure = 5,
# 180 "/usr/local/cuda/include/driver_types.h"
    cudaErrorLaunchTimeout = 6,
# 189 "/usr/local/cuda/include/driver_types.h"
    cudaErrorLaunchOutOfResources = 7,





    cudaErrorInvalidDeviceFunction = 8,
# 204 "/usr/local/cuda/include/driver_types.h"
    cudaErrorInvalidConfiguration = 9,





    cudaErrorInvalidDevice = 10,





    cudaErrorInvalidValue = 11,





    cudaErrorInvalidPitchValue = 12,





    cudaErrorInvalidSymbol = 13,




    cudaErrorMapBufferObjectFailed = 14,




    cudaErrorUnmapBufferObjectFailed = 15,





    cudaErrorInvalidHostPointer = 16,





    cudaErrorInvalidDevicePointer = 17,





    cudaErrorInvalidTexture = 18,





    cudaErrorInvalidTextureBinding = 19,






    cudaErrorInvalidChannelDescriptor = 20,





    cudaErrorInvalidMemcpyDirection = 21,
# 285 "/usr/local/cuda/include/driver_types.h"
    cudaErrorAddressOfConstant = 22,
# 294 "/usr/local/cuda/include/driver_types.h"
    cudaErrorTextureFetchFailed = 23,
# 303 "/usr/local/cuda/include/driver_types.h"
    cudaErrorTextureNotBound = 24,
# 312 "/usr/local/cuda/include/driver_types.h"
    cudaErrorSynchronizationError = 25,





    cudaErrorInvalidFilterSetting = 26,





    cudaErrorInvalidNormSetting = 27,







    cudaErrorMixedDeviceExecution = 28,






    cudaErrorCudartUnloading = 29,




    cudaErrorUnknown = 30,







    cudaErrorNotYetImplemented = 31,
# 361 "/usr/local/cuda/include/driver_types.h"
    cudaErrorMemoryValueTooLarge = 32,






    cudaErrorInvalidResourceHandle = 33,







    cudaErrorNotReady = 34,






    cudaErrorInsufficientDriver = 35,
# 396 "/usr/local/cuda/include/driver_types.h"
    cudaErrorSetOnActiveProcess = 36,





    cudaErrorInvalidSurface = 37,





    cudaErrorNoDevice = 38,





    cudaErrorECCUncorrectable = 39,




    cudaErrorSharedObjectSymbolNotFound = 40,




    cudaErrorSharedObjectInitFailed = 41,





    cudaErrorUnsupportedLimit = 42,





    cudaErrorDuplicateVariableName = 43,





    cudaErrorDuplicateTextureName = 44,





    cudaErrorDuplicateSurfaceName = 45,
# 458 "/usr/local/cuda/include/driver_types.h"
    cudaErrorDevicesUnavailable = 46,




    cudaErrorInvalidKernelImage = 47,







    cudaErrorNoKernelImageForDevice = 48,
# 484 "/usr/local/cuda/include/driver_types.h"
    cudaErrorIncompatibleDriverContext = 49,






    cudaErrorPeerAccessAlreadyEnabled = 50,






    cudaErrorPeerAccessNotEnabled = 51,





    cudaErrorDeviceAlreadyInUse = 54,







    cudaErrorProfilerDisabled = 55,






    cudaErrorProfilerNotInitialized = 56,






    cudaErrorProfilerAlreadyStarted = 57,





     cudaErrorProfilerAlreadyStopped = 58,







    cudaErrorAssert = 59,






    cudaErrorTooManyPeers = 60,





    cudaErrorHostMemoryAlreadyRegistered = 61,





    cudaErrorHostMemoryNotRegistered = 62,




    cudaErrorOperatingSystem = 63,




    cudaErrorStartupFailure = 0x7f,







    cudaErrorApiFailureBase = 10000
};




enum __attribute__((device_builtin)) cudaChannelFormatKind
{
    cudaChannelFormatKindSigned = 0,
    cudaChannelFormatKindUnsigned = 1,
    cudaChannelFormatKindFloat = 2,
    cudaChannelFormatKindNone = 3
};




struct __attribute__((device_builtin)) cudaChannelFormatDesc
{
    int x;
    int y;
    int z;
    int w;
    enum cudaChannelFormatKind f;
};




struct cudaArray;




enum __attribute__((device_builtin)) cudaMemoryType
{
    cudaMemoryTypeHost = 1,
    cudaMemoryTypeDevice = 2
};




enum __attribute__((device_builtin)) cudaMemcpyKind
{
    cudaMemcpyHostToHost = 0,
    cudaMemcpyHostToDevice = 1,
    cudaMemcpyDeviceToHost = 2,
    cudaMemcpyDeviceToDevice = 3,
    cudaMemcpyDefault = 4
};





struct __attribute__((device_builtin)) cudaPitchedPtr
{
    void *ptr;
    size_t pitch;
    size_t xsize;
    size_t ysize;
};





struct __attribute__((device_builtin)) cudaExtent
{
    size_t width;
    size_t height;
    size_t depth;
};





struct __attribute__((device_builtin)) cudaPos
{
    size_t x;
    size_t y;
    size_t z;
};




struct __attribute__((device_builtin)) cudaMemcpy3DParms
{
    struct cudaArray *srcArray;
    struct cudaPos srcPos;
    struct cudaPitchedPtr srcPtr;

    struct cudaArray *dstArray;
    struct cudaPos dstPos;
    struct cudaPitchedPtr dstPtr;

    struct cudaExtent extent;
    enum cudaMemcpyKind kind;
};




struct __attribute__((device_builtin)) cudaMemcpy3DPeerParms
{
    struct cudaArray *srcArray;
    struct cudaPos srcPos;
    struct cudaPitchedPtr srcPtr;
    int srcDevice;

    struct cudaArray *dstArray;
    struct cudaPos dstPos;
    struct cudaPitchedPtr dstPtr;
    int dstDevice;

    struct cudaExtent extent;
};




struct cudaGraphicsResource;




enum __attribute__((device_builtin)) cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone = 0,
    cudaGraphicsRegisterFlagsReadOnly = 1,
    cudaGraphicsRegisterFlagsWriteDiscard = 2,
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,
    cudaGraphicsRegisterFlagsTextureGather = 8
};




enum __attribute__((device_builtin)) cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone = 0,
    cudaGraphicsMapFlagsReadOnly = 1,
    cudaGraphicsMapFlagsWriteDiscard = 2
};




enum __attribute__((device_builtin)) cudaGraphicsCubeFace
{
    cudaGraphicsCubeFacePositiveX = 0x00,
    cudaGraphicsCubeFaceNegativeX = 0x01,
    cudaGraphicsCubeFacePositiveY = 0x02,
    cudaGraphicsCubeFaceNegativeY = 0x03,
    cudaGraphicsCubeFacePositiveZ = 0x04,
    cudaGraphicsCubeFaceNegativeZ = 0x05
};




struct __attribute__((device_builtin)) cudaPointerAttributes
{




    enum cudaMemoryType memoryType;
# 758 "/usr/local/cuda/include/driver_types.h"
    int device;





    void *devicePointer;





    void *hostPointer;
};




struct __attribute__((device_builtin)) cudaFuncAttributes
{





   size_t sharedSizeBytes;





   size_t constSizeBytes;




   size_t localSizeBytes;






   int maxThreadsPerBlock;




   int numRegs;






   int ptxVersion;






   int binaryVersion;
};




enum __attribute__((device_builtin)) cudaFuncCache
{
    cudaFuncCachePreferNone = 0,
    cudaFuncCachePreferShared = 1,
    cudaFuncCachePreferL1 = 2,
    cudaFuncCachePreferEqual = 3
};




enum __attribute__((device_builtin)) cudaComputeMode
{
    cudaComputeModeDefault = 0,
    cudaComputeModeExclusive = 1,
    cudaComputeModeProhibited = 2,
    cudaComputeModeExclusiveProcess = 3
};




enum __attribute__((device_builtin)) cudaLimit
{
    cudaLimitStackSize = 0x00,
    cudaLimitPrintfFifoSize = 0x01,
    cudaLimitMallocHeapSize = 0x02
};




enum __attribute__((device_builtin)) cudaOutputMode
{
    cudaKeyValuePair = 0x00,
    cudaCSV = 0x01
};




struct __attribute__((device_builtin)) cudaDeviceProp
{
    char name[256];
    size_t totalGlobalMem;
    size_t sharedMemPerBlock;
    int regsPerBlock;
    int warpSize;
    size_t memPitch;
    int maxThreadsPerBlock;
    int maxThreadsDim[3];
    int maxGridSize[3];
    int clockRate;
    size_t totalConstMem;
    int major;
    int minor;
    size_t textureAlignment;
    size_t texturePitchAlignment;
    int deviceOverlap;
    int multiProcessorCount;
    int kernelExecTimeoutEnabled;
    int integrated;
    int canMapHostMemory;
    int computeMode;
    int maxTexture1D;
    int maxTexture1DLinear;
    int maxTexture2D[2];
    int maxTexture2DLinear[3];
    int maxTexture2DGather[2];
    int maxTexture3D[3];
    int maxTextureCubemap;
    int maxTexture1DLayered[2];
    int maxTexture2DLayered[3];
    int maxTextureCubemapLayered[2];
    int maxSurface1D;
    int maxSurface2D[2];
    int maxSurface3D[3];
    int maxSurface1DLayered[2];
    int maxSurface2DLayered[3];
    int maxSurfaceCubemap;
    int maxSurfaceCubemapLayered[2];
    size_t surfaceAlignment;
    int concurrentKernels;
    int ECCEnabled;
    int pciBusID;
    int pciDeviceID;
    int pciDomainID;
    int tccDriver;
    int asyncEngineCount;
    int unifiedAddressing;
    int memoryClockRate;
    int memoryBusWidth;
    int l2CacheSize;
    int maxThreadsPerMultiProcessor;
};
# 982 "/usr/local/cuda/include/driver_types.h"
struct __attribute__((device_builtin)) cudaIpcEventHandle_st
{
    char reserved[64];
};

struct __attribute__((device_builtin)) cudaIpcMemHandle_st
{
    char reserved[64];
};
# 1001 "/usr/local/cuda/include/driver_types.h"
typedef __attribute__((device_builtin)) enum cudaError cudaError_t;




typedef __attribute__((device_builtin)) struct CUstream_st *cudaStream_t;




typedef __attribute__((device_builtin)) struct CUevent_st *cudaEvent_t;




typedef __attribute__((device_builtin)) struct cudaGraphicsResource *cudaGraphicsResource_t;




typedef __attribute__((device_builtin)) struct CUuuid_st cudaUUID_t;




typedef __attribute__((device_builtin)) struct cudaIpcEventHandle_st cudaIpcEventHandle_t;
typedef __attribute__((device_builtin)) struct cudaIpcMemHandle_st cudaIpcMemHandle_t;




typedef __attribute__((device_builtin)) enum cudaOutputMode cudaOutputMode_t;
# 58 "/usr/local/cuda/include/builtin_types.h" 2
# 1 "/usr/local/cuda/include/surface_types.h" 1
# 84 "/usr/local/cuda/include/surface_types.h"
enum __attribute__((device_builtin)) cudaSurfaceBoundaryMode
{
    cudaBoundaryModeZero = 0,
    cudaBoundaryModeClamp = 1,
    cudaBoundaryModeTrap = 2
};




enum __attribute__((device_builtin)) cudaSurfaceFormatMode
{
    cudaFormatModeForced = 0,
    cudaFormatModeAuto = 1
};




struct __attribute__((device_builtin)) surfaceReference
{



    struct cudaChannelFormatDesc channelDesc;
};
# 59 "/usr/local/cuda/include/builtin_types.h" 2
# 1 "/usr/local/cuda/include/texture_types.h" 1
# 84 "/usr/local/cuda/include/texture_types.h"
enum __attribute__((device_builtin)) cudaTextureAddressMode
{
    cudaAddressModeWrap = 0,
    cudaAddressModeClamp = 1,
    cudaAddressModeMirror = 2,
    cudaAddressModeBorder = 3
};




enum __attribute__((device_builtin)) cudaTextureFilterMode
{
    cudaFilterModePoint = 0,
    cudaFilterModeLinear = 1
};




enum __attribute__((device_builtin)) cudaTextureReadMode
{
    cudaReadModeElementType = 0,
    cudaReadModeNormalizedFloat = 1
};




struct __attribute__((device_builtin)) textureReference
{



    int normalized;



    enum cudaTextureFilterMode filterMode;



    enum cudaTextureAddressMode addressMode[3];



    struct cudaChannelFormatDesc channelDesc;



    int sRGB;
    int __cudaReserved[15];
};
# 60 "/usr/local/cuda/include/builtin_types.h" 2
# 1 "/usr/local/cuda/include/vector_types.h" 1
# 59 "/usr/local/cuda/include/vector_types.h"
# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 60 "/usr/local/cuda/include/builtin_types.h"
# 1 "/usr/local/cuda/include/vector_types.h" 1
# 60 "/usr/local/cuda/include/builtin_types.h" 2
# 60 "/usr/local/cuda/include/vector_types.h" 2
# 94 "/usr/local/cuda/include/vector_types.h"
struct __attribute__((device_builtin)) char1
{
    signed char x;
};

struct __attribute__((device_builtin)) uchar1
{
    unsigned char x;
};


struct __attribute__((device_builtin)) __attribute__((aligned(2))) char2
{
    signed char x, y;
};

struct __attribute__((device_builtin)) __attribute__((aligned(2))) uchar2
{
    unsigned char x, y;
};

struct __attribute__((device_builtin)) char3
{
    signed char x, y, z;
};

struct __attribute__((device_builtin)) uchar3
{
    unsigned char x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(4))) char4
{
    signed char x, y, z, w;
};

struct __attribute__((device_builtin)) __attribute__((aligned(4))) uchar4
{
    unsigned char x, y, z, w;
};

struct __attribute__((device_builtin)) short1
{
    short x;
};

struct __attribute__((device_builtin)) ushort1
{
    unsigned short x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(4))) short2
{
    short x, y;
};

struct __attribute__((device_builtin)) __attribute__((aligned(4))) ushort2
{
    unsigned short x, y;
};

struct __attribute__((device_builtin)) short3
{
    short x, y, z;
};

struct __attribute__((device_builtin)) ushort3
{
    unsigned short x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(8))) short4 { short x; short y; short z; short w; };
struct __attribute__((device_builtin)) __attribute__((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; };

struct __attribute__((device_builtin)) int1
{
    int x;
};

struct __attribute__((device_builtin)) uint1
{
    unsigned int x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(8))) int2 { int x; int y; };
struct __attribute__((device_builtin)) __attribute__((aligned(8))) uint2 { unsigned int x; unsigned int y; };

struct __attribute__((device_builtin)) int3
{
    int x, y, z;
};

struct __attribute__((device_builtin)) uint3
{
    unsigned int x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) int4
{
    int x, y, z, w;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) uint4
{
    unsigned int x, y, z, w;
};

struct __attribute__((device_builtin)) long1
{
    long int x;
};

struct __attribute__((device_builtin)) ulong1
{
    unsigned long x;
};






struct __attribute__((device_builtin)) __attribute__((aligned(2*sizeof(long int)))) long2
{
    long int x, y;
};

struct __attribute__((device_builtin)) __attribute__((aligned(2*sizeof(unsigned long int)))) ulong2
{
    unsigned long int x, y;
};



struct __attribute__((device_builtin)) long3
{
    long int x, y, z;
};

struct __attribute__((device_builtin)) ulong3
{
    unsigned long int x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) long4
{
    long int x, y, z, w;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) ulong4
{
    unsigned long int x, y, z, w;
};

struct __attribute__((device_builtin)) float1
{
    float x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(8))) float2 { float x; float y; };

struct __attribute__((device_builtin)) float3
{
    float x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) float4
{
    float x, y, z, w;
};

struct __attribute__((device_builtin)) longlong1
{
    long long int x;
};

struct __attribute__((device_builtin)) ulonglong1
{
    unsigned long long int x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) longlong2
{
    long long int x, y;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) ulonglong2
{
    unsigned long long int x, y;
};

struct __attribute__((device_builtin)) longlong3
{
    long long int x, y, z;
};

struct __attribute__((device_builtin)) ulonglong3
{
    unsigned long long int x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) longlong4
{
    long long int x, y, z ,w;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) ulonglong4
{
    unsigned long long int x, y, z, w;
};

struct __attribute__((device_builtin)) double1
{
    double x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) double2
{
    double x, y;
};

struct __attribute__((device_builtin)) double3
{
    double x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) double4
{
    double x, y, z, w;
};
# 338 "/usr/local/cuda/include/vector_types.h"
typedef __attribute__((device_builtin)) struct char1 char1;
typedef __attribute__((device_builtin)) struct uchar1 uchar1;
typedef __attribute__((device_builtin)) struct char2 char2;
typedef __attribute__((device_builtin)) struct uchar2 uchar2;
typedef __attribute__((device_builtin)) struct char3 char3;
typedef __attribute__((device_builtin)) struct uchar3 uchar3;
typedef __attribute__((device_builtin)) struct char4 char4;
typedef __attribute__((device_builtin)) struct uchar4 uchar4;
typedef __attribute__((device_builtin)) struct short1 short1;
typedef __attribute__((device_builtin)) struct ushort1 ushort1;
typedef __attribute__((device_builtin)) struct short2 short2;
typedef __attribute__((device_builtin)) struct ushort2 ushort2;
typedef __attribute__((device_builtin)) struct short3 short3;
typedef __attribute__((device_builtin)) struct ushort3 ushort3;
typedef __attribute__((device_builtin)) struct short4 short4;
typedef __attribute__((device_builtin)) struct ushort4 ushort4;
typedef __attribute__((device_builtin)) struct int1 int1;
typedef __attribute__((device_builtin)) struct uint1 uint1;
typedef __attribute__((device_builtin)) struct int2 int2;
typedef __attribute__((device_builtin)) struct uint2 uint2;
typedef __attribute__((device_builtin)) struct int3 int3;
typedef __attribute__((device_builtin)) struct uint3 uint3;
typedef __attribute__((device_builtin)) struct int4 int4;
typedef __attribute__((device_builtin)) struct uint4 uint4;
typedef __attribute__((device_builtin)) struct long1 long1;
typedef __attribute__((device_builtin)) struct ulong1 ulong1;
typedef __attribute__((device_builtin)) struct long2 long2;
typedef __attribute__((device_builtin)) struct ulong2 ulong2;
typedef __attribute__((device_builtin)) struct long3 long3;
typedef __attribute__((device_builtin)) struct ulong3 ulong3;
typedef __attribute__((device_builtin)) struct long4 long4;
typedef __attribute__((device_builtin)) struct ulong4 ulong4;
typedef __attribute__((device_builtin)) struct float1 float1;
typedef __attribute__((device_builtin)) struct float2 float2;
typedef __attribute__((device_builtin)) struct float3 float3;
typedef __attribute__((device_builtin)) struct float4 float4;
typedef __attribute__((device_builtin)) struct longlong1 longlong1;
typedef __attribute__((device_builtin)) struct ulonglong1 ulonglong1;
typedef __attribute__((device_builtin)) struct longlong2 longlong2;
typedef __attribute__((device_builtin)) struct ulonglong2 ulonglong2;
typedef __attribute__((device_builtin)) struct longlong3 longlong3;
typedef __attribute__((device_builtin)) struct ulonglong3 ulonglong3;
typedef __attribute__((device_builtin)) struct longlong4 longlong4;
typedef __attribute__((device_builtin)) struct ulonglong4 ulonglong4;
typedef __attribute__((device_builtin)) struct double1 double1;
typedef __attribute__((device_builtin)) struct double2 double2;
typedef __attribute__((device_builtin)) struct double3 double3;
typedef __attribute__((device_builtin)) struct double4 double4;







struct __attribute__((device_builtin)) dim3
{
    unsigned int x, y, z;

    __attribute__((host)) __attribute__((device)) dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) : x(vx), y(vy), z(vz) {}
    __attribute__((host)) __attribute__((device)) dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
    __attribute__((host)) __attribute__((device)) operator uint3(void) { uint3 t; t.x = x; t.y = y; t.z = z; return t; }

};

typedef __attribute__((device_builtin)) struct dim3 dim3;
# 60 "/usr/local/cuda/include/builtin_types.h" 2
# 68 "/usr/local/cuda/include/cuda_runtime.h" 2
# 1 "/usr/local/cuda/include/channel_descriptor.h" 1
# 62 "/usr/local/cuda/include/channel_descriptor.h"
# 1 "/usr/local/cuda/include/cuda_runtime_api.h" 1
# 151 "/usr/local/cuda/include/cuda_runtime_api.h"
# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 152 "/usr/local/cuda/include/cuda_runtime_api.h" 2
# 171 "/usr/local/cuda/include/cuda_runtime_api.h"
extern "C" {
# 200 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceReset(void);
# 217 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceSynchronize(void);
# 269 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceSetLimit(enum cudaLimit limit, size_t value);
# 293 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit);
# 323 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig);
# 364 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceSetCacheConfig(enum cudaFuncCache cacheConfig);
# 387 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceGetByPCIBusId(int *device, char *pciBusId);
# 414 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceGetPCIBusId(char *pciBusId, int len, int device);
# 456 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t *handle, cudaEvent_t event);
# 491 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcOpenEventHandle(cudaEvent_t *event, cudaIpcEventHandle_t handle);
# 529 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t *handle, void *devPtr);
# 576 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcOpenMemHandle(void **devPtr, cudaIpcMemHandle_t handle, unsigned int flags);
# 606 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcCloseMemHandle(void *devPtr);
# 640 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadExit(void);
# 664 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadSynchronize(void);
# 723 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadSetLimit(enum cudaLimit limit, size_t value);
# 754 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadGetLimit(size_t *pValue, enum cudaLimit limit);
# 789 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadGetCacheConfig(enum cudaFuncCache *pCacheConfig);
# 835 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadSetCacheConfig(enum cudaFuncCache cacheConfig);
# 887 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetLastError(void);
# 928 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaPeekAtLastError(void);
# 942 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) const char* cudaGetErrorString(cudaError_t error);
# 972 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetDeviceCount(int *count);
# 1175 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetDeviceProperties(struct cudaDeviceProp *prop, int device);
# 1194 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaChooseDevice(int *device, const struct cudaDeviceProp *prop);
# 1227 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetDevice(int device);
# 1244 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetDevice(int *device);
# 1273 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetValidDevices(int *device_arr, int len);
# 1333 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetDeviceFlags( unsigned int flags );
# 1359 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamCreate(cudaStream_t *pStream);
# 1380 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamDestroy(cudaStream_t stream);
# 1416 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags);
# 1435 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamSynchronize(cudaStream_t stream);
# 1453 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamQuery(cudaStream_t stream);
# 1485 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventCreate(cudaEvent_t *event);
# 1516 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags);
# 1549 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0);
# 1578 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventQuery(cudaEvent_t event);
# 1610 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventSynchronize(cudaEvent_t event);
# 1635 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventDestroy(cudaEvent_t event);
# 1676 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end);
# 1715 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaConfigureCall(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, cudaStream_t stream = 0);
# 1742 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetupArgument(const void *arg, size_t size, size_t offset);
# 1788 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFuncSetCacheConfig(const char *func, enum cudaFuncCache cacheConfig);
# 1824 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaLaunch(const char *entry);
# 1857 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const char *func);
# 1879 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetDoubleForDevice(double *d);
# 1901 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetDoubleForHost(double *d);
# 1933 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMalloc(void **devPtr, size_t size);
# 1962 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMallocHost(void **ptr, size_t size);
# 2001 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMallocPitch(void **devPtr, size_t *pitch, size_t width, size_t height);
# 2043 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMallocArray(struct cudaArray **array, const struct cudaChannelFormatDesc *desc, size_t width, size_t height = 0, unsigned int flags = 0);
# 2067 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFree(void *devPtr);
# 2087 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFreeHost(void *ptr);
# 2109 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFreeArray(struct cudaArray *array);
# 2168 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostAlloc(void **pHost, size_t size, unsigned int flags);
# 2221 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostRegister(void *ptr, size_t size, unsigned int flags);
# 2240 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostUnregister(void *ptr);
# 2267 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostGetDevicePointer(void **pDevice, void *pHost, unsigned int flags);
# 2286 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostGetFlags(unsigned int *pFlags, void *pHost);
# 2321 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMalloc3D(struct cudaPitchedPtr* pitchedDevPtr, struct cudaExtent extent);
# 2421 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMalloc3DArray(struct cudaArray** array, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int flags = 0);
# 2519 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy3D(const struct cudaMemcpy3DParms *p);
# 2547 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy3DPeer(const struct cudaMemcpy3DPeerParms *p);
# 2651 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream = 0);
# 2673 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy3DPeerAsync(const struct cudaMemcpy3DPeerParms *p, cudaStream_t stream = 0);
# 2692 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemGetInfo(size_t *free, size_t *total);
# 2713 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaArrayGetInfo(struct cudaChannelFormatDesc *desc, struct cudaExtent *extent, unsigned int *flags, struct cudaArray *array);
# 2748 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind);
# 2780 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyPeer(void *dst, int dstDevice, const void *src, int srcDevice, size_t count);
# 2814 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyToArray(struct cudaArray *dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind);
# 2848 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyFromArray(void *dst, const struct cudaArray *src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind);
# 2883 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyArrayToArray(struct cudaArray *dst, size_t wOffsetDst, size_t hOffsetDst, const struct cudaArray *src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);
# 2925 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);
# 2967 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DToArray(struct cudaArray *dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);
# 3009 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DFromArray(void *dst, size_t dpitch, const struct cudaArray *src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind);
# 3049 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DArrayToArray(struct cudaArray *dst, size_t wOffsetDst, size_t hOffsetDst, const struct cudaArray *src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);
# 3084 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyToSymbol(const char *symbol, const void *src, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyHostToDevice);
# 3119 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyFromSymbol(void *dst, const char *symbol, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost);
# 3161 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 3192 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyPeerAsync(void *dst, int dstDevice, const void *src, int srcDevice, size_t count, cudaStream_t stream = 0);
# 3233 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyToArrayAsync(struct cudaArray *dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 3274 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyFromArrayAsync(void *dst, const struct cudaArray *src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 3325 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 3375 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DToArrayAsync(struct cudaArray *dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 3424 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DFromArrayAsync(void *dst, size_t dpitch, const struct cudaArray *src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 3466 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyToSymbolAsync(const char *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 3508 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyFromSymbolAsync(void *dst, const char *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 3531 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemset(void *devPtr, int value, size_t count);
# 3558 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemset2D(void *devPtr, size_t pitch, int value, size_t width, size_t height);
# 3598 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemset3D(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent);
# 3626 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream = 0);
# 3659 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0);
# 3705 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream = 0);
# 3732 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetSymbolAddress(void **devPtr, const char *symbol);
# 3754 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetSymbolSize(size_t *size, const char *symbol);
# 3899 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaPointerGetAttributes(struct cudaPointerAttributes *attributes, const void *ptr);
# 3933 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceCanAccessPeer(int *canAccessPeer, int device, int peerDevice);
# 3974 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags);
# 3999 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceDisablePeerAccess(int peerDevice);
# 4045 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource);
# 4077 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags);
# 4112 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);
# 4143 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);
# 4172 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsResourceGetMappedPointer(void **devPtr, size_t *size, cudaGraphicsResource_t resource);
# 4206 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsSubResourceGetMappedArray(struct cudaArray **array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel);
# 4239 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetChannelDesc(struct cudaChannelFormatDesc *desc, const struct cudaArray *array);
# 4274 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) struct cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, enum cudaChannelFormatKind f);
# 4321 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindTexture(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t size = (2147483647 * 2U + 1U));
# 4372 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindTexture2D(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t width, size_t height, size_t pitch);
# 4400 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindTextureToArray(const struct textureReference *texref, const struct cudaArray *array, const struct cudaChannelFormatDesc *desc);
# 4421 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaUnbindTexture(const struct textureReference *texref);
# 4446 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureAlignmentOffset(size_t *offset, const struct textureReference *texref);
# 4480 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureReference(const struct textureReference **texref, const char *symbol);
# 4514 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindSurfaceToArray(const struct surfaceReference *surfref, const struct cudaArray *array, const struct cudaChannelFormatDesc *desc);
# 4542 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetSurfaceReference(const struct surfaceReference **surfref, const char *symbol);
# 4570 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDriverGetVersion(int *driverVersion);
# 4587 "/usr/local/cuda/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaRuntimeGetVersion(int *runtimeVersion);




extern __attribute__((host)) cudaError_t cudaGetExportTable(const void **ppExportTable, const cudaUUID_t *pExportTableId);
# 4722 "/usr/local/cuda/include/cuda_runtime_api.h"
}
# 63 "/usr/local/cuda/include/channel_descriptor.h" 2
# 107 "/usr/local/cuda/include/channel_descriptor.h"
template<class T> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc(void)
{
  return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf1(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf2(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf4(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char>(void)
{
  int e = (int)sizeof(char) * 8;




  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);

}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<signed char>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned char>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char1>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uchar1>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char2>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uchar2>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char4>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uchar4>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned short>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short1>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<ushort1>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short2>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<ushort2>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short4>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<ushort4>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned int>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int1>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uint1>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int2>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uint2>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int4>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uint4>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}
# 379 "/usr/local/cuda/include/channel_descriptor.h"
template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float1>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float2>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float4>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}
# 69 "/usr/local/cuda/include/cuda_runtime.h" 2

# 1 "/usr/local/cuda/include/driver_functions.h" 1
# 53 "/usr/local/cuda/include/driver_functions.h"
# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 54 "/usr/local/cuda/include/driver_functions.h" 2
# 79 "/usr/local/cuda/include/driver_functions.h"
static __inline__ __attribute__((host)) struct cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz)
{
  struct cudaPitchedPtr s;

  s.ptr = d;
  s.pitch = p;
  s.xsize = xsz;
  s.ysize = ysz;

  return s;
}
# 106 "/usr/local/cuda/include/driver_functions.h"
static __inline__ __attribute__((host)) struct cudaPos make_cudaPos(size_t x, size_t y, size_t z)
{
  struct cudaPos p;

  p.x = x;
  p.y = y;
  p.z = z;

  return p;
}
# 132 "/usr/local/cuda/include/driver_functions.h"
static __inline__ __attribute__((host)) struct cudaExtent make_cudaExtent(size_t w, size_t h, size_t d)
{
  struct cudaExtent e;

  e.width = w;
  e.height = h;
  e.depth = d;

  return e;
}
# 71 "/usr/local/cuda/include/cuda_runtime.h" 2

# 1 "/usr/local/cuda/include/vector_functions.h" 1
# 59 "/usr/local/cuda/include/vector_functions.h"
# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 60 "/usr/local/cuda/include/vector_functions.h" 2
# 69 "/usr/local/cuda/include/vector_functions.h"
static __inline__ __attribute__((host)) __attribute__((device)) char1 make_char1(signed char x)
{
  char1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar1 make_uchar1(unsigned char x)
{
  uchar1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) char2 make_char2(signed char x, signed char y)
{
  char2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar2 make_uchar2(unsigned char x, unsigned char y)
{
  uchar2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) char3 make_char3(signed char x, signed char y, signed char z)
{
  char3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z)
{
  uchar3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) char4 make_char4(signed char x, signed char y, signed char z, signed char w)
{
  char4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w)
{
  uchar4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short1 make_short1(short x)
{
  short1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort1 make_ushort1(unsigned short x)
{
  ushort1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short2 make_short2(short x, short y)
{
  short2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort2 make_ushort2(unsigned short x, unsigned short y)
{
  ushort2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short3 make_short3(short x,short y, short z)
{
  short3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z)
{
  ushort3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short4 make_short4(short x, short y, short z, short w)
{
  short4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w)
{
  ushort4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int1 make_int1(int x)
{
  int1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint1 make_uint1(unsigned int x)
{
  uint1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int2 make_int2(int x, int y)
{
  int2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint2 make_uint2(unsigned int x, unsigned int y)
{
  uint2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int3 make_int3(int x, int y, int z)
{
  int3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint3 make_uint3(unsigned int x, unsigned int y, unsigned int z)
{
  uint3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int4 make_int4(int x, int y, int z, int w)
{
  int4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint4 make_uint4(unsigned int x, unsigned int y, unsigned int z, unsigned int w)
{
  uint4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long1 make_long1(long int x)
{
  long1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong1 make_ulong1(unsigned long int x)
{
  ulong1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long2 make_long2(long int x, long int y)
{
  long2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong2 make_ulong2(unsigned long int x, unsigned long int y)
{
  ulong2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long3 make_long3(long int x, long int y, long int z)
{
  long3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong3 make_ulong3(unsigned long int x, unsigned long int y, unsigned long int z)
{
  ulong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long4 make_long4(long int x, long int y, long int z, long int w)
{
  long4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong4 make_ulong4(unsigned long int x, unsigned long int y, unsigned long int z, unsigned long int w)
{
  ulong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float1 make_float1(float x)
{
  float1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float2 make_float2(float x, float y)
{
  float2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float3 make_float3(float x, float y, float z)
{
  float3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float4 make_float4(float x, float y, float z, float w)
{
  float4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong1 make_longlong1(long long int x)
{
  longlong1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong1 make_ulonglong1(unsigned long long int x)
{
  ulonglong1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong2 make_longlong2(long long int x, long long int y)
{
  longlong2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong2 make_ulonglong2(unsigned long long int x, unsigned long long int y)
{
  ulonglong2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong3 make_longlong3(long long int x, long long int y, long long int z)
{
  longlong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong3 make_ulonglong3(unsigned long long int x, unsigned long long int y, unsigned long long int z)
{
  ulonglong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong4 make_longlong4(long long int x, long long int y, long long int z, long long int w)
{
  longlong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong4 make_ulonglong4(unsigned long long int x, unsigned long long int y, unsigned long long int z, unsigned long long int w)
{
  ulonglong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double1 make_double1(double x)
{
  double1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double2 make_double2(double x, double y)
{
  double2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double3 make_double3(double x, double y, double z)
{
  double3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double4 make_double4(double x, double y, double z, double w)
{
  double4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}
# 73 "/usr/local/cuda/include/cuda_runtime.h" 2



# 1 "/usr/local/cuda/include/common_functions.h" 1
# 61 "/usr/local/cuda/include/common_functions.h"
# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 62 "/usr/local/cuda/include/common_functions.h" 2


# 1 "/usr/include/string.h" 1 3 4
# 29 "/usr/include/string.h" 3 4
extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include/stddef.h" 1 3 4
# 35 "/usr/include/string.h" 2 3 4









extern void *memcpy (void *__restrict __dest,
       __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, __const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, __const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (__const void *__s1, __const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const void *memchr (__const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 93 "/usr/include/string.h" 3 4
}










extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const void *rawmemchr (__const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const void *memrchr (__const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern char *strcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, __const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (__const char *__s1, __const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));






# 1 "/usr/include/xlocale.h" 1 3 4
# 28 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 163 "/usr/include/string.h" 2 3 4


extern int strcoll_l (__const char *__s1, __const char *__s2, __locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, __const char *__src, size_t __n,
    __locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (__const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (__const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 210 "/usr/include/string.h" 3 4



extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *strchr (__const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 233 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *strrchr (__const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 260 "/usr/include/string.h" 3 4
}










extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const char *strchrnul (__const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern size_t strcspn (__const char *__s, __const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (__const char *__s, __const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, __const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern __const char *strpbrk (__const char *__s, __const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 312 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strstr (char *__haystack, __const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern __const char *strstr (__const char *__haystack,
        __const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 340 "/usr/include/string.h" 3 4
}







extern char *strtok (char *__restrict __s, __const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    __const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, __const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, __const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" __const char *strcasestr (__const char *__haystack,
           __const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 382 "/usr/include/string.h" 3 4
extern void *memmem (__const void *__haystack, size_t __haystacklen,
       __const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (__const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (__const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) throw ();

# 438 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));





extern char *strerror_l (int __errnum, __locale_t __l) throw ();





extern void __bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern void bcopy (__const void *__src, void *__dest, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int bcmp (__const void *__s1, __const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *index (__const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 487 "/usr/include/string.h" 3 4
}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *rindex (__const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 515 "/usr/include/string.h" 3 4
}







extern int ffs (int __i) throw () __attribute__ ((__const__));




extern int ffsl (long int __l) throw () __attribute__ ((__const__));

__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));




extern int strcasecmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (__const char *__s1, __const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (__const char *__s1, __const char *__s2,
    __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (__const char *__s1, __const char *__s2,
     size_t __n, __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       __const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" __const char *basename (__const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 646 "/usr/include/string.h" 3 4
}
# 65 "/usr/local/cuda/include/common_functions.h" 2
# 1 "/usr/include/time.h" 1 3 4
# 30 "/usr/include/time.h" 3 4
extern "C" {







# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include/stddef.h" 1 3 4
# 39 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 131 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 132 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef long int __swblk_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;

typedef long int __ssize_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 28 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4



struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 86 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  long int offset;
  long int freq;
  long int maxerror;
  long int esterror;
  int status;
  long int constant;
  long int precision;
  long int tolerance;
  struct timeval time;
  long int tick;

  long int ppsfreq;
  long int jitter;
  int shift;
  long int stabil;
  long int jitcnt;
  long int calcnt;
  long int errcnt;
  long int stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 87 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 43 "/usr/include/time.h" 2 3 4
# 58 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 74 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 92 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 104 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    long int tv_nsec;
  };








struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  __const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;





typedef __pid_t pid_t;








extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   __const char *__restrict __format,
   __const struct tm *__restrict __tp) throw ();





extern char *strptime (__const char *__restrict __s,
         __const char *__restrict __fmt, struct tm *__tp)
     throw ();







extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     __const char *__restrict __format,
     __const struct tm *__restrict __tp,
     __locale_t __loc) throw ();



extern char *strptime_l (__const char *__restrict __s,
    __const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) throw ();






extern struct tm *gmtime (__const time_t *__timer) throw ();



extern struct tm *localtime (__const time_t *__timer) throw ();





extern struct tm *gmtime_r (__const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (__const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();





extern char *asctime (__const struct tm *__tp) throw ();


extern char *ctime (__const time_t *__timer) throw ();







extern char *asctime_r (__const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (__const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;





extern int stime (__const time_t *__when) throw ();
# 313 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 328 "/usr/include/time.h" 3 4
extern int nanosleep (__const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, __const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       __const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     __const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();
# 390 "/usr/include/time.h" 3 4
extern int getdate_err;
# 399 "/usr/include/time.h" 3 4
extern struct tm *getdate (__const char *__string);
# 413 "/usr/include/time.h" 3 4
extern int getdate_r (__const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 66 "/usr/local/cuda/include/common_functions.h" 2

extern "C"
{
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) clock_t clock(void) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) void* memset(void*, int, size_t) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) void* memcpy(void*, const void*, size_t) throw ();
}



# 1 "/usr/include/c++/4.4/new" 1 3
# 39 "/usr/include/c++/4.4/new" 3
# 1 "/usr/include/c++/4.4/cstddef" 1 3
# 41 "/usr/include/c++/4.4/cstddef" 3
       
# 42 "/usr/include/c++/4.4/cstddef" 3

# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/./bits/c++config.h" 1 3
# 243 "/usr/include/c++/4.4/x86_64-linux-gnu/./bits/c++config.h" 3
# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/./bits/os_defines.h" 1 3
# 244 "/usr/include/c++/4.4/x86_64-linux-gnu/./bits/c++config.h" 2 3


# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/./bits/cpu_defines.h" 1 3
# 247 "/usr/include/c++/4.4/x86_64-linux-gnu/./bits/c++config.h" 2 3
# 44 "/usr/include/c++/4.4/cstddef" 2 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include/stddef.h" 1 3 4
# 45 "/usr/include/c++/4.4/cstddef" 2 3




namespace std __attribute__ ((__visibility__ ("default"))) {

  using ::ptrdiff_t;
  using ::size_t;

}
# 40 "/usr/include/c++/4.4/new" 2 3
# 1 "/usr/include/c++/4.4/exception" 1 3
# 35 "/usr/include/c++/4.4/exception" 3
#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 59 "/usr/include/c++/4.4/exception" 3
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();



    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }



    virtual ~bad_exception() throw();


    virtual const char* what() const throw();
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();



  void terminate() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();



  void unexpected() __attribute__ ((__noreturn__));
# 115 "/usr/include/c++/4.4/exception" 3
  bool uncaught_exception() throw();


}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {
# 138 "/usr/include/c++/4.4/exception" 3
  void __verbose_terminate_handler();

}

}

#pragma GCC visibility pop
# 41 "/usr/include/c++/4.4/new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };

  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();
}
# 91 "/usr/include/c++/4.4/new" 3
void* operator new(std::size_t) throw (std::bad_alloc);
void* operator new[](std::size_t) throw (std::bad_alloc);
void operator delete(void*) throw();
void operator delete[](void*) throw();
void* operator new(std::size_t, const std::nothrow_t&) throw();
void* operator new[](std::size_t, const std::nothrow_t&) throw();
void operator delete(void*, const std::nothrow_t&) throw();
void operator delete[](void*, const std::nothrow_t&) throw();


inline void* operator new(std::size_t, void* __p) throw() { return __p; }
inline void* operator new[](std::size_t, void* __p) throw() { return __p; }


inline void operator delete (void*, void*) throw() { }
inline void operator delete[](void*, void*) throw() { }

}

#pragma GCC visibility pop
# 77 "/usr/local/cuda/include/common_functions.h" 2
# 89 "/usr/local/cuda/include/common_functions.h"
extern __attribute__((host)) __attribute__((device)) void* operator new(std:: size_t, void*) throw();
extern __attribute__((host)) __attribute__((device)) void* operator new[](std:: size_t, void*) throw();
extern __attribute__((host)) __attribute__((device)) void operator delete(void*, void*) throw();
extern __attribute__((host)) __attribute__((device)) void operator delete[](void*, void*) throw();
# 159 "/usr/local/cuda/include/common_functions.h"
# 1 "/usr/local/cuda/include/math_functions.h" 1
# 93 "/usr/local/cuda/include/math_functions.h"
# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 94 "/usr/local/cuda/include/math_functions.h" 2
# 102 "/usr/local/cuda/include/math_functions.h"
extern "C"
{
# 160 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int abs(int) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int labs(long int) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llabs(long long int) throw ();
# 175 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fabs(double x) throw ();
# 188 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fabsf(float x) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int min(int, int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) unsigned int umin(unsigned int, unsigned int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llmin(long long int, long long int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) unsigned long long int ullmin(unsigned long long int, unsigned long long int);
# 208 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fminf(float x, float y) throw ();
# 224 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fmin(double x, double y) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int max(int, int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) unsigned int umax(unsigned int, unsigned int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llmax(long long int, long long int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) unsigned long long int ullmax(unsigned long long int, unsigned long long int);
# 244 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fmaxf(float x, float y) throw ();
# 260 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fmax(double, double) throw ();
# 273 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double sin(double x) throw ();
# 286 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cos(double x) throw ();
# 301 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) void sincos(double x, double *sptr, double *cptr) throw ();
# 317 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) void sincosf(float x, float *sptr, float *cptr) throw ();
# 330 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double tan(double x) throw ();
# 345 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double sqrt(double x) throw ();
# 360 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rsqrt(double x);
# 375 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rsqrtf(float x);
# 390 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double log2(double x) throw ();
# 401 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double exp2(double x) throw ();
# 412 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float exp2f(float x) throw ();
# 423 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double exp10(double x) throw ();
# 435 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float exp10f(float x) throw ();
# 446 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double expm1(double x) throw ();
# 457 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float expm1f(float x) throw ();
# 472 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float log2f(float x) throw ();
# 487 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double log10(double x) throw ();
# 502 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double log(double x) throw ();
# 517 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double log1p(double x) throw ();
# 532 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float log1pf(float x) throw ();
# 546 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double floor(double x) throw ();
# 557 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double exp(double x) throw ();
# 570 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cosh(double x) throw ();
# 582 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double sinh(double x) throw ();
# 594 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double tanh(double x) throw ();
# 608 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double acosh(double x) throw ();
# 622 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float acoshf(float x) throw ();
# 634 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double asinh(double x) throw ();
# 646 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float asinhf(float x) throw ();
# 660 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double atanh(double x) throw ();
# 674 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float atanhf(float x) throw ();
# 686 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double ldexp(double x, int exp) throw ();
# 698 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float ldexpf(float x, int exp) throw ();
# 711 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double logb(double x) throw ();
# 724 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float logbf(float x) throw ();
# 742 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int ilogb(double x) throw ();
# 760 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int ilogbf(float x) throw ();
# 774 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double scalbn(double x, int n) throw ();
# 788 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float scalbnf(float x, int n) throw ();
# 802 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double scalbln(double x, long int n) throw ();
# 816 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float scalblnf(float x, long int n) throw ();
# 837 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double frexp(double x, int *nptr) throw ();
# 858 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float frexpf(float x, int *nptr) throw ();
# 871 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double round(double x) throw ();
# 884 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float roundf(float x) throw ();
# 898 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int lround(double x) throw ();
# 912 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int lroundf(float x) throw ();
# 926 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llround(double x) throw ();
# 940 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llroundf(float x) throw ();
# 951 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rint(double x) throw ();
# 962 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rintf(float x) throw ();
# 974 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int lrint(double x) throw ();
# 986 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int lrintf(float x) throw ();
# 998 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llrint(double x) throw ();
# 1010 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llrintf(float x) throw ();
# 1023 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double nearbyint(double x) throw ();
# 1036 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float nearbyintf(float x) throw ();
# 1048 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double ceil(double x) throw ();
# 1059 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double trunc(double x) throw ();
# 1070 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float truncf(float x) throw ();
# 1084 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fdim(double x, double y) throw ();
# 1098 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fdimf(float x, float y) throw ();
# 1113 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double atan2(double x, double y) throw ();
# 1126 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double atan(double x) throw ();
# 1140 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double acos(double x) throw ();
# 1154 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double asin(double x) throw ();
# 1169 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double hypot(double x, double y) throw ();
# 1186 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float hypotf(float x, float y) throw ();
# 1200 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cbrt(double x) throw ();
# 1214 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cbrtf(float x) throw ();
# 1227 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rcbrt(double x);
# 1240 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rcbrtf(float x);
# 1254 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double sinpi(double x);
# 1268 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float sinpif(float x);
# 1282 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cospi(double x);
# 1296 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cospif(float x);
# 1324 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double pow(double x, double y) throw ();
# 1341 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double modf(double x, double *iptr) throw ();
# 1361 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fmod(double x, double y) throw ();
# 1379 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double remainder(double x, double y) throw ();
# 1398 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float remainderf(float x, float y) throw ();
# 1417 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double remquo(double x, double y, int *quo) throw ();
# 1436 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float remquof(float x, float y, int *quo) throw ();
# 1451 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double j0(double x) throw ();
# 1466 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float j0f(float x) throw ();
# 1482 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double j1(double x) throw ();
# 1498 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float j1f(float x) throw ();
# 1514 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double jn(int n, double x) throw ();
# 1530 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float jnf(int n, float x) throw ();
# 1547 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double y0(double x) throw ();
# 1564 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float y0f(float x) throw ();
# 1581 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double y1(double x) throw ();
# 1598 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float y1f(float x) throw ();
# 1616 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double yn(int n, double x) throw ();
# 1634 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float ynf(int n, float x) throw ();
# 1648 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erf(double x) throw ();
# 1662 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erff(float x) throw ();
# 1677 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erfinv(double y);
# 1692 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erfinvf(float y);
# 1706 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erfc(double x) throw ();
# 1720 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erfcf(float x) throw ();
# 1738 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double lgamma(double x) throw ();
# 1753 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erfcinv(double y);
# 1768 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erfcinvf(float y);
# 1778 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erfcx(double x);
# 1788 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erfcxf(float x);
# 1806 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float lgammaf(float x) throw ();
# 1824 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double tgamma(double x) throw ();
# 1842 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float tgammaf(float x) throw ();
# 1851 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double copysign(double x, double y) throw ();
# 1860 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float copysignf(float x, float y) throw ();
# 1875 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double nextafter(double x, double y) throw ();
# 1890 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float nextafterf(float x, float y) throw ();
# 1902 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double nan(const char *tagp) throw ();
# 1914 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float nanf(const char *tagp) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isinff(float) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isnanf(float) throw ();
# 1925 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __finite(double) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __finitef(float) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __signbit(double) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isnan(double) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isinf(double) throw ();


extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __signbitf(float) throw ();
# 1949 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fma(double x, double y, double z) throw ();
# 1966 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fmaf(float x, float y, float z) throw ();




extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __signbitl(long double) throw ();





extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __finitel(long double) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isinfl(long double) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isnanl(long double) throw ();
# 2017 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float acosf(float x) throw ();
# 2031 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float asinf(float x) throw ();
# 2045 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float atanf(float x) throw ();
# 2060 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float atan2f(float x, float y) throw ();
# 2074 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cosf(float x) throw ();
# 2088 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float sinf(float x) throw ();
# 2102 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float tanf(float x) throw ();
# 2116 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float coshf(float x) throw ();
# 2129 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float sinhf(float x) throw ();
# 2141 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float tanhf(float x) throw ();
# 2156 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float logf(float x) throw ();
# 2168 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float expf(float x) throw ();
# 2183 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float log10f(float x) throw ();
# 2199 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float modff(float x, float *iptr) throw ();
# 2227 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float powf(float x, float y) throw ();
# 2242 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float sqrtf(float x) throw ();
# 2254 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float ceilf(float x) throw ();
# 2268 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float floorf(float x) throw ();
# 2288 "/usr/local/cuda/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fmodf(float x, float y) throw ();


}

# 1 "/usr/include/math.h" 1 3 4
# 30 "/usr/include/math.h" 3 4
extern "C" {



# 1 "/usr/include/x86_64-linux-gnu/bits/huge_val.h" 1 3 4
# 35 "/usr/include/math.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/huge_valf.h" 1 3 4
# 37 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/huge_vall.h" 1 3 4
# 38 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/inf.h" 1 3 4
# 41 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/nan.h" 1 3 4
# 44 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 2 3 4




typedef float float_t;
typedef double double_t;
# 48 "/usr/include/math.h" 2 3 4
# 71 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();




extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ();






extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();







extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw ()
     __attribute__ ((__nonnull__ (2)));




extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();

extern double pow10 (double __x) throw (); extern double __pow10 (double __x) throw ();





extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();






extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();








extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();





extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();






extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();








extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();




extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));





extern int isinf (double __value) throw () __attribute__ ((__const__));


extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();





extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));






extern double nan (__const char *__tagb) throw () __attribute__ ((__const__)); extern double __nan (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnan (double __value) throw () __attribute__ ((__const__));



extern int isnan (double __value) throw () __attribute__ ((__const__));


extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();






extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();






extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();






extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();







extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw () __attribute__ ((__const__)); extern double __nextafter (double __x, double __y) throw () __attribute__ ((__const__));

extern double nexttoward (double __x, long double __y) throw () __attribute__ ((__const__)); extern double __nexttoward (double __x, long double __y) throw () __attribute__ ((__const__));



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw (); extern double __fmax (double __x, double __y) throw ();


extern double fmin (double __x, double __y) throw (); extern double __fmin (double __x, double __y) throw ();



extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();








extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 72 "/usr/include/math.h" 2 3 4
# 94 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();




extern void sincosf (float __x, float *__sinx, float *__cosx) throw (); extern void __sincosf (float __x, float *__sinx, float *__cosx) throw ();






extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();







extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw ()
     __attribute__ ((__nonnull__ (2)));




extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();

extern float pow10f (float __x) throw (); extern float __pow10f (float __x) throw ();





extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();






extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();








extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();





extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();






extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();








extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();




extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));





extern int isinff (float __value) throw () __attribute__ ((__const__));


extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();





extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));






extern float nanf (__const char *__tagb) throw () __attribute__ ((__const__)); extern float __nanf (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanf (float __value) throw () __attribute__ ((__const__));



extern int isnanf (float __value) throw () __attribute__ ((__const__));


extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();






extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();






extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();






extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();







extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __nextafterf (float __x, float __y) throw () __attribute__ ((__const__));

extern float nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__)); extern float __nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__));



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw (); extern float __fmaxf (float __x, float __y) throw ();


extern float fminf (float __x, float __y) throw (); extern float __fminf (float __x, float __y) throw ();



extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();








extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 95 "/usr/include/math.h" 2 3 4
# 146 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();




extern void sincosl (long double __x, long double *__sinx, long double *__cosx) throw (); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) throw ();






extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();







extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw ()
     __attribute__ ((__nonnull__ (2)));




extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();

extern long double pow10l (long double __x) throw (); extern long double __pow10l (long double __x) throw ();





extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();






extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();








extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();





extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();






extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();








extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();




extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));





extern int isinfl (long double __value) throw () __attribute__ ((__const__));


extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();





extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));






extern long double nanl (__const char *__tagb) throw () __attribute__ ((__const__)); extern long double __nanl (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanl (long double __value) throw () __attribute__ ((__const__));



extern int isnanl (long double __value) throw () __attribute__ ((__const__));


extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();






extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();






extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();






extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();







extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__));

extern long double nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw (); extern long double __fmaxl (long double __x, long double __y) throw ();


extern long double fminl (long double __x, long double __y) throw (); extern long double __fminl (long double __x, long double __y) throw ();



extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();








extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 147 "/usr/include/math.h" 2 3 4
# 162 "/usr/include/math.h" 3 4
extern int signgam;
# 203 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN,

    FP_INFINITE,

    FP_ZERO,

    FP_SUBNORMAL,

    FP_NORMAL

  };
# 296 "/usr/include/math.h" 3 4
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;




extern _LIB_VERSION_TYPE _LIB_VERSION;
# 319 "/usr/include/math.h" 3 4
struct __exception



  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };


extern int matherr (struct __exception *__exc) throw ();
# 483 "/usr/include/math.h" 3 4
}
# 2294 "/usr/local/cuda/include/math_functions.h" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 33 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include/stddef.h" 1 3 4
# 34 "/usr/include/stdlib.h" 2 3 4

extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 43 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 38 "/usr/include/endian.h" 2 3 4
# 61 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 62 "/usr/include/endian.h" 2 3 4
# 66 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 44 "/usr/include/stdlib.h" 2 3 4
# 96 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 140 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;




extern double atof (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (__const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern float strtof (__const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1))) ;

extern long double strtold (__const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern long int strtol (__const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

extern unsigned long int strtoul (__const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;




__extension__
extern long long int strtoq (__const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtouq (__const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;





__extension__
extern long long int strtoll (__const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtoull (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

# 240 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4))) ;

extern unsigned long int strtoul_l (__const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern long long int strtoll_l (__const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern unsigned long long int strtoull_l (__const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

extern double strtod_l (__const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;

extern float strtof_l (__const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;

extern long double strtold_l (__const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;
# 311 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (__const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;
# 105 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 137 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include/stddef.h" 1 3 4
# 148 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 195 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 220 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 32 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 35 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;







# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 47 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 55 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 65 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 97 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 107 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 119 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 132 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 221 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
extern "C" {

__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     throw () __attribute__ ((__const__));
# 64 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
}
# 224 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 263 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


typedef union
{
  char __size[56];
  long int __align;
} pthread_attr_t;



typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 76 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    int __spins;
    __pthread_list_t __list;
# 101 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    unsigned long int __pad1;
    unsigned long int __pad2;


    unsigned int __flags;
  } __data;
# 187 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 272 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 321 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();




extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    unsigned long long int __a;
  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) throw ();




extern void cfree (void *__ptr) throw ();



# 1 "/usr/include/alloca.h" 1 3 4
# 25 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include/stddef.h" 1 3 4
# 26 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 498 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));






extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));









extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) throw () __attribute__ ((__noreturn__));







extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));







extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));






extern char *getenv (__const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *__secure_getenv (__const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (__const char *__name, __const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 606 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 620 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 630 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 642 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 652 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 663 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 674 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 684 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 694 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 706 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;









extern int system (__const char *__command) ;






extern char *canonicalize_file_name (__const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 734 "/usr/include/stdlib.h" 3 4
extern char *realpath (__const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (__const void *, __const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (__const void *, __const void *, void *);





extern void *bsearch (__const void *__key, __const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;



extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;

# 808 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));







extern int mblen (__const char *__s, size_t __n) throw () ;


extern int mbtowc (wchar_t *__restrict __pwc,
     __const char *__restrict __s, size_t __n) throw () ;


extern int wctomb (char *__s, wchar_t __wchar) throw () ;



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   __const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   __const wchar_t *__restrict __pwcs, size_t __n)
     throw ();








extern int rpmatch (__const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 896 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *__const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (__const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 964 "/usr/include/stdlib.h" 3 4
}
# 2295 "/usr/local/cuda/include/math_functions.h" 2
# 1 "/usr/include/c++/4.4/cmath" 1 3
# 41 "/usr/include/c++/4.4/cmath" 3
       
# 42 "/usr/include/c++/4.4/cmath" 3


# 1 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 1 3
# 36 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
       
# 37 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
# 69 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {

  template<typename _Iterator, typename _Container>
    class __normal_iterator;

}

namespace std __attribute__ ((__visibility__ ("default"))) {

  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };




  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 194 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_fundamental
    : public __traitor<__is_void<_Tp>, __is_arithmetic<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };
# 417 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
}
# 45 "/usr/include/c++/4.4/cmath" 2 3
# 1 "/usr/include/c++/4.4/ext/type_traits.h" 1 3
# 32 "/usr/include/c++/4.4/ext/type_traits.h" 3
       
# 33 "/usr/include/c++/4.4/ext/type_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {


  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };

  template<typename _Tp>
    struct __promote<_Tp, false>
    { typedef _Tp __type; };

  template<typename _Tp, typename _Up>
    struct __promote_2
    {
    private:
      typedef typename __promote<_Tp>::__type __type1;
      typedef typename __promote<_Up>::__type __type2;

    public:
      typedef __typeof__(__type1() + __type2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp>
    struct __promote_3
    {
    private:
      typedef typename __promote<_Tp>::__type __type1;
      typedef typename __promote<_Up>::__type __type2;
      typedef typename __promote<_Vp>::__type __type3;

    public:
      typedef __typeof__(__type1() + __type2() + __type3()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp>
    struct __promote_4
    {
    private:
      typedef typename __promote<_Tp>::__type __type1;
      typedef typename __promote<_Up>::__type __type2;
      typedef typename __promote<_Vp>::__type __type3;
      typedef typename __promote<_Wp>::__type __type4;

    public:
      typedef __typeof__(__type1() + __type2() + __type3() + __type4()) __type;
    };

}
# 46 "/usr/include/c++/4.4/cmath" 2 3
# 77 "/usr/include/c++/4.4/cmath" 3
namespace std __attribute__ ((__visibility__ ("default"))) {



  template<typename _Tp>
    _Tp __cmath_power(_Tp, unsigned int);

  template<typename _Tp>
    inline _Tp
    __pow_helper(_Tp __x, int __n)
    {
      return __n < 0
        ? _Tp(1)/__cmath_power(__x, -__n)
        : __cmath_power(__x, __n);
    }

  inline double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }

  using ::acos;

  inline float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline long double
  acos(long double __x)
  { return __builtin_acosl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;

  inline float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline long double
  asin(long double __x)
  { return __builtin_asinl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;

  inline float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline long double
  atan(long double __x)
  { return __builtin_atanl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;

  inline float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }

  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<
    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value
        && __is_arithmetic<_Up>::__value,
        _Tp>::__type, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;

  inline float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;

  inline float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline long double
  cos(long double __x)
  { return __builtin_cosl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;

  inline float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;

  inline float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline long double
  exp(long double __x)
  { return __builtin_expl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;

  inline float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;

  inline float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline long double
  floor(long double __x)
  { return __builtin_floorl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;

  inline float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }

  using ::frexp;

  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;

  inline float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
  ldexp(_Tp __x, int __exp)
  { return __builtin_ldexp(__x, __exp); }

  using ::log;

  inline float
  log(float __x)
  { return __builtin_logf(__x); }

  inline long double
  log(long double __x)
  { return __builtin_logl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;

  inline float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline long double
  log10(long double __x)
  { return __builtin_log10l(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;

  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }

  using ::pow;

  inline float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }




  inline double
  pow(double __x, int __i)
  { return __builtin_powi(__x, __i); }

  inline float
  pow(float __x, int __n)
  { return __builtin_powif(__x, __n); }

  inline long double
  pow(long double __x, int __n)
  { return __builtin_powil(__x, __n); }


  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<
    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value
        && __is_arithmetic<_Up>::__value,
        _Tp>::__type, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;

  inline float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline long double
  sin(long double __x)
  { return __builtin_sinl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;

  inline float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;

  inline float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;

  inline float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline long double
  tan(long double __x)
  { return __builtin_tanl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;

  inline float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }

}
# 492 "/usr/include/c++/4.4/cmath" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    fpclassify(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL,
      FP_SUBNORMAL, FP_ZERO, __type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isfinite(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isfinite(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isinf(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isinf(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isnan(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isnan(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isnormal(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isnormal(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    signbit(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_signbit(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isgreater(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isgreater(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isgreaterequal(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isgreaterequal(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isless(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isless(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    islessequal(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_islessequal(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    islessgreater(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_islessgreater(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isunordered(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isunordered(__type(__f1), __type(__f2));
    }

}





# 1 "/usr/include/c++/4.4/bits/cmath.tcc" 1 3
# 35 "/usr/include/c++/4.4/bits/cmath.tcc" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _Tp>
    inline _Tp
    __cmath_power(_Tp __x, unsigned int __n)
    {
      _Tp __y = __n % 2 ? __x : _Tp(1);

      while (__n >>= 1)
        {
          __x = __x * __x;
          if (__n % 2)
            __y = __y * __x;
        }

      return __y;
    }

}
# 610 "/usr/include/c++/4.4/cmath" 2 3
# 2296 "/usr/local/cuda/include/math_functions.h" 2
# 1 "/usr/include/c++/4.4/cstdlib" 1 3
# 41 "/usr/include/c++/4.4/cstdlib" 3
       
# 42 "/usr/include/c++/4.4/cstdlib" 3


# 1 "/usr/include/c++/4.4/cstddef" 1 3
# 41 "/usr/include/c++/4.4/cstddef" 3
       
# 42 "/usr/include/c++/4.4/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include/stddef.h" 1 3 4
# 45 "/usr/include/c++/4.4/cstddef" 2 3
# 45 "/usr/include/c++/4.4/cstdlib" 2 3
# 100 "/usr/include/c++/4.4/cstdlib" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  using ::div_t;
  using ::ldiv_t;

  using ::abort;
  using ::abs;
  using ::atexit;
  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;
  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;


  inline long
  abs(long __i) { return labs(__i); }

  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }

}
# 157 "/usr/include/c++/4.4/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {


  using ::lldiv_t;





  using ::_Exit;


  inline long long
  abs(long long __x) { return __x >= 0 ? __x : -__x; }


  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 190 "/usr/include/c++/4.4/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;

}

namespace std __attribute__ ((__visibility__ ("default"))) {


  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;
  using ::__gnu_cxx::abs;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;

}
# 2297 "/usr/local/cuda/include/math_functions.h" 2
# 2335 "/usr/local/cuda/include/math_functions.h"
namespace __gnu_cxx
{
  extern __attribute__((host)) __attribute__((device)) long long int abs(long long int);
}

namespace std
{
  template<typename T> extern __attribute__((host)) __attribute__((device)) T __pow_helper(T, int);
  template<typename T> extern __attribute__((host)) __attribute__((device)) T __cmath_power(T, unsigned int);
}

using std::abs;
using std::fabs;
using std::ceil;
using std::floor;
using std::sqrt;
using std::pow;
using std::log;
using std::log10;
using std::fmod;
using std::modf;
using std::exp;
using std::frexp;
using std::ldexp;
using std::asin;
using std::sin;
using std::sinh;
using std::acos;
using std::cos;
using std::cosh;
using std::atan;
using std::atan2;
using std::tan;
using std::tanh;
# 2531 "/usr/local/cuda/include/math_functions.h"
namespace std {


extern __attribute__((host)) __attribute__((device)) long int abs(long int);
extern __attribute__((host)) __attribute__((device)) float abs(float);
extern __attribute__((host)) __attribute__((device)) double abs(double);
extern __attribute__((host)) __attribute__((device)) float fabs(float);
extern __attribute__((host)) __attribute__((device)) float ceil(float);
extern __attribute__((host)) __attribute__((device)) float floor(float);
extern __attribute__((host)) __attribute__((device)) float sqrt(float);
extern __attribute__((host)) __attribute__((device)) float pow(float, float);
extern __attribute__((host)) __attribute__((device)) float pow(float, int);
extern __attribute__((host)) __attribute__((device)) double pow(double, int);
extern __attribute__((host)) __attribute__((device)) float log(float);
extern __attribute__((host)) __attribute__((device)) float log10(float);
extern __attribute__((host)) __attribute__((device)) float fmod(float, float);
extern __attribute__((host)) __attribute__((device)) float modf(float, float*);
extern __attribute__((host)) __attribute__((device)) float exp(float);
extern __attribute__((host)) __attribute__((device)) float frexp(float, int*);
extern __attribute__((host)) __attribute__((device)) float ldexp(float, int);
extern __attribute__((host)) __attribute__((device)) float asin(float);
extern __attribute__((host)) __attribute__((device)) float sin(float);
extern __attribute__((host)) __attribute__((device)) float sinh(float);
extern __attribute__((host)) __attribute__((device)) float acos(float);
extern __attribute__((host)) __attribute__((device)) float cos(float);
extern __attribute__((host)) __attribute__((device)) float cosh(float);
extern __attribute__((host)) __attribute__((device)) float atan(float);
extern __attribute__((host)) __attribute__((device)) float atan2(float, float);
extern __attribute__((host)) __attribute__((device)) float tan(float);
extern __attribute__((host)) __attribute__((device)) float tanh(float);


}


static __inline__ __attribute__((host)) __attribute__((device)) float logb(float a)
{
  return logbf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) int ilogb(float a)
{
  return ilogbf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float scalbn(float a, int b)
{
  return scalbnf(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) float scalbln(float a, long int b)
{
  return scalblnf(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) float exp2(float a)
{
  return exp2f(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float exp10(float a)
{
  return exp10f(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float expm1(float a)
{
  return expm1f(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float log2(float a)
{
  return log2f(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float log1p(float a)
{
  return log1pf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float rsqrt(float a)
{
  return rsqrtf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float acosh(float a)
{
  return acoshf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float asinh(float a)
{
  return asinhf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float atanh(float a)
{
  return atanhf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float hypot(float a, float b)
{
  return hypotf(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) float cbrt(float a)
{
  return cbrtf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float rcbrt(float a)
{
  return rcbrtf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float sinpi(float a)
{
  return sinpif(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float cospi(float a)
{
  return cospif(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) void sincos(float a, float *sptr, float *cptr)
{
  sincosf(a, sptr, cptr);
}

static __inline__ __attribute__((host)) __attribute__((device)) float j0(float a)
{
  return j0f(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float j1(float a)
{
  return j1f(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float jn(int n, float a)
{
  return jnf(n, a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float y0(float a)
{
  return y0f(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float y1(float a)
{
  return y1f(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float yn(int n, float a)
{
  return ynf(n, a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float erf(float a)
{
  return erff(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float erfinv(float a)
{
  return erfinvf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float erfc(float a)
{
  return erfcf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float erfcinv(float a)
{
  return erfcinvf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float erfcx(float a)
{
  return erfcxf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float lgamma(float a)
{
  return lgammaf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float tgamma(float a)
{
  return tgammaf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float copysign(float a, float b)
{
  return copysignf(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) double copysign(double a, float b)
{
  return copysign(a, (double)b);
}

static __inline__ __attribute__((host)) __attribute__((device)) float copysign(float a, double b)
{
  return copysignf(a, (float)b);
}

static __inline__ __attribute__((host)) __attribute__((device)) float nextafter(float a, float b)
{
  return nextafterf(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) float remainder(float a, float b)
{
  return remainderf(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) float remquo(float a, float b, int *quo)
{
  return remquof(a, b, quo);
}

static __inline__ __attribute__((host)) __attribute__((device)) float round(float a)
{
  return roundf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) long int lround(float a)
{
  return lroundf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) long long int llround(float a)
{
  return llroundf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float trunc(float a)
{
  return truncf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float rint(float a)
{
  return rintf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) long int lrint(float a)
{
  return lrintf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) long long int llrint(float a)
{
  return llrintf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float nearbyint(float a)
{
  return nearbyintf(a);
}

static __inline__ __attribute__((host)) __attribute__((device)) float fdim(float a, float b)
{
  return fdimf(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) float fma(float a, float b, float c)
{
  return fmaf(a, b, c);
}

static __inline__ __attribute__((host)) __attribute__((device)) float fmax(float a, float b)
{
  return fmaxf(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) float fmin(float a, float b)
{
  return fminf(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) unsigned int min(unsigned int a, unsigned int b)
{
  return umin(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) unsigned int min(int a, unsigned int b)
{
  return umin((unsigned int)a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) unsigned int min(unsigned int a, int b)
{
  return umin(a, (unsigned int)b);
}

static __inline__ __attribute__((host)) __attribute__((device)) long long int min(long long int a, long long int b)
{
  return llmin(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) unsigned long long int min(unsigned long long int a, unsigned long long int b)
{
  return ullmin(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) unsigned long long int min(long long int a, unsigned long long int b)
{
  return ullmin((unsigned long long int)a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) unsigned long long int min(unsigned long long int a, long long int b)
{
  return ullmin(a, (unsigned long long int)b);
}

static __inline__ __attribute__((host)) __attribute__((device)) float min(float a, float b)
{
  return fminf(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) double min(double a, double b)
{
  return fmin(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) double min(float a, double b)
{
  return fmin((double)a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) double min(double a, float b)
{
  return fmin(a, (double)b);
}

static __inline__ __attribute__((host)) __attribute__((device)) unsigned int max(unsigned int a, unsigned int b)
{
  return umax(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) unsigned int max(int a, unsigned int b)
{
  return umax((unsigned int)a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) unsigned int max(unsigned int a, int b)
{
  return umax(a, (unsigned int)b);
}

static __inline__ __attribute__((host)) __attribute__((device)) long long int max(long long int a, long long int b)
{
  return llmax(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) unsigned long long int max(unsigned long long int a, unsigned long long int b)
{
  return ullmax(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) unsigned long long int max(long long int a, unsigned long long int b)
{
  return ullmax((unsigned long long int)a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) unsigned long long int max(unsigned long long int a, long long int b)
{
  return ullmax(a, (unsigned long long int)b);
}

static __inline__ __attribute__((host)) __attribute__((device)) float max(float a, float b)
{
  return fmaxf(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) double max(double a, double b)
{
  return fmax(a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) double max(float a, double b)
{
  return fmax((double)a, b);
}

static __inline__ __attribute__((host)) __attribute__((device)) double max(double a, float b)
{
  return fmax(a, (double)b);
}
# 7724 "/usr/local/cuda/include/math_functions.h"
# 1 "/usr/local/cuda/include/math_functions_dbl_ptx1.h" 1
# 7725 "/usr/local/cuda/include/math_functions.h" 2
# 160 "/usr/local/cuda/include/common_functions.h" 2
# 77 "/usr/local/cuda/include/cuda_runtime.h" 2
# 1 "/usr/local/cuda/include/cuda_surface_types.h" 1
# 61 "/usr/local/cuda/include/cuda_surface_types.h"
# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 62 "/usr/local/cuda/include/cuda_surface_types.h" 2
# 73 "/usr/local/cuda/include/cuda_surface_types.h"
template<class T, int dim = 1>
struct __attribute__((device_builtin_surface_type)) surface : public surfaceReference
{
  __attribute__((host)) surface(void)
  {
    channelDesc = cudaCreateChannelDesc<T>();
  }

  __attribute__((host)) surface(struct cudaChannelFormatDesc desc)
  {
    channelDesc = desc;
  }
};

template<int dim>
struct __attribute__((device_builtin_surface_type)) surface<void, dim> : public surfaceReference
{
  __attribute__((host)) surface(void)
  {
    channelDesc = cudaCreateChannelDesc<void>();
  }
};
# 78 "/usr/local/cuda/include/cuda_runtime.h" 2
# 1 "/usr/local/cuda/include/cuda_texture_types.h" 1
# 61 "/usr/local/cuda/include/cuda_texture_types.h"
# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 62 "/usr/local/cuda/include/cuda_texture_types.h" 2
# 73 "/usr/local/cuda/include/cuda_texture_types.h"
template<class T, int texType = 0x01, enum cudaTextureReadMode mode = cudaReadModeElementType>
struct __attribute__((device_builtin_texture_type)) texture : public textureReference
{
  __attribute__((host)) texture(int norm = 0,
                   enum cudaTextureFilterMode fMode = cudaFilterModePoint,
                   enum cudaTextureAddressMode aMode = cudaAddressModeClamp)
  {
    normalized = norm;
    filterMode = fMode;
    addressMode[0] = aMode;
    addressMode[1] = aMode;
    addressMode[2] = aMode;
    channelDesc = cudaCreateChannelDesc<T>();
    sRGB = 0;
  }

  __attribute__((host)) texture(int norm,
                   enum cudaTextureFilterMode fMode,
                   enum cudaTextureAddressMode aMode,
                   struct cudaChannelFormatDesc desc)
  {
    normalized = norm;
    filterMode = fMode;
    addressMode[0] = aMode;
    addressMode[1] = aMode;
    addressMode[2] = aMode;
    channelDesc = desc;
    sRGB = 0;
  }
};
# 79 "/usr/local/cuda/include/cuda_runtime.h" 2
# 1 "/usr/local/cuda/include/device_functions.h" 1
# 61 "/usr/local/cuda/include/device_functions.h"
# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 62 "/usr/local/cuda/include/device_functions.h" 2
# 71 "/usr/local/cuda/include/device_functions.h"
extern "C"
{
# 82 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __mulhi(int x, int y);
# 92 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __umulhi(unsigned int x, unsigned int y);
# 102 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __mul64hi(long long int x, long long int y);
# 112 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __umul64hi(unsigned long long int x, unsigned long long int y);
# 121 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __int_as_float(int x);
# 130 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __float_as_int(float x);
extern __attribute__((device)) __attribute__((device_builtin)) void __syncthreads(void);
extern __attribute__((device)) __attribute__((device_builtin)) void __prof_trigger(int);
extern __attribute__((device)) __attribute__((device_builtin)) void __threadfence(void);
extern __attribute__((device)) __attribute__((device_builtin)) void __threadfence_block(void);
extern __attribute__((device)) __attribute__((device_builtin)) void __trap(void);
extern __attribute__((device)) __attribute__((device_builtin)) void __brkpt(int c = 0);
# 148 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __saturatef(float x);
# 162 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __sad(int x, int y, unsigned int z);
# 175 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __usad(unsigned int x, unsigned int y, unsigned int z);
# 185 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __mul24(int x, int y);
# 195 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __umul24(unsigned int x, unsigned int y);
# 208 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float fdividef(float x, float y);
# 221 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fdividef(float x, float y);
extern __attribute__((device)) __attribute__((device_builtin)) double fdivide(double x, double y);
# 234 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __sinf(float x) throw ();
# 246 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __cosf(float x) throw ();
# 260 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __tanf(float x) throw ();
# 275 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __sincosf(float x, float *sptr, float *cptr) throw ();
# 287 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __expf(float x) throw ();
# 299 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __exp10f(float x) throw ();
# 311 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __log2f(float x) throw ();
# 323 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __log10f(float x) throw ();
# 335 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __logf(float x) throw ();
# 348 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __powf(float x, float y) throw ();
# 357 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __float2int_rn(float x);
# 366 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __float2int_rz(float x);
# 375 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __float2int_ru(float);
# 384 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __float2int_rd(float x);
# 393 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __float2uint_rn(float x);
# 402 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __float2uint_rz(float x);
# 411 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __float2uint_ru(float x);
# 420 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __float2uint_rd(float x);
# 429 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __int2float_rn(int x);
# 438 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __int2float_rz(int x);
# 447 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __int2float_ru(int x);
# 456 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __int2float_rd(int x);
# 465 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __uint2float_rn(unsigned int x);
# 474 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __uint2float_rz(unsigned int x);
# 483 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __uint2float_ru(unsigned int x);
# 492 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __uint2float_rd(unsigned int x);
# 501 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __float2ll_rn(float x);
# 510 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __float2ll_rz(float x);
# 519 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __float2ll_ru(float x);
# 528 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __float2ll_rd(float x);
# 537 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __float2ull_rn(float x);
# 546 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __float2ull_rz(float x);
# 555 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __float2ull_ru(float x);
# 564 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __float2ull_rd(float x);
# 573 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __ll2float_rn(long long int x);
# 582 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __ll2float_rz(long long int x);
# 591 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __ll2float_ru(long long int x);
# 600 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __ll2float_rd(long long int x);
# 609 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __ull2float_rn(unsigned long long int x);
# 618 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __ull2float_rz(unsigned long long int x);
# 627 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __ull2float_ru(unsigned long long int x);
# 636 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __ull2float_rd(unsigned long long int x);
# 645 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned short __float2half_rn(float x);
# 654 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __half2float(unsigned short x);
# 666 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fadd_rn(float x, float y);
# 678 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fadd_rz(float x, float y);
# 690 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fadd_ru(float x, float y);
# 702 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fadd_rd(float x, float y);
# 714 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fmul_rn(float x, float y);
# 726 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fmul_rz(float x, float y);
# 738 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fmul_ru(float x, float y);
# 750 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fmul_rd(float x, float y);
# 766 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fmaf_rn(float x, float y, float z);
# 782 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fmaf_rz(float x, float y, float z);
# 798 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fmaf_ru(float x, float y, float z);
# 814 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fmaf_rd(float x, float y, float z);
# 825 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __frcp_rn(float x);
# 836 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __frcp_rz(float x);
# 847 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __frcp_ru(float x);
# 858 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __frcp_rd(float x);
# 869 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fsqrt_rn(float x);
# 880 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fsqrt_rz(float x);
# 891 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fsqrt_ru(float x);
# 902 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fsqrt_rd(float x);
# 913 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fdiv_rn(float x, float y);
# 924 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fdiv_rz(float x, float y);
# 935 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fdiv_ru(float x, float y);
# 946 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __fdiv_rd(float x, float y);
# 955 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __clz(int x);
# 966 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __ffs(int x);
# 975 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __popc(unsigned int x);
# 984 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __brev(unsigned int x);
# 993 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __clzll(long long int x);
# 1004 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __ffsll(long long int x);
# 1013 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __popcll(unsigned long long int x);
# 1022 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __brevll(unsigned long long int x);
# 1046 "/usr/local/cuda/include/device_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __byte_perm(unsigned int x, unsigned int y, unsigned int s);
extern __attribute__((device)) __attribute__((device_builtin)) int __hadd(int, int);
extern __attribute__((device)) __attribute__((device_builtin)) int __rhadd(int, int);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uhadd(unsigned int, unsigned int);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __urhadd(unsigned int, unsigned int);
# 1095 "/usr/local/cuda/include/device_functions.h"
}







static __inline__ __attribute__((device)) int mulhi(int a, int b)
{
  return __mulhi(a, b);
}

static __inline__ __attribute__((device)) unsigned int mulhi(unsigned int a, unsigned int b)
{
  return __umulhi(a, b);
}

static __inline__ __attribute__((device)) unsigned int mulhi(int a, unsigned int b)
{
  return __umulhi((unsigned int)a, b);
}

static __inline__ __attribute__((device)) unsigned int mulhi(unsigned int a, int b)
{
  return __umulhi(a, (unsigned int)b);
}

static __inline__ __attribute__((device)) long long int mul64hi(long long int a, long long int b)
{
  return __mul64hi(a, b);
}

static __inline__ __attribute__((device)) unsigned long long int mul64hi(unsigned long long int a, unsigned long long int b)
{
  return __umul64hi(a, b);
}

static __inline__ __attribute__((device)) unsigned long long int mul64hi(long long int a, unsigned long long int b)
{
  return __umul64hi((unsigned long long int)a, b);
}

static __inline__ __attribute__((device)) unsigned long long int mul64hi(unsigned long long int a, long long int b)
{
  return __umul64hi(a, (unsigned long long int)b);
}

static __inline__ __attribute__((device)) int float_as_int(float a)
{
  return __float_as_int(a);
}

static __inline__ __attribute__((device)) float int_as_float(int a)
{
  return __int_as_float(a);
}

static __inline__ __attribute__((device)) float saturate(float a)
{
  return __saturatef(a);
}

static __inline__ __attribute__((device)) int mul24(int a, int b)
{
  return __mul24(a, b);
}

static __inline__ __attribute__((device)) unsigned int umul24(unsigned int a, unsigned int b)
{
  return __umul24(a, b);
}

static __inline__ __attribute__((device)) void trap(void)
{
  __trap();
}


static __inline__ __attribute__((device)) void brkpt(int c = 0)
{
  __brkpt(c);
}

static __inline__ __attribute__((device)) void syncthreads(void)
{
  __syncthreads();
}

static __inline__ __attribute__((device)) void prof_trigger(int e)
{
       if (e == 0) __prof_trigger( 0);
  else if (e == 1) __prof_trigger( 1);
  else if (e == 2) __prof_trigger( 2);
  else if (e == 3) __prof_trigger( 3);
  else if (e == 4) __prof_trigger( 4);
  else if (e == 5) __prof_trigger( 5);
  else if (e == 6) __prof_trigger( 6);
  else if (e == 7) __prof_trigger( 7);
  else if (e == 8) __prof_trigger( 8);
  else if (e == 9) __prof_trigger( 9);
  else if (e == 10) __prof_trigger(10);
  else if (e == 11) __prof_trigger(11);
  else if (e == 12) __prof_trigger(12);
  else if (e == 13) __prof_trigger(13);
  else if (e == 14) __prof_trigger(14);
  else if (e == 15) __prof_trigger(15);
}

static __inline__ __attribute__((device)) void threadfence(bool global = true)
{
  global ? __threadfence() : __threadfence_block();
}

static __inline__ __attribute__((device)) int float2int(float a, enum cudaRoundMode mode = cudaRoundZero)
{
  return mode == cudaRoundNearest ? __float2int_rn(a) :
         mode == cudaRoundPosInf ? __float2int_ru(a) :
         mode == cudaRoundMinInf ? __float2int_rd(a) :
                                    __float2int_rz(a);
}

static __inline__ __attribute__((device)) unsigned int float2uint(float a, enum cudaRoundMode mode = cudaRoundZero)
{
  return mode == cudaRoundNearest ? __float2uint_rn(a) :
         mode == cudaRoundPosInf ? __float2uint_ru(a) :
         mode == cudaRoundMinInf ? __float2uint_rd(a) :
                                    __float2uint_rz(a);
}

static __inline__ __attribute__((device)) float int2float(int a, enum cudaRoundMode mode = cudaRoundNearest)
{
  return mode == cudaRoundZero ? __int2float_rz(a) :
         mode == cudaRoundPosInf ? __int2float_ru(a) :
         mode == cudaRoundMinInf ? __int2float_rd(a) :
                                   __int2float_rn(a);
}

static __inline__ __attribute__((device)) float uint2float(unsigned int a, enum cudaRoundMode mode = cudaRoundNearest)
{
  return mode == cudaRoundZero ? __uint2float_rz(a) :
         mode == cudaRoundPosInf ? __uint2float_ru(a) :
         mode == cudaRoundMinInf ? __uint2float_rd(a) :
                                   __uint2float_rn(a);
}
# 3418 "/usr/local/cuda/include/device_functions.h"
# 1 "/usr/local/cuda/include/sm_11_atomic_functions.h" 1
# 3419 "/usr/local/cuda/include/device_functions.h" 2
# 1 "/usr/local/cuda/include/sm_12_atomic_functions.h" 1
# 3420 "/usr/local/cuda/include/device_functions.h" 2
# 1 "/usr/local/cuda/include/sm_13_double_functions.h" 1
# 3421 "/usr/local/cuda/include/device_functions.h" 2
# 1 "/usr/local/cuda/include/sm_20_atomic_functions.h" 1
# 3422 "/usr/local/cuda/include/device_functions.h" 2
# 1 "/usr/local/cuda/include/sm_20_intrinsics.h" 1
# 3423 "/usr/local/cuda/include/device_functions.h" 2
# 1 "/usr/local/cuda/include/surface_functions.h" 1
# 61 "/usr/local/cuda/include/surface_functions.h"
# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 62 "/usr/local/cuda/include/surface_functions.h" 2
# 73 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf1Dreadc1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf1Dreadc2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf1Dreadc4(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf1Dreads1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf1Dreads2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf1Dreads4(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf1Dreadu1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf1Dreadu2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf1Dreadu4(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf1Dreadl1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf1Dreadl2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
# 99 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((device)) void surf1Dread(T *res, surface<void, 0x01> surf, int x, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s == 1) ? (void)(*(uchar1 *)res = __surf1Dreadc1(surf, x, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(*(ushort1*)res = __surf1Dreads1(surf, x, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(*(uint1 *)res = __surf1Dreadu1(surf, x, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(*(uint2 *)res = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(*(uint4 *)res = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((device)) T surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;

  surf1Dread(&tmp, surf, x, (int)sizeof(T), mode);

  return tmp;
}

template<class T>
static __inline__ __attribute__((device)) void surf1Dread(T *res, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surf1Dread<T>(surf, x, mode);
}

template<>
__inline__ __attribute__((device)) char surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return (char)__surf1Dreadc1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) signed char surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)__surf1Dreadc1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned char surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadc1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) char1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)__surf1Dreadc1(surf, x, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) uchar1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadc1(surf, x, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) char2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = __surf1Dreadc2(surf, x, cudaBoundaryModeTrap);

  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__inline__ __attribute__((device)) uchar2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadc2(surf, x, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) char4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = __surf1Dreadc4(surf, x, cudaBoundaryModeTrap);

  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__inline__ __attribute__((device)) uchar4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadc4(surf, x, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) short surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return (short)__surf1Dreads1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned short surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreads1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) short1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)__surf1Dreads1(surf, x, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) ushort1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreads1(surf, x, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) short2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = __surf1Dreads2(surf, x, cudaBoundaryModeTrap);

  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__inline__ __attribute__((device)) ushort2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreads2(surf, x, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) short4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = __surf1Dreads4(surf, x, cudaBoundaryModeTrap);

  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__inline__ __attribute__((device)) ushort4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreads4(surf, x, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return (int)__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) int1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) uint1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadu1(surf, x, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) int2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap);

  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__inline__ __attribute__((device)) uint2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadu2(surf, x, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) int4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap);

  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__inline__ __attribute__((device)) uint4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadu4(surf, x, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) long long int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)__surf1Dreadl1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned long long int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadl1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) longlong1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)__surf1Dreadl1(surf, x, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) ulonglong1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadl1(surf, x, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) longlong2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = __surf1Dreadl2(surf, x, cudaBoundaryModeTrap);

  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__inline__ __attribute__((device)) ulonglong2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadl2(surf, x, cudaBoundaryModeTrap);
}
# 386 "/usr/local/cuda/include/surface_functions.h"
template<>
__inline__ __attribute__((device)) float surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) float1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x));
}

template<>
__inline__ __attribute__((device)) float2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap);

  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__inline__ __attribute__((device)) float4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap);

  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}
# 421 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf2Dreadc1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf2Dreadc2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf2Dreadc4(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf2Dreads1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf2Dreads2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf2Dreads4(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf2Dreadu1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf2Dreadu2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf2Dreadu4(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf2Dreadl1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf2Dreadl2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
# 447 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((device)) void surf2Dread(T *res, surface<void, 0x02> surf, int x, int y, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s == 1) ? (void)(*(uchar1 *)res = __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(*(ushort1*)res = __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(*(uint1 *)res = __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(*(uint2 *)res = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(*(uint4 *)res = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((device)) T surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;

  surf2Dread(&tmp, surf, x, y, (int)sizeof(T), mode);

  return tmp;
}

template<class T>
static __inline__ __attribute__((device)) void surf2Dread(T *res, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surf2Dread<T>(surf, x, y, mode);
}

template<>
__inline__ __attribute__((device)) char surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return (char)__surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) signed char surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)__surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned char surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) char1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)__surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) uchar1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) char2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = __surf2Dreadc2(surf, x, y, cudaBoundaryModeTrap);

  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__inline__ __attribute__((device)) uchar2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadc2(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) char4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = __surf2Dreadc4(surf, x, y, cudaBoundaryModeTrap);

  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__inline__ __attribute__((device)) uchar4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadc4(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) short surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return (short)__surf2Dreads1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned short surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) short1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)__surf2Dreads1(surf, x, y, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) ushort1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) short2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = __surf2Dreads2(surf, x, y, cudaBoundaryModeTrap);

  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__inline__ __attribute__((device)) ushort2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreads2(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) short4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = __surf2Dreads4(surf, x, y, cudaBoundaryModeTrap);

  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__inline__ __attribute__((device)) ushort4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreads4(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return (int)__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) int1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) uint1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) int2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap);

  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__inline__ __attribute__((device)) uint2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) int4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap);

  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__inline__ __attribute__((device)) uint4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) long long int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)__surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned long long int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) longlong1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)__surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) ulonglong1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) longlong2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = __surf2Dreadl2(surf, x, y, cudaBoundaryModeTrap);

  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__inline__ __attribute__((device)) ulonglong2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadl2(surf, x, y, cudaBoundaryModeTrap);
}
# 734 "/usr/local/cuda/include/surface_functions.h"
template<>
__inline__ __attribute__((device)) float surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) float1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x));
}

template<>
__inline__ __attribute__((device)) float2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap);

  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__inline__ __attribute__((device)) float4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap);

  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}
# 769 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf3Dreadc1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf3Dreadc2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf3Dreadc4(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf3Dreads1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf3Dreads2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf3Dreads4(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf3Dreadu1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf3Dreadu2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf3Dreadu4(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf3Dreadl1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf3Dreadl2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
# 795 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((device)) void surf3Dread(T *res, surface<void, 0x03> surf, int x, int y, int z, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s == 1) ? (void)(*(uchar1 *)res = __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(*(ushort1*)res = __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(*(uint1 *)res = __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(*(uint2 *)res = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(*(uint4 *)res = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((device)) T surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;

  surf3Dread(&tmp, surf, x, y, z, (int)sizeof(T), mode);

  return tmp;
}

template<class T>
static __inline__ __attribute__((device)) void surf3Dread(T *res, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surf3Dread<T>(surf, x, y, z, mode);
}

template<>
__inline__ __attribute__((device)) char surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return (char)__surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) signed char surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)__surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned char surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) char1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)__surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) uchar1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) char2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = __surf3Dreadc2(surf, x, y, z, cudaBoundaryModeTrap);

  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__inline__ __attribute__((device)) uchar2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadc2(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) char4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = __surf3Dreadc4(surf, x, y, z, cudaBoundaryModeTrap);

  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__inline__ __attribute__((device)) uchar4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadc4(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) short surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return (short)__surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned short surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) short1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)__surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) ushort1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) short2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = __surf3Dreads2(surf, x, y, z, cudaBoundaryModeTrap);

  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__inline__ __attribute__((device)) ushort2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreads2(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) short4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = __surf3Dreads4(surf, x, y, z, cudaBoundaryModeTrap);

  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__inline__ __attribute__((device)) ushort4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreads4(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return (int)__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) int1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) uint1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) int2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap);

  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__inline__ __attribute__((device)) uint2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) int4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap);

  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__inline__ __attribute__((device)) uint4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) long long int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)__surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned long long int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) longlong1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)__surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) ulonglong1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) longlong2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = __surf3Dreadl2(surf, x, y, z, cudaBoundaryModeTrap);

  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__inline__ __attribute__((device)) ulonglong2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadl2(surf, x, y, z, cudaBoundaryModeTrap);
}
# 1082 "/usr/local/cuda/include/surface_functions.h"
template<>
__inline__ __attribute__((device)) float surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) float1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x));
}

template<>
__inline__ __attribute__((device)) float2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap);

  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__inline__ __attribute__((device)) float4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap);

  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}
# 1117 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf1DLayeredreadc1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf1DLayeredreadc2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf1DLayeredreadc4(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf1DLayeredreads1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf1DLayeredreads2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf1DLayeredreads4(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf1DLayeredreadu1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf1DLayeredreadu2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf1DLayeredreadu4(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf1DLayeredreadl1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf1DLayeredreadl2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
# 1143 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((device)) void surf1DLayeredread(T *res, surface<void, 0xF1> surf, int x, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s == 1) ? (void)(*(uchar1 *)res = __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(*(ushort1*)res = __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(*(uint1 *)res = __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(*(uint2 *)res = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(*(uint4 *)res = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((device)) T surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;

  surf1DLayeredread(&tmp, surf, x, layer, (int)sizeof(T), mode);

  return tmp;
}

template<class T>
static __inline__ __attribute__((device)) void surf1DLayeredread(T *res, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surf1DLayeredread<T>(surf, x, layer, mode);
}

template<>
__inline__ __attribute__((device)) char surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (char)__surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) signed char surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)__surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned char surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) char1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)__surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) uchar1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) char2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = __surf1DLayeredreadc2(surf, x, layer, cudaBoundaryModeTrap);

  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__inline__ __attribute__((device)) uchar2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadc2(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) char4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = __surf1DLayeredreadc4(surf, x, layer, cudaBoundaryModeTrap);

  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__inline__ __attribute__((device)) uchar4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadc4(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) short surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (short)__surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned short surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) short1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)__surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) ushort1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) short2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = __surf1DLayeredreads2(surf, x, layer, cudaBoundaryModeTrap);

  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__inline__ __attribute__((device)) ushort2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreads2(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) short4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = __surf1DLayeredreads4(surf, x, layer, cudaBoundaryModeTrap);

  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__inline__ __attribute__((device)) ushort4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreads4(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (int)__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) int1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) uint1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) int2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap);

  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__inline__ __attribute__((device)) uint2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) int4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap);

  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__inline__ __attribute__((device)) uint4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) long long int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)__surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned long long int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) longlong1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)__surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) ulonglong1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) longlong2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = __surf1DLayeredreadl2(surf, x, layer, cudaBoundaryModeTrap);

  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__inline__ __attribute__((device)) ulonglong2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadl2(surf, x, layer, cudaBoundaryModeTrap);
}
# 1430 "/usr/local/cuda/include/surface_functions.h"
template<>
__inline__ __attribute__((device)) float surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) float1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x));
}

template<>
__inline__ __attribute__((device)) float2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap);

  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__inline__ __attribute__((device)) float4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap);

  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}
# 1465 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf2DLayeredreadc1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf2DLayeredreadc2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf2DLayeredreadc4(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf2DLayeredreads1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf2DLayeredreads2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf2DLayeredreads4(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf2DLayeredreadu1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf2DLayeredreadu2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf2DLayeredreadu4(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf2DLayeredreadl1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf2DLayeredreadl2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
# 1491 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((device)) void surf2DLayeredread(T *res, surface<void, 0xF2> surf, int x, int y, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s == 1) ? (void)(*(uchar1 *)res = __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(*(ushort1*)res = __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(*(uint1 *)res = __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(*(uint2 *)res = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(*(uint4 *)res = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((device)) T surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;

  surf2DLayeredread(&tmp, surf, x, y, layer, (int)sizeof(T), mode);

  return tmp;
}

template<class T>
static __inline__ __attribute__((device)) void surf2DLayeredread(T *res, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surf2DLayeredread<T>(surf, x, y, layer, mode);
}

template<>
__inline__ __attribute__((device)) char surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (char)__surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) signed char surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)__surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned char surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) char1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)__surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) uchar1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) char2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = __surf2DLayeredreadc2(surf, x, y, layer, cudaBoundaryModeTrap);

  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__inline__ __attribute__((device)) uchar2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadc2(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) char4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = __surf2DLayeredreadc4(surf, x, y, layer, cudaBoundaryModeTrap);

  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__inline__ __attribute__((device)) uchar4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadc4(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) short surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (short)__surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned short surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) short1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)__surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) ushort1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) short2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = __surf2DLayeredreads2(surf, x, y, layer, cudaBoundaryModeTrap);

  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__inline__ __attribute__((device)) ushort2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreads2(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) short4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = __surf2DLayeredreads4(surf, x, y, layer, cudaBoundaryModeTrap);

  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__inline__ __attribute__((device)) ushort4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreads4(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (int)__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) int1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) uint1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) int2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap);

  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__inline__ __attribute__((device)) uint2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) int4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap);

  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__inline__ __attribute__((device)) uint4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) long long int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)__surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned long long int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) longlong1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)__surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) ulonglong1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) longlong2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = __surf2DLayeredreadl2(surf, x, y, layer, cudaBoundaryModeTrap);

  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__inline__ __attribute__((device)) ulonglong2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadl2(surf, x, y, layer, cudaBoundaryModeTrap);
}
# 1778 "/usr/local/cuda/include/surface_functions.h"
template<>
__inline__ __attribute__((device)) float surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) float1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x));
}

template<>
__inline__ __attribute__((device)) float2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap);

  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__inline__ __attribute__((device)) float4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap);

  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}
# 1813 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surfCubemapreadc1(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surfCubemapreadc2(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surfCubemapreadc4(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surfCubemapreads1(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surfCubemapreads2(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surfCubemapreads4(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surfCubemapreadu1(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surfCubemapreadu2(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surfCubemapreadu4(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surfCubemapreadl1(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surfCubemapreadl2(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
# 1839 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((device)) void surfCubemapread(T *res, surface<void, 0x0C> surf, int x, int y, int face, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s == 1) ? (void)(*(uchar1 *)res = __surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(*(ushort1*)res = __surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(*(uint1 *)res = __surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(*(uint2 *)res = __surfCubemapreadu2(surf, x, y, face, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(*(uint4 *)res = __surfCubemapreadu4(surf, x, y, face, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((device)) T surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;

  surfCubemapread(&tmp, surf, x, y, face, (int)sizeof(T), mode);

  return tmp;
}

template<class T>
static __inline__ __attribute__((device)) void surfCubemapread(T *res, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surfCubemapread<T>(surf, x, y, face, mode);
}

template<>
__inline__ __attribute__((device)) char surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return (char)__surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) signed char surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)__surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned char surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) char1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)__surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) uchar1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) char2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = __surfCubemapreadc2(surf, x, y, face, cudaBoundaryModeTrap);

  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__inline__ __attribute__((device)) uchar2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadc2(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) char4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = __surfCubemapreadc4(surf, x, y, face, cudaBoundaryModeTrap);

  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__inline__ __attribute__((device)) uchar4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadc4(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) short surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return (short)__surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned short surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) short1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)__surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) ushort1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) short2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = __surfCubemapreads2(surf, x, y, face, cudaBoundaryModeTrap);

  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__inline__ __attribute__((device)) ushort2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreads2(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) short4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = __surfCubemapreads4(surf, x, y, face, cudaBoundaryModeTrap);

  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__inline__ __attribute__((device)) ushort4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreads4(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return (int)__surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) int1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)__surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) uint1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) int2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surfCubemapreadu2(surf, x, y, face, cudaBoundaryModeTrap);

  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__inline__ __attribute__((device)) uint2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadu2(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) int4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surfCubemapreadu4(surf, x, y, face, cudaBoundaryModeTrap);

  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__inline__ __attribute__((device)) uint4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadu4(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) long long int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)__surfCubemapreadl1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned long long int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadl1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) longlong1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)__surfCubemapreadl1(surf, x, y, face, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) ulonglong1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadl1(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) longlong2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = __surfCubemapreadl2(surf, x, y, face, cudaBoundaryModeTrap);

  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__inline__ __attribute__((device)) ulonglong2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadl2(surf, x, y, face, cudaBoundaryModeTrap);
}
# 2126 "/usr/local/cuda/include/surface_functions.h"
template<>
__inline__ __attribute__((device)) float surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)__surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) float1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)__surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x));
}

template<>
__inline__ __attribute__((device)) float2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surfCubemapreadu2(surf, x, y, face, cudaBoundaryModeTrap);

  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__inline__ __attribute__((device)) float4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surfCubemapreadu4(surf, x, y, face, cudaBoundaryModeTrap);

  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}
# 2161 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surfCubemapLayeredreadc1(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surfCubemapLayeredreadc2(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surfCubemapLayeredreadc4(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surfCubemapLayeredreads1(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surfCubemapLayeredreads2(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surfCubemapLayeredreads4(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surfCubemapLayeredreadu1(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surfCubemapLayeredreadu2(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surfCubemapLayeredreadu4(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surfCubemapLayeredreadl1(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surfCubemapLayeredreadl2(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
# 2188 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((device)) void surfCubemapLayeredread(T *res, surface<void, 0xFC> surf, int x, int y, int layerFace, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s == 1) ? (void)(*(uchar1 *)res = __surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(*(ushort1*)res = __surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(*(uint1 *)res = __surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(*(uint2 *)res = __surfCubemapLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(*(uint4 *)res = __surfCubemapLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((device)) T surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;

  surfCubemapLayeredread(&tmp, surf, x, y, layerFace, (int)sizeof(T), mode);

  return tmp;
}

template<class T>
static __inline__ __attribute__((device)) void surfCubemapLayeredread(T *res, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surfCubemapLayeredread<T>(surf, x, y, layerFace, mode);
}

template<>
__inline__ __attribute__((device)) char surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return (char)__surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) signed char surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)__surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned char surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) char1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)__surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) uchar1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) char2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = __surfCubemapLayeredreadc2(surf, x, y, layerFace, cudaBoundaryModeTrap);

  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__inline__ __attribute__((device)) uchar2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadc2(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) char4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = __surfCubemapLayeredreadc4(surf, x, y, layerFace, cudaBoundaryModeTrap);

  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__inline__ __attribute__((device)) uchar4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadc4(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) short surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return (short)__surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned short surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) short1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)__surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) ushort1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) short2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = __surfCubemapLayeredreads2(surf, x, y, layerFace, cudaBoundaryModeTrap);

  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__inline__ __attribute__((device)) ushort2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreads2(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) short4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = __surfCubemapLayeredreads4(surf, x, y, layerFace, cudaBoundaryModeTrap);

  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__inline__ __attribute__((device)) ushort4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreads4(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return (int)__surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) int1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)__surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) uint1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) int2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surfCubemapLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap);

  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__inline__ __attribute__((device)) uint2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) int4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surfCubemapLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap);

  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__inline__ __attribute__((device)) uint4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) long long int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)__surfCubemapLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) unsigned long long int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__inline__ __attribute__((device)) longlong1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)__surfCubemapLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) ulonglong1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__inline__ __attribute__((device)) longlong2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = __surfCubemapLayeredreadl2(surf, x, y, layerFace, cudaBoundaryModeTrap);

  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__inline__ __attribute__((device)) ulonglong2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadl2(surf, x, y, layerFace, cudaBoundaryModeTrap);
}
# 2475 "/usr/local/cuda/include/surface_functions.h"
template<>
__inline__ __attribute__((device)) float surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)__surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x);
}

template<>
__inline__ __attribute__((device)) float1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)__surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x));
}

template<>
__inline__ __attribute__((device)) float2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surfCubemapLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap);

  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__inline__ __attribute__((device)) float4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surfCubemapLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap);

  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}
# 2511 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritec1( uchar1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritec2( uchar2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritec4( uchar4 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwrites1( ushort1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwrites2( ushort2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwrites4( ushort4 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwriteu1( uint1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwriteu2( uint2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwriteu4( uint4 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritel1(ulonglong1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritel2(ulonglong2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
# 2537 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((device)) void surf1Dwrite(T val, surface<void, 0x01> surf, int x, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(__surf1Dwritec1(tmp.c1, surf, x, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(__surf1Dwrites1(tmp.s1, surf, x, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(__surf1Dwriteu1(tmp.u1, surf, x, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(__surf1Dwriteu2(tmp.u2, surf, x, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(__surf1Dwriteu4(tmp.u4, surf, x, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((device)) void surf1Dwrite(T val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surf1Dwrite(val, surf, x, (int)sizeof(T), mode);
}


static __inline__ __attribute__((device)) void surf1Dwrite(char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec1(make_uchar1((unsigned char)val), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(signed char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec1(make_uchar1((unsigned char)val), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(unsigned char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec1(make_uchar1(val), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(char1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec1(make_uchar1((unsigned char)val.x), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(uchar1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec1(val, surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(char2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(uchar2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec2(val, surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(char4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(uchar4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec4(val, surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(short val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwrites1(make_ushort1((unsigned short)val), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(unsigned short val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwrites1(make_ushort1(val), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(short1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwrites1(make_ushort1((unsigned short)val.x), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(ushort1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwrites1(val, surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(short2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(ushort2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwrites2(val, surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(short4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(ushort4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwrites4(val, surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu1(make_uint1((unsigned int)val), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(unsigned int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu1(make_uint1(val), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(int1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu1(make_uint1((unsigned int)val.x), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(uint1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu1(val, surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(int2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(uint2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu2(val, surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(int4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(uint4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu4(val, surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(long long int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritel1(make_ulonglong1((unsigned long long int)val), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(unsigned long long int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritel1(make_ulonglong1(val), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(longlong1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(ulonglong1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritel1(val, surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(longlong2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(ulonglong2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritel2(val, surf, x, cudaBoundaryModeTrap);
}
# 2765 "/usr/local/cuda/include/surface_functions.h"
static __inline__ __attribute__((device)) void surf1Dwrite(float val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(float1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(float2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu2(make_uint2((unsigned int)__float_as_int(val.x), __float_as_int((unsigned int)val.y)), surf, x, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1Dwrite(float4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, cudaBoundaryModeTrap);
}
# 2793 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritec1( uchar1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritec2( uchar2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritec4( uchar4 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwrites1( ushort1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwrites2( ushort2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwrites4( ushort4 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwriteu1( uint1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwriteu2( uint2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwriteu4( uint4 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritel1(ulonglong1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritel2(ulonglong2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
# 2819 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((device)) void surf2Dwrite(T val, surface<void, 0x02> surf, int x, int y, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(__surf2Dwritec1(tmp.c1, surf, x, y, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(__surf2Dwrites1(tmp.s1, surf, x, y, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(__surf2Dwriteu1(tmp.u1, surf, x, y, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(__surf2Dwriteu2(tmp.u2, surf, x, y, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(__surf2Dwriteu4(tmp.u4, surf, x, y, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((device)) void surf2Dwrite(T val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surf2Dwrite(val, surf, x, y, (int)sizeof(T), mode);
}


static __inline__ __attribute__((device)) void surf2Dwrite(char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec1(make_uchar1((unsigned char)val), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(signed char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec1(make_uchar1((unsigned char)val), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(unsigned char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec1(make_uchar1(val), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(char1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec1(make_uchar1((unsigned char)val.x), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(uchar1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec1(val, surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(char2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(uchar2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec2(val, surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(char4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(uchar4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec4(val, surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(short val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwrites1(make_ushort1((unsigned short)val), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(unsigned short val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwrites1(make_ushort1(val), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(short1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwrites1(make_ushort1((unsigned short)val.x), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(ushort1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwrites1(val, surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(short2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(ushort2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwrites2(val, surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(short4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(ushort4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwrites4(val, surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu1(make_uint1((unsigned int)val), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(unsigned int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu1(make_uint1(val), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(int1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu1(make_uint1((unsigned int)val.x), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(uint1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu1(val, surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(int2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(uint2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu2(val, surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(int4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(uint4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu4(val, surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(long long int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(unsigned long long int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritel1(make_ulonglong1(val), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(longlong1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(ulonglong1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritel1(val, surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(longlong2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(ulonglong2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritel2(val, surf, x, y, cudaBoundaryModeTrap);
}
# 3047 "/usr/local/cuda/include/surface_functions.h"
static __inline__ __attribute__((device)) void surf2Dwrite(float val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(float1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(float2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu2(make_uint2((unsigned int)__float_as_int(val.x), __float_as_int((unsigned int)val.y)), surf, x, y, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2Dwrite(float4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, cudaBoundaryModeTrap);
}
# 3075 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritec1( uchar1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritec2( uchar2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritec4( uchar4 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwrites1( ushort1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwrites2( ushort2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwrites4( ushort4 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwriteu1( uint1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwriteu2( uint2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwriteu4( uint4 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritel1(ulonglong1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritel2(ulonglong2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
# 3101 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((device)) void surf3Dwrite(T val, surface<void, 0x03> surf, int x, int y, int z, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(__surf3Dwritec1(tmp.c1, surf, x, y, z, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(__surf3Dwrites1(tmp.s1, surf, x, y, z, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(__surf3Dwriteu1(tmp.u1, surf, x, y, z, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(__surf3Dwriteu2(tmp.u2, surf, x, y, z, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(__surf3Dwriteu4(tmp.u4, surf, x, y, z, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((device)) void surf3Dwrite(T val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surf3Dwrite(val, surf, x, y, z, (int)sizeof(T), mode);
}


static __inline__ __attribute__((device)) void surf3Dwrite(char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec1(make_uchar1((unsigned char)val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(signed char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec1(make_uchar1((unsigned char)val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(unsigned char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec1(make_uchar1(val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(char1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec1(make_uchar1((unsigned char)val.x), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(uchar1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec1(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(char2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(uchar2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec2(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(char4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(uchar4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec4(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(short val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwrites1(make_ushort1((unsigned short)val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(unsigned short val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwrites1(make_ushort1(val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(short1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwrites1(make_ushort1((unsigned short)val.x), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(ushort1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwrites1(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(short2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(ushort2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwrites2(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(short4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(ushort4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwrites4(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu1(make_uint1((unsigned int)val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(unsigned int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu1(make_uint1(val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(int1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu1(make_uint1((unsigned int)val.x), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(uint1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu1(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(int2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(uint2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu2(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(int4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(uint4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu4(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(long long int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(unsigned long long int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritel1(make_ulonglong1(val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(longlong1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(ulonglong1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritel1(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(longlong2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(ulonglong2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritel2(val, surf, x, y, z, cudaBoundaryModeTrap);
}
# 3329 "/usr/local/cuda/include/surface_functions.h"
static __inline__ __attribute__((device)) void surf3Dwrite(float val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(float1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(float2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu2(make_uint2((unsigned int)__float_as_int(val.x), __float_as_int((unsigned int)val.y)), surf, x, y, z, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf3Dwrite(float4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, z, cudaBoundaryModeTrap);
}
# 3357 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritec1( uchar1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritec2( uchar2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritec4( uchar4 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwrites1( ushort1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwrites2( ushort2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwrites4( ushort4 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwriteu1( uint1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwriteu2( uint2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwriteu4( uint4 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritel1(ulonglong1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritel2(ulonglong2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
# 3383 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((device)) void surf1DLayeredwrite(T val, surface<void, 0xF1> surf, int x, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(__surf1DLayeredwritec1(tmp.c1, surf, x, layer, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(__surf1DLayeredwrites1(tmp.s1, surf, x, layer, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(__surf1DLayeredwriteu1(tmp.u1, surf, x, layer, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(__surf1DLayeredwriteu2(tmp.u2, surf, x, layer, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(__surf1DLayeredwriteu4(tmp.u4, surf, x, layer, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((device)) void surf1DLayeredwrite(T val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surf1DLayeredwrite(val, surf, x, layer, (int)sizeof(T), mode);
}


static __inline__ __attribute__((device)) void surf1DLayeredwrite(char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(signed char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(unsigned char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec1(make_uchar1(val), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(char1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec1(make_uchar1((unsigned char)val.x), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(uchar1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec1(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(char2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(uchar2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec2(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(char4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(uchar4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec4(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(short val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(unsigned short val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwrites1(make_ushort1(val), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(short1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwrites1(make_ushort1((unsigned short)val.x), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(ushort1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwrites1(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(short2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(ushort2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwrites2(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(short4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(ushort4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwrites4(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu1(make_uint1((unsigned int)val), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(unsigned int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu1(make_uint1(val), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(int1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(uint1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu1(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(int2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(uint2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu2(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(int4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(uint4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu4(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(long long int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritel1(make_ulonglong1((unsigned long long int)val), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(unsigned long long int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritel1(make_ulonglong1(val), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(longlong1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(ulonglong1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritel1(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(longlong2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(ulonglong2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritel2(val, surf, x, layer, cudaBoundaryModeTrap);
}
# 3611 "/usr/local/cuda/include/surface_functions.h"
static __inline__ __attribute__((device)) void surf1DLayeredwrite(float val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(float1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(float2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu2(make_uint2((unsigned int)__float_as_int(val.x), __float_as_int((unsigned int)val.y)), surf, x, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf1DLayeredwrite(float4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, layer, cudaBoundaryModeTrap);
}
# 3639 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritec1( uchar1 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritec2( uchar2 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritec4( uchar4 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwrites1( ushort1 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwrites2( ushort2 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwrites4( ushort4 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwriteu1( uint1 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwriteu2( uint2 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwriteu4( uint4 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritel1(ulonglong1 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritel2(ulonglong2 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
# 3665 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((device)) void surf2DLayeredwrite(T val, surface<void, 0xF2> surf, int x, int y, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(__surf2DLayeredwritec1(tmp.c1, surf, x, y, layer, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(__surf2DLayeredwrites1(tmp.s1, surf, x, y, layer, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(__surf2DLayeredwriteu1(tmp.u1, surf, x, y, layer, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(__surf2DLayeredwriteu2(tmp.u2, surf, x, y, layer, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(__surf2DLayeredwriteu4(tmp.u4, surf, x, y, layer, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((device)) void surf2DLayeredwrite(T val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surf2DLayeredwrite(val, surf, x, y, layer, (int)sizeof(T), mode);
}


static __inline__ __attribute__((device)) void surf2DLayeredwrite(char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(signed char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(unsigned char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec1(make_uchar1(val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(char1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec1(make_uchar1((unsigned char)val.x), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(uchar1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec1(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(char2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(uchar2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec2(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(char4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(uchar4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec4(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(short val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(unsigned short val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwrites1(make_ushort1(val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(short1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwrites1(make_ushort1((unsigned short)val.x), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(ushort1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwrites1(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(short2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(ushort2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwrites2(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(short4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(ushort4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwrites4(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu1(make_uint1((unsigned int)val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(unsigned int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu1(make_uint1(val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(int1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(uint1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu1(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(int2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(uint2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu2(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(int4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(uint4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu4(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(long long int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(unsigned long long int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritel1(make_ulonglong1(val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(longlong1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(ulonglong1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritel1(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(longlong2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(ulonglong2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritel2(val, surf, x, y, layer, cudaBoundaryModeTrap);
}
# 3893 "/usr/local/cuda/include/surface_functions.h"
static __inline__ __attribute__((device)) void surf2DLayeredwrite(float val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(float1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(float2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu2(make_uint2((unsigned int)__float_as_int(val.x), __float_as_int((unsigned int)val.y)), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surf2DLayeredwrite(float4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, layer, cudaBoundaryModeTrap);
}
# 3920 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapwritec1( uchar1 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapwritec2( uchar2 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapwritec4( uchar4 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapwrites1( ushort1 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapwrites2( ushort2 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapwrites4( ushort4 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapwriteu1( uint1 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapwriteu2( uint2 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapwriteu4( uint4 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapwritel1(ulonglong1 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapwritel2(ulonglong2 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
# 3947 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((device)) void surfCubemapwrite(T val, surface<void, 0x0C> surf, int x, int y, int face, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(__surfCubemapwritec1(tmp.c1, surf, x, y, face, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(__surfCubemapwrites1(tmp.s1, surf, x, y, face, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(__surfCubemapwriteu1(tmp.u1, surf, x, y, face, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(__surfCubemapwriteu2(tmp.u2, surf, x, y, face, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(__surfCubemapwriteu4(tmp.u4, surf, x, y, face, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((device)) void surfCubemapwrite(T val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surfCubemapwrite(val, surf, x, y, face, (int)sizeof(T), mode);
}


static __inline__ __attribute__((device)) void surfCubemapwrite(char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec1(make_uchar1((unsigned char)val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(signed char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec1(make_uchar1((unsigned char)val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(unsigned char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec1(make_uchar1(val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(char1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec1(make_uchar1((unsigned char)val.x), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(uchar1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec1(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(char2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(uchar2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec2(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(char4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(uchar4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec4(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(short val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwrites1(make_ushort1((unsigned short)val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(unsigned short val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwrites1(make_ushort1(val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(short1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwrites1(make_ushort1((unsigned short)val.x), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(ushort1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwrites1(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(short2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(ushort2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwrites2(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(short4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(ushort4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwrites4(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu1(make_uint1((unsigned int)val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(unsigned int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu1(make_uint1(val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(int1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu1(make_uint1((unsigned int)val.x), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(uint1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu1(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(int2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(uint2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu2(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(int4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(uint4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu4(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(long long int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(unsigned long long int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritel1(make_ulonglong1(val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(longlong1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(ulonglong1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritel1(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(longlong2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(ulonglong2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritel2(val, surf, x, y, face, cudaBoundaryModeTrap);
}
# 4175 "/usr/local/cuda/include/surface_functions.h"
static __inline__ __attribute__((device)) void surfCubemapwrite(float val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(float1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(float2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu2(make_uint2((unsigned int)__float_as_int(val.x), __float_as_int((unsigned int)val.y)), surf, x, y, face, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapwrite(float4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, face, cudaBoundaryModeTrap);
}
# 4202 "/usr/local/cuda/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapLayeredwritec1( uchar1 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapLayeredwritec2( uchar2 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapLayeredwritec4( uchar4 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapLayeredwrites1( ushort1 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapLayeredwrites2( ushort2 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapLayeredwrites4( ushort4 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapLayeredwriteu1( uint1 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapLayeredwriteu2( uint2 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapLayeredwriteu4( uint4 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapLayeredwritel1(ulonglong1 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surfCubemapLayeredwritel2(ulonglong2 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
# 4229 "/usr/local/cuda/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(T val, surface<void, 0xFC> surf, int x, int y, int layerFace, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(__surfCubemapLayeredwritec1(tmp.c1, surf, x, y, layerFace, cudaBoundaryModeTrap)) :
  (s == 2) ? (void)(__surfCubemapLayeredwrites1(tmp.s1, surf, x, y, layerFace, cudaBoundaryModeTrap)) :
  (s == 4) ? (void)(__surfCubemapLayeredwriteu1(tmp.u1, surf, x, y, layerFace, cudaBoundaryModeTrap)) :
  (s == 8) ? (void)(__surfCubemapLayeredwriteu2(tmp.u2, surf, x, y, layerFace, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(__surfCubemapLayeredwriteu4(tmp.u4, surf, x, y, layerFace, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(T val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surfCubemapLayeredwrite(val, surf, x, y, layerFace, (int)sizeof(T), mode);
}


static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(signed char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(unsigned char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec1(make_uchar1(val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(char1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec1(make_uchar1((unsigned char)val.x), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(uchar1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec1(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(char2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(uchar2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec2(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(char4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(uchar4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec4(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(short val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(unsigned short val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwrites1(make_ushort1(val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(short1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwrites1(make_ushort1((unsigned short)val.x), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(ushort1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwrites1(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(short2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(ushort2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwrites2(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(short4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(ushort4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwrites4(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu1(make_uint1((unsigned int)val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(unsigned int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu1(make_uint1(val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(int1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(uint1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu1(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(int2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(uint2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu2(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(int4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(uint4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu4(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(long long int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(unsigned long long int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritel1(make_ulonglong1(val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(longlong1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(ulonglong1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritel1(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(longlong2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(ulonglong2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritel2(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}
# 4457 "/usr/local/cuda/include/surface_functions.h"
static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(float val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(float1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(float2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu2(make_uint2((unsigned int)__float_as_int(val.x), __float_as_int((unsigned int)val.y)), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __inline__ __attribute__((device)) void surfCubemapLayeredwrite(float4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, layerFace, cudaBoundaryModeTrap);
}
# 3424 "/usr/local/cuda/include/device_functions.h" 2
# 1 "/usr/local/cuda/include/texture_fetch_functions.h" 1
# 61 "/usr/local/cuda/include/texture_fetch_functions.h"
# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 62 "/usr/local/cuda/include/texture_fetch_functions.h" 2
# 74 "/usr/local/cuda/include/texture_fetch_functions.h"
template<class T, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchi(texture<T, 0x01, readMode> t, int4 i);
template<class T, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchi(texture<T, 0x01, readMode> t, int4 i);
template<class T, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchi(texture<T, 0x01, readMode> t, int4 i);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetch(texture<T, texType, readMode> t, float4 i, int d = texType);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetch(texture<T, texType, readMode> t, float4 i, int d = texType);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetch(texture<T, texType, readMode> t, float4 i, int d = texType);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchc(texture<T, texType, readMode> t, float4 i);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchc(texture<T, texType, readMode> t, float4 i);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchc(texture<T, texType, readMode> t, float4 i);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchl(texture<T, texType, readMode> t, float4 i, int l, int d = (texType & 0xF));
template<class T, int texType, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchl(texture<T, texType, readMode> t, float4 i, int l, int d = (texType & 0xF));
template<class T, int texType, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchl(texture<T, texType, readMode> t, float4 i, int l, int d = (texType & 0xF));
template<class T, int texType, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchlc(texture<T, texType, readMode> t, float4 i, int l);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchlc(texture<T, texType, readMode> t, float4 i, int l);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchlc(texture<T, texType, readMode> t, float4 i, int l);







static __inline__ __attribute__((device)) char tex1Dfetch(texture<char, 0x01, cudaReadModeElementType> t, int x)
{



  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));


  return (char)v.x;
}

static __inline__ __attribute__((device)) signed char tex1Dfetch(texture<signed char, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return (signed char)v.x;
}

static __inline__ __attribute__((device)) unsigned char tex1Dfetch(texture<unsigned char, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return (unsigned char)v.x;
}

static __inline__ __attribute__((device)) char1 tex1Dfetch(texture<char1, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_char1(v.x);
}

static __inline__ __attribute__((device)) uchar1 tex1Dfetch(texture<uchar1, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_uchar1(v.x);
}

static __inline__ __attribute__((device)) char2 tex1Dfetch(texture<char2, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((device)) uchar2 tex1Dfetch(texture<uchar2, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((device)) char4 tex1Dfetch(texture<char4, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((device)) uchar4 tex1Dfetch(texture<uchar4, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((device)) short tex1Dfetch(texture<short, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return (short)v.x;
}

static __inline__ __attribute__((device)) unsigned short tex1Dfetch(texture<unsigned short, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return (unsigned short)v.x;
}

static __inline__ __attribute__((device)) short1 tex1Dfetch(texture<short1, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_short1(v.x);
}

static __inline__ __attribute__((device)) ushort1 tex1Dfetch(texture<ushort1, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_ushort1(v.x);
}

static __inline__ __attribute__((device)) short2 tex1Dfetch(texture<short2, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((device)) ushort2 tex1Dfetch(texture<ushort2, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((device)) short4 tex1Dfetch(texture<short4, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((device)) ushort4 tex1Dfetch(texture<ushort4, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((device)) int tex1Dfetch(texture<int, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return (int)v.x;
}

static __inline__ __attribute__((device)) unsigned int tex1Dfetch(texture<unsigned int, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return (unsigned int)v.x;
}

static __inline__ __attribute__((device)) int1 tex1Dfetch(texture<int1, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_int1(v.x);
}

static __inline__ __attribute__((device)) uint1 tex1Dfetch(texture<uint1, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_uint1(v.x);
}

static __inline__ __attribute__((device)) int2 tex1Dfetch(texture<int2, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((device)) uint2 tex1Dfetch(texture<uint2, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((device)) int4 tex1Dfetch(texture<int4, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((device)) uint4 tex1Dfetch(texture<uint4, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 359 "/usr/local/cuda/include/texture_fetch_functions.h"
static __inline__ __attribute__((device)) float tex1Dfetch(texture<float, 0x01, cudaReadModeElementType> t, int x)
{
  float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0));

  return v.x;
}

static __inline__ __attribute__((device)) float1 tex1Dfetch(texture<float1, 0x01, cudaReadModeElementType> t, int x)
{
  float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0));

  return make_float1(v.x);
}

static __inline__ __attribute__((device)) float2 tex1Dfetch(texture<float2, 0x01, cudaReadModeElementType> t, int x)
{
  float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0));

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((device)) float4 tex1Dfetch(texture<float4, 0x01, cudaReadModeElementType> t, int x)
{
  float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((device)) float tex1Dfetch(texture<char, 0x01, cudaReadModeNormalizedFloat> t, int x)
{



  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float tex1Dfetch(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float tex1Dfetch(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float1 tex1Dfetch(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float1 tex1Dfetch(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float2 tex1Dfetch(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float2 tex1Dfetch(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float4 tex1Dfetch(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((device)) float4 tex1Dfetch(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((device)) float tex1Dfetch(texture<short, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float tex1Dfetch(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float1 tex1Dfetch(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float1 tex1Dfetch(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float2 tex1Dfetch(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float2 tex1Dfetch(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float4 tex1Dfetch(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((device)) float4 tex1Dfetch(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((device)) char tex1D(texture<char, 0x01, cudaReadModeElementType> t, float x)
{



  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));


  return (char)v.x;
}

static __inline__ __attribute__((device)) signed char tex1D(texture<signed char, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return (signed char)v.x;
}

static __inline__ __attribute__((device)) unsigned char tex1D(texture<unsigned char, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return (unsigned char)v.x;
}

static __inline__ __attribute__((device)) char1 tex1D(texture<char1, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_char1(v.x);
}

static __inline__ __attribute__((device)) uchar1 tex1D(texture<uchar1, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_uchar1(v.x);
}

static __inline__ __attribute__((device)) char2 tex1D(texture<char2, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((device)) uchar2 tex1D(texture<uchar2, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((device)) char4 tex1D(texture<char4, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((device)) uchar4 tex1D(texture<uchar4, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((device)) short tex1D(texture<short, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return (short)v.x;
}

static __inline__ __attribute__((device)) unsigned short tex1D(texture<unsigned short, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return (unsigned short)v.x;
}

static __inline__ __attribute__((device)) short1 tex1D(texture<short1, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_short1(v.x);
}

static __inline__ __attribute__((device)) ushort1 tex1D(texture<ushort1, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_ushort1(v.x);
}

static __inline__ __attribute__((device)) short2 tex1D(texture<short2, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((device)) ushort2 tex1D(texture<ushort2, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((device)) short4 tex1D(texture<short4, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((device)) ushort4 tex1D(texture<ushort4, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((device)) int tex1D(texture<int, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return (int)v.x;
}

static __inline__ __attribute__((device)) unsigned int tex1D(texture<unsigned int, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return (unsigned int)v.x;
}

static __inline__ __attribute__((device)) int1 tex1D(texture<int1, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_int1(v.x);
}

static __inline__ __attribute__((device)) uint1 tex1D(texture<uint1, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_uint1(v.x);
}

static __inline__ __attribute__((device)) int2 tex1D(texture<int2, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((device)) uint2 tex1D(texture<uint2, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((device)) int4 tex1D(texture<int4, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((device)) uint4 tex1D(texture<uint4, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 814 "/usr/local/cuda/include/texture_fetch_functions.h"
static __inline__ __attribute__((device)) float tex1D(texture<float, 0x01, cudaReadModeElementType> t, float x)
{
  float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0));

  return v.x;
}

static __inline__ __attribute__((device)) float1 tex1D(texture<float1, 0x01, cudaReadModeElementType> t, float x)
{
  float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0));

  return make_float1(v.x);
}

static __inline__ __attribute__((device)) float2 tex1D(texture<float2, 0x01, cudaReadModeElementType> t, float x)
{
  float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0));

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((device)) float4 tex1D(texture<float4, 0x01, cudaReadModeElementType> t, float x)
{
  float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((device)) float tex1D(texture<char, 0x01, cudaReadModeNormalizedFloat> t, float x)
{



  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float tex1D(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float tex1D(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float1 tex1D(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float1 tex1D(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float2 tex1D(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float2 tex1D(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float4 tex1D(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((device)) float4 tex1D(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((device)) float tex1D(texture<short, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float tex1D(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float1 tex1D(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float1 tex1D(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float2 tex1D(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float2 tex1D(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float4 tex1D(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((device)) float4 tex1D(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((device)) char tex2D(texture<char, 0x02, cudaReadModeElementType> t, float x, float y)
{



  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));


  return (char)v.x;
}

static __inline__ __attribute__((device)) signed char tex2D(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return (signed char)v.x;
}

static __inline__ __attribute__((device)) unsigned char tex2D(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return (unsigned char)v.x;
}

static __inline__ __attribute__((device)) char1 tex2D(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_char1(v.x);
}

static __inline__ __attribute__((device)) uchar1 tex2D(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_uchar1(v.x);
}

static __inline__ __attribute__((device)) char2 tex2D(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((device)) uchar2 tex2D(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((device)) char4 tex2D(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((device)) uchar4 tex2D(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((device)) short tex2D(texture<short, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return (short)v.x;
}

static __inline__ __attribute__((device)) unsigned short tex2D(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return (unsigned short)v.x;
}

static __inline__ __attribute__((device)) short1 tex2D(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_short1(v.x);
}

static __inline__ __attribute__((device)) ushort1 tex2D(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_ushort1(v.x);
}

static __inline__ __attribute__((device)) short2 tex2D(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((device)) ushort2 tex2D(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((device)) short4 tex2D(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((device)) ushort4 tex2D(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((device)) int tex2D(texture<int, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return (int)v.x;
}

static __inline__ __attribute__((device)) unsigned int tex2D(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return (unsigned int)v.x;
}

static __inline__ __attribute__((device)) int1 tex2D(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_int1(v.x);
}

static __inline__ __attribute__((device)) uint1 tex2D(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_uint1(v.x);
}

static __inline__ __attribute__((device)) int2 tex2D(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((device)) uint2 tex2D(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((device)) int4 tex2D(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((device)) uint4 tex2D(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 1263 "/usr/local/cuda/include/texture_fetch_functions.h"
static __inline__ __attribute__((device)) float tex2D(texture<float, 0x02, cudaReadModeElementType> t, float x, float y)
{
  float4 v = __ftexfetch(t, make_float4(x, y, 0, 0));

  return v.x;
}

static __inline__ __attribute__((device)) float1 tex2D(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  float4 v = __ftexfetch(t, make_float4(x, y, 0, 0));

  return make_float1(v.x);
}

static __inline__ __attribute__((device)) float2 tex2D(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  float4 v = __ftexfetch(t, make_float4(x, y, 0, 0));

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((device)) float4 tex2D(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  float4 v = __ftexfetch(t, make_float4(x, y, 0, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((device)) float tex2D(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{



  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float tex2D(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float tex2D(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float1 tex2D(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float1 tex2D(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float2 tex2D(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float2 tex2D(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float4 tex2D(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((device)) float4 tex2D(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((device)) float tex2D(texture<short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float tex2D(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float1 tex2D(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float1 tex2D(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float2 tex2D(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float2 tex2D(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float4 tex2D(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((device)) float4 tex2D(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((device)) char tex1DLayered(texture<char, 0xF1, cudaReadModeElementType> t, float x, int layer)
{



  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);


  return (char)v.x;
}

static __inline__ __attribute__((device)) signed char tex1DLayered(texture<signed char, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (signed char)v.x;
}

static __inline__ __attribute__((device)) unsigned char tex1DLayered(texture<unsigned char, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (unsigned char)v.x;
}

static __inline__ __attribute__((device)) char1 tex1DLayered(texture<char1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_char1(v.x);
}

static __inline__ __attribute__((device)) uchar1 tex1DLayered(texture<uchar1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_uchar1(v.x);
}

static __inline__ __attribute__((device)) char2 tex1DLayered(texture<char2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((device)) uchar2 tex1DLayered(texture<uchar2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((device)) char4 tex1DLayered(texture<char4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((device)) uchar4 tex1DLayered(texture<uchar4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((device)) short tex1DLayered(texture<short, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (short)v.x;
}

static __inline__ __attribute__((device)) unsigned short tex1DLayered(texture<unsigned short, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (unsigned short)v.x;
}

static __inline__ __attribute__((device)) short1 tex1DLayered(texture<short1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_short1(v.x);
}

static __inline__ __attribute__((device)) ushort1 tex1DLayered(texture<ushort1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_ushort1(v.x);
}

static __inline__ __attribute__((device)) short2 tex1DLayered(texture<short2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((device)) ushort2 tex1DLayered(texture<ushort2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((device)) short4 tex1DLayered(texture<short4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((device)) ushort4 tex1DLayered(texture<ushort4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((device)) int tex1DLayered(texture<int, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (int)v.x;
}

static __inline__ __attribute__((device)) unsigned int tex1DLayered(texture<unsigned int, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (unsigned int)v.x;
}

static __inline__ __attribute__((device)) int1 tex1DLayered(texture<int1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_int1(v.x);
}

static __inline__ __attribute__((device)) uint1 tex1DLayered(texture<uint1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_uint1(v.x);
}

static __inline__ __attribute__((device)) int2 tex1DLayered(texture<int2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((device)) uint2 tex1DLayered(texture<uint2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((device)) int4 tex1DLayered(texture<int4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((device)) uint4 tex1DLayered(texture<uint4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 1712 "/usr/local/cuda/include/texture_fetch_functions.h"
static __inline__ __attribute__((device)) float tex1DLayered(texture<float, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return v.x;
}

static __inline__ __attribute__((device)) float1 tex1DLayered(texture<float1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_float1(v.x);
}

static __inline__ __attribute__((device)) float2 tex1DLayered(texture<float2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((device)) float4 tex1DLayered(texture<float4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((device)) float tex1DLayered(texture<char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{



  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float tex1DLayered(texture<signed char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float tex1DLayered(texture<unsigned char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float1 tex1DLayered(texture<char1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float1 tex1DLayered(texture<uchar1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float2 tex1DLayered(texture<char2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float2 tex1DLayered(texture<uchar2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float4 tex1DLayered(texture<char4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((device)) float4 tex1DLayered(texture<uchar4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((device)) float tex1DLayered(texture<short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float tex1DLayered(texture<unsigned short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float1 tex1DLayered(texture<short1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float1 tex1DLayered(texture<ushort1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float2 tex1DLayered(texture<short2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float2 tex1DLayered(texture<ushort2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float4 tex1DLayered(texture<short4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((device)) float4 tex1DLayered(texture<ushort4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((device)) char tex2DLayered(texture<char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{



  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);


  return (char)v.x;
}

static __inline__ __attribute__((device)) signed char tex2DLayered(texture<signed char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (signed char)v.x;
}

static __inline__ __attribute__((device)) unsigned char tex2DLayered(texture<unsigned char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (unsigned char)v.x;
}

static __inline__ __attribute__((device)) char1 tex2DLayered(texture<char1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_char1(v.x);
}

static __inline__ __attribute__((device)) uchar1 tex2DLayered(texture<uchar1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_uchar1(v.x);
}

static __inline__ __attribute__((device)) char2 tex2DLayered(texture<char2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((device)) uchar2 tex2DLayered(texture<uchar2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((device)) char4 tex2DLayered(texture<char4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((device)) uchar4 tex2DLayered(texture<uchar4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((device)) short tex2DLayered(texture<short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (short)v.x;
}

static __inline__ __attribute__((device)) unsigned short tex2DLayered(texture<unsigned short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (unsigned short)v.x;
}

static __inline__ __attribute__((device)) short1 tex2DLayered(texture<short1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_short1(v.x);
}

static __inline__ __attribute__((device)) ushort1 tex2DLayered(texture<ushort1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_ushort1(v.x);
}

static __inline__ __attribute__((device)) short2 tex2DLayered(texture<short2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((device)) ushort2 tex2DLayered(texture<ushort2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((device)) short4 tex2DLayered(texture<short4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((device)) ushort4 tex2DLayered(texture<ushort4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((device)) int tex2DLayered(texture<int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (int)v.x;
}

static __inline__ __attribute__((device)) unsigned int tex2DLayered(texture<unsigned int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (unsigned int)v.x;
}

static __inline__ __attribute__((device)) int1 tex2DLayered(texture<int1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_int1(v.x);
}

static __inline__ __attribute__((device)) uint1 tex2DLayered(texture<uint1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_uint1(v.x);
}

static __inline__ __attribute__((device)) int2 tex2DLayered(texture<int2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((device)) uint2 tex2DLayered(texture<uint2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((device)) int4 tex2DLayered(texture<int4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((device)) uint4 tex2DLayered(texture<uint4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 2161 "/usr/local/cuda/include/texture_fetch_functions.h"
static __inline__ __attribute__((device)) float tex2DLayered(texture<float, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer);

  return v.x;
}

static __inline__ __attribute__((device)) float1 tex2DLayered(texture<float1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_float1(v.x);
}

static __inline__ __attribute__((device)) float2 tex2DLayered(texture<float2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((device)) float4 tex2DLayered(texture<float4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((device)) float tex2DLayered(texture<char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{



  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float tex2DLayered(texture<signed char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float tex2DLayered(texture<unsigned char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float1 tex2DLayered(texture<char1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float1 tex2DLayered(texture<uchar1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float2 tex2DLayered(texture<char2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float2 tex2DLayered(texture<uchar2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float4 tex2DLayered(texture<char4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((device)) float4 tex2DLayered(texture<uchar4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((device)) float tex2DLayered(texture<short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float tex2DLayered(texture<unsigned short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float1 tex2DLayered(texture<short1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float1 tex2DLayered(texture<ushort1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float2 tex2DLayered(texture<short2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float2 tex2DLayered(texture<ushort2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float4 tex2DLayered(texture<short4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((device)) float4 tex2DLayered(texture<ushort4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((device)) char tex3D(texture<char, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{



  int4 v = __itexfetch(t, make_float4(x, y, z, 0));


  return (char)v.x;
}

static __inline__ __attribute__((device)) signed char tex3D(texture<signed char, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return (signed char)v.x;
}

static __inline__ __attribute__((device)) unsigned char tex3D(texture<unsigned char, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return (unsigned char)v.x;
}

static __inline__ __attribute__((device)) char1 tex3D(texture<char1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_char1(v.x);
}

static __inline__ __attribute__((device)) uchar1 tex3D(texture<uchar1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_uchar1(v.x);
}

static __inline__ __attribute__((device)) char2 tex3D(texture<char2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((device)) uchar2 tex3D(texture<uchar2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((device)) char4 tex3D(texture<char4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((device)) uchar4 tex3D(texture<uchar4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((device)) short tex3D(texture<short, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return (short)v.x;
}

static __inline__ __attribute__((device)) unsigned short tex3D(texture<unsigned short, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return (unsigned short)v.x;
}

static __inline__ __attribute__((device)) short1 tex3D(texture<short1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_short1(v.x);
}

static __inline__ __attribute__((device)) ushort1 tex3D(texture<ushort1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_ushort1(v.x);
}

static __inline__ __attribute__((device)) short2 tex3D(texture<short2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((device)) ushort2 tex3D(texture<ushort2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((device)) short4 tex3D(texture<short4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((device)) ushort4 tex3D(texture<ushort4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((device)) int tex3D(texture<int, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return (int)v.x;
}

static __inline__ __attribute__((device)) unsigned int tex3D(texture<unsigned int, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return (unsigned int)v.x;
}

static __inline__ __attribute__((device)) int1 tex3D(texture<int1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_int1(v.x);
}

static __inline__ __attribute__((device)) uint1 tex3D(texture<uint1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_uint1(v.x);
}

static __inline__ __attribute__((device)) int2 tex3D(texture<int2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((device)) uint2 tex3D(texture<uint2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((device)) int4 tex3D(texture<int4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((device)) uint4 tex3D(texture<uint4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 2610 "/usr/local/cuda/include/texture_fetch_functions.h"
static __inline__ __attribute__((device)) float tex3D(texture<float, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetch(t, make_float4(x, y, z, 0));

  return v.x;
}

static __inline__ __attribute__((device)) float1 tex3D(texture<float1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetch(t, make_float4(x, y, z, 0));

  return make_float1(v.x);
}

static __inline__ __attribute__((device)) float2 tex3D(texture<float2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetch(t, make_float4(x, y, z, 0));

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((device)) float4 tex3D(texture<float4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetch(t, make_float4(x, y, z, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((device)) float tex3D(texture<char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{



  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float tex3D(texture<signed char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float tex3D(texture<unsigned char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float1 tex3D(texture<char1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float1 tex3D(texture<uchar1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float2 tex3D(texture<char2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float2 tex3D(texture<uchar2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float4 tex3D(texture<char4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((device)) float4 tex3D(texture<uchar4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((device)) float tex3D(texture<short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float tex3D(texture<unsigned short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float1 tex3D(texture<short1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float1 tex3D(texture<ushort1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float2 tex3D(texture<short2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float2 tex3D(texture<ushort2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float4 tex3D(texture<short4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((device)) float4 tex3D(texture<ushort4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((device)) char texCubemap(texture<char, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{



  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));


  return (char)v.x;
}

static __inline__ __attribute__((device)) signed char texCubemap(texture<signed char, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return (signed char)v.x;
}

static __inline__ __attribute__((device)) unsigned char texCubemap(texture<unsigned char, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return (unsigned char)v.x;
}

static __inline__ __attribute__((device)) char1 texCubemap(texture<char1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_char1(v.x);
}

static __inline__ __attribute__((device)) uchar1 texCubemap(texture<uchar1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_uchar1(v.x);
}

static __inline__ __attribute__((device)) char2 texCubemap(texture<char2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((device)) uchar2 texCubemap(texture<uchar2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((device)) char4 texCubemap(texture<char4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((device)) uchar4 texCubemap(texture<uchar4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((device)) short texCubemap(texture<short, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return (short)v.x;
}

static __inline__ __attribute__((device)) unsigned short texCubemap(texture<unsigned short, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return (unsigned short)v.x;
}

static __inline__ __attribute__((device)) short1 texCubemap(texture<short1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_short1(v.x);
}

static __inline__ __attribute__((device)) ushort1 texCubemap(texture<ushort1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_ushort1(v.x);
}

static __inline__ __attribute__((device)) short2 texCubemap(texture<short2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((device)) ushort2 texCubemap(texture<ushort2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((device)) short4 texCubemap(texture<short4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((device)) ushort4 texCubemap(texture<ushort4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((device)) int texCubemap(texture<int, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return (int)v.x;
}

static __inline__ __attribute__((device)) unsigned int texCubemap(texture<unsigned int, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return (unsigned int)v.x;
}

static __inline__ __attribute__((device)) int1 texCubemap(texture<int1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_int1(v.x);
}

static __inline__ __attribute__((device)) uint1 texCubemap(texture<uint1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_uint1(v.x);
}

static __inline__ __attribute__((device)) int2 texCubemap(texture<int2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((device)) uint2 texCubemap(texture<uint2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((device)) int4 texCubemap(texture<int4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((device)) uint4 texCubemap(texture<uint4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 3059 "/usr/local/cuda/include/texture_fetch_functions.h"
static __inline__ __attribute__((device)) float texCubemap(texture<float, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetchc(t, make_float4(x, y, z, 0));

  return v.x;
}

static __inline__ __attribute__((device)) float1 texCubemap(texture<float1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetchc(t, make_float4(x, y, z, 0));

  return make_float1(v.x);
}

static __inline__ __attribute__((device)) float2 texCubemap(texture<float2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetchc(t, make_float4(x, y, z, 0));

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((device)) float4 texCubemap(texture<float4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetchc(t, make_float4(x, y, z, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((device)) float texCubemap(texture<char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{



  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float texCubemap(texture<signed char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float texCubemap(texture<unsigned char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float1 texCubemap(texture<char1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float1 texCubemap(texture<uchar1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float2 texCubemap(texture<char2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float2 texCubemap(texture<uchar2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float4 texCubemap(texture<char4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((device)) float4 texCubemap(texture<uchar4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((device)) float texCubemap(texture<short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float texCubemap(texture<unsigned short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float1 texCubemap(texture<short1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float1 texCubemap(texture<ushort1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float2 texCubemap(texture<short2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float2 texCubemap(texture<ushort2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float4 texCubemap(texture<short4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((device)) float4 texCubemap(texture<ushort4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((device)) char texCubemapLayered(texture<char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{



  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);


  return (char)v.x;
}

static __inline__ __attribute__((device)) signed char texCubemapLayered(texture<signed char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (signed char)v.x;
}

static __inline__ __attribute__((device)) unsigned char texCubemapLayered(texture<unsigned char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (unsigned char)v.x;
}

static __inline__ __attribute__((device)) char1 texCubemapLayered(texture<char1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_char1(v.x);
}

static __inline__ __attribute__((device)) uchar1 texCubemapLayered(texture<uchar1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_uchar1(v.x);
}

static __inline__ __attribute__((device)) char2 texCubemapLayered(texture<char2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((device)) uchar2 texCubemapLayered(texture<uchar2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((device)) char4 texCubemapLayered(texture<char4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((device)) uchar4 texCubemapLayered(texture<uchar4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((device)) short texCubemapLayered(texture<short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (short)v.x;
}

static __inline__ __attribute__((device)) unsigned short texCubemapLayered(texture<unsigned short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (unsigned short)v.x;
}

static __inline__ __attribute__((device)) short1 texCubemapLayered(texture<short1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_short1(v.x);
}

static __inline__ __attribute__((device)) ushort1 texCubemapLayered(texture<ushort1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_ushort1(v.x);
}

static __inline__ __attribute__((device)) short2 texCubemapLayered(texture<short2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((device)) ushort2 texCubemapLayered(texture<ushort2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((device)) short4 texCubemapLayered(texture<short4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((device)) ushort4 texCubemapLayered(texture<ushort4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((device)) int texCubemapLayered(texture<int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (int)v.x;
}

static __inline__ __attribute__((device)) unsigned int texCubemapLayered(texture<unsigned int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (unsigned int)v.x;
}

static __inline__ __attribute__((device)) int1 texCubemapLayered(texture<int1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_int1(v.x);
}

static __inline__ __attribute__((device)) uint1 texCubemapLayered(texture<uint1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_uint1(v.x);
}

static __inline__ __attribute__((device)) int2 texCubemapLayered(texture<int2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((device)) uint2 texCubemapLayered(texture<uint2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((device)) int4 texCubemapLayered(texture<int4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((device)) uint4 texCubemapLayered(texture<uint4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 3508 "/usr/local/cuda/include/texture_fetch_functions.h"
static __inline__ __attribute__((device)) float texCubemapLayered(texture<float, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer);

  return v.x;
}

static __inline__ __attribute__((device)) float1 texCubemapLayered(texture<float1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_float1(v.x);
}

static __inline__ __attribute__((device)) float2 texCubemapLayered(texture<float2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((device)) float4 texCubemapLayered(texture<float4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((device)) float texCubemapLayered(texture<char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{



  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float texCubemapLayered(texture<signed char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float texCubemapLayered(texture<unsigned char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float1 texCubemapLayered(texture<char1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float1 texCubemapLayered(texture<uchar1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float2 texCubemapLayered(texture<char2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float2 texCubemapLayered(texture<uchar2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float4 texCubemapLayered(texture<char4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((device)) float4 texCubemapLayered(texture<uchar4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((device)) float texCubemapLayered(texture<short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float texCubemapLayered(texture<unsigned short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((device)) float1 texCubemapLayered(texture<short1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float1 texCubemapLayered(texture<ushort1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((device)) float2 texCubemapLayered(texture<short2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float2 texCubemapLayered(texture<ushort2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((device)) float4 texCubemapLayered(texture<short4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((device)) float4 texCubemapLayered(texture<ushort4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}
# 3425 "/usr/local/cuda/include/device_functions.h" 2
# 80 "/usr/local/cuda/include/cuda_runtime.h" 2
# 1 "/usr/local/cuda/include/device_launch_parameters.h" 1
# 63 "/usr/local/cuda/include/device_launch_parameters.h"
extern "C" {


uint3 __attribute__((device_builtin)) extern const threadIdx;
uint3 __attribute__((device_builtin)) extern const blockIdx;
dim3 __attribute__((device_builtin)) extern const blockDim;
dim3 __attribute__((device_builtin)) extern const gridDim;
int __attribute__((device_builtin)) extern const warpSize;




}
# 81 "/usr/local/cuda/include/cuda_runtime.h" 2
# 120 "/usr/local/cuda/include/cuda_runtime.h"
template<class T>
__inline__ __attribute__((host)) cudaError_t cudaSetupArgument(
  T arg,
  size_t offset
)
{
  return cudaSetupArgument((const void*)&arg, sizeof(T), offset);
}
# 159 "/usr/local/cuda/include/cuda_runtime.h"
static __inline__ __attribute__((host)) cudaError_t cudaEventCreate(
  cudaEvent_t *event,
  unsigned int flags
)
{
  return cudaEventCreateWithFlags(event, flags);
}
# 222 "/usr/local/cuda/include/cuda_runtime.h"
static __inline__ __attribute__((host)) cudaError_t cudaMallocHost(
  void **ptr,
  size_t size,
  unsigned int flags
)
{
  return cudaHostAlloc(ptr, size, flags);
}

template<class T>
__inline__ __attribute__((host)) cudaError_t cudaHostAlloc(
  T **ptr,
  size_t size,
  unsigned int flags
)
{
  return cudaHostAlloc((void**)(void*)ptr, size, flags);
}

template<class T>
__inline__ __attribute__((host)) cudaError_t cudaHostGetDevicePointer(
  T **pDevice,
  void *pHost,
  unsigned int flags
)
{
  return cudaHostGetDevicePointer((void**)(void*)pDevice, pHost, flags);
}

template<class T>
__inline__ __attribute__((host)) cudaError_t cudaMalloc(
  T **devPtr,
  size_t size
)
{
  return cudaMalloc((void**)(void*)devPtr, size);
}

template<class T>
__inline__ __attribute__((host)) cudaError_t cudaMallocHost(
  T **ptr,
  size_t size,
  unsigned int flags = 0
)
{
  return cudaMallocHost((void**)(void*)ptr, size, flags);
}

template<class T>
__inline__ __attribute__((host)) cudaError_t cudaMallocPitch(
  T **devPtr,
  size_t *pitch,
  size_t width,
  size_t height
)
{
  return cudaMallocPitch((void**)(void*)devPtr, pitch, width, height);
}
# 289 "/usr/local/cuda/include/cuda_runtime.h"
static __inline__ __attribute__((host)) cudaError_t cudaMemcpyToSymbol(
        char *symbol,
  const void *src,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyHostToDevice
)
{
  return cudaMemcpyToSymbol((const char*)symbol, src, count, offset, kind);
}

template<class T>
__inline__ __attribute__((host)) cudaError_t cudaMemcpyToSymbol(
  const T &symbol,
  const void *src,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyHostToDevice
)
{
  return cudaMemcpyToSymbol((const char*)&symbol, src, count, offset, kind);
}

static __inline__ __attribute__((host)) cudaError_t cudaMemcpyToSymbolAsync(
        char *symbol,
  const void *src,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyHostToDevice,
        cudaStream_t stream = 0
)
{
  return cudaMemcpyToSymbolAsync((const char*)symbol, src, count, offset, kind, stream);
}

template<class T>
__inline__ __attribute__((host)) cudaError_t cudaMemcpyToSymbolAsync(
  const T &symbol,
  const void *src,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyHostToDevice,
        cudaStream_t stream = 0
)
{
  return cudaMemcpyToSymbolAsync((const char*)&symbol, src, count, offset, kind, stream);
}







static __inline__ __attribute__((host)) cudaError_t cudaMemcpyFromSymbol(
  void *dst,
  char *symbol,
  size_t count,
  size_t offset = 0,
  enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost
)
{
  return cudaMemcpyFromSymbol(dst, (const char*)symbol, count, offset, kind);
}

template<class T>
__inline__ __attribute__((host)) cudaError_t cudaMemcpyFromSymbol(
        void *dst,
  const T &symbol,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost
)
{
  return cudaMemcpyFromSymbol(dst, (const char*)&symbol, count, offset, kind);
}

static __inline__ __attribute__((host)) cudaError_t cudaMemcpyFromSymbolAsync(
  void *dst,
  char *symbol,
  size_t count,
  size_t offset = 0,
  enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost,
  cudaStream_t stream = 0
)
{
  return cudaMemcpyFromSymbolAsync(dst, (const char*)symbol, count, offset, kind, stream);
}

template<class T>
__inline__ __attribute__((host)) cudaError_t cudaMemcpyFromSymbolAsync(
        void *dst,
  const T &symbol,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost,
        cudaStream_t stream = 0
)
{
  return cudaMemcpyFromSymbolAsync(dst, (const char*)&symbol, count, offset, kind, stream);
}

static __inline__ __attribute__((host)) cudaError_t cudaGetSymbolAddress(
  void **devPtr,
  char *symbol
)
{
  return cudaGetSymbolAddress(devPtr, (const char*)symbol);
}
# 424 "/usr/local/cuda/include/cuda_runtime.h"
template<class T>
__inline__ __attribute__((host)) cudaError_t cudaGetSymbolAddress(
        void **devPtr,
  const T &symbol
)
{
  return cudaGetSymbolAddress(devPtr, (const char*)&symbol);
}







static __inline__ __attribute__((host)) cudaError_t cudaGetSymbolSize(
  size_t *size,
  char *symbol
)
{
  return cudaGetSymbolSize(size, (const char*)symbol);
}
# 472 "/usr/local/cuda/include/cuda_runtime.h"
template<class T>
__inline__ __attribute__((host)) cudaError_t cudaGetSymbolSize(
        size_t *size,
  const T &symbol
)
{
  return cudaGetSymbolSize(size, (const char*)&symbol);
}
# 521 "/usr/local/cuda/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
__inline__ __attribute__((host)) cudaError_t cudaBindTexture(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
  const struct cudaChannelFormatDesc &desc,
        size_t size = (2147483647 * 2U + 1U)
)
{
  return cudaBindTexture(offset, &tex, devPtr, &desc, size);
}
# 566 "/usr/local/cuda/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
__inline__ __attribute__((host)) cudaError_t cudaBindTexture(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
        size_t size = (2147483647 * 2U + 1U)
)
{
  return cudaBindTexture(offset, tex, devPtr, tex.channelDesc, size);
}
# 622 "/usr/local/cuda/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
__inline__ __attribute__((host)) cudaError_t cudaBindTexture2D(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
  const struct cudaChannelFormatDesc &desc,
  size_t width,
  size_t height,
  size_t pitch
)
{
  return cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch);
}
# 680 "/usr/local/cuda/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
__inline__ __attribute__((host)) cudaError_t cudaBindTexture2D(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
  size_t width,
  size_t height,
  size_t pitch
)
{
  return cudaBindTexture2D(offset, &tex, devPtr, &tex.channelDesc, width, height, pitch);
}
# 722 "/usr/local/cuda/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
__inline__ __attribute__((host)) cudaError_t cudaBindTextureToArray(
  const struct texture<T, dim, readMode> &tex,
  const struct cudaArray *array,
  const struct cudaChannelFormatDesc &desc
)
{
  return cudaBindTextureToArray(&tex, array, &desc);
}
# 760 "/usr/local/cuda/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
__inline__ __attribute__((host)) cudaError_t cudaBindTextureToArray(
  const struct texture<T, dim, readMode> &tex,
  const struct cudaArray *array
)
{
  struct cudaChannelFormatDesc desc;
  cudaError_t err = cudaGetChannelDesc(&desc, array);

  return err == cudaSuccess ? cudaBindTextureToArray(tex, array, desc) : err;
}
# 799 "/usr/local/cuda/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
__inline__ __attribute__((host)) cudaError_t cudaUnbindTexture(
  const struct texture<T, dim, readMode> &tex
)
{
  return cudaUnbindTexture(&tex);
}
# 839 "/usr/local/cuda/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
__inline__ __attribute__((host)) cudaError_t cudaGetTextureAlignmentOffset(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex
)
{
  return cudaGetTextureAlignmentOffset(offset, &tex);
}
# 900 "/usr/local/cuda/include/cuda_runtime.h"
template<class T>
__inline__ __attribute__((host)) cudaError_t cudaFuncSetCacheConfig(
  T *func,
  enum cudaFuncCache cacheConfig
)
{
  return cudaFuncSetCacheConfig((const char*)func, cacheConfig);
}
# 944 "/usr/local/cuda/include/cuda_runtime.h"
template<class T>
__inline__ __attribute__((host)) cudaError_t cudaLaunch(
  T *entry
)
{
  return cudaLaunch((const char*)entry);
}
# 984 "/usr/local/cuda/include/cuda_runtime.h"
template<class T>
__inline__ __attribute__((host)) cudaError_t cudaFuncGetAttributes(
  struct cudaFuncAttributes *attr,
  T *entry
)
{
  return cudaFuncGetAttributes(attr, (const char*)entry);
}
# 1013 "/usr/local/cuda/include/cuda_runtime.h"
template<class T, int dim>
__inline__ __attribute__((host)) cudaError_t cudaBindSurfaceToArray(
  const struct surface<T, dim> &surf,
  const struct cudaArray *array,
  const struct cudaChannelFormatDesc &desc
)
{
  return cudaBindSurfaceToArray(&surf, array, &desc);
}
# 1042 "/usr/local/cuda/include/cuda_runtime.h"
template<class T, int dim>
__inline__ __attribute__((host)) cudaError_t cudaBindSurfaceToArray(
  const struct surface<T, dim> &surf,
  const struct cudaArray *array
)
{
  struct cudaChannelFormatDesc desc;
  cudaError_t err = cudaGetChannelDesc(&desc, array);

  return err == cudaSuccess ? cudaBindSurfaceToArray(surf, array, desc) : err;
}
# 1 "<command-line>" 2
# 1 "./dscudatmp/mr3.cu"
static char *Ptxdata =
    "	.version 1.4\n"
    "	.target sm_10, map_f64_to_f32\n"
    "	// compiled with /usr/local/cuda-4.1/open64/lib//be\n"
    "	// nvopencc 4.1 built on 2012-01-12\n"
    "\n"
    "	//-----------------------------------------------------------\n"
    "	// Compiling /tmp/tmpxft_0000489a_00000000-9_mr3.cpp3.i (/tmp/ccBI#.q3bgbL)\n"
    "	//-----------------------------------------------------------\n"
    "\n"
    "	//-----------------------------------------------------------\n"
    "	// Options:\n"
    "	//-----------------------------------------------------------\n"
    "	//  Target:ptx, ISA:sm_10, Endian:little, Pointer Size:64\n"
    "	//  -O3	(Optimization level)\n"
    "	//  -g0	(Debug level)\n"
    "	//  -m2	(Report advisories)\n"
    "	//-----------------------------------------------------------\n"
    "\n"
    "	.file	1	\"<command-line>\"\n"
    "	.file	2	\"/tmp/tmpxft_0000489a_00000000-8_mr3.cudafe2.gpu\"\n"
    "	.file	3	\"mr3.cu\"\n"
    "	.file	4	\"/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include/stddef.h\"\n"
    "	.file	5	\"/usr/local/cuda/include/crt/device_runtime.h\"\n"
    "	.file	6	\"/usr/local/cuda/include/host_defines.h\"\n"
    "	.file	7	\"/usr/local/cuda/include/builtin_types.h\"\n"
    "	.file	8	\"/usr/local/cuda/include/device_types.h\"\n"
    "	.file	9	\"/usr/local/cuda/include/driver_types.h\"\n"
    "	.file	10	\"/usr/local/cuda/include/surface_types.h\"\n"
    "	.file	11	\"/usr/local/cuda/include/texture_types.h\"\n"
    "	.file	12	\"/usr/local/cuda/include/vector_types.h\"\n"
    "	.file	13	\"/usr/local/cuda/include/device_launch_parameters.h\"\n"
    "	.file	14	\"/usr/local/cuda/include/crt/storage_class.h\"\n"
    "	.file	15	\"/usr/local/cuda/include/common_functions.h\"\n"
    "	.file	16	\"/usr/local/cuda/include/math_functions.h\"\n"
    "	.file	17	\"/usr/local/cuda/include/math_constants.h\"\n"
    "	.file	18	\"/usr/local/cuda/include/device_functions.h\"\n"
    "	.file	19	\"/usr/local/cuda/include/sm_11_atomic_functions.h\"\n"
    "	.file	20	\"/usr/local/cuda/include/sm_12_atomic_functions.h\"\n"
    "	.file	21	\"/usr/local/cuda/include/sm_13_double_functions.h\"\n"
    "	.file	22	\"/usr/local/cuda/include/sm_20_atomic_functions.h\"\n"
    "	.file	23	\"/usr/local/cuda/include/sm_20_intrinsics.h\"\n"
    "	.file	24	\"/usr/local/cuda/include/surface_functions.h\"\n"
    "	.file	25	\"/usr/local/cuda/include/texture_fetch_functions.h\"\n"
    "	.file	26	\"/usr/local/cuda/include/math_functions_dbl_ptx1.h\"\n"
    "\n"
    "\n"
    "	.entry nacl_kernel (\n"
    "		.param .u64 __cudaparm_nacl_kernel_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_n,\n"
    "		.param .u64 __cudaparm_nacl_kernel_atype,\n"
    "		.param .s32 __cudaparm_nacl_kernel_nat,\n"
    "		.param .u64 __cudaparm_nacl_kernel_pol,\n"
    "		.param .u64 __cudaparm_nacl_kernel_sigm,\n"
    "		.param .u64 __cudaparm_nacl_kernel_ipotro,\n"
    "		.param .u64 __cudaparm_nacl_kernel_pc,\n"
    "		.param .u64 __cudaparm_nacl_kernel_pd,\n"
    "		.param .u64 __cudaparm_nacl_kernel_zz,\n"
    "		.param .s32 __cudaparm_nacl_kernel_tblno,\n"
    "		.param .f32 __cudaparm_nacl_kernel___val_paramxmax,\n"
    "		.param .s32 __cudaparm_nacl_kernel_periodicflag,\n"
    "		.param .u64 __cudaparm_nacl_kernel_force)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<22>;\n"
    "	.reg .u64 %rd<31>;\n"
    "	.reg .f32 %f<110>;\n"
    "	.reg .pred %p<9>;\n"
    "	.loc	3	67	0\n"
    "$LDWbegin_nacl_kernel:\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	mul.wide.u16 	%r1, %rh1, 64;\n"
    "	cvt.u32.u16 	%r2, %tid.x;\n"
    "	add.u32 	%r3, %r2, %r1;\n"
    "	ld.param.s32 	%r4, [__cudaparm_nacl_kernel_n];\n"
    "	setp.le.s32 	%p1, %r4, %r3;\n"
    "	@%p1 bra 	$Lt_0_9218;\n"
    "	.loc	3	77	0\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	mov.f32 	%f2, %f1;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	mov.f32 	%f4, %f3;\n"
    "	mov.f32 	%f5, 0f00000000;     	// 0\n"
    "	mov.f32 	%f6, %f5;\n"
    "	mov.u32 	%r5, 0;\n"
    "	.loc	3	67	0\n"
    "	ld.param.s32 	%r4, [__cudaparm_nacl_kernel_n];\n"
    "	.loc	3	77	0\n"
    "	setp.le.s32 	%p2, %r4, %r5;\n"
    "	@%p2 bra 	$Lt_0_11266;\n"
    "	.loc	3	67	0\n"
    "	ld.param.s32 	%r4, [__cudaparm_nacl_kernel_n];\n"
    "	.loc	3	77	0\n"
    "	mov.s32 	%r6, %r4;\n"
    "	mov.s32 	%r7, 0;\n"
    "	mul.lo.s32 	%r8, %r4, 3;\n"
    "	ld.param.s32 	%r9, [__cudaparm_nacl_kernel_periodicflag];\n"
    "	and.b32 	%r10, %r9, 1;\n"
    "	ld.param.f32 	%f7, [__cudaparm_nacl_kernel___val_paramxmax];\n"
    "	add.f32 	%f8, %f7, %f7;\n"
    "	mov.s32 	%r11, 0;\n"
    "	setp.eq.s32 	%p3, %r10, %r11;\n"
    "	mul.lo.s32 	%r12, %r3, 3;\n"
    "	selp.f32 	%f9, %f8, %f7, %p3;\n"
    "	cvt.s64.s32 	%rd1, %r12;\n"
    "	ld.param.u64 	%rd2, [__cudaparm_nacl_kernel_x];\n"
    "	mov.s64 	%rd3, %rd2;\n"
    "	rcp.approx.f32 	%f10, %f9;\n"
    "	mul.wide.s32 	%rd4, %r12, 4;\n"
    "	add.u64 	%rd5, %rd4, %rd2;\n"
    "	ld.global.f32 	%f11, [%rd5+0];\n"
    "	ld.global.f32 	%f12, [%rd5+4];\n"
    "	ld.global.f32 	%f13, [%rd5+8];\n"
    "	mov.s32 	%r13, 0;\n"
    "	mov.s32 	%r14, %r6;\n"
    "$Lt_0_10242:\n"
    " //<loop> Loop body line 77, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	82	0\n"
    "	ld.global.f32 	%f14, [%rd3+0];\n"
    "	sub.f32 	%f15, %f11, %f14;\n"
    "	mul.f32 	%f16, %f10, %f15;\n"
    "	cvt.rni.f32.f32 	%f17, %f16;\n"
    "	mul.f32 	%f18, %f9, %f17;\n"
    "	sub.f32 	%f19, %f15, %f18;\n"
    "	mov.f32 	%f20, %f19;\n"
    "	.loc	3	83	0\n"
    "	mov.f32 	%f21, 0f00000000;    	// 0\n"
    "	mad.f32 	%f22, %f19, %f19, %f21;\n"
    "	.loc	3	81	0\n"
    "	ld.global.f32 	%f23, [%rd3+4];\n"
    "	sub.f32 	%f24, %f12, %f23;\n"
    "	mov.f32 	%f25, %f24;\n"
    "	.loc	3	82	0\n"
    "	mul.f32 	%f26, %f10, %f24;\n"
    "	cvt.rni.f32.f32 	%f27, %f26;\n"
    "	mul.f32 	%f28, %f9, %f27;\n"
    "	sub.f32 	%f29, %f24, %f28;\n"
    "	mov.f32 	%f30, %f29;\n"
    "	.loc	3	83	0\n"
    "	mad.f32 	%f31, %f29, %f29, %f22;\n"
    "	.loc	3	81	0\n"
    "	ld.global.f32 	%f32, [%rd3+8];\n"
    "	sub.f32 	%f33, %f13, %f32;\n"
    "	mov.f32 	%f34, %f33;\n"
    "	.loc	3	82	0\n"
    "	mul.f32 	%f35, %f10, %f33;\n"
    "	cvt.rni.f32.f32 	%f36, %f35;\n"
    "	mul.f32 	%f37, %f9, %f36;\n"
    "	sub.f32 	%f38, %f33, %f37;\n"
    "	mov.f32 	%f39, %f38;\n"
    "	.loc	3	83	0\n"
    "	mad.f32 	%f40, %f38, %f38, %f31;\n"
    "	mov.f32 	%f41, 0f00000000;    	// 0\n"
    "	setp.neu.f32 	%p4, %f40, %f41;\n"
    "	@!%p4 bra 	$Lt_0_10498;\n"
    "	.loc	3	91	0\n"
    "	ld.param.u64 	%rd6, [__cudaparm_nacl_kernel_atype];\n"
    "	cvt.s64.s32 	%rd7, %r13;\n"
    "	mul.wide.s32 	%rd8, %r13, 4;\n"
    "	add.u64 	%rd9, %rd6, %rd8;\n"
    "	ld.global.s32 	%r15, [%rd9+0];\n"
    "	cvt.s64.s32 	%rd10, %r3;\n"
    "	mul.wide.s32 	%rd11, %r3, 4;\n"
    "	add.u64 	%rd12, %rd6, %rd11;\n"
    "	ld.global.s32 	%r16, [%rd12+0];\n"
    "	ld.param.s32 	%r17, [__cudaparm_nacl_kernel_nat];\n"
    "	mul.lo.s32 	%r18, %r16, %r17;\n"
    "	add.s32 	%r19, %r15, %r18;\n"
    "	.loc	3	92	0\n"
    "	sqrt.approx.f32 	%f42, %f40;\n"
    "	cvt.s64.s32 	%rd13, %r19;\n"
    "	mul.wide.s32 	%rd14, %r19, 4;\n"
    "	ld.param.u64 	%rd15, [__cudaparm_nacl_kernel_ipotro];\n"
    "	add.u64 	%rd16, %rd15, %rd14;\n"
    "	ld.global.f32 	%f43, [%rd16+0];\n"
    "	ld.param.u64 	%rd17, [__cudaparm_nacl_kernel_sigm];\n"
    "	add.u64 	%rd18, %rd17, %rd14;\n"
    "	ld.global.f32 	%f44, [%rd18+0];\n"
    "	sub.f32 	%f45, %f44, %f42;\n"
    "	mul.f32 	%f46, %f43, %f45;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f47, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f48, %f46, %f47;\n"
    "	cvt.rzi.f32.f32 	%f49, %f48;\n"
    "	mov.f32 	%f50, %f49;\n"
    "	mov.f32 	%f51, 0fbf317200;    	// -0.693146\n"
    "	mov.f32 	%f52, %f51;\n"
    "	mov.f32 	%f53, %f46;\n"
    "	mad.f32 %f54, %f50, %f52, %f53;\n"
    "	mov.f32 	%f55, %f54;\n"
    "	mov.f32 	%f56, %f49;\n"
    "	mov.f32 	%f57, 0fb5bfbe8e;    	// -1.42861e-06\n"
    "	mov.f32 	%f58, %f57;\n"
    "	mov.f32 	%f59, %f55;\n"
    "	mad.f32 %f60, %f56, %f58, %f59;\n"
    "	mov.f32 	%f61, %f60;\n"
    "	.loc	3	93	0\n"
    "	rcp.approx.f32 	%f62, %f42;\n"
    "	mul.f32 	%f63, %f62, %f62;\n"
    "	mul.f32 	%f64, %f63, %f63;\n"
    "	mul.f32 	%f65, %f64, %f64;\n"
    "	ld.param.u64 	%rd19, [__cudaparm_nacl_kernel_pc];\n"
    "	add.u64 	%rd20, %rd19, %rd14;\n"
    "	ld.global.f32 	%f66, [%rd20+0];\n"
    "	mov.f32 	%f67, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f68, %f66, %f67;\n"
    "	mul.f32 	%f69, %f65, %f68;\n"
    "	mov.f32 	%f70, 0f7f800000;    	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f71, 0f00000000;    	// 0\n"
    "	ex2.approx.f32 	%f72, %f49;\n"
    "	mov.f32 	%f73, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f74, %f61, %f73;\n"
    "	ex2.approx.f32 	%f75, %f74;\n"
    "	mul.f32 	%f76, %f72, %f75;\n"
    "	mov.f32 	%f77, 0fc2d20000;    	// -105\n"
    "	setp.lt.f32 	%p5, %f46, %f77;\n"
    "	selp.f32 	%f78, %f71, %f76, %p5;\n"
    "	mov.f32 	%f79, 0f42d20000;    	// 105\n"
    "	setp.gt.f32 	%p6, %f46, %f79;\n"
    "	selp.f32 	%f80, %f70, %f78, %p6;\n"
    "	ld.param.u64 	%rd21, [__cudaparm_nacl_kernel_pol];\n"
    "	add.u64 	%rd22, %rd21, %rd14;\n"
    "	ld.global.f32 	%f81, [%rd22+0];\n"
    "	mov.f32 	%f82, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f83, %f81, %f82;\n"
    "	mul.f32 	%f84, %f80, %f83;\n"
    "	mul.f32 	%f85, %f43, %f84;\n"
    "	mul.f32 	%f86, %f62, %f85;\n"
    "	sub.f32 	%f87, %f86, %f69;\n"
    "	ld.param.u64 	%rd23, [__cudaparm_nacl_kernel_pd];\n"
    "	add.u64 	%rd24, %rd23, %rd14;\n"
    "	ld.global.f32 	%f88, [%rd24+0];\n"
    "	mov.f32 	%f89, 0f41000000;    	// 8\n"
    "	mul.f32 	%f90, %f88, %f89;\n"
    "	mul.f32 	%f91, %f65, %f90;\n"
    "	mul.f32 	%f92, %f63, %f91;\n"
    "	sub.f32 	%f93, %f87, %f92;\n"
    "	ld.param.u64 	%rd25, [__cudaparm_nacl_kernel_zz];\n"
    "	add.u64 	%rd26, %rd25, %rd14;\n"
    "	ld.global.f32 	%f94, [%rd26+0];\n"
    "	mul.f32 	%f95, %f62, %f63;\n"
    "	mad.f32 	%f96, %f94, %f95, %f93;\n"
    "	.loc	3	97	0\n"
    "	mov.f32 	%f97, %f2;\n"
    "	mov.f32 	%f98, %f20;\n"
    "	mad.f32 	%f99, %f98, %f96, %f97;\n"
    "	mov.f32 	%f2, %f99;\n"
    "	mov.f32 	%f100, %f4;\n"
    "	mov.f32 	%f101, %f30;\n"
    "	mad.f32 	%f102, %f101, %f96, %f100;\n"
    "	mov.f32 	%f4, %f102;\n"
    "	mov.f32 	%f103, %f6;\n"
    "	mov.f32 	%f104, %f39;\n"
    "	mad.f32 	%f105, %f104, %f96, %f103;\n"
    "	mov.f32 	%f6, %f105;\n"
    "$Lt_0_10498:\n"
    "	add.s32 	%r13, %r13, 1;\n"
    "	add.s32 	%r7, %r7, 3;\n"
    "	add.u64 	%rd3, %rd3, 12;\n"
    "	setp.ne.s32 	%p7, %r7, %r8;\n"
    "	@%p7 bra 	$Lt_0_10242;\n"
    "	bra.uni 	$Lt_0_9730;\n"
    "$Lt_0_11266:\n"
    "	mul.lo.s32 	%r20, %r3, 3;\n"
    "	cvt.s64.s32 	%rd27, %r20;\n"
    "	mul.wide.s32 	%rd4, %r20, 4;\n"
    "$Lt_0_9730:\n"
    "	.loc	3	100	0\n"
    "	ld.param.u64 	%rd28, [__cudaparm_nacl_kernel_force];\n"
    "	add.u64 	%rd29, %rd28, %rd4;\n"
    "	mov.f32 	%f106, %f2;\n"
    "	st.global.f32 	[%rd29+0], %f106;\n"
    "	mov.f32 	%f107, %f4;\n"
    "	st.global.f32 	[%rd29+4], %f107;\n"
    "	mov.f32 	%f108, %f6;\n"
    "	st.global.f32 	[%rd29+8], %f108;\n"
    "$Lt_0_9218:\n"
    "	.loc	3	102	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel:\n"
    "	} // nacl_kernel\n"
    "\n"
    "	.entry nacl_kernel_kadai8 (\n"
    "		.param .u64 __cudaparm_nacl_kernel_kadai8_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_kadai8_n,\n"
    "		.param .u64 __cudaparm_nacl_kernel_kadai8_atype,\n"
    "		.param .s32 __cudaparm_nacl_kernel_kadai8_nat,\n"
    "		.param .u64 __cudaparm_nacl_kernel_kadai8_pol,\n"
    "		.param .u64 __cudaparm_nacl_kernel_kadai8_sigm,\n"
    "		.param .u64 __cudaparm_nacl_kernel_kadai8_ipotro,\n"
    "		.param .u64 __cudaparm_nacl_kernel_kadai8_pc,\n"
    "		.param .u64 __cudaparm_nacl_kernel_kadai8_pd,\n"
    "		.param .u64 __cudaparm_nacl_kernel_kadai8_zz,\n"
    "		.param .s32 __cudaparm_nacl_kernel_kadai8_tblno,\n"
    "		.param .f32 __cudaparm_nacl_kernel_kadai8___val_paramxmax,\n"
    "		.param .s32 __cudaparm_nacl_kernel_kadai8_periodicflag,\n"
    "		.param .u64 __cudaparm_nacl_kernel_kadai8_force)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<33>;\n"
    "	.reg .u64 %rd<38>;\n"
    "	.reg .f32 %f<113>;\n"
    "	.reg .pred %p<10>;\n"
    "	.shared .align 4 .b8 __cuda___cuda_local_var_15583_35_non_const_s_x24784[768];\n"
    "	.loc	3	107	0\n"
    "$LDWbegin_nacl_kernel_kadai8:\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	mul.wide.u16 	%r1, %rh1, 64;\n"
    "	cvt.u32.u16 	%r2, %tid.x;\n"
    "	add.u32 	%r3, %r1, %r2;\n"
    "	ld.param.s32 	%r4, [__cudaparm_nacl_kernel_kadai8_n];\n"
    "	setp.le.s32 	%p1, %r4, %r3;\n"
    "	@%p1 bra 	$Lt_1_11266;\n"
    "	.loc	3	118	0\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	mov.f32 	%f2, %f1;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	mov.f32 	%f4, %f3;\n"
    "	mov.f32 	%f5, 0f00000000;     	// 0\n"
    "	mov.f32 	%f6, %f5;\n"
    "	mov.u32 	%r5, 0;\n"
    "	.loc	3	107	0\n"
    "	ld.param.s32 	%r4, [__cudaparm_nacl_kernel_kadai8_n];\n"
    "	.loc	3	118	0\n"
    "	setp.le.s32 	%p2, %r4, %r5;\n"
    "	@%p2 bra 	$Lt_1_14338;\n"
    "	mov.u64 	%rd1, __cuda___cuda_local_var_15583_35_non_const_s_x24784;\n"
    "	ld.param.s32 	%r6, [__cudaparm_nacl_kernel_kadai8_periodicflag];\n"
    "	and.b32 	%r7, %r6, 1;\n"
    "	ld.param.f32 	%f7, [__cudaparm_nacl_kernel_kadai8___val_paramxmax];\n"
    "	add.f32 	%f8, %f7, %f7;\n"
    "	mov.s32 	%r8, 0;\n"
    "	setp.eq.s32 	%p3, %r7, %r8;\n"
    "	selp.f32 	%f9, %f8, %f7, %p3;\n"
    "	rcp.approx.f32 	%f10, %f9;\n"
    "	.loc	3	107	0\n"
    "	ld.param.s32 	%r4, [__cudaparm_nacl_kernel_kadai8_n];\n"
    "	.loc	3	118	0\n"
    "	add.s32 	%r9, %r4, 63;\n"
    "	shr.s32 	%r10, %r9, 31;\n"
    "	mov.s32 	%r11, 63;\n"
    "	and.b32 	%r12, %r10, %r11;\n"
    "	add.s32 	%r13, %r12, %r9;\n"
    "	shr.s32 	%r14, %r13, 6;\n"
    "	mul24.lo.u32 	%r15, %r2, 3;\n"
    "	mul.lo.u32 	%r16, %r4, 3;\n"
    "	mov.s32 	%r17, %r15;\n"
    "	add.u32 	%r18, %r15, %r16;\n"
    "	mul.lo.s32 	%r19, %r3, 3;\n"
    "	cvt.s64.s32 	%rd2, %r19;\n"
    "	cvt.u64.u32 	%rd3, %r15;\n"
    "	mul.wide.u32 	%rd4, %r15, 4;\n"
    "	add.u64 	%rd5, %rd1, %rd4;\n"
    "	mul.wide.s32 	%rd6, %r19, 4;\n"
    "	ld.param.u64 	%rd7, [__cudaparm_nacl_kernel_kadai8_x];\n"
    "	add.u64 	%rd8, %rd6, %rd7;\n"
    "	mov.s32 	%r20, 0;\n"
    "	mov.s32 	%r21, %r14;\n"
    "$Lt_1_12290:\n"
    " //<loop> Loop body line 118, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	120	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	121	0\n"
    "	cvt.u64.u32 	%rd9, %r17;\n"
    "	mul.wide.u32 	%rd10, %r17, 4;\n"
    "	add.u64 	%rd11, %rd7, %rd10;\n"
    "	ld.global.f32 	%f11, [%rd11+0];\n"
    "	st.shared.f32 	[%rd5+0], %f11;\n"
    "	ld.global.f32 	%f12, [%rd11+4];\n"
    "	st.shared.f32 	[%rd5+4], %f12;\n"
    "	ld.global.f32 	%f13, [%rd11+8];\n"
    "	st.shared.f32 	[%rd5+8], %f13;\n"
    "	.loc	3	122	0\n"
    "	bar.sync 	0;\n"
    "	mov.s32 	%r22, 0;\n"
    "	mov.s64 	%rd12, %rd1;\n"
    "	ld.global.f32 	%f14, [%rd8+0];\n"
    "	ld.global.f32 	%f15, [%rd8+4];\n"
    "	ld.global.f32 	%f16, [%rd8+8];\n"
    "	mov.s32 	%r23, 0;\n"
    "$Lt_1_13058:\n"
    " //<loop> Loop body line 122, nesting depth: 2, iterations: 64\n"
    "	.loc	3	127	0\n"
    "	ld.shared.f32 	%f17, [%rd12+0];\n"
    "	sub.f32 	%f18, %f14, %f17;\n"
    "	mul.f32 	%f19, %f10, %f18;\n"
    "	cvt.rni.f32.f32 	%f20, %f19;\n"
    "	mul.f32 	%f21, %f9, %f20;\n"
    "	sub.f32 	%f22, %f18, %f21;\n"
    "	mov.f32 	%f23, %f22;\n"
    "	.loc	3	128	0\n"
    "	mov.f32 	%f24, 0f00000000;    	// 0\n"
    "	mad.f32 	%f25, %f22, %f22, %f24;\n"
    "	.loc	3	126	0\n"
    "	ld.shared.f32 	%f26, [%rd12+4];\n"
    "	sub.f32 	%f27, %f15, %f26;\n"
    "	mov.f32 	%f28, %f27;\n"
    "	.loc	3	127	0\n"
    "	mul.f32 	%f29, %f10, %f27;\n"
    "	cvt.rni.f32.f32 	%f30, %f29;\n"
    "	mul.f32 	%f31, %f9, %f30;\n"
    "	sub.f32 	%f32, %f27, %f31;\n"
    "	mov.f32 	%f33, %f32;\n"
    "	.loc	3	128	0\n"
    "	mad.f32 	%f34, %f32, %f32, %f25;\n"
    "	.loc	3	126	0\n"
    "	ld.shared.f32 	%f35, [%rd12+8];\n"
    "	sub.f32 	%f36, %f16, %f35;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	.loc	3	127	0\n"
    "	mul.f32 	%f38, %f10, %f36;\n"
    "	cvt.rni.f32.f32 	%f39, %f38;\n"
    "	mul.f32 	%f40, %f9, %f39;\n"
    "	sub.f32 	%f41, %f36, %f40;\n"
    "	mov.f32 	%f42, %f41;\n"
    "	.loc	3	128	0\n"
    "	mad.f32 	%f43, %f41, %f41, %f34;\n"
    "	mov.f32 	%f44, 0f00000000;    	// 0\n"
    "	setp.neu.f32 	%p4, %f43, %f44;\n"
    "	@!%p4 bra 	$Lt_1_13314;\n"
    "	.loc	3	136	0\n"
    "	ld.param.u64 	%rd13, [__cudaparm_nacl_kernel_kadai8_atype];\n"
    "	add.s32 	%r24, %r23, %r20;\n"
    "	cvt.s64.s32 	%rd14, %r24;\n"
    "	mul.wide.s32 	%rd15, %r24, 4;\n"
    "	add.u64 	%rd16, %rd13, %rd15;\n"
    "	ld.global.s32 	%r25, [%rd16+0];\n"
    "	cvt.s64.s32 	%rd17, %r3;\n"
    "	mul.wide.s32 	%rd18, %r3, 4;\n"
    "	add.u64 	%rd19, %rd13, %rd18;\n"
    "	ld.global.s32 	%r26, [%rd19+0];\n"
    "	ld.param.s32 	%r27, [__cudaparm_nacl_kernel_kadai8_nat];\n"
    "	mul.lo.s32 	%r28, %r26, %r27;\n"
    "	add.s32 	%r29, %r25, %r28;\n"
    "	.loc	3	137	0\n"
    "	sqrt.approx.f32 	%f45, %f43;\n"
    "	cvt.s64.s32 	%rd20, %r29;\n"
    "	mul.wide.s32 	%rd21, %r29, 4;\n"
    "	ld.param.u64 	%rd22, [__cudaparm_nacl_kernel_kadai8_ipotro];\n"
    "	add.u64 	%rd23, %rd22, %rd21;\n"
    "	ld.global.f32 	%f46, [%rd23+0];\n"
    "	ld.param.u64 	%rd24, [__cudaparm_nacl_kernel_kadai8_sigm];\n"
    "	add.u64 	%rd25, %rd24, %rd21;\n"
    "	ld.global.f32 	%f47, [%rd25+0];\n"
    "	sub.f32 	%f48, %f47, %f45;\n"
    "	mul.f32 	%f49, %f46, %f48;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f50, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f51, %f49, %f50;\n"
    "	cvt.rzi.f32.f32 	%f52, %f51;\n"
    "	mov.f32 	%f53, %f52;\n"
    "	mov.f32 	%f54, 0fbf317200;    	// -0.693146\n"
    "	mov.f32 	%f55, %f54;\n"
    "	mov.f32 	%f56, %f49;\n"
    "	mad.f32 %f57, %f53, %f55, %f56;\n"
    "	mov.f32 	%f58, %f57;\n"
    "	mov.f32 	%f59, %f52;\n"
    "	mov.f32 	%f60, 0fb5bfbe8e;    	// -1.42861e-06\n"
    "	mov.f32 	%f61, %f60;\n"
    "	mov.f32 	%f62, %f58;\n"
    "	mad.f32 %f63, %f59, %f61, %f62;\n"
    "	mov.f32 	%f64, %f63;\n"
    "	.loc	3	138	0\n"
    "	rcp.approx.f32 	%f65, %f45;\n"
    "	mul.f32 	%f66, %f65, %f65;\n"
    "	mul.f32 	%f67, %f66, %f66;\n"
    "	mul.f32 	%f68, %f67, %f67;\n"
    "	ld.param.u64 	%rd26, [__cudaparm_nacl_kernel_kadai8_pc];\n"
    "	add.u64 	%rd27, %rd26, %rd21;\n"
    "	ld.global.f32 	%f69, [%rd27+0];\n"
    "	mov.f32 	%f70, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f71, %f69, %f70;\n"
    "	mul.f32 	%f72, %f68, %f71;\n"
    "	mov.f32 	%f73, 0f7f800000;    	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f74, 0f00000000;    	// 0\n"
    "	ex2.approx.f32 	%f75, %f52;\n"
    "	mov.f32 	%f76, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f77, %f64, %f76;\n"
    "	ex2.approx.f32 	%f78, %f77;\n"
    "	mul.f32 	%f79, %f75, %f78;\n"
    "	mov.f32 	%f80, 0fc2d20000;    	// -105\n"
    "	setp.lt.f32 	%p5, %f49, %f80;\n"
    "	selp.f32 	%f81, %f74, %f79, %p5;\n"
    "	mov.f32 	%f82, 0f42d20000;    	// 105\n"
    "	setp.gt.f32 	%p6, %f49, %f82;\n"
    "	selp.f32 	%f83, %f73, %f81, %p6;\n"
    "	ld.param.u64 	%rd28, [__cudaparm_nacl_kernel_kadai8_pol];\n"
    "	add.u64 	%rd29, %rd28, %rd21;\n"
    "	ld.global.f32 	%f84, [%rd29+0];\n"
    "	mov.f32 	%f85, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f86, %f84, %f85;\n"
    "	mul.f32 	%f87, %f83, %f86;\n"
    "	mul.f32 	%f88, %f46, %f87;\n"
    "	mul.f32 	%f89, %f65, %f88;\n"
    "	sub.f32 	%f90, %f89, %f72;\n"
    "	ld.param.u64 	%rd30, [__cudaparm_nacl_kernel_kadai8_pd];\n"
    "	add.u64 	%rd31, %rd30, %rd21;\n"
    "	ld.global.f32 	%f91, [%rd31+0];\n"
    "	mov.f32 	%f92, 0f41000000;    	// 8\n"
    "	mul.f32 	%f93, %f91, %f92;\n"
    "	mul.f32 	%f94, %f68, %f93;\n"
    "	mul.f32 	%f95, %f66, %f94;\n"
    "	sub.f32 	%f96, %f90, %f95;\n"
    "	ld.param.u64 	%rd32, [__cudaparm_nacl_kernel_kadai8_zz];\n"
    "	add.u64 	%rd33, %rd32, %rd21;\n"
    "	ld.global.f32 	%f97, [%rd33+0];\n"
    "	mul.f32 	%f98, %f65, %f66;\n"
    "	mad.f32 	%f99, %f97, %f98, %f96;\n"
    "	.loc	3	142	0\n"
    "	mov.f32 	%f100, %f2;\n"
    "	mov.f32 	%f101, %f23;\n"
    "	mad.f32 	%f102, %f101, %f99, %f100;\n"
    "	mov.f32 	%f2, %f102;\n"
    "	mov.f32 	%f103, %f4;\n"
    "	mov.f32 	%f104, %f33;\n"
    "	mad.f32 	%f105, %f104, %f99, %f103;\n"
    "	mov.f32 	%f4, %f105;\n"
    "	mov.f32 	%f106, %f6;\n"
    "	mov.f32 	%f107, %f42;\n"
    "	mad.f32 	%f108, %f107, %f99, %f106;\n"
    "	mov.f32 	%f6, %f108;\n"
    "$Lt_1_13314:\n"
    "	add.s32 	%r23, %r23, 1;\n"
    "	add.s32 	%r22, %r22, 3;\n"
    "	add.u64 	%rd12, %rd12, 12;\n"
    "	mov.u32 	%r30, 192;\n"
    "	setp.ne.s32 	%p7, %r22, %r30;\n"
    "	@%p7 bra 	$Lt_1_13058;\n"
    "	add.s32 	%r20, %r20, 64;\n"
    "	add.u32 	%r17, %r17, 192;\n"
    "	setp.lt.s32 	%p8, %r17, %r18;\n"
    "	@%p8 bra 	$Lt_1_12290;\n"
    "	bra.uni 	$Lt_1_11778;\n"
    "$Lt_1_14338:\n"
    "	mul.lo.s32 	%r31, %r3, 3;\n"
    "	cvt.s64.s32 	%rd34, %r31;\n"
    "	mul.wide.s32 	%rd6, %r31, 4;\n"
    "$Lt_1_11778:\n"
    "	.loc	3	146	0\n"
    "	ld.param.u64 	%rd35, [__cudaparm_nacl_kernel_kadai8_force];\n"
    "	add.u64 	%rd36, %rd35, %rd6;\n"
    "	mov.f32 	%f109, %f2;\n"
    "	st.global.f32 	[%rd36+0], %f109;\n"
    "	mov.f32 	%f110, %f4;\n"
    "	st.global.f32 	[%rd36+4], %f110;\n"
    "	mov.f32 	%f111, %f6;\n"
    "	st.global.f32 	[%rd36+8], %f111;\n"
    "$Lt_1_11266:\n"
    "	.loc	3	148	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel_kadai8:\n"
    "	} // nacl_kernel_kadai8\n"
    "	.const .align 4 .b8 c_matrix[24576];\n"
    "\n"
    "	.entry nacl_kernel_gpu_kadai9 (\n"
    "		.param .u64 __cudaparm_nacl_kernel_gpu_kadai9_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_gpu_kadai9_n,\n"
    "		.param .s32 __cudaparm_nacl_kernel_gpu_kadai9_nat,\n"
    "		.param .u64 __cudaparm_nacl_kernel_gpu_kadai9_d_matrix,\n"
    "		.param .f32 __cudaparm_nacl_kernel_gpu_kadai9_xmax,\n"
    "		.param .u64 __cudaparm_nacl_kernel_gpu_kadai9_fvec)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<17>;\n"
    "	.reg .u64 %rd<15>;\n"
    "	.reg .f32 %f<108>;\n"
    "	.reg .pred %p<8>;\n"
    "	.loc	3	232	0\n"
    "$LDWbegin_nacl_kernel_gpu_kadai9:\n"
    "	.loc	3	242	0\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	mov.f32 	%f2, %f1;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	mov.f32 	%f4, %f3;\n"
    "	mov.f32 	%f5, 0f00000000;     	// 0\n"
    "	mov.f32 	%f6, %f5;\n"
    "	cvt.s32.u16 	%r1, %tid.x;\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	ld.param.s32 	%r2, [__cudaparm_nacl_kernel_gpu_kadai9_n];\n"
    "	mov.u32 	%r3, 0;\n"
    "	setp.le.s32 	%p1, %r2, %r3;\n"
    "	@%p1 bra 	$Lt_2_11522;\n"
    "	ld.param.s32 	%r2, [__cudaparm_nacl_kernel_gpu_kadai9_n];\n"
    "	mov.s32 	%r4, %r2;\n"
    "	mul.wide.u16 	%r5, %rh1, 256;\n"
    "	ld.param.f32 	%f7, [__cudaparm_nacl_kernel_gpu_kadai9_xmax];\n"
    "	rcp.approx.f32 	%f8, %f7;\n"
    "	add.u32 	%r6, %r1, %r5;\n"
    "	ld.param.u64 	%rd1, [__cudaparm_nacl_kernel_gpu_kadai9_x];\n"
    "	mov.s64 	%rd2, %rd1;\n"
    "	cvt.s64.s32 	%rd3, %r6;\n"
    "	mul.wide.s32 	%rd4, %r6, 16;\n"
    "	add.u64 	%rd5, %rd1, %rd4;\n"
    "	ld.global.s32 	%r7, [%rd5+12];\n"
    "	ld.global.f32 	%f9, [%rd5+0];\n"
    "	ld.global.f32 	%f10, [%rd5+4];\n"
    "	ld.global.f32 	%f11, [%rd5+8];\n"
    "	ld.param.s32 	%r8, [__cudaparm_nacl_kernel_gpu_kadai9_nat];\n"
    "	mul.lo.s32 	%r9, %r8, %r7;\n"
    "	mov.s32 	%r10, 0;\n"
    "	mov.u64 	%rd6, c_matrix;\n"
    "	mov.s32 	%r11, %r4;\n"
    "$Lt_2_9986:\n"
    " //<loop> Loop body line 242, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	246	0\n"
    "	ld.global.s32 	%r12, [%rd2+12];\n"
    "	add.s32 	%r13, %r12, %r9;\n"
    "	ld.global.f32 	%f12, [%rd2+0];\n"
    "	sub.f32 	%f13, %f9, %f12;\n"
    "	mul.f32 	%f14, %f8, %f13;\n"
    "	cvt.rni.f32.f32 	%f15, %f14;\n"
    "	.loc	3	242	0\n"
    "	ld.param.f32 	%f7, [__cudaparm_nacl_kernel_gpu_kadai9_xmax];\n"
    "	.loc	3	246	0\n"
    "	mul.f32 	%f16, %f7, %f15;\n"
    "	sub.f32 	%f17, %f13, %f16;\n"
    "	mov.f32 	%f18, %f17;\n"
    "	mov.f32 	%f19, 0f00000000;    	// 0\n"
    "	mad.f32 	%f20, %f17, %f17, %f19;\n"
    "	ld.global.f32 	%f21, [%rd2+4];\n"
    "	sub.f32 	%f22, %f10, %f21;\n"
    "	mov.f32 	%f23, %f22;\n"
    "	mul.f32 	%f24, %f8, %f22;\n"
    "	cvt.rni.f32.f32 	%f25, %f24;\n"
    "	mul.f32 	%f26, %f7, %f25;\n"
    "	sub.f32 	%f27, %f22, %f26;\n"
    "	mov.f32 	%f28, %f27;\n"
    "	mad.f32 	%f29, %f27, %f27, %f20;\n"
    "	ld.global.f32 	%f30, [%rd2+8];\n"
    "	sub.f32 	%f31, %f11, %f30;\n"
    "	mov.f32 	%f32, %f31;\n"
    "	mul.f32 	%f33, %f8, %f31;\n"
    "	cvt.rni.f32.f32 	%f34, %f33;\n"
    "	mul.f32 	%f35, %f7, %f34;\n"
    "	sub.f32 	%f36, %f31, %f35;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f38, %f36, %f36, %f29;\n"
    "	mov.f32 	%f39, 0f00000000;    	// 0\n"
    "	setp.neu.f32 	%p2, %f38, %f39;\n"
    "	@!%p2 bra 	$Lt_2_10242;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f40, %f38;\n"
    "	cvt.s64.s32 	%rd7, %r13;\n"
    "	mul.wide.s32 	%rd8, %r13, 24;\n"
    "	add.u64 	%rd9, %rd6, %rd8;\n"
    "	ld.const.f32 	%f41, [%rd9+8];\n"
    "	ld.const.f32 	%f42, [%rd9+4];\n"
    "	sub.f32 	%f43, %f42, %f40;\n"
    "	mul.f32 	%f44, %f41, %f43;\n"
    "	mov.f32 	%f45, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f46, %f44, %f45;\n"
    "	cvt.rzi.f32.f32 	%f47, %f46;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mov.f32 	%f49, 0fbf317200;    	// -0.693146\n"
    "	mov.f32 	%f50, %f49;\n"
    "	mov.f32 	%f51, %f44;\n"
    "	mad.f32 %f52, %f48, %f50, %f51;\n"
    "	mov.f32 	%f53, %f52;\n"
    "	mov.f32 	%f54, %f47;\n"
    "	mov.f32 	%f55, 0fb5bfbe8e;    	// -1.42861e-06\n"
    "	mov.f32 	%f56, %f55;\n"
    "	mov.f32 	%f57, %f53;\n"
    "	mad.f32 %f58, %f54, %f56, %f57;\n"
    "	mov.f32 	%f59, %f58;\n"
    "	.loc	3	246	0\n"
    "	mov.f32 	%f60, 0f00000000;    	// 0\n"
    "	ex2.approx.f32 	%f61, %f47;\n"
    "	mov.f32 	%f62, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f63, %f59, %f62;\n"
    "	ex2.approx.f32 	%f64, %f63;\n"
    "	mul.f32 	%f65, %f61, %f64;\n"
    "	mov.f32 	%f66, 0fc2d20000;    	// -105\n"
    "	setp.lt.f32 	%p3, %f44, %f66;\n"
    "	selp.f32 	%f67, %f60, %f65, %p3;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f68, 0f7f800000;    	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f69, 0f42d20000;    	// 105\n"
    "	setp.gt.f32 	%p4, %f44, %f69;\n"
    "	selp.f32 	%f70, %f68, %f67, %p4;\n"
    "	.loc	3	246	0\n"
    "	rcp.approx.f32 	%f71, %f40;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	ld.const.f32 	%f73, [%rd9+12];\n"
    "	ld.const.f32 	%f74, [%rd9+0];\n"
    "	ld.const.f32 	%f75, [%rd9+16];\n"
    "	ld.const.f32 	%f76, [%rd9+20];\n"
    "	mul.f32 	%f77, %f72, %f72;\n"
    "	mul.f32 	%f78, %f71, %f72;\n"
    "	mov.f32 	%f79, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f80, %f73, %f79;\n"
    "	mov.f32 	%f81, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f82, %f74, %f81;\n"
    "	mov.f32 	%f83, 0f41000000;    	// 8\n"
    "	mul.f32 	%f84, %f75, %f83;\n"
    "	mul.f32 	%f85, %f77, %f77;\n"
    "	mul.f32 	%f86, %f82, %f70;\n"
    "	mul.f32 	%f87, %f80, %f85;\n"
    "	mul.f32 	%f88, %f84, %f85;\n"
    "	mul.f32 	%f89, %f41, %f86;\n"
    "	mul.f32 	%f90, %f71, %f89;\n"
    "	sub.f32 	%f91, %f90, %f87;\n"
    "	mul.f32 	%f92, %f72, %f88;\n"
    "	sub.f32 	%f93, %f91, %f92;\n"
    "	mad.f32 	%f94, %f76, %f78, %f93;\n"
    "	mov.f32 	%f95, %f2;\n"
    "	mov.f32 	%f96, %f18;\n"
    "	mad.f32 	%f97, %f96, %f94, %f95;\n"
    "	mov.f32 	%f2, %f97;\n"
    "	mov.f32 	%f98, %f4;\n"
    "	mov.f32 	%f99, %f28;\n"
    "	mad.f32 	%f100, %f99, %f94, %f98;\n"
    "	mov.f32 	%f4, %f100;\n"
    "	mov.f32 	%f101, %f6;\n"
    "	mov.f32 	%f102, %f37;\n"
    "	mad.f32 	%f103, %f102, %f94, %f101;\n"
    "	mov.f32 	%f6, %f103;\n"
    "$Lt_2_10242:\n"
    "	add.s32 	%r10, %r10, 1;\n"
    "	add.u64 	%rd2, %rd2, 16;\n"
    "	.loc	3	242	0\n"
    "	ld.param.s32 	%r2, [__cudaparm_nacl_kernel_gpu_kadai9_n];\n"
    "	.loc	3	246	0\n"
    "	setp.ne.s32 	%p5, %r2, %r10;\n"
    "	@%p5 bra 	$Lt_2_9986;\n"
    "	bra.uni 	$Lt_2_9474;\n"
    "$Lt_2_11522:\n"
    "	mul.wide.u16 	%r14, %rh1, 256;\n"
    "	add.u32 	%r6, %r1, %r14;\n"
    "$Lt_2_9474:\n"
    "	.loc	3	242	0\n"
    "	ld.param.s32 	%r2, [__cudaparm_nacl_kernel_gpu_kadai9_n];\n"
    "	.loc	3	246	0\n"
    "	setp.le.s32 	%p6, %r2, %r6;\n"
    "	@%p6 bra 	$Lt_2_11010;\n"
    "	.loc	3	248	0\n"
    "	ld.param.u64 	%rd10, [__cudaparm_nacl_kernel_gpu_kadai9_fvec];\n"
    "	mul.lo.s32 	%r15, %r6, 3;\n"
    "	cvt.s64.s32 	%rd11, %r15;\n"
    "	mul.wide.s32 	%rd12, %r15, 4;\n"
    "	add.u64 	%rd13, %rd10, %rd12;\n"
    "	mov.f32 	%f104, %f2;\n"
    "	st.global.f32 	[%rd13+0], %f104;\n"
    "	mov.f32 	%f105, %f4;\n"
    "	st.global.f32 	[%rd13+4], %f105;\n"
    "	mov.f32 	%f106, %f6;\n"
    "	st.global.f32 	[%rd13+8], %f106;\n"
    "$Lt_2_11010:\n"
    "	.loc	3	249	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel_gpu_kadai9:\n"
    "	} // nacl_kernel_gpu_kadai9\n"
    "\n"
    "	.entry nacl_kernel_gpu_kadai10 (\n"
    "		.param .u64 __cudaparm_nacl_kernel_gpu_kadai10_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_gpu_kadai10_n,\n"
    "		.param .s32 __cudaparm_nacl_kernel_gpu_kadai10_nat,\n"
    "		.param .u64 __cudaparm_nacl_kernel_gpu_kadai10_d_matrix,\n"
    "		.param .f32 __cudaparm_nacl_kernel_gpu_kadai10_xmax,\n"
    "		.param .u64 __cudaparm_nacl_kernel_gpu_kadai10_fvec)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<39>;\n"
    "	.reg .u64 %rd<29>;\n"
    "	.reg .f32 %f<212>;\n"
    "	.reg .pred %p<14>;\n"
    "	.shared .align 4 .b8 __cuda___cuda_local_var_15816_35_non_const_s_xj25632[4096];\n"
    "	.loc	3	341	0\n"
    "$LDWbegin_nacl_kernel_gpu_kadai10:\n"
    "	.loc	3	352	0\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	mov.f32 	%f2, %f1;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	mov.f32 	%f4, %f3;\n"
    "	mov.f32 	%f5, 0f00000000;     	// 0\n"
    "	mov.f32 	%f6, %f5;\n"
    "	.loc	3	353	0\n"
    "	cvt.s32.u16 	%r1, %tid.x;\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	mul.wide.u16 	%r2, %rh1, 256;\n"
    "	add.u32 	%r3, %r1, %r2;\n"
    "	ld.param.u64 	%rd1, [__cudaparm_nacl_kernel_gpu_kadai10_x];\n"
    "	cvt.s64.s32 	%rd2, %r3;\n"
    "	mul.wide.s32 	%rd3, %r3, 16;\n"
    "	add.u64 	%rd4, %rd1, %rd3;\n"
    "	ld.global.f32 	%f7, [%rd4+0];\n"
    "	mov.f32 	%f8, %f7;\n"
    "	ld.global.f32 	%f9, [%rd4+4];\n"
    "	mov.f32 	%f10, %f9;\n"
    "	ld.global.f32 	%f11, [%rd4+8];\n"
    "	mov.f32 	%f12, %f11;\n"
    "	.loc	3	354	0\n"
    "	ld.global.s32 	%r4, [%rd4+12];\n"
    "	ld.param.s32 	%r5, [__cudaparm_nacl_kernel_gpu_kadai10_nat];\n"
    "	mul.lo.s32 	%r6, %r4, %r5;\n"
    "	.loc	3	355	0\n"
    "	bar.sync 	0;\n"
    "	mov.u64 	%rd5, __cuda___cuda_local_var_15816_35_non_const_s_xj25632;\n"
    "	.loc	3	356	0\n"
    "	cvt.s64.s32 	%rd6, %r1;\n"
    "	mul.wide.s32 	%rd7, %r1, 16;\n"
    "	add.u64 	%rd8, %rd7, %rd1;\n"
    "	add.u64 	%rd9, %rd7, %rd5;\n"
    "	ld.global.f32 	%f13, [%rd8+0];\n"
    "	st.shared.f32 	[%rd9+0], %f13;\n"
    "	ld.global.f32 	%f14, [%rd8+4];\n"
    "	st.shared.f32 	[%rd9+4], %f14;\n"
    "	ld.global.f32 	%f15, [%rd8+8];\n"
    "	st.shared.f32 	[%rd9+8], %f15;\n"
    "	ld.global.s32 	%r7, [%rd8+12];\n"
    "	st.shared.s32 	[%rd9+12], %r7;\n"
    "	.loc	3	357	0\n"
    "	bar.sync 	0;\n"
    "	ld.param.s32 	%r8, [__cudaparm_nacl_kernel_gpu_kadai10_n];\n"
    "	shr.s32 	%r9, %r8, 31;\n"
    "	mov.s32 	%r10, 255;\n"
    "	and.b32 	%r11, %r9, %r10;\n"
    "	add.s32 	%r12, %r11, %r8;\n"
    "	shr.s32 	%r13, %r12, 8;\n"
    "	mul.lo.s32 	%r14, %r13, 256;\n"
    "	sub.s32 	%r15, %r8, %r14;\n"
    "	mov.u32 	%r16, 0;\n"
    "	setp.le.s32 	%p1, %r15, %r16;\n"
    "	@%p1 bra 	$Lt_3_20482;\n"
    "	mov.s32 	%r17, %r15;\n"
    "	ld.param.f32 	%f16, [__cudaparm_nacl_kernel_gpu_kadai10_xmax];\n"
    "	rcp.approx.f32 	%f17, %f16;\n"
    "	mov.s64 	%rd10, %rd5;\n"
    "	mov.s64 	%rd11, %rd5;\n"
    "	mov.s32 	%r18, 0;\n"
    "	mov.u64 	%rd12, c_matrix;\n"
    "	mov.s32 	%r19, %r17;\n"
    "$Lt_3_16386:\n"
    " //<loop> Loop body line 357, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	359	0\n"
    "	ld.shared.s32 	%r20, [%rd10+12];\n"
    "	add.s32 	%r21, %r20, %r6;\n"
    "	ld.shared.f32 	%f18, [%rd11+0];\n"
    "	mov.f32 	%f19, %f8;\n"
    "	sub.f32 	%f20, %f19, %f18;\n"
    "	mov.f32 	%f21, %f20;\n"
    "	mul.f32 	%f22, %f17, %f21;\n"
    "	cvt.rni.f32.f32 	%f23, %f22;\n"
    "	.loc	3	357	0\n"
    "	ld.param.f32 	%f16, [__cudaparm_nacl_kernel_gpu_kadai10_xmax];\n"
    "	.loc	3	359	0\n"
    "	mul.f32 	%f24, %f16, %f23;\n"
    "	sub.f32 	%f25, %f20, %f24;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f27, 0f00000000;    	// 0\n"
    "	mad.f32 	%f28, %f25, %f25, %f27;\n"
    "	ld.shared.f32 	%f29, [%rd11+4];\n"
    "	mov.f32 	%f30, %f10;\n"
    "	sub.f32 	%f31, %f30, %f29;\n"
    "	mov.f32 	%f32, %f31;\n"
    "	mul.f32 	%f33, %f17, %f32;\n"
    "	cvt.rni.f32.f32 	%f34, %f33;\n"
    "	mul.f32 	%f35, %f16, %f34;\n"
    "	sub.f32 	%f36, %f31, %f35;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f38, %f36, %f36, %f28;\n"
    "	ld.shared.f32 	%f39, [%rd11+8];\n"
    "	mov.f32 	%f40, %f12;\n"
    "	sub.f32 	%f41, %f40, %f39;\n"
    "	mul.f32 	%f42, %f41, %f17;\n"
    "	cvt.rni.f32.f32 	%f43, %f42;\n"
    "	mul.f32 	%f44, %f16, %f43;\n"
    "	sub.f32 	%f45, %f41, %f44;\n"
    "	mov.f32 	%f46, %f45;\n"
    "	mad.f32 	%f47, %f45, %f45, %f38;\n"
    "	mov.f32 	%f48, 0f00000000;    	// 0\n"
    "	setp.neu.f32 	%p2, %f47, %f48;\n"
    "	@!%p2 bra 	$Lt_3_16642;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f49, %f47;\n"
    "	cvt.s64.s32 	%rd13, %r21;\n"
    "	mul.wide.s32 	%rd14, %r21, 24;\n"
    "	add.u64 	%rd15, %rd12, %rd14;\n"
    "	ld.const.f32 	%f50, [%rd15+8];\n"
    "	ld.const.f32 	%f51, [%rd15+4];\n"
    "	sub.f32 	%f52, %f51, %f49;\n"
    "	mul.f32 	%f53, %f50, %f52;\n"
    "	mov.f32 	%f54, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f55, %f53, %f54;\n"
    "	cvt.rzi.f32.f32 	%f56, %f55;\n"
    "	mov.f32 	%f57, %f56;\n"
    "	mov.f32 	%f58, 0fbf317200;    	// -0.693146\n"
    "	mov.f32 	%f59, %f58;\n"
    "	mov.f32 	%f60, %f53;\n"
    "	mad.f32 %f61, %f57, %f59, %f60;\n"
    "	mov.f32 	%f62, %f61;\n"
    "	mov.f32 	%f63, %f56;\n"
    "	mov.f32 	%f64, 0fb5bfbe8e;    	// -1.42861e-06\n"
    "	mov.f32 	%f65, %f64;\n"
    "	mov.f32 	%f66, %f62;\n"
    "	mad.f32 %f67, %f63, %f65, %f66;\n"
    "	mov.f32 	%f62, %f67;\n"
    "	.loc	3	359	0\n"
    "	mov.f32 	%f68, 0f00000000;    	// 0\n"
    "	ex2.approx.f32 	%f69, %f56;\n"
    "	mov.f32 	%f70, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f71, %f62, %f70;\n"
    "	ex2.approx.f32 	%f72, %f71;\n"
    "	mul.f32 	%f73, %f69, %f72;\n"
    "	mov.f32 	%f74, 0fc2d20000;    	// -105\n"
    "	setp.lt.f32 	%p3, %f53, %f74;\n"
    "	selp.f32 	%f75, %f68, %f73, %p3;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f76, 0f7f800000;    	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f77, 0f42d20000;    	// 105\n"
    "	setp.gt.f32 	%p4, %f53, %f77;\n"
    "	selp.f32 	%f78, %f76, %f75, %p4;\n"
    "	.loc	3	359	0\n"
    "	rcp.approx.f32 	%f79, %f49;\n"
    "	mul.f32 	%f80, %f79, %f79;\n"
    "	ld.const.f32 	%f81, [%rd15+12];\n"
    "	ld.const.f32 	%f82, [%rd15+0];\n"
    "	ld.const.f32 	%f83, [%rd15+16];\n"
    "	ld.const.f32 	%f84, [%rd15+20];\n"
    "	mul.f32 	%f85, %f80, %f80;\n"
    "	mul.f32 	%f86, %f79, %f80;\n"
    "	mov.f32 	%f87, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f88, %f81, %f87;\n"
    "	mov.f32 	%f89, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f90, %f82, %f89;\n"
    "	mov.f32 	%f91, 0f41000000;    	// 8\n"
    "	mul.f32 	%f92, %f83, %f91;\n"
    "	mul.f32 	%f93, %f85, %f85;\n"
    "	mul.f32 	%f94, %f90, %f78;\n"
    "	mul.f32 	%f95, %f88, %f93;\n"
    "	mul.f32 	%f96, %f92, %f93;\n"
    "	mul.f32 	%f97, %f50, %f94;\n"
    "	mul.f32 	%f98, %f79, %f97;\n"
    "	sub.f32 	%f99, %f98, %f95;\n"
    "	mul.f32 	%f100, %f80, %f96;\n"
    "	sub.f32 	%f101, %f99, %f100;\n"
    "	mad.f32 	%f102, %f84, %f86, %f101;\n"
    "	mov.f32 	%f103, %f2;\n"
    "	mov.f32 	%f104, %f26;\n"
    "	mad.f32 	%f105, %f104, %f102, %f103;\n"
    "	mov.f32 	%f2, %f105;\n"
    "	mov.f32 	%f106, %f4;\n"
    "	mov.f32 	%f107, %f37;\n"
    "	mad.f32 	%f108, %f107, %f102, %f106;\n"
    "	mov.f32 	%f4, %f108;\n"
    "	mov.f32 	%f109, %f6;\n"
    "	mov.f32 	%f110, %f46;\n"
    "	mad.f32 	%f111, %f110, %f102, %f109;\n"
    "	mov.f32 	%f6, %f111;\n"
    "$Lt_3_16642:\n"
    "	add.s32 	%r18, %r18, 1;\n"
    "	add.u64 	%rd11, %rd11, 16;\n"
    "	add.u64 	%rd10, %rd10, 16;\n"
    "	setp.ne.s32 	%p5, %r15, %r18;\n"
    "	@%p5 bra 	$Lt_3_16386;\n"
    "	mov.s32 	%r18, %r15;\n"
    "	bra.uni 	$Lt_3_15874;\n"
    "$Lt_3_20482:\n"
    "	mov.s32 	%r18, 0;\n"
    "	mov.u64 	%rd12, c_matrix;\n"
    "$Lt_3_15874:\n"
    "	.loc	3	357	0\n"
    "	ld.param.s32 	%r8, [__cudaparm_nacl_kernel_gpu_kadai10_n];\n"
    "	.loc	3	359	0\n"
    "	setp.le.s32 	%p6, %r8, %r18;\n"
    "	@%p6 bra 	$Lt_3_17410;\n"
    "	ld.param.f32 	%f16, [__cudaparm_nacl_kernel_gpu_kadai10_xmax];\n"
    "	rcp.approx.f32 	%f17, %f16;\n"
    "	.loc	3	357	0\n"
    "	ld.param.s32 	%r8, [__cudaparm_nacl_kernel_gpu_kadai10_n];\n"
    "	.loc	3	359	0\n"
    "	sub.s32 	%r22, %r8, %r18;\n"
    "	add.s32 	%r23, %r22, 255;\n"
    "	shr.s32 	%r24, %r23, 31;\n"
    "	mov.s32 	%r25, 255;\n"
    "	and.b32 	%r26, %r24, %r25;\n"
    "	add.s32 	%r27, %r26, %r23;\n"
    "	shr.s32 	%r28, %r27, 8;\n"
    "	add.s32 	%r29, %r18, %r1;\n"
    "	add.s32 	%r30, %r8, %r1;\n"
    "	cvt.s64.s32 	%rd16, %r29;\n"
    "	mul.wide.s32 	%rd17, %r29, 16;\n"
    "	add.u64 	%rd18, %rd1, %rd17;\n"
    "	mov.s32 	%r31, %r28;\n"
    "$Lt_3_17922:\n"
    " //<loop> Loop body line 359, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	362	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	363	0\n"
    "	ld.global.f32 	%f112, [%rd18+0];\n"
    "	st.shared.f32 	[%rd9+0], %f112;\n"
    "	ld.global.f32 	%f113, [%rd18+4];\n"
    "	st.shared.f32 	[%rd9+4], %f113;\n"
    "	ld.global.f32 	%f114, [%rd18+8];\n"
    "	st.shared.f32 	[%rd9+8], %f114;\n"
    "	ld.global.s32 	%r32, [%rd18+12];\n"
    "	st.shared.s32 	[%rd9+12], %r32;\n"
    "	.loc	3	364	0\n"
    "	bar.sync 	0;\n"
    "	mov.s64 	%rd19, %rd5;\n"
    "	mov.s64 	%rd20, %rd5;\n"
    "	mov.s32 	%r33, 0;\n"
    "$Lt_3_18690:\n"
    " //<loop> Loop body line 364, nesting depth: 1, iterations: 256\n"
    "	.loc	3	366	0\n"
    "	ld.shared.s32 	%r34, [%rd19+12];\n"
    "	add.s32 	%r35, %r34, %r6;\n"
    "	ld.shared.f32 	%f115, [%rd20+0];\n"
    "	mov.f32 	%f116, %f8;\n"
    "	sub.f32 	%f117, %f116, %f115;\n"
    "	mov.f32 	%f118, %f117;\n"
    "	mul.f32 	%f119, %f17, %f118;\n"
    "	cvt.rni.f32.f32 	%f120, %f119;\n"
    "	mul.f32 	%f121, %f16, %f120;\n"
    "	sub.f32 	%f122, %f117, %f121;\n"
    "	mov.f32 	%f123, %f122;\n"
    "	mov.f32 	%f124, 0f00000000;   	// 0\n"
    "	mad.f32 	%f125, %f122, %f122, %f124;\n"
    "	ld.shared.f32 	%f126, [%rd20+4];\n"
    "	mov.f32 	%f127, %f10;\n"
    "	sub.f32 	%f128, %f127, %f126;\n"
    "	mov.f32 	%f129, %f128;\n"
    "	mul.f32 	%f130, %f17, %f129;\n"
    "	cvt.rni.f32.f32 	%f131, %f130;\n"
    "	mul.f32 	%f132, %f16, %f131;\n"
    "	sub.f32 	%f133, %f128, %f132;\n"
    "	mov.f32 	%f134, %f133;\n"
    "	mad.f32 	%f135, %f133, %f133, %f125;\n"
    "	ld.shared.f32 	%f136, [%rd20+8];\n"
    "	mov.f32 	%f137, %f12;\n"
    "	sub.f32 	%f138, %f137, %f136;\n"
    "	mul.f32 	%f139, %f138, %f17;\n"
    "	cvt.rni.f32.f32 	%f140, %f139;\n"
    "	mul.f32 	%f141, %f16, %f140;\n"
    "	sub.f32 	%f142, %f138, %f141;\n"
    "	mov.f32 	%f143, %f142;\n"
    "	mad.f32 	%f144, %f142, %f142, %f135;\n"
    "	mov.f32 	%f145, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p7, %f144, %f145;\n"
    "	@!%p7 bra 	$Lt_3_18946;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f146, %f144;\n"
    "	cvt.s64.s32 	%rd21, %r35;\n"
    "	mul.wide.s32 	%rd22, %r35, 24;\n"
    "	add.u64 	%rd23, %rd12, %rd22;\n"
    "	ld.const.f32 	%f147, [%rd23+8];\n"
    "	ld.const.f32 	%f148, [%rd23+4];\n"
    "	sub.f32 	%f149, %f148, %f146;\n"
    "	mul.f32 	%f150, %f147, %f149;\n"
    "	mov.f32 	%f151, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f152, %f150, %f151;\n"
    "	cvt.rzi.f32.f32 	%f153, %f152;\n"
    "	mov.f32 	%f154, %f153;\n"
    "	mov.f32 	%f155, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f156, %f155;\n"
    "	mov.f32 	%f157, %f150;\n"
    "	mad.f32 %f158, %f154, %f156, %f157;\n"
    "	mov.f32 	%f62, %f158;\n"
    "	mov.f32 	%f159, %f153;\n"
    "	mov.f32 	%f160, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f161, %f160;\n"
    "	mov.f32 	%f162, %f62;\n"
    "	mad.f32 %f163, %f159, %f161, %f162;\n"
    "	mov.f32 	%f62, %f163;\n"
    "	.loc	3	366	0\n"
    "	mov.f32 	%f164, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f165, %f153;\n"
    "	mov.f32 	%f166, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f167, %f62, %f166;\n"
    "	ex2.approx.f32 	%f168, %f167;\n"
    "	mul.f32 	%f169, %f165, %f168;\n"
    "	mov.f32 	%f170, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p8, %f150, %f170;\n"
    "	selp.f32 	%f171, %f164, %f169, %p8;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f172, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f173, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p9, %f150, %f173;\n"
    "	selp.f32 	%f174, %f172, %f171, %p9;\n"
    "	.loc	3	366	0\n"
    "	rcp.approx.f32 	%f175, %f146;\n"
    "	mul.f32 	%f176, %f175, %f175;\n"
    "	ld.const.f32 	%f177, [%rd23+12];\n"
    "	ld.const.f32 	%f178, [%rd23+0];\n"
    "	ld.const.f32 	%f179, [%rd23+16];\n"
    "	ld.const.f32 	%f180, [%rd23+20];\n"
    "	mul.f32 	%f181, %f176, %f176;\n"
    "	mul.f32 	%f182, %f175, %f176;\n"
    "	mov.f32 	%f183, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f184, %f177, %f183;\n"
    "	mov.f32 	%f185, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f186, %f178, %f185;\n"
    "	mov.f32 	%f187, 0f41000000;   	// 8\n"
    "	mul.f32 	%f188, %f179, %f187;\n"
    "	mul.f32 	%f189, %f181, %f181;\n"
    "	mul.f32 	%f190, %f186, %f174;\n"
    "	mul.f32 	%f191, %f184, %f189;\n"
    "	mul.f32 	%f192, %f188, %f189;\n"
    "	mul.f32 	%f193, %f147, %f190;\n"
    "	mul.f32 	%f194, %f175, %f193;\n"
    "	sub.f32 	%f195, %f194, %f191;\n"
    "	mul.f32 	%f196, %f176, %f192;\n"
    "	sub.f32 	%f197, %f195, %f196;\n"
    "	mad.f32 	%f198, %f180, %f182, %f197;\n"
    "	mov.f32 	%f199, %f2;\n"
    "	mov.f32 	%f200, %f123;\n"
    "	mad.f32 	%f201, %f200, %f198, %f199;\n"
    "	mov.f32 	%f2, %f201;\n"
    "	mov.f32 	%f202, %f4;\n"
    "	mov.f32 	%f203, %f134;\n"
    "	mad.f32 	%f204, %f203, %f198, %f202;\n"
    "	mov.f32 	%f4, %f204;\n"
    "	mov.f32 	%f205, %f6;\n"
    "	mov.f32 	%f206, %f143;\n"
    "	mad.f32 	%f207, %f206, %f198, %f205;\n"
    "	mov.f32 	%f6, %f207;\n"
    "$Lt_3_18946:\n"
    "	add.s32 	%r33, %r33, 1;\n"
    "	add.u64 	%rd20, %rd20, 16;\n"
    "	add.u64 	%rd19, %rd19, 16;\n"
    "	mov.u32 	%r36, 256;\n"
    "	setp.ne.s32 	%p10, %r33, %r36;\n"
    "	@%p10 bra 	$Lt_3_18690;\n"
    "	.loc	3	361	0\n"
    "	add.s32 	%r29, %r29, 256;\n"
    "	add.u64 	%rd18, %rd18, 4096;\n"
    "	setp.lt.s32 	%p11, %r29, %r30;\n"
    "	@%p11 bra 	$Lt_3_17922;\n"
    "$Lt_3_17410:\n"
    "	setp.le.s32 	%p12, %r8, %r3;\n"
    "	@%p12 bra 	$Lt_3_19970;\n"
    "	.loc	3	369	0\n"
    "	ld.param.u64 	%rd24, [__cudaparm_nacl_kernel_gpu_kadai10_fvec];\n"
    "	mul.lo.s32 	%r37, %r3, 3;\n"
    "	cvt.s64.s32 	%rd25, %r37;\n"
    "	mul.wide.s32 	%rd26, %r37, 4;\n"
    "	add.u64 	%rd27, %rd24, %rd26;\n"
    "	mov.f32 	%f208, %f2;\n"
    "	st.global.f32 	[%rd27+0], %f208;\n"
    "	mov.f32 	%f209, %f4;\n"
    "	st.global.f32 	[%rd27+4], %f209;\n"
    "	mov.f32 	%f210, %f6;\n"
    "	st.global.f32 	[%rd27+8], %f210;\n"
    "$Lt_3_19970:\n"
    "	.loc	3	398	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel_gpu_kadai10:\n"
    "	} // nacl_kernel_gpu_kadai10\n"
    "\n"
    "	.entry nacl_kernel_gpu_kadai11 (\n"
    "		.param .u64 __cudaparm_nacl_kernel_gpu_kadai11_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_gpu_kadai11_n,\n"
    "		.param .s32 __cudaparm_nacl_kernel_gpu_kadai11_nat,\n"
    "		.param .u64 __cudaparm_nacl_kernel_gpu_kadai11_d_matrix,\n"
    "		.param .f32 __cudaparm_nacl_kernel_gpu_kadai11_xmax,\n"
    "		.param .u64 __cudaparm_nacl_kernel_gpu_kadai11_fvec)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<49>;\n"
    "	.reg .u64 %rd<52>;\n"
    "	.reg .f32 %f<850>;\n"
    "	.reg .pred %p<36>;\n"
    "	.shared .align 4 .b8 __cuda___cuda_local_var_15936_35_non_const_s_xj29768[4096];\n"
    "	.loc	3	489	0\n"
    "$LDWbegin_nacl_kernel_gpu_kadai11:\n"
    "	.loc	3	499	0\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	mov.f32 	%f2, %f1;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	mov.f32 	%f4, %f3;\n"
    "	mov.f32 	%f5, 0f00000000;     	// 0\n"
    "	mov.f32 	%f6, %f5;\n"
    "	.loc	3	500	0\n"
    "	cvt.s32.u16 	%r1, %tid.x;\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	mul.wide.u16 	%r2, %rh1, 256;\n"
    "	add.u32 	%r3, %r1, %r2;\n"
    "	ld.param.u64 	%rd1, [__cudaparm_nacl_kernel_gpu_kadai11_x];\n"
    "	cvt.s64.s32 	%rd2, %r3;\n"
    "	mul.wide.s32 	%rd3, %r3, 16;\n"
    "	add.u64 	%rd4, %rd1, %rd3;\n"
    "	ld.global.f32 	%f7, [%rd4+0];\n"
    "	mov.f32 	%f8, %f7;\n"
    "	ld.global.f32 	%f9, [%rd4+4];\n"
    "	mov.f32 	%f10, %f9;\n"
    "	ld.global.f32 	%f11, [%rd4+8];\n"
    "	mov.f32 	%f12, %f11;\n"
    "	.loc	3	501	0\n"
    "	ld.global.s32 	%r4, [%rd4+12];\n"
    "	ld.param.s32 	%r5, [__cudaparm_nacl_kernel_gpu_kadai11_nat];\n"
    "	mul.lo.s32 	%r6, %r4, %r5;\n"
    "	ld.param.s32 	%r7, [__cudaparm_nacl_kernel_gpu_kadai11_n];\n"
    "	sub.s32 	%r8, %r7, 255;\n"
    "	mov.u32 	%r9, 0;\n"
    "	setp.le.s32 	%p1, %r8, %r9;\n"
    "	@%p1 bra 	$Lt_4_55810;\n"
    "	mov.u64 	%rd5, __cuda___cuda_local_var_15936_35_non_const_s_xj29768;\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_gpu_kadai11_xmax];\n"
    "	rcp.approx.f32 	%f14, %f13;\n"
    "	ld.param.s32 	%r7, [__cudaparm_nacl_kernel_gpu_kadai11_n];\n"
    "	shr.s32 	%r10, %r7, 31;\n"
    "	mov.s32 	%r11, 255;\n"
    "	and.b32 	%r12, %r10, %r11;\n"
    "	add.s32 	%r13, %r12, %r7;\n"
    "	shr.s32 	%r14, %r13, 8;\n"
    "	mov.s32 	%r15, %r1;\n"
    "	add.s32 	%r16, %r8, %r1;\n"
    "	cvt.s64.s32 	%rd6, %r1;\n"
    "	mul.wide.s32 	%rd7, %r1, 16;\n"
    "	add.u64 	%rd8, %rd7, %rd5;\n"
    "	.loc	3	500	0\n"
    "	ld.param.u64 	%rd1, [__cudaparm_nacl_kernel_gpu_kadai11_x];\n"
    "	.loc	3	501	0\n"
    "	add.u64 	%rd9, %rd7, %rd1;\n"
    "	mov.s32 	%r17, 0;\n"
    "	mov.u64 	%rd10, c_matrix;\n"
    "	mov.s32 	%r18, %r14;\n"
    "$Lt_4_47618:\n"
    " //<loop> Loop body line 501, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	503	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	504	0\n"
    "	ld.global.f32 	%f15, [%rd9+0];\n"
    "	st.shared.f32 	[%rd8+0], %f15;\n"
    "	ld.global.f32 	%f16, [%rd9+4];\n"
    "	st.shared.f32 	[%rd8+4], %f16;\n"
    "	ld.global.f32 	%f17, [%rd9+8];\n"
    "	st.shared.f32 	[%rd8+8], %f17;\n"
    "	ld.global.s32 	%r19, [%rd9+12];\n"
    "	st.shared.s32 	[%rd8+12], %r19;\n"
    "	.loc	3	505	0\n"
    "	bar.sync 	0;\n"
    "	mov.s64 	%rd11, %rd5;\n"
    "	mov.s64 	%rd12, %rd5;\n"
    "	mov.s32 	%r20, 0;\n"
    "$Lt_4_48386:\n"
    " //<loop> Loop body line 505, nesting depth: 2, iterations: 32\n"
    "	.loc	3	507	0\n"
    "	ld.shared.s32 	%r21, [%rd11+12];\n"
    "	add.s32 	%r22, %r21, %r6;\n"
    "	ld.shared.f32 	%f18, [%rd12+0];\n"
    "	mov.f32 	%f19, %f8;\n"
    "	sub.f32 	%f20, %f19, %f18;\n"
    "	mov.f32 	%f21, %f20;\n"
    "	mul.f32 	%f22, %f14, %f21;\n"
    "	cvt.rni.f32.f32 	%f23, %f22;\n"
    "	mul.f32 	%f24, %f13, %f23;\n"
    "	sub.f32 	%f25, %f20, %f24;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f27, 0f00000000;    	// 0\n"
    "	mad.f32 	%f28, %f25, %f25, %f27;\n"
    "	ld.shared.f32 	%f29, [%rd12+4];\n"
    "	mov.f32 	%f30, %f10;\n"
    "	sub.f32 	%f31, %f30, %f29;\n"
    "	mov.f32 	%f32, %f31;\n"
    "	mov.f32 	%f33, %f32;\n"
    "	mul.f32 	%f34, %f14, %f32;\n"
    "	cvt.rni.f32.f32 	%f35, %f34;\n"
    "	mul.f32 	%f36, %f13, %f35;\n"
    "	sub.f32 	%f37, %f31, %f36;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f39, %f37, %f37, %f28;\n"
    "	ld.shared.f32 	%f40, [%rd12+8];\n"
    "	mov.f32 	%f41, %f12;\n"
    "	sub.f32 	%f42, %f41, %f40;\n"
    "	mov.f32 	%f43, %f42;\n"
    "	mul.f32 	%f44, %f42, %f14;\n"
    "	cvt.rni.f32.f32 	%f45, %f44;\n"
    "	mul.f32 	%f46, %f13, %f45;\n"
    "	sub.f32 	%f47, %f42, %f46;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f39;\n"
    "	mov.f32 	%f50, 0f00000000;    	// 0\n"
    "	setp.neu.f32 	%p2, %f49, %f50;\n"
    "	@!%p2 bra 	$Lt_4_48642;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd13, %r22;\n"
    "	mul.wide.s32 	%rd14, %r22, 24;\n"
    "	add.u64 	%rd15, %rd10, %rd14;\n"
    "	ld.const.f32 	%f52, [%rd15+8];\n"
    "	ld.const.f32 	%f53, [%rd15+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f56, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f57, %f55, %f56;\n"
    "	cvt.rzi.f32.f32 	%f58, %f57;\n"
    "	mov.f32 	%f59, %f58;\n"
    "	mov.f32 	%f60, 0fbf317200;    	// -0.693146\n"
    "	mov.f32 	%f61, %f60;\n"
    "	mov.f32 	%f62, %f55;\n"
    "	mad.f32 %f63, %f59, %f61, %f62;\n"
    "	mov.f32 	%f64, %f63;\n"
    "	mov.f32 	%f65, %f58;\n"
    "	mov.f32 	%f66, 0fb5bfbe8e;    	// -1.42861e-06\n"
    "	mov.f32 	%f67, %f66;\n"
    "	mov.f32 	%f68, %f64;\n"
    "	mad.f32 %f69, %f65, %f67, %f68;\n"
    "	mov.f32 	%f64, %f69;\n"
    "	.loc	3	507	0\n"
    "	mov.f32 	%f70, 0f00000000;    	// 0\n"
    "	ex2.approx.f32 	%f71, %f58;\n"
    "	mov.f32 	%f72, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f73, %f64, %f72;\n"
    "	ex2.approx.f32 	%f74, %f73;\n"
    "	mul.f32 	%f75, %f71, %f74;\n"
    "	mov.f32 	%f76, 0fc2d20000;    	// -105\n"
    "	setp.lt.f32 	%p3, %f55, %f76;\n"
    "	selp.f32 	%f77, %f70, %f75, %p3;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f78, 0f7f800000;    	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f79, 0f42d20000;    	// 105\n"
    "	setp.gt.f32 	%p4, %f55, %f79;\n"
    "	selp.f32 	%f80, %f78, %f77, %p4;\n"
    "	.loc	3	507	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd15+12];\n"
    "	ld.const.f32 	%f84, [%rd15+0];\n"
    "	ld.const.f32 	%f85, [%rd15+16];\n"
    "	ld.const.f32 	%f86, [%rd15+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f89, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f90, %f83, %f89;\n"
    "	mov.f32 	%f91, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f91;\n"
    "	mov.f32 	%f93, 0f41000000;    	// 8\n"
    "	mul.f32 	%f94, %f85, %f93;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f100, %f81, %f99;\n"
    "	sub.f32 	%f101, %f100, %f97;\n"
    "	mul.f32 	%f102, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f102;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f105, %f2;\n"
    "	mov.f32 	%f106, %f26;\n"
    "	mad.f32 	%f107, %f106, %f104, %f105;\n"
    "	mov.f32 	%f2, %f107;\n"
    "	mov.f32 	%f108, %f4;\n"
    "	mov.f32 	%f109, %f38;\n"
    "	mad.f32 	%f110, %f109, %f104, %f108;\n"
    "	mov.f32 	%f4, %f110;\n"
    "	mov.f32 	%f111, %f6;\n"
    "	mov.f32 	%f112, %f48;\n"
    "	mad.f32 	%f113, %f112, %f104, %f111;\n"
    "	mov.f32 	%f6, %f113;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_4_48642:\n"
    "	.loc	3	508	0\n"
    "	ld.shared.s32 	%r23, [%rd11+28];\n"
    "	add.s32 	%r24, %r23, %r6;\n"
    "	ld.shared.f32 	%f114, [%rd11+16];\n"
    "	sub.f32 	%f115, %f19, %f114;\n"
    "	mov.f32 	%f116, %f115;\n"
    "	mul.f32 	%f117, %f14, %f116;\n"
    "	cvt.rni.f32.f32 	%f118, %f117;\n"
    "	mul.f32 	%f119, %f13, %f118;\n"
    "	sub.f32 	%f120, %f115, %f119;\n"
    "	mov.f32 	%f121, %f120;\n"
    "	mov.f32 	%f122, 0f00000000;   	// 0\n"
    "	mad.f32 	%f123, %f120, %f120, %f122;\n"
    "	ld.shared.f32 	%f124, [%rd11+20];\n"
    "	sub.f32 	%f125, %f30, %f124;\n"
    "	mov.f32 	%f126, %f125;\n"
    "	mov.f32 	%f127, %f126;\n"
    "	mul.f32 	%f128, %f14, %f126;\n"
    "	cvt.rni.f32.f32 	%f129, %f128;\n"
    "	mul.f32 	%f130, %f13, %f129;\n"
    "	sub.f32 	%f131, %f125, %f130;\n"
    "	mov.f32 	%f132, %f131;\n"
    "	mad.f32 	%f133, %f131, %f131, %f123;\n"
    "	ld.shared.f32 	%f134, [%rd11+24];\n"
    "	sub.f32 	%f135, %f41, %f134;\n"
    "	mov.f32 	%f136, %f135;\n"
    "	mul.f32 	%f137, %f135, %f14;\n"
    "	cvt.rni.f32.f32 	%f138, %f137;\n"
    "	mul.f32 	%f139, %f13, %f138;\n"
    "	sub.f32 	%f140, %f135, %f139;\n"
    "	mov.f32 	%f141, %f140;\n"
    "	mad.f32 	%f142, %f140, %f140, %f133;\n"
    "	mov.f32 	%f143, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p5, %f142, %f143;\n"
    "	@!%p5 bra 	$Lt_4_49154;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f144, %f142;\n"
    "	cvt.s64.s32 	%rd16, %r24;\n"
    "	mul.wide.s32 	%rd17, %r24, 24;\n"
    "	add.u64 	%rd18, %rd10, %rd17;\n"
    "	ld.const.f32 	%f145, [%rd18+8];\n"
    "	ld.const.f32 	%f146, [%rd18+4];\n"
    "	sub.f32 	%f147, %f146, %f144;\n"
    "	mul.f32 	%f148, %f145, %f147;\n"
    "	mov.f32 	%f149, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f150, %f148, %f149;\n"
    "	cvt.rzi.f32.f32 	%f151, %f150;\n"
    "	mov.f32 	%f152, %f151;\n"
    "	mov.f32 	%f153, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f154, %f153;\n"
    "	mov.f32 	%f155, %f148;\n"
    "	mad.f32 %f156, %f152, %f154, %f155;\n"
    "	mov.f32 	%f64, %f156;\n"
    "	mov.f32 	%f157, %f151;\n"
    "	mov.f32 	%f158, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f159, %f158;\n"
    "	mov.f32 	%f160, %f64;\n"
    "	mad.f32 %f161, %f157, %f159, %f160;\n"
    "	mov.f32 	%f64, %f161;\n"
    "	.loc	3	508	0\n"
    "	mov.f32 	%f162, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f163, %f151;\n"
    "	mov.f32 	%f164, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f165, %f64, %f164;\n"
    "	ex2.approx.f32 	%f166, %f165;\n"
    "	mul.f32 	%f167, %f163, %f166;\n"
    "	mov.f32 	%f168, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p6, %f148, %f168;\n"
    "	selp.f32 	%f169, %f162, %f167, %p6;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f170, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f171, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p7, %f148, %f171;\n"
    "	selp.f32 	%f80, %f170, %f169, %p7;\n"
    "	.loc	3	508	0\n"
    "	rcp.approx.f32 	%f172, %f144;\n"
    "	mul.f32 	%f173, %f172, %f172;\n"
    "	ld.const.f32 	%f174, [%rd18+12];\n"
    "	ld.const.f32 	%f175, [%rd18+0];\n"
    "	ld.const.f32 	%f176, [%rd18+16];\n"
    "	ld.const.f32 	%f177, [%rd18+20];\n"
    "	mul.f32 	%f178, %f173, %f173;\n"
    "	mul.f32 	%f179, %f172, %f173;\n"
    "	mov.f32 	%f180, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f181, %f174, %f180;\n"
    "	mov.f32 	%f182, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f183, %f175, %f182;\n"
    "	mov.f32 	%f184, 0f41000000;   	// 8\n"
    "	mul.f32 	%f185, %f176, %f184;\n"
    "	mul.f32 	%f186, %f178, %f178;\n"
    "	mul.f32 	%f187, %f183, %f80;\n"
    "	mul.f32 	%f188, %f181, %f186;\n"
    "	mul.f32 	%f189, %f185, %f186;\n"
    "	mul.f32 	%f190, %f145, %f187;\n"
    "	mul.f32 	%f191, %f172, %f190;\n"
    "	sub.f32 	%f192, %f191, %f188;\n"
    "	mul.f32 	%f193, %f173, %f189;\n"
    "	sub.f32 	%f194, %f192, %f193;\n"
    "	mad.f32 	%f195, %f177, %f179, %f194;\n"
    "	mov.f32 	%f196, %f2;\n"
    "	mov.f32 	%f197, %f121;\n"
    "	mad.f32 	%f198, %f197, %f195, %f196;\n"
    "	mov.f32 	%f2, %f198;\n"
    "	mov.f32 	%f199, %f4;\n"
    "	mov.f32 	%f200, %f132;\n"
    "	mad.f32 	%f201, %f200, %f195, %f199;\n"
    "	mov.f32 	%f4, %f201;\n"
    "	mov.f32 	%f202, %f6;\n"
    "	mov.f32 	%f203, %f141;\n"
    "	mad.f32 	%f204, %f203, %f195, %f202;\n"
    "	mov.f32 	%f6, %f204;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_4_49154:\n"
    "	.loc	3	509	0\n"
    "	ld.shared.s32 	%r25, [%rd11+44];\n"
    "	add.s32 	%r26, %r25, %r6;\n"
    "	ld.shared.f32 	%f205, [%rd11+32];\n"
    "	sub.f32 	%f206, %f19, %f205;\n"
    "	mov.f32 	%f207, %f206;\n"
    "	mul.f32 	%f208, %f14, %f207;\n"
    "	cvt.rni.f32.f32 	%f209, %f208;\n"
    "	mul.f32 	%f210, %f13, %f209;\n"
    "	sub.f32 	%f211, %f206, %f210;\n"
    "	mov.f32 	%f212, %f211;\n"
    "	mov.f32 	%f213, 0f00000000;   	// 0\n"
    "	mad.f32 	%f214, %f211, %f211, %f213;\n"
    "	ld.shared.f32 	%f215, [%rd11+36];\n"
    "	sub.f32 	%f216, %f30, %f215;\n"
    "	mov.f32 	%f217, %f216;\n"
    "	mov.f32 	%f218, %f217;\n"
    "	mul.f32 	%f219, %f14, %f217;\n"
    "	cvt.rni.f32.f32 	%f220, %f219;\n"
    "	mul.f32 	%f221, %f13, %f220;\n"
    "	sub.f32 	%f222, %f216, %f221;\n"
    "	mov.f32 	%f223, %f222;\n"
    "	mad.f32 	%f224, %f222, %f222, %f214;\n"
    "	ld.shared.f32 	%f225, [%rd11+40];\n"
    "	sub.f32 	%f226, %f41, %f225;\n"
    "	mov.f32 	%f227, %f226;\n"
    "	mul.f32 	%f228, %f226, %f14;\n"
    "	cvt.rni.f32.f32 	%f229, %f228;\n"
    "	mul.f32 	%f230, %f13, %f229;\n"
    "	sub.f32 	%f231, %f226, %f230;\n"
    "	mov.f32 	%f232, %f231;\n"
    "	mad.f32 	%f233, %f231, %f231, %f224;\n"
    "	mov.f32 	%f234, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p8, %f233, %f234;\n"
    "	@!%p8 bra 	$Lt_4_49666;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f235, %f233;\n"
    "	cvt.s64.s32 	%rd19, %r26;\n"
    "	mul.wide.s32 	%rd20, %r26, 24;\n"
    "	add.u64 	%rd21, %rd10, %rd20;\n"
    "	ld.const.f32 	%f236, [%rd21+8];\n"
    "	ld.const.f32 	%f237, [%rd21+4];\n"
    "	sub.f32 	%f238, %f237, %f235;\n"
    "	mul.f32 	%f239, %f236, %f238;\n"
    "	mov.f32 	%f240, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f241, %f239, %f240;\n"
    "	cvt.rzi.f32.f32 	%f242, %f241;\n"
    "	mov.f32 	%f243, %f242;\n"
    "	mov.f32 	%f244, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f245, %f244;\n"
    "	mov.f32 	%f246, %f239;\n"
    "	mad.f32 %f247, %f243, %f245, %f246;\n"
    "	mov.f32 	%f64, %f247;\n"
    "	mov.f32 	%f248, %f242;\n"
    "	mov.f32 	%f249, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f250, %f249;\n"
    "	mov.f32 	%f251, %f64;\n"
    "	mad.f32 %f252, %f248, %f250, %f251;\n"
    "	mov.f32 	%f64, %f252;\n"
    "	.loc	3	509	0\n"
    "	mov.f32 	%f253, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f254, %f242;\n"
    "	mov.f32 	%f255, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f256, %f64, %f255;\n"
    "	ex2.approx.f32 	%f257, %f256;\n"
    "	mul.f32 	%f258, %f254, %f257;\n"
    "	mov.f32 	%f259, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p9, %f239, %f259;\n"
    "	selp.f32 	%f260, %f253, %f258, %p9;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f261, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f262, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p10, %f239, %f262;\n"
    "	selp.f32 	%f80, %f261, %f260, %p10;\n"
    "	.loc	3	509	0\n"
    "	rcp.approx.f32 	%f263, %f235;\n"
    "	mul.f32 	%f264, %f263, %f263;\n"
    "	ld.const.f32 	%f265, [%rd21+12];\n"
    "	ld.const.f32 	%f266, [%rd21+0];\n"
    "	ld.const.f32 	%f267, [%rd21+16];\n"
    "	ld.const.f32 	%f268, [%rd21+20];\n"
    "	mul.f32 	%f269, %f264, %f264;\n"
    "	mul.f32 	%f270, %f263, %f264;\n"
    "	mov.f32 	%f271, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f272, %f265, %f271;\n"
    "	mov.f32 	%f273, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f274, %f266, %f273;\n"
    "	mov.f32 	%f275, 0f41000000;   	// 8\n"
    "	mul.f32 	%f276, %f267, %f275;\n"
    "	mul.f32 	%f277, %f269, %f269;\n"
    "	mul.f32 	%f278, %f274, %f80;\n"
    "	mul.f32 	%f279, %f272, %f277;\n"
    "	mul.f32 	%f280, %f276, %f277;\n"
    "	mul.f32 	%f281, %f236, %f278;\n"
    "	mul.f32 	%f282, %f263, %f281;\n"
    "	sub.f32 	%f283, %f282, %f279;\n"
    "	mul.f32 	%f284, %f264, %f280;\n"
    "	sub.f32 	%f285, %f283, %f284;\n"
    "	mad.f32 	%f286, %f268, %f270, %f285;\n"
    "	mov.f32 	%f287, %f2;\n"
    "	mov.f32 	%f288, %f212;\n"
    "	mad.f32 	%f289, %f288, %f286, %f287;\n"
    "	mov.f32 	%f2, %f289;\n"
    "	mov.f32 	%f290, %f4;\n"
    "	mov.f32 	%f291, %f223;\n"
    "	mad.f32 	%f292, %f291, %f286, %f290;\n"
    "	mov.f32 	%f4, %f292;\n"
    "	mov.f32 	%f293, %f6;\n"
    "	mov.f32 	%f294, %f232;\n"
    "	mad.f32 	%f295, %f294, %f286, %f293;\n"
    "	mov.f32 	%f6, %f295;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_4_49666:\n"
    "	.loc	3	510	0\n"
    "	ld.shared.s32 	%r27, [%rd11+60];\n"
    "	add.s32 	%r28, %r27, %r6;\n"
    "	ld.shared.f32 	%f296, [%rd11+48];\n"
    "	sub.f32 	%f297, %f19, %f296;\n"
    "	mov.f32 	%f298, %f297;\n"
    "	mul.f32 	%f299, %f14, %f298;\n"
    "	cvt.rni.f32.f32 	%f300, %f299;\n"
    "	mul.f32 	%f301, %f13, %f300;\n"
    "	sub.f32 	%f302, %f297, %f301;\n"
    "	mov.f32 	%f303, %f302;\n"
    "	mov.f32 	%f304, 0f00000000;   	// 0\n"
    "	mad.f32 	%f305, %f302, %f302, %f304;\n"
    "	ld.shared.f32 	%f306, [%rd11+52];\n"
    "	sub.f32 	%f307, %f30, %f306;\n"
    "	mov.f32 	%f308, %f307;\n"
    "	mov.f32 	%f309, %f308;\n"
    "	mul.f32 	%f310, %f14, %f308;\n"
    "	cvt.rni.f32.f32 	%f311, %f310;\n"
    "	mul.f32 	%f312, %f13, %f311;\n"
    "	sub.f32 	%f313, %f307, %f312;\n"
    "	mov.f32 	%f314, %f313;\n"
    "	mad.f32 	%f315, %f313, %f313, %f305;\n"
    "	ld.shared.f32 	%f316, [%rd11+56];\n"
    "	sub.f32 	%f317, %f41, %f316;\n"
    "	mov.f32 	%f318, %f317;\n"
    "	mul.f32 	%f319, %f317, %f14;\n"
    "	cvt.rni.f32.f32 	%f320, %f319;\n"
    "	mul.f32 	%f321, %f13, %f320;\n"
    "	sub.f32 	%f322, %f317, %f321;\n"
    "	mov.f32 	%f323, %f322;\n"
    "	mad.f32 	%f324, %f322, %f322, %f315;\n"
    "	mov.f32 	%f325, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p11, %f324, %f325;\n"
    "	@!%p11 bra 	$Lt_4_50178;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f326, %f324;\n"
    "	cvt.s64.s32 	%rd22, %r28;\n"
    "	mul.wide.s32 	%rd23, %r28, 24;\n"
    "	add.u64 	%rd24, %rd10, %rd23;\n"
    "	ld.const.f32 	%f327, [%rd24+8];\n"
    "	ld.const.f32 	%f328, [%rd24+4];\n"
    "	sub.f32 	%f329, %f328, %f326;\n"
    "	mul.f32 	%f330, %f327, %f329;\n"
    "	mov.f32 	%f331, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f332, %f330, %f331;\n"
    "	cvt.rzi.f32.f32 	%f333, %f332;\n"
    "	mov.f32 	%f334, %f333;\n"
    "	mov.f32 	%f335, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f336, %f335;\n"
    "	mov.f32 	%f337, %f330;\n"
    "	mad.f32 %f338, %f334, %f336, %f337;\n"
    "	mov.f32 	%f64, %f338;\n"
    "	mov.f32 	%f339, %f333;\n"
    "	mov.f32 	%f340, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f341, %f340;\n"
    "	mov.f32 	%f342, %f64;\n"
    "	mad.f32 %f343, %f339, %f341, %f342;\n"
    "	mov.f32 	%f64, %f343;\n"
    "	.loc	3	510	0\n"
    "	mov.f32 	%f344, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f345, %f333;\n"
    "	mov.f32 	%f346, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f347, %f64, %f346;\n"
    "	ex2.approx.f32 	%f348, %f347;\n"
    "	mul.f32 	%f349, %f345, %f348;\n"
    "	mov.f32 	%f350, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p12, %f330, %f350;\n"
    "	selp.f32 	%f351, %f344, %f349, %p12;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f352, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f353, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p13, %f330, %f353;\n"
    "	selp.f32 	%f80, %f352, %f351, %p13;\n"
    "	.loc	3	510	0\n"
    "	rcp.approx.f32 	%f354, %f326;\n"
    "	mul.f32 	%f355, %f354, %f354;\n"
    "	ld.const.f32 	%f356, [%rd24+12];\n"
    "	ld.const.f32 	%f357, [%rd24+0];\n"
    "	ld.const.f32 	%f358, [%rd24+16];\n"
    "	ld.const.f32 	%f359, [%rd24+20];\n"
    "	mul.f32 	%f360, %f355, %f355;\n"
    "	mul.f32 	%f361, %f354, %f355;\n"
    "	mov.f32 	%f362, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f363, %f356, %f362;\n"
    "	mov.f32 	%f364, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f365, %f357, %f364;\n"
    "	mov.f32 	%f366, 0f41000000;   	// 8\n"
    "	mul.f32 	%f367, %f358, %f366;\n"
    "	mul.f32 	%f368, %f360, %f360;\n"
    "	mul.f32 	%f369, %f365, %f80;\n"
    "	mul.f32 	%f370, %f363, %f368;\n"
    "	mul.f32 	%f371, %f367, %f368;\n"
    "	mul.f32 	%f372, %f327, %f369;\n"
    "	mul.f32 	%f373, %f354, %f372;\n"
    "	sub.f32 	%f374, %f373, %f370;\n"
    "	mul.f32 	%f375, %f355, %f371;\n"
    "	sub.f32 	%f376, %f374, %f375;\n"
    "	mad.f32 	%f377, %f359, %f361, %f376;\n"
    "	mov.f32 	%f378, %f2;\n"
    "	mov.f32 	%f379, %f303;\n"
    "	mad.f32 	%f380, %f379, %f377, %f378;\n"
    "	mov.f32 	%f2, %f380;\n"
    "	mov.f32 	%f381, %f4;\n"
    "	mov.f32 	%f382, %f314;\n"
    "	mad.f32 	%f383, %f382, %f377, %f381;\n"
    "	mov.f32 	%f4, %f383;\n"
    "	mov.f32 	%f384, %f6;\n"
    "	mov.f32 	%f385, %f323;\n"
    "	mad.f32 	%f386, %f385, %f377, %f384;\n"
    "	mov.f32 	%f6, %f386;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_4_50178:\n"
    "	.loc	3	511	0\n"
    "	ld.shared.s32 	%r29, [%rd11+76];\n"
    "	add.s32 	%r30, %r29, %r6;\n"
    "	ld.shared.f32 	%f387, [%rd11+64];\n"
    "	sub.f32 	%f388, %f19, %f387;\n"
    "	mov.f32 	%f389, %f388;\n"
    "	mul.f32 	%f390, %f14, %f389;\n"
    "	cvt.rni.f32.f32 	%f391, %f390;\n"
    "	mul.f32 	%f392, %f13, %f391;\n"
    "	sub.f32 	%f393, %f388, %f392;\n"
    "	mov.f32 	%f394, %f393;\n"
    "	mov.f32 	%f395, 0f00000000;   	// 0\n"
    "	mad.f32 	%f396, %f393, %f393, %f395;\n"
    "	ld.shared.f32 	%f397, [%rd11+68];\n"
    "	sub.f32 	%f398, %f30, %f397;\n"
    "	mov.f32 	%f399, %f398;\n"
    "	mov.f32 	%f400, %f399;\n"
    "	mul.f32 	%f401, %f14, %f399;\n"
    "	cvt.rni.f32.f32 	%f402, %f401;\n"
    "	mul.f32 	%f403, %f13, %f402;\n"
    "	sub.f32 	%f404, %f398, %f403;\n"
    "	mov.f32 	%f405, %f404;\n"
    "	mad.f32 	%f406, %f404, %f404, %f396;\n"
    "	ld.shared.f32 	%f407, [%rd11+72];\n"
    "	sub.f32 	%f408, %f41, %f407;\n"
    "	mov.f32 	%f409, %f408;\n"
    "	mul.f32 	%f410, %f408, %f14;\n"
    "	cvt.rni.f32.f32 	%f411, %f410;\n"
    "	mul.f32 	%f412, %f13, %f411;\n"
    "	sub.f32 	%f413, %f408, %f412;\n"
    "	mov.f32 	%f414, %f413;\n"
    "	mad.f32 	%f415, %f413, %f413, %f406;\n"
    "	mov.f32 	%f416, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p14, %f415, %f416;\n"
    "	@!%p14 bra 	$Lt_4_50690;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f417, %f415;\n"
    "	cvt.s64.s32 	%rd25, %r30;\n"
    "	mul.wide.s32 	%rd26, %r30, 24;\n"
    "	add.u64 	%rd27, %rd10, %rd26;\n"
    "	ld.const.f32 	%f418, [%rd27+8];\n"
    "	ld.const.f32 	%f419, [%rd27+4];\n"
    "	sub.f32 	%f420, %f419, %f417;\n"
    "	mul.f32 	%f421, %f418, %f420;\n"
    "	mov.f32 	%f422, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f423, %f421, %f422;\n"
    "	cvt.rzi.f32.f32 	%f424, %f423;\n"
    "	mov.f32 	%f425, %f424;\n"
    "	mov.f32 	%f426, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f427, %f426;\n"
    "	mov.f32 	%f428, %f421;\n"
    "	mad.f32 %f429, %f425, %f427, %f428;\n"
    "	mov.f32 	%f64, %f429;\n"
    "	mov.f32 	%f430, %f424;\n"
    "	mov.f32 	%f431, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f432, %f431;\n"
    "	mov.f32 	%f433, %f64;\n"
    "	mad.f32 %f434, %f430, %f432, %f433;\n"
    "	mov.f32 	%f64, %f434;\n"
    "	.loc	3	511	0\n"
    "	mov.f32 	%f435, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f436, %f424;\n"
    "	mov.f32 	%f437, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f438, %f64, %f437;\n"
    "	ex2.approx.f32 	%f439, %f438;\n"
    "	mul.f32 	%f440, %f436, %f439;\n"
    "	mov.f32 	%f441, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p15, %f421, %f441;\n"
    "	selp.f32 	%f442, %f435, %f440, %p15;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f443, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f444, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p16, %f421, %f444;\n"
    "	selp.f32 	%f80, %f443, %f442, %p16;\n"
    "	.loc	3	511	0\n"
    "	rcp.approx.f32 	%f445, %f417;\n"
    "	mul.f32 	%f446, %f445, %f445;\n"
    "	ld.const.f32 	%f447, [%rd27+12];\n"
    "	ld.const.f32 	%f448, [%rd27+0];\n"
    "	ld.const.f32 	%f449, [%rd27+16];\n"
    "	ld.const.f32 	%f450, [%rd27+20];\n"
    "	mul.f32 	%f451, %f446, %f446;\n"
    "	mul.f32 	%f452, %f445, %f446;\n"
    "	mov.f32 	%f453, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f454, %f447, %f453;\n"
    "	mov.f32 	%f455, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f456, %f448, %f455;\n"
    "	mov.f32 	%f457, 0f41000000;   	// 8\n"
    "	mul.f32 	%f458, %f449, %f457;\n"
    "	mul.f32 	%f459, %f451, %f451;\n"
    "	mul.f32 	%f460, %f456, %f80;\n"
    "	mul.f32 	%f461, %f454, %f459;\n"
    "	mul.f32 	%f462, %f458, %f459;\n"
    "	mul.f32 	%f463, %f418, %f460;\n"
    "	mul.f32 	%f464, %f445, %f463;\n"
    "	sub.f32 	%f465, %f464, %f461;\n"
    "	mul.f32 	%f466, %f446, %f462;\n"
    "	sub.f32 	%f467, %f465, %f466;\n"
    "	mad.f32 	%f468, %f450, %f452, %f467;\n"
    "	mov.f32 	%f469, %f2;\n"
    "	mov.f32 	%f470, %f394;\n"
    "	mad.f32 	%f471, %f470, %f468, %f469;\n"
    "	mov.f32 	%f2, %f471;\n"
    "	mov.f32 	%f472, %f4;\n"
    "	mov.f32 	%f473, %f405;\n"
    "	mad.f32 	%f474, %f473, %f468, %f472;\n"
    "	mov.f32 	%f4, %f474;\n"
    "	mov.f32 	%f475, %f6;\n"
    "	mov.f32 	%f476, %f414;\n"
    "	mad.f32 	%f477, %f476, %f468, %f475;\n"
    "	mov.f32 	%f6, %f477;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_4_50690:\n"
    "	.loc	3	512	0\n"
    "	ld.shared.s32 	%r31, [%rd11+92];\n"
    "	add.s32 	%r32, %r31, %r6;\n"
    "	ld.shared.f32 	%f478, [%rd11+80];\n"
    "	sub.f32 	%f479, %f19, %f478;\n"
    "	mov.f32 	%f480, %f479;\n"
    "	mul.f32 	%f481, %f14, %f480;\n"
    "	cvt.rni.f32.f32 	%f482, %f481;\n"
    "	mul.f32 	%f483, %f13, %f482;\n"
    "	sub.f32 	%f484, %f479, %f483;\n"
    "	mov.f32 	%f485, %f484;\n"
    "	mov.f32 	%f486, 0f00000000;   	// 0\n"
    "	mad.f32 	%f487, %f484, %f484, %f486;\n"
    "	ld.shared.f32 	%f488, [%rd11+84];\n"
    "	sub.f32 	%f489, %f30, %f488;\n"
    "	mov.f32 	%f490, %f489;\n"
    "	mov.f32 	%f491, %f490;\n"
    "	mul.f32 	%f492, %f14, %f490;\n"
    "	cvt.rni.f32.f32 	%f493, %f492;\n"
    "	mul.f32 	%f494, %f13, %f493;\n"
    "	sub.f32 	%f495, %f489, %f494;\n"
    "	mov.f32 	%f496, %f495;\n"
    "	mad.f32 	%f497, %f495, %f495, %f487;\n"
    "	ld.shared.f32 	%f498, [%rd11+88];\n"
    "	sub.f32 	%f499, %f41, %f498;\n"
    "	mov.f32 	%f500, %f499;\n"
    "	mul.f32 	%f501, %f499, %f14;\n"
    "	cvt.rni.f32.f32 	%f502, %f501;\n"
    "	mul.f32 	%f503, %f13, %f502;\n"
    "	sub.f32 	%f504, %f499, %f503;\n"
    "	mov.f32 	%f505, %f504;\n"
    "	mad.f32 	%f506, %f504, %f504, %f497;\n"
    "	mov.f32 	%f507, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p17, %f506, %f507;\n"
    "	@!%p17 bra 	$Lt_4_51202;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f508, %f506;\n"
    "	cvt.s64.s32 	%rd28, %r32;\n"
    "	mul.wide.s32 	%rd29, %r32, 24;\n"
    "	add.u64 	%rd30, %rd10, %rd29;\n"
    "	ld.const.f32 	%f509, [%rd30+8];\n"
    "	ld.const.f32 	%f510, [%rd30+4];\n"
    "	sub.f32 	%f511, %f510, %f508;\n"
    "	mul.f32 	%f512, %f509, %f511;\n"
    "	mov.f32 	%f513, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f514, %f512, %f513;\n"
    "	cvt.rzi.f32.f32 	%f515, %f514;\n"
    "	mov.f32 	%f516, %f515;\n"
    "	mov.f32 	%f517, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f518, %f517;\n"
    "	mov.f32 	%f519, %f512;\n"
    "	mad.f32 %f520, %f516, %f518, %f519;\n"
    "	mov.f32 	%f64, %f520;\n"
    "	mov.f32 	%f521, %f515;\n"
    "	mov.f32 	%f522, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f523, %f522;\n"
    "	mov.f32 	%f524, %f64;\n"
    "	mad.f32 %f525, %f521, %f523, %f524;\n"
    "	mov.f32 	%f64, %f525;\n"
    "	.loc	3	512	0\n"
    "	mov.f32 	%f526, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f527, %f515;\n"
    "	mov.f32 	%f528, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f529, %f64, %f528;\n"
    "	ex2.approx.f32 	%f530, %f529;\n"
    "	mul.f32 	%f531, %f527, %f530;\n"
    "	mov.f32 	%f532, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p18, %f512, %f532;\n"
    "	selp.f32 	%f533, %f526, %f531, %p18;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f534, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f535, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p19, %f512, %f535;\n"
    "	selp.f32 	%f80, %f534, %f533, %p19;\n"
    "	.loc	3	512	0\n"
    "	rcp.approx.f32 	%f536, %f508;\n"
    "	mul.f32 	%f537, %f536, %f536;\n"
    "	ld.const.f32 	%f538, [%rd30+12];\n"
    "	ld.const.f32 	%f539, [%rd30+0];\n"
    "	ld.const.f32 	%f540, [%rd30+16];\n"
    "	ld.const.f32 	%f541, [%rd30+20];\n"
    "	mul.f32 	%f542, %f537, %f537;\n"
    "	mul.f32 	%f543, %f536, %f537;\n"
    "	mov.f32 	%f544, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f545, %f538, %f544;\n"
    "	mov.f32 	%f546, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f547, %f539, %f546;\n"
    "	mov.f32 	%f548, 0f41000000;   	// 8\n"
    "	mul.f32 	%f549, %f540, %f548;\n"
    "	mul.f32 	%f550, %f542, %f542;\n"
    "	mul.f32 	%f551, %f547, %f80;\n"
    "	mul.f32 	%f552, %f545, %f550;\n"
    "	mul.f32 	%f553, %f549, %f550;\n"
    "	mul.f32 	%f554, %f509, %f551;\n"
    "	mul.f32 	%f555, %f536, %f554;\n"
    "	sub.f32 	%f556, %f555, %f552;\n"
    "	mul.f32 	%f557, %f537, %f553;\n"
    "	sub.f32 	%f558, %f556, %f557;\n"
    "	mad.f32 	%f559, %f541, %f543, %f558;\n"
    "	mov.f32 	%f560, %f2;\n"
    "	mov.f32 	%f561, %f485;\n"
    "	mad.f32 	%f562, %f561, %f559, %f560;\n"
    "	mov.f32 	%f2, %f562;\n"
    "	mov.f32 	%f563, %f4;\n"
    "	mov.f32 	%f564, %f496;\n"
    "	mad.f32 	%f565, %f564, %f559, %f563;\n"
    "	mov.f32 	%f4, %f565;\n"
    "	mov.f32 	%f566, %f6;\n"
    "	mov.f32 	%f567, %f505;\n"
    "	mad.f32 	%f568, %f567, %f559, %f566;\n"
    "	mov.f32 	%f6, %f568;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_4_51202:\n"
    "	.loc	3	513	0\n"
    "	ld.shared.s32 	%r33, [%rd11+108];\n"
    "	add.s32 	%r34, %r33, %r6;\n"
    "	ld.shared.f32 	%f569, [%rd11+96];\n"
    "	sub.f32 	%f570, %f19, %f569;\n"
    "	mov.f32 	%f571, %f570;\n"
    "	mul.f32 	%f572, %f14, %f571;\n"
    "	cvt.rni.f32.f32 	%f573, %f572;\n"
    "	mul.f32 	%f574, %f13, %f573;\n"
    "	sub.f32 	%f575, %f570, %f574;\n"
    "	mov.f32 	%f576, %f575;\n"
    "	mov.f32 	%f577, 0f00000000;   	// 0\n"
    "	mad.f32 	%f578, %f575, %f575, %f577;\n"
    "	ld.shared.f32 	%f579, [%rd11+100];\n"
    "	sub.f32 	%f580, %f30, %f579;\n"
    "	mov.f32 	%f581, %f580;\n"
    "	mov.f32 	%f582, %f581;\n"
    "	mul.f32 	%f583, %f14, %f581;\n"
    "	cvt.rni.f32.f32 	%f584, %f583;\n"
    "	mul.f32 	%f585, %f13, %f584;\n"
    "	sub.f32 	%f586, %f580, %f585;\n"
    "	mov.f32 	%f587, %f586;\n"
    "	mad.f32 	%f588, %f586, %f586, %f578;\n"
    "	ld.shared.f32 	%f589, [%rd11+104];\n"
    "	sub.f32 	%f590, %f41, %f589;\n"
    "	mov.f32 	%f591, %f590;\n"
    "	mul.f32 	%f592, %f590, %f14;\n"
    "	cvt.rni.f32.f32 	%f593, %f592;\n"
    "	mul.f32 	%f594, %f13, %f593;\n"
    "	sub.f32 	%f595, %f590, %f594;\n"
    "	mov.f32 	%f596, %f595;\n"
    "	mad.f32 	%f597, %f595, %f595, %f588;\n"
    "	mov.f32 	%f598, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p20, %f597, %f598;\n"
    "	@!%p20 bra 	$Lt_4_51714;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f599, %f597;\n"
    "	cvt.s64.s32 	%rd31, %r34;\n"
    "	mul.wide.s32 	%rd32, %r34, 24;\n"
    "	add.u64 	%rd33, %rd10, %rd32;\n"
    "	ld.const.f32 	%f600, [%rd33+8];\n"
    "	ld.const.f32 	%f601, [%rd33+4];\n"
    "	sub.f32 	%f602, %f601, %f599;\n"
    "	mul.f32 	%f603, %f600, %f602;\n"
    "	mov.f32 	%f604, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f605, %f603, %f604;\n"
    "	cvt.rzi.f32.f32 	%f606, %f605;\n"
    "	mov.f32 	%f607, %f606;\n"
    "	mov.f32 	%f608, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f609, %f608;\n"
    "	mov.f32 	%f610, %f603;\n"
    "	mad.f32 %f611, %f607, %f609, %f610;\n"
    "	mov.f32 	%f64, %f611;\n"
    "	mov.f32 	%f612, %f606;\n"
    "	mov.f32 	%f613, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f614, %f613;\n"
    "	mov.f32 	%f615, %f64;\n"
    "	mad.f32 %f616, %f612, %f614, %f615;\n"
    "	mov.f32 	%f64, %f616;\n"
    "	.loc	3	513	0\n"
    "	mov.f32 	%f617, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f618, %f606;\n"
    "	mov.f32 	%f619, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f620, %f64, %f619;\n"
    "	ex2.approx.f32 	%f621, %f620;\n"
    "	mul.f32 	%f622, %f618, %f621;\n"
    "	mov.f32 	%f623, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p21, %f603, %f623;\n"
    "	selp.f32 	%f624, %f617, %f622, %p21;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f625, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f626, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p22, %f603, %f626;\n"
    "	selp.f32 	%f80, %f625, %f624, %p22;\n"
    "	.loc	3	513	0\n"
    "	rcp.approx.f32 	%f627, %f599;\n"
    "	mul.f32 	%f628, %f627, %f627;\n"
    "	ld.const.f32 	%f629, [%rd33+12];\n"
    "	ld.const.f32 	%f630, [%rd33+0];\n"
    "	ld.const.f32 	%f631, [%rd33+16];\n"
    "	ld.const.f32 	%f632, [%rd33+20];\n"
    "	mul.f32 	%f633, %f628, %f628;\n"
    "	mul.f32 	%f634, %f627, %f628;\n"
    "	mov.f32 	%f635, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f636, %f629, %f635;\n"
    "	mov.f32 	%f637, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f638, %f630, %f637;\n"
    "	mov.f32 	%f639, 0f41000000;   	// 8\n"
    "	mul.f32 	%f640, %f631, %f639;\n"
    "	mul.f32 	%f641, %f633, %f633;\n"
    "	mul.f32 	%f642, %f638, %f80;\n"
    "	mul.f32 	%f643, %f636, %f641;\n"
    "	mul.f32 	%f644, %f640, %f641;\n"
    "	mul.f32 	%f645, %f600, %f642;\n"
    "	mul.f32 	%f646, %f627, %f645;\n"
    "	sub.f32 	%f647, %f646, %f643;\n"
    "	mul.f32 	%f648, %f628, %f644;\n"
    "	sub.f32 	%f649, %f647, %f648;\n"
    "	mad.f32 	%f650, %f632, %f634, %f649;\n"
    "	mov.f32 	%f651, %f2;\n"
    "	mov.f32 	%f652, %f576;\n"
    "	mad.f32 	%f653, %f652, %f650, %f651;\n"
    "	mov.f32 	%f2, %f653;\n"
    "	mov.f32 	%f654, %f4;\n"
    "	mov.f32 	%f655, %f587;\n"
    "	mad.f32 	%f656, %f655, %f650, %f654;\n"
    "	mov.f32 	%f4, %f656;\n"
    "	mov.f32 	%f657, %f6;\n"
    "	mov.f32 	%f658, %f596;\n"
    "	mad.f32 	%f659, %f658, %f650, %f657;\n"
    "	mov.f32 	%f6, %f659;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_4_51714:\n"
    "	.loc	3	514	0\n"
    "	ld.shared.s32 	%r35, [%rd11+124];\n"
    "	add.s32 	%r36, %r35, %r6;\n"
    "	ld.shared.f32 	%f660, [%rd11+112];\n"
    "	sub.f32 	%f661, %f19, %f660;\n"
    "	mov.f32 	%f662, %f661;\n"
    "	mul.f32 	%f663, %f14, %f662;\n"
    "	cvt.rni.f32.f32 	%f664, %f663;\n"
    "	mul.f32 	%f665, %f13, %f664;\n"
    "	sub.f32 	%f666, %f661, %f665;\n"
    "	mov.f32 	%f667, %f666;\n"
    "	mov.f32 	%f668, 0f00000000;   	// 0\n"
    "	mad.f32 	%f669, %f666, %f666, %f668;\n"
    "	ld.shared.f32 	%f670, [%rd11+116];\n"
    "	sub.f32 	%f671, %f30, %f670;\n"
    "	mov.f32 	%f672, %f671;\n"
    "	mov.f32 	%f673, %f672;\n"
    "	mul.f32 	%f674, %f14, %f672;\n"
    "	cvt.rni.f32.f32 	%f675, %f674;\n"
    "	mul.f32 	%f676, %f13, %f675;\n"
    "	sub.f32 	%f677, %f671, %f676;\n"
    "	mov.f32 	%f678, %f677;\n"
    "	mad.f32 	%f679, %f677, %f677, %f669;\n"
    "	ld.shared.f32 	%f680, [%rd11+120];\n"
    "	sub.f32 	%f681, %f41, %f680;\n"
    "	mov.f32 	%f682, %f681;\n"
    "	mul.f32 	%f683, %f681, %f14;\n"
    "	cvt.rni.f32.f32 	%f684, %f683;\n"
    "	mul.f32 	%f685, %f13, %f684;\n"
    "	sub.f32 	%f686, %f681, %f685;\n"
    "	mov.f32 	%f687, %f686;\n"
    "	mad.f32 	%f688, %f686, %f686, %f679;\n"
    "	mov.f32 	%f689, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p23, %f688, %f689;\n"
    "	@!%p23 bra 	$Lt_4_52226;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f690, %f688;\n"
    "	cvt.s64.s32 	%rd34, %r36;\n"
    "	mul.wide.s32 	%rd35, %r36, 24;\n"
    "	add.u64 	%rd36, %rd10, %rd35;\n"
    "	ld.const.f32 	%f691, [%rd36+8];\n"
    "	ld.const.f32 	%f692, [%rd36+4];\n"
    "	sub.f32 	%f693, %f692, %f690;\n"
    "	mul.f32 	%f694, %f691, %f693;\n"
    "	mov.f32 	%f695, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f696, %f694, %f695;\n"
    "	cvt.rzi.f32.f32 	%f697, %f696;\n"
    "	mov.f32 	%f698, %f697;\n"
    "	mov.f32 	%f699, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f700, %f699;\n"
    "	mov.f32 	%f701, %f694;\n"
    "	mad.f32 %f702, %f698, %f700, %f701;\n"
    "	mov.f32 	%f64, %f702;\n"
    "	mov.f32 	%f703, %f697;\n"
    "	mov.f32 	%f704, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f705, %f704;\n"
    "	mov.f32 	%f706, %f64;\n"
    "	mad.f32 %f707, %f703, %f705, %f706;\n"
    "	mov.f32 	%f64, %f707;\n"
    "	.loc	3	514	0\n"
    "	mov.f32 	%f708, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f709, %f697;\n"
    "	mov.f32 	%f710, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f711, %f64, %f710;\n"
    "	ex2.approx.f32 	%f712, %f711;\n"
    "	mul.f32 	%f713, %f709, %f712;\n"
    "	mov.f32 	%f714, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p24, %f694, %f714;\n"
    "	selp.f32 	%f715, %f708, %f713, %p24;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f716, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f717, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p25, %f694, %f717;\n"
    "	selp.f32 	%f80, %f716, %f715, %p25;\n"
    "	.loc	3	514	0\n"
    "	rcp.approx.f32 	%f718, %f690;\n"
    "	mul.f32 	%f719, %f718, %f718;\n"
    "	ld.const.f32 	%f720, [%rd36+12];\n"
    "	ld.const.f32 	%f721, [%rd36+0];\n"
    "	ld.const.f32 	%f722, [%rd36+16];\n"
    "	ld.const.f32 	%f723, [%rd36+20];\n"
    "	mul.f32 	%f724, %f719, %f719;\n"
    "	mul.f32 	%f725, %f718, %f719;\n"
    "	mov.f32 	%f726, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f727, %f720, %f726;\n"
    "	mov.f32 	%f728, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f729, %f721, %f728;\n"
    "	mov.f32 	%f730, 0f41000000;   	// 8\n"
    "	mul.f32 	%f731, %f722, %f730;\n"
    "	mul.f32 	%f732, %f724, %f724;\n"
    "	mul.f32 	%f733, %f729, %f80;\n"
    "	mul.f32 	%f734, %f727, %f732;\n"
    "	mul.f32 	%f735, %f731, %f732;\n"
    "	mul.f32 	%f736, %f691, %f733;\n"
    "	mul.f32 	%f737, %f718, %f736;\n"
    "	sub.f32 	%f738, %f737, %f734;\n"
    "	mul.f32 	%f739, %f719, %f735;\n"
    "	sub.f32 	%f740, %f738, %f739;\n"
    "	mad.f32 	%f741, %f723, %f725, %f740;\n"
    "	mov.f32 	%f742, %f2;\n"
    "	mov.f32 	%f743, %f667;\n"
    "	mad.f32 	%f744, %f743, %f741, %f742;\n"
    "	mov.f32 	%f2, %f744;\n"
    "	mov.f32 	%f745, %f4;\n"
    "	mov.f32 	%f746, %f678;\n"
    "	mad.f32 	%f747, %f746, %f741, %f745;\n"
    "	mov.f32 	%f4, %f747;\n"
    "	mov.f32 	%f748, %f6;\n"
    "	mov.f32 	%f749, %f687;\n"
    "	mad.f32 	%f750, %f749, %f741, %f748;\n"
    "	mov.f32 	%f6, %f750;\n"
    "$Lt_4_52226:\n"
    "	add.s32 	%r20, %r20, 8;\n"
    "	add.u64 	%rd12, %rd12, 128;\n"
    "	add.u64 	%rd11, %rd11, 128;\n"
    "	mov.u32 	%r37, 255;\n"
    "	setp.le.s32 	%p26, %r20, %r37;\n"
    "	@%p26 bra 	$Lt_4_48386;\n"
    "	add.s32 	%r17, %r17, 256;\n"
    "	add.s32 	%r15, %r15, 256;\n"
    "	add.u64 	%rd9, %rd9, 4096;\n"
    "	setp.lt.s32 	%p27, %r15, %r16;\n"
    "	@%p27 bra 	$Lt_4_47618;\n"
    "	bra.uni 	$Lt_4_47106;\n"
    "$Lt_4_55810:\n"
    "	mov.s32 	%r17, 0;\n"
    "	mov.u64 	%rd10, c_matrix;\n"
    "	mov.u64 	%rd5, __cuda___cuda_local_var_15936_35_non_const_s_xj29768;\n"
    "$Lt_4_47106:\n"
    "	.loc	3	517	0\n"
    "	bar.sync 	0;\n"
    "	sub.s32 	%r38, %r7, %r17;\n"
    "	setp.le.s32 	%p28, %r38, %r1;\n"
    "	@%p28 bra 	$Lt_4_53250;\n"
    "	.loc	3	518	0\n"
    "	cvt.s64.s32 	%rd37, %r1;\n"
    "	mul.wide.s32 	%rd38, %r1, 16;\n"
    "	add.u64 	%rd39, %rd38, %rd5;\n"
    "	add.s32 	%r39, %r17, %r1;\n"
    "	cvt.s64.s32 	%rd40, %r39;\n"
    "	mul.wide.s32 	%rd41, %r39, 16;\n"
    "	add.u64 	%rd9, %rd1, %rd41;\n"
    "	ld.global.f32 	%f751, [%rd9+0];\n"
    "	st.shared.f32 	[%rd39+0], %f751;\n"
    "	ld.global.f32 	%f752, [%rd9+4];\n"
    "	st.shared.f32 	[%rd39+4], %f752;\n"
    "	ld.global.f32 	%f753, [%rd9+8];\n"
    "	st.shared.f32 	[%rd39+8], %f753;\n"
    "	ld.global.s32 	%r40, [%rd9+12];\n"
    "	st.shared.s32 	[%rd39+12], %r40;\n"
    "$Lt_4_53250:\n"
    "	.loc	3	519	0\n"
    "	bar.sync 	0;\n"
    "	mov.u32 	%r41, 0;\n"
    "	setp.le.s32 	%p29, %r38, %r41;\n"
    "	@%p29 bra 	$Lt_4_53762;\n"
    "	mov.s32 	%r42, %r38;\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_gpu_kadai11_xmax];\n"
    "	rcp.approx.f32 	%f14, %f13;\n"
    "	mov.s64 	%rd42, %rd5;\n"
    "	mov.s64 	%rd43, %rd5;\n"
    "	mov.s32 	%r43, 0;\n"
    "	mov.s32 	%r44, %r42;\n"
    "$Lt_4_54274:\n"
    " //<loop> Loop body line 519, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	521	0\n"
    "	ld.shared.s32 	%r45, [%rd42+12];\n"
    "	add.s32 	%r46, %r45, %r6;\n"
    "	ld.shared.f32 	%f754, [%rd43+0];\n"
    "	mov.f32 	%f755, %f8;\n"
    "	sub.f32 	%f756, %f755, %f754;\n"
    "	mov.f32 	%f757, %f756;\n"
    "	mul.f32 	%f758, %f14, %f757;\n"
    "	cvt.rni.f32.f32 	%f759, %f758;\n"
    "	.loc	3	519	0\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_gpu_kadai11_xmax];\n"
    "	.loc	3	521	0\n"
    "	mul.f32 	%f760, %f13, %f759;\n"
    "	sub.f32 	%f761, %f756, %f760;\n"
    "	mov.f32 	%f762, %f761;\n"
    "	mov.f32 	%f763, 0f00000000;   	// 0\n"
    "	mad.f32 	%f764, %f761, %f761, %f763;\n"
    "	ld.shared.f32 	%f765, [%rd43+4];\n"
    "	mov.f32 	%f766, %f10;\n"
    "	sub.f32 	%f767, %f766, %f765;\n"
    "	mov.f32 	%f768, %f767;\n"
    "	mul.f32 	%f769, %f14, %f768;\n"
    "	cvt.rni.f32.f32 	%f770, %f769;\n"
    "	mul.f32 	%f771, %f13, %f770;\n"
    "	sub.f32 	%f772, %f767, %f771;\n"
    "	mov.f32 	%f773, %f772;\n"
    "	mad.f32 	%f774, %f772, %f772, %f764;\n"
    "	ld.shared.f32 	%f775, [%rd43+8];\n"
    "	mov.f32 	%f776, %f12;\n"
    "	sub.f32 	%f777, %f776, %f775;\n"
    "	mul.f32 	%f778, %f777, %f14;\n"
    "	cvt.rni.f32.f32 	%f779, %f778;\n"
    "	mul.f32 	%f780, %f13, %f779;\n"
    "	sub.f32 	%f781, %f777, %f780;\n"
    "	mov.f32 	%f782, %f781;\n"
    "	mad.f32 	%f783, %f781, %f781, %f774;\n"
    "	mov.f32 	%f784, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p30, %f783, %f784;\n"
    "	@!%p30 bra 	$Lt_4_54530;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f785, %f783;\n"
    "	cvt.s64.s32 	%rd44, %r46;\n"
    "	mul.wide.s32 	%rd45, %r46, 24;\n"
    "	add.u64 	%rd46, %rd10, %rd45;\n"
    "	ld.const.f32 	%f786, [%rd46+8];\n"
    "	ld.const.f32 	%f787, [%rd46+4];\n"
    "	sub.f32 	%f788, %f787, %f785;\n"
    "	mul.f32 	%f789, %f786, %f788;\n"
    "	mov.f32 	%f790, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f791, %f789, %f790;\n"
    "	cvt.rzi.f32.f32 	%f792, %f791;\n"
    "	mov.f32 	%f793, %f792;\n"
    "	mov.f32 	%f794, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f795, %f794;\n"
    "	mov.f32 	%f796, %f789;\n"
    "	mad.f32 %f797, %f793, %f795, %f796;\n"
    "	mov.f32 	%f64, %f797;\n"
    "	mov.f32 	%f798, %f792;\n"
    "	mov.f32 	%f799, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f800, %f799;\n"
    "	mov.f32 	%f801, %f64;\n"
    "	mad.f32 %f802, %f798, %f800, %f801;\n"
    "	mov.f32 	%f64, %f802;\n"
    "	.loc	3	521	0\n"
    "	mov.f32 	%f803, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f804, %f792;\n"
    "	mov.f32 	%f805, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f806, %f64, %f805;\n"
    "	ex2.approx.f32 	%f807, %f806;\n"
    "	mul.f32 	%f808, %f804, %f807;\n"
    "	mov.f32 	%f809, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p31, %f789, %f809;\n"
    "	selp.f32 	%f810, %f803, %f808, %p31;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f811, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f812, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p32, %f789, %f812;\n"
    "	selp.f32 	%f80, %f811, %f810, %p32;\n"
    "	.loc	3	521	0\n"
    "	rcp.approx.f32 	%f813, %f785;\n"
    "	mul.f32 	%f814, %f813, %f813;\n"
    "	ld.const.f32 	%f815, [%rd46+12];\n"
    "	ld.const.f32 	%f816, [%rd46+0];\n"
    "	ld.const.f32 	%f817, [%rd46+16];\n"
    "	ld.const.f32 	%f818, [%rd46+20];\n"
    "	mul.f32 	%f819, %f814, %f814;\n"
    "	mul.f32 	%f820, %f813, %f814;\n"
    "	mov.f32 	%f821, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f822, %f815, %f821;\n"
    "	mov.f32 	%f823, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f824, %f816, %f823;\n"
    "	mov.f32 	%f825, 0f41000000;   	// 8\n"
    "	mul.f32 	%f826, %f817, %f825;\n"
    "	mul.f32 	%f827, %f819, %f819;\n"
    "	mul.f32 	%f828, %f824, %f80;\n"
    "	mul.f32 	%f829, %f822, %f827;\n"
    "	mul.f32 	%f830, %f826, %f827;\n"
    "	mul.f32 	%f831, %f786, %f828;\n"
    "	mul.f32 	%f832, %f813, %f831;\n"
    "	sub.f32 	%f833, %f832, %f829;\n"
    "	mul.f32 	%f834, %f814, %f830;\n"
    "	sub.f32 	%f835, %f833, %f834;\n"
    "	mad.f32 	%f836, %f818, %f820, %f835;\n"
    "	mov.f32 	%f837, %f2;\n"
    "	mov.f32 	%f838, %f762;\n"
    "	mad.f32 	%f839, %f838, %f836, %f837;\n"
    "	mov.f32 	%f2, %f839;\n"
    "	mov.f32 	%f840, %f4;\n"
    "	mov.f32 	%f841, %f773;\n"
    "	mad.f32 	%f842, %f841, %f836, %f840;\n"
    "	mov.f32 	%f4, %f842;\n"
    "	mov.f32 	%f843, %f6;\n"
    "	mov.f32 	%f844, %f782;\n"
    "	mad.f32 	%f845, %f844, %f836, %f843;\n"
    "	mov.f32 	%f6, %f845;\n"
    "$Lt_4_54530:\n"
    "	add.s32 	%r43, %r43, 1;\n"
    "	add.u64 	%rd43, %rd43, 16;\n"
    "	add.u64 	%rd42, %rd42, 16;\n"
    "	setp.ne.s32 	%p33, %r38, %r43;\n"
    "	@%p33 bra 	$Lt_4_54274;\n"
    "$Lt_4_53762:\n"
    "	setp.le.s32 	%p34, %r7, %r3;\n"
    "	@%p34 bra 	$Lt_4_55298;\n"
    "	.loc	3	523	0\n"
    "	ld.param.u64 	%rd47, [__cudaparm_nacl_kernel_gpu_kadai11_fvec];\n"
    "	mul.lo.s32 	%r47, %r3, 3;\n"
    "	cvt.s64.s32 	%rd48, %r47;\n"
    "	mul.wide.s32 	%rd49, %r47, 4;\n"
    "	add.u64 	%rd50, %rd47, %rd49;\n"
    "	mov.f32 	%f846, %f2;\n"
    "	st.global.f32 	[%rd50+0], %f846;\n"
    "	mov.f32 	%f847, %f4;\n"
    "	st.global.f32 	[%rd50+4], %f847;\n"
    "	mov.f32 	%f848, %f6;\n"
    "	st.global.f32 	[%rd50+8], %f848;\n"
    "$Lt_4_55298:\n"
    "	.loc	3	524	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel_gpu_kadai11:\n"
    "	} // nacl_kernel_gpu_kadai11\n"
    "\n"
    "	.entry nacl_kernel_gpu_kadai12 (\n"
    "		.param .u64 __cudaparm_nacl_kernel_gpu_kadai12_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_gpu_kadai12_n,\n"
    "		.param .s32 __cudaparm_nacl_kernel_gpu_kadai12_nat,\n"
    "		.param .u64 __cudaparm_nacl_kernel_gpu_kadai12_d_matrix,\n"
    "		.param .f32 __cudaparm_nacl_kernel_gpu_kadai12_xmax,\n"
    "		.param .u64 __cudaparm_nacl_kernel_gpu_kadai12_fvec)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<49>;\n"
    "	.reg .u64 %rd<52>;\n"
    "	.reg .f32 %f<883>;\n"
    "	.reg .pred %p<36>;\n"
    "	.shared .align 4 .b8 __cuda___cuda_local_var_16098_35_non_const_s_xj33904[4096];\n"
    "	.loc	3	651	0\n"
    "$LDWbegin_nacl_kernel_gpu_kadai12:\n"
    "	.loc	3	661	0\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	mov.f32 	%f2, %f1;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	mov.f32 	%f4, %f3;\n"
    "	mov.f32 	%f5, 0f00000000;     	// 0\n"
    "	mov.f32 	%f6, %f5;\n"
    "	.loc	3	662	0\n"
    "	cvt.s32.u16 	%r1, %tid.x;\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	mul.wide.u16 	%r2, %rh1, 256;\n"
    "	add.u32 	%r3, %r1, %r2;\n"
    "	ld.param.u64 	%rd1, [__cudaparm_nacl_kernel_gpu_kadai12_x];\n"
    "	cvt.s64.s32 	%rd2, %r3;\n"
    "	mul.wide.s32 	%rd3, %r3, 16;\n"
    "	add.u64 	%rd4, %rd1, %rd3;\n"
    "	ld.global.f32 	%f7, [%rd4+0];\n"
    "	mov.f32 	%f8, %f7;\n"
    "	ld.global.f32 	%f9, [%rd4+4];\n"
    "	mov.f32 	%f10, %f9;\n"
    "	ld.global.f32 	%f11, [%rd4+8];\n"
    "	mov.f32 	%f12, %f11;\n"
    "	.loc	3	663	0\n"
    "	ld.global.s32 	%r4, [%rd4+12];\n"
    "	ld.param.s32 	%r5, [__cudaparm_nacl_kernel_gpu_kadai12_nat];\n"
    "	mul.lo.s32 	%r6, %r4, %r5;\n"
    "	ld.param.s32 	%r7, [__cudaparm_nacl_kernel_gpu_kadai12_n];\n"
    "	sub.s32 	%r8, %r7, 255;\n"
    "	mov.u32 	%r9, 0;\n"
    "	setp.le.s32 	%p1, %r8, %r9;\n"
    "	@%p1 bra 	$Lt_5_51202;\n"
    "	mov.u64 	%rd5, __cuda___cuda_local_var_16098_35_non_const_s_xj33904;\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_gpu_kadai12_xmax];\n"
    "	rcp.approx.f32 	%f14, %f13;\n"
    "	ld.param.s32 	%r7, [__cudaparm_nacl_kernel_gpu_kadai12_n];\n"
    "	shr.s32 	%r10, %r7, 31;\n"
    "	mov.s32 	%r11, 255;\n"
    "	and.b32 	%r12, %r10, %r11;\n"
    "	add.s32 	%r13, %r12, %r7;\n"
    "	shr.s32 	%r14, %r13, 8;\n"
    "	mov.s32 	%r15, %r1;\n"
    "	add.s32 	%r16, %r8, %r1;\n"
    "	cvt.s64.s32 	%rd6, %r1;\n"
    "	mul.wide.s32 	%rd7, %r1, 16;\n"
    "	add.u64 	%rd8, %rd7, %rd5;\n"
    "	.loc	3	662	0\n"
    "	ld.param.u64 	%rd1, [__cudaparm_nacl_kernel_gpu_kadai12_x];\n"
    "	.loc	3	663	0\n"
    "	add.u64 	%rd9, %rd7, %rd1;\n"
    "	mov.s32 	%r17, 0;\n"
    "	mov.u64 	%rd10, c_matrix;\n"
    "	mov.s32 	%r18, %r14;\n"
    "$Lt_5_47618:\n"
    " //<loop> Loop body line 663, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	665	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	666	0\n"
    "	ld.global.f32 	%f15, [%rd9+0];\n"
    "	st.shared.f32 	[%rd8+0], %f15;\n"
    "	ld.global.f32 	%f16, [%rd9+4];\n"
    "	st.shared.f32 	[%rd8+4], %f16;\n"
    "	ld.global.f32 	%f17, [%rd9+8];\n"
    "	st.shared.f32 	[%rd8+8], %f17;\n"
    "	ld.global.s32 	%r19, [%rd9+12];\n"
    "	st.shared.s32 	[%rd8+12], %r19;\n"
    "	.loc	3	667	0\n"
    "	bar.sync 	0;\n"
    "	mov.s64 	%rd11, %rd5;\n"
    "	mov.s64 	%rd12, %rd5;\n"
    "	mov.s32 	%r20, 0;\n"
    "$Lt_5_48386:\n"
    " //<loop> Loop body line 667, nesting depth: 2, iterations: 32\n"
    "	.loc	3	669	0\n"
    "	ld.shared.s32 	%r21, [%rd11+12];\n"
    "	add.s32 	%r22, %r21, %r6;\n"
    "	ld.shared.f32 	%f18, [%rd12+0];\n"
    "	mov.f32 	%f19, %f8;\n"
    "	sub.f32 	%f20, %f19, %f18;\n"
    "	mov.f32 	%f21, %f20;\n"
    "	mul.f32 	%f22, %f14, %f21;\n"
    "	cvt.rni.f32.f32 	%f23, %f22;\n"
    "	mul.f32 	%f24, %f13, %f23;\n"
    "	sub.f32 	%f25, %f20, %f24;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f27, 0f00000000;    	// 0\n"
    "	mad.f32 	%f28, %f25, %f25, %f27;\n"
    "	ld.shared.f32 	%f29, [%rd12+4];\n"
    "	mov.f32 	%f30, %f10;\n"
    "	sub.f32 	%f31, %f30, %f29;\n"
    "	mov.f32 	%f32, %f31;\n"
    "	mov.f32 	%f33, %f32;\n"
    "	mul.f32 	%f34, %f14, %f32;\n"
    "	cvt.rni.f32.f32 	%f35, %f34;\n"
    "	mul.f32 	%f36, %f13, %f35;\n"
    "	sub.f32 	%f37, %f31, %f36;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f39, %f37, %f37, %f28;\n"
    "	ld.shared.f32 	%f40, [%rd12+8];\n"
    "	mov.f32 	%f41, %f12;\n"
    "	sub.f32 	%f42, %f41, %f40;\n"
    "	mov.f32 	%f43, %f42;\n"
    "	mul.f32 	%f44, %f42, %f14;\n"
    "	cvt.rni.f32.f32 	%f45, %f44;\n"
    "	mul.f32 	%f46, %f13, %f45;\n"
    "	sub.f32 	%f47, %f42, %f46;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f39;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd13, %r22;\n"
    "	mul.wide.s32 	%rd14, %r22, 24;\n"
    "	add.u64 	%rd15, %rd10, %rd14;\n"
    "	ld.const.f32 	%f51, [%rd15+8];\n"
    "	ld.const.f32 	%f52, [%rd15+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f55, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f56, %f54, %f55;\n"
    "	cvt.rzi.f32.f32 	%f57, %f56;\n"
    "	mov.f32 	%f58, %f57;\n"
    "	mov.f32 	%f59, 0fbf317200;    	// -0.693146\n"
    "	mov.f32 	%f60, %f59;\n"
    "	mov.f32 	%f61, %f54;\n"
    "	mad.f32 %f62, %f58, %f60, %f61;\n"
    "	mov.f32 	%f63, %f62;\n"
    "	mov.f32 	%f64, %f57;\n"
    "	mov.f32 	%f65, 0fb5bfbe8e;    	// -1.42861e-06\n"
    "	mov.f32 	%f66, %f65;\n"
    "	mov.f32 	%f67, %f63;\n"
    "	mad.f32 %f68, %f64, %f66, %f67;\n"
    "	mov.f32 	%f63, %f68;\n"
    "	.loc	3	669	0\n"
    "	mov.f32 	%f69, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f69;\n"
    "	mov.f32 	%f71, 0f00000000;    	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f71;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd15+12];\n"
    "	ld.const.f32 	%f76, [%rd15+0];\n"
    "	ld.const.f32 	%f77, [%rd15+16];\n"
    "	ld.const.f32 	%f78, [%rd15+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f81, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f82, %f75, %f81;\n"
    "	mov.f32 	%f83, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f83;\n"
    "	mov.f32 	%f85, 0f41000000;    	// 8\n"
    "	mul.f32 	%f86, %f77, %f85;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f90, 0f42d20000;    	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f90;\n"
    "	mov.f32 	%f91, 0fc2d20000;    	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f91;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f94, 0f00000000;    	// 0\n"
    "	selp.f32 	%f95, %f94, %f93, %p4;\n"
    "	mov.f32 	%f96, 0f7f800000;    	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f96, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f100, %f73, %f99;\n"
    "	sub.f32 	%f101, %f100, %f88;\n"
    "	mul.f32 	%f102, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f102;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f105, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f105, %f104, %p2;\n"
    "	mov.f32 	%f107, %f2;\n"
    "	mov.f32 	%f108, %f26;\n"
    "	mad.f32 	%f109, %f108, %f106, %f107;\n"
    "	mov.f32 	%f2, %f109;\n"
    "	mov.f32 	%f110, %f4;\n"
    "	mov.f32 	%f111, %f38;\n"
    "	mad.f32 	%f112, %f111, %f106, %f110;\n"
    "	mov.f32 	%f4, %f112;\n"
    "	mov.f32 	%f113, %f6;\n"
    "	mov.f32 	%f114, %f48;\n"
    "	mad.f32 	%f115, %f114, %f106, %f113;\n"
    "	mov.f32 	%f6, %f115;\n"
    "	.loc	3	670	0\n"
    "	ld.shared.s32 	%r23, [%rd11+28];\n"
    "	add.s32 	%r24, %r23, %r6;\n"
    "	ld.shared.f32 	%f116, [%rd11+16];\n"
    "	mov.f32 	%f117, %f8;\n"
    "	sub.f32 	%f118, %f117, %f116;\n"
    "	mov.f32 	%f119, %f118;\n"
    "	mul.f32 	%f120, %f14, %f119;\n"
    "	cvt.rni.f32.f32 	%f121, %f120;\n"
    "	mul.f32 	%f122, %f13, %f121;\n"
    "	sub.f32 	%f123, %f118, %f122;\n"
    "	mov.f32 	%f124, %f123;\n"
    "	mov.f32 	%f125, 0f00000000;   	// 0\n"
    "	mad.f32 	%f126, %f123, %f123, %f125;\n"
    "	ld.shared.f32 	%f127, [%rd11+20];\n"
    "	mov.f32 	%f128, %f10;\n"
    "	sub.f32 	%f129, %f128, %f127;\n"
    "	mov.f32 	%f130, %f129;\n"
    "	mov.f32 	%f131, %f130;\n"
    "	mul.f32 	%f132, %f14, %f130;\n"
    "	cvt.rni.f32.f32 	%f133, %f132;\n"
    "	mul.f32 	%f134, %f13, %f133;\n"
    "	sub.f32 	%f135, %f129, %f134;\n"
    "	mov.f32 	%f136, %f135;\n"
    "	mad.f32 	%f137, %f135, %f135, %f126;\n"
    "	ld.shared.f32 	%f138, [%rd11+24];\n"
    "	mov.f32 	%f139, %f12;\n"
    "	sub.f32 	%f140, %f139, %f138;\n"
    "	mov.f32 	%f141, %f140;\n"
    "	mul.f32 	%f142, %f140, %f14;\n"
    "	cvt.rni.f32.f32 	%f143, %f142;\n"
    "	mul.f32 	%f144, %f13, %f143;\n"
    "	sub.f32 	%f145, %f140, %f144;\n"
    "	mov.f32 	%f146, %f145;\n"
    "	mad.f32 	%f147, %f145, %f145, %f137;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f148, %f147;\n"
    "	cvt.s64.s32 	%rd16, %r24;\n"
    "	mul.wide.s32 	%rd17, %r24, 24;\n"
    "	add.u64 	%rd18, %rd10, %rd17;\n"
    "	ld.const.f32 	%f149, [%rd18+8];\n"
    "	ld.const.f32 	%f150, [%rd18+4];\n"
    "	sub.f32 	%f151, %f150, %f148;\n"
    "	mul.f32 	%f152, %f149, %f151;\n"
    "	mov.f32 	%f153, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f154, %f152, %f153;\n"
    "	cvt.rzi.f32.f32 	%f155, %f154;\n"
    "	mov.f32 	%f156, %f155;\n"
    "	mov.f32 	%f157, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f158, %f157;\n"
    "	mov.f32 	%f159, %f152;\n"
    "	mad.f32 %f160, %f156, %f158, %f159;\n"
    "	mov.f32 	%f63, %f160;\n"
    "	mov.f32 	%f161, %f155;\n"
    "	mov.f32 	%f162, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f163, %f162;\n"
    "	mov.f32 	%f164, %f63;\n"
    "	mad.f32 %f165, %f161, %f163, %f164;\n"
    "	mov.f32 	%f63, %f165;\n"
    "	.loc	3	670	0\n"
    "	mov.f32 	%f166, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f166;\n"
    "	mov.f32 	%f167, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p5, %f147, %f167;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f168, %f148;\n"
    "	mul.f32 	%f169, %f168, %f168;\n"
    "	ld.const.f32 	%f170, [%rd18+12];\n"
    "	ld.const.f32 	%f171, [%rd18+0];\n"
    "	ld.const.f32 	%f172, [%rd18+16];\n"
    "	ld.const.f32 	%f173, [%rd18+20];\n"
    "	mul.f32 	%f174, %f169, %f169;\n"
    "	mul.f32 	%f175, %f168, %f169;\n"
    "	mov.f32 	%f176, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f177, %f170, %f176;\n"
    "	mov.f32 	%f178, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f179, %f171, %f178;\n"
    "	mov.f32 	%f180, 0f41000000;   	// 8\n"
    "	mul.f32 	%f181, %f172, %f180;\n"
    "	mul.f32 	%f182, %f174, %f174;\n"
    "	mul.f32 	%f183, %f177, %f182;\n"
    "	mul.f32 	%f184, %f181, %f182;\n"
    "	mov.f32 	%f185, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p6, %f152, %f185;\n"
    "	mov.f32 	%f186, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p7, %f152, %f186;\n"
    "	ex2.approx.f32 	%f187, %f155;\n"
    "	mul.f32 	%f188, %f72, %f187;\n"
    "	mov.f32 	%f189, 0f00000000;   	// 0\n"
    "	selp.f32 	%f190, %f189, %f188, %p7;\n"
    "	mov.f32 	%f191, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f192, %f191, %f190, %p6;\n"
    "	mul.f32 	%f193, %f179, %f192;\n"
    "	mul.f32 	%f194, %f149, %f193;\n"
    "	mul.f32 	%f195, %f168, %f194;\n"
    "	sub.f32 	%f196, %f195, %f183;\n"
    "	mul.f32 	%f197, %f169, %f184;\n"
    "	sub.f32 	%f198, %f196, %f197;\n"
    "	mad.f32 	%f199, %f173, %f175, %f198;\n"
    "	mov.f32 	%f200, 0f00000000;   	// 0\n"
    "	selp.f32 	%f201, %f200, %f199, %p5;\n"
    "	mov.f32 	%f202, %f2;\n"
    "	mov.f32 	%f203, %f124;\n"
    "	mad.f32 	%f204, %f203, %f201, %f202;\n"
    "	mov.f32 	%f2, %f204;\n"
    "	mov.f32 	%f205, %f4;\n"
    "	mov.f32 	%f206, %f136;\n"
    "	mad.f32 	%f207, %f206, %f201, %f205;\n"
    "	mov.f32 	%f4, %f207;\n"
    "	mov.f32 	%f208, %f6;\n"
    "	mov.f32 	%f209, %f146;\n"
    "	mad.f32 	%f210, %f209, %f201, %f208;\n"
    "	mov.f32 	%f6, %f210;\n"
    "	.loc	3	671	0\n"
    "	ld.shared.s32 	%r25, [%rd11+44];\n"
    "	add.s32 	%r26, %r25, %r6;\n"
    "	ld.shared.f32 	%f211, [%rd11+32];\n"
    "	mov.f32 	%f212, %f8;\n"
    "	sub.f32 	%f213, %f212, %f211;\n"
    "	mov.f32 	%f214, %f213;\n"
    "	mul.f32 	%f215, %f14, %f214;\n"
    "	cvt.rni.f32.f32 	%f216, %f215;\n"
    "	mul.f32 	%f217, %f13, %f216;\n"
    "	sub.f32 	%f218, %f213, %f217;\n"
    "	mov.f32 	%f219, %f218;\n"
    "	mov.f32 	%f220, 0f00000000;   	// 0\n"
    "	mad.f32 	%f221, %f218, %f218, %f220;\n"
    "	ld.shared.f32 	%f222, [%rd11+36];\n"
    "	mov.f32 	%f223, %f10;\n"
    "	sub.f32 	%f224, %f223, %f222;\n"
    "	mov.f32 	%f225, %f224;\n"
    "	mov.f32 	%f226, %f225;\n"
    "	mul.f32 	%f227, %f14, %f225;\n"
    "	cvt.rni.f32.f32 	%f228, %f227;\n"
    "	mul.f32 	%f229, %f13, %f228;\n"
    "	sub.f32 	%f230, %f224, %f229;\n"
    "	mov.f32 	%f231, %f230;\n"
    "	mad.f32 	%f232, %f230, %f230, %f221;\n"
    "	ld.shared.f32 	%f233, [%rd11+40];\n"
    "	mov.f32 	%f234, %f12;\n"
    "	sub.f32 	%f235, %f234, %f233;\n"
    "	mov.f32 	%f236, %f235;\n"
    "	mul.f32 	%f237, %f235, %f14;\n"
    "	cvt.rni.f32.f32 	%f238, %f237;\n"
    "	mul.f32 	%f239, %f13, %f238;\n"
    "	sub.f32 	%f240, %f235, %f239;\n"
    "	mov.f32 	%f241, %f240;\n"
    "	mad.f32 	%f242, %f240, %f240, %f232;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f243, %f242;\n"
    "	cvt.s64.s32 	%rd19, %r26;\n"
    "	mul.wide.s32 	%rd20, %r26, 24;\n"
    "	add.u64 	%rd21, %rd10, %rd20;\n"
    "	ld.const.f32 	%f244, [%rd21+8];\n"
    "	ld.const.f32 	%f245, [%rd21+4];\n"
    "	sub.f32 	%f246, %f245, %f243;\n"
    "	mul.f32 	%f247, %f244, %f246;\n"
    "	mov.f32 	%f248, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f249, %f247, %f248;\n"
    "	cvt.rzi.f32.f32 	%f250, %f249;\n"
    "	mov.f32 	%f251, %f250;\n"
    "	mov.f32 	%f252, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f253, %f252;\n"
    "	mov.f32 	%f254, %f247;\n"
    "	mad.f32 %f255, %f251, %f253, %f254;\n"
    "	mov.f32 	%f63, %f255;\n"
    "	mov.f32 	%f256, %f250;\n"
    "	mov.f32 	%f257, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f258, %f257;\n"
    "	mov.f32 	%f259, %f63;\n"
    "	mad.f32 %f260, %f256, %f258, %f259;\n"
    "	mov.f32 	%f63, %f260;\n"
    "	.loc	3	671	0\n"
    "	mov.f32 	%f261, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f261;\n"
    "	mov.f32 	%f262, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p8, %f242, %f262;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f263, %f243;\n"
    "	mul.f32 	%f264, %f263, %f263;\n"
    "	ld.const.f32 	%f265, [%rd21+12];\n"
    "	ld.const.f32 	%f266, [%rd21+0];\n"
    "	ld.const.f32 	%f267, [%rd21+16];\n"
    "	ld.const.f32 	%f268, [%rd21+20];\n"
    "	mul.f32 	%f269, %f264, %f264;\n"
    "	mul.f32 	%f270, %f263, %f264;\n"
    "	mov.f32 	%f271, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f272, %f265, %f271;\n"
    "	mov.f32 	%f273, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f274, %f266, %f273;\n"
    "	mov.f32 	%f275, 0f41000000;   	// 8\n"
    "	mul.f32 	%f276, %f267, %f275;\n"
    "	mul.f32 	%f277, %f269, %f269;\n"
    "	mul.f32 	%f278, %f272, %f277;\n"
    "	mul.f32 	%f279, %f276, %f277;\n"
    "	mov.f32 	%f280, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p9, %f247, %f280;\n"
    "	mov.f32 	%f281, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p10, %f247, %f281;\n"
    "	ex2.approx.f32 	%f282, %f250;\n"
    "	mul.f32 	%f283, %f72, %f282;\n"
    "	mov.f32 	%f284, 0f00000000;   	// 0\n"
    "	selp.f32 	%f285, %f284, %f283, %p10;\n"
    "	mov.f32 	%f286, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f287, %f286, %f285, %p9;\n"
    "	mul.f32 	%f288, %f274, %f287;\n"
    "	mul.f32 	%f289, %f244, %f288;\n"
    "	mul.f32 	%f290, %f263, %f289;\n"
    "	sub.f32 	%f291, %f290, %f278;\n"
    "	mul.f32 	%f292, %f264, %f279;\n"
    "	sub.f32 	%f293, %f291, %f292;\n"
    "	mad.f32 	%f294, %f268, %f270, %f293;\n"
    "	mov.f32 	%f295, 0f00000000;   	// 0\n"
    "	selp.f32 	%f296, %f295, %f294, %p8;\n"
    "	mov.f32 	%f297, %f2;\n"
    "	mov.f32 	%f298, %f219;\n"
    "	mad.f32 	%f299, %f298, %f296, %f297;\n"
    "	mov.f32 	%f2, %f299;\n"
    "	mov.f32 	%f300, %f4;\n"
    "	mov.f32 	%f301, %f231;\n"
    "	mad.f32 	%f302, %f301, %f296, %f300;\n"
    "	mov.f32 	%f4, %f302;\n"
    "	mov.f32 	%f303, %f6;\n"
    "	mov.f32 	%f304, %f241;\n"
    "	mad.f32 	%f305, %f304, %f296, %f303;\n"
    "	mov.f32 	%f6, %f305;\n"
    "	.loc	3	672	0\n"
    "	ld.shared.s32 	%r27, [%rd11+60];\n"
    "	add.s32 	%r28, %r27, %r6;\n"
    "	ld.shared.f32 	%f306, [%rd11+48];\n"
    "	mov.f32 	%f307, %f8;\n"
    "	sub.f32 	%f308, %f307, %f306;\n"
    "	mov.f32 	%f309, %f308;\n"
    "	mul.f32 	%f310, %f14, %f309;\n"
    "	cvt.rni.f32.f32 	%f311, %f310;\n"
    "	mul.f32 	%f312, %f13, %f311;\n"
    "	sub.f32 	%f313, %f308, %f312;\n"
    "	mov.f32 	%f314, %f313;\n"
    "	mov.f32 	%f315, 0f00000000;   	// 0\n"
    "	mad.f32 	%f316, %f313, %f313, %f315;\n"
    "	ld.shared.f32 	%f317, [%rd11+52];\n"
    "	mov.f32 	%f318, %f10;\n"
    "	sub.f32 	%f319, %f318, %f317;\n"
    "	mov.f32 	%f320, %f319;\n"
    "	mov.f32 	%f321, %f320;\n"
    "	mul.f32 	%f322, %f14, %f320;\n"
    "	cvt.rni.f32.f32 	%f323, %f322;\n"
    "	mul.f32 	%f324, %f13, %f323;\n"
    "	sub.f32 	%f325, %f319, %f324;\n"
    "	mov.f32 	%f326, %f325;\n"
    "	mad.f32 	%f327, %f325, %f325, %f316;\n"
    "	ld.shared.f32 	%f328, [%rd11+56];\n"
    "	mov.f32 	%f329, %f12;\n"
    "	sub.f32 	%f330, %f329, %f328;\n"
    "	mov.f32 	%f331, %f330;\n"
    "	mul.f32 	%f332, %f330, %f14;\n"
    "	cvt.rni.f32.f32 	%f333, %f332;\n"
    "	mul.f32 	%f334, %f13, %f333;\n"
    "	sub.f32 	%f335, %f330, %f334;\n"
    "	mov.f32 	%f336, %f335;\n"
    "	mad.f32 	%f337, %f335, %f335, %f327;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f338, %f337;\n"
    "	cvt.s64.s32 	%rd22, %r28;\n"
    "	mul.wide.s32 	%rd23, %r28, 24;\n"
    "	add.u64 	%rd24, %rd10, %rd23;\n"
    "	ld.const.f32 	%f339, [%rd24+8];\n"
    "	ld.const.f32 	%f340, [%rd24+4];\n"
    "	sub.f32 	%f341, %f340, %f338;\n"
    "	mul.f32 	%f342, %f339, %f341;\n"
    "	mov.f32 	%f343, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f344, %f342, %f343;\n"
    "	cvt.rzi.f32.f32 	%f345, %f344;\n"
    "	mov.f32 	%f346, %f345;\n"
    "	mov.f32 	%f347, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f348, %f347;\n"
    "	mov.f32 	%f349, %f342;\n"
    "	mad.f32 %f350, %f346, %f348, %f349;\n"
    "	mov.f32 	%f63, %f350;\n"
    "	mov.f32 	%f351, %f345;\n"
    "	mov.f32 	%f352, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f353, %f352;\n"
    "	mov.f32 	%f354, %f63;\n"
    "	mad.f32 %f355, %f351, %f353, %f354;\n"
    "	mov.f32 	%f63, %f355;\n"
    "	.loc	3	672	0\n"
    "	mov.f32 	%f356, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f356;\n"
    "	mov.f32 	%f357, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p11, %f337, %f357;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f358, %f338;\n"
    "	mul.f32 	%f359, %f358, %f358;\n"
    "	ld.const.f32 	%f360, [%rd24+12];\n"
    "	ld.const.f32 	%f361, [%rd24+0];\n"
    "	ld.const.f32 	%f362, [%rd24+16];\n"
    "	ld.const.f32 	%f363, [%rd24+20];\n"
    "	mul.f32 	%f364, %f359, %f359;\n"
    "	mul.f32 	%f365, %f358, %f359;\n"
    "	mov.f32 	%f366, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f367, %f360, %f366;\n"
    "	mov.f32 	%f368, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f369, %f361, %f368;\n"
    "	mov.f32 	%f370, 0f41000000;   	// 8\n"
    "	mul.f32 	%f371, %f362, %f370;\n"
    "	mul.f32 	%f372, %f364, %f364;\n"
    "	mul.f32 	%f373, %f367, %f372;\n"
    "	mul.f32 	%f374, %f371, %f372;\n"
    "	mov.f32 	%f375, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p12, %f342, %f375;\n"
    "	mov.f32 	%f376, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p13, %f342, %f376;\n"
    "	ex2.approx.f32 	%f377, %f345;\n"
    "	mul.f32 	%f378, %f72, %f377;\n"
    "	mov.f32 	%f379, 0f00000000;   	// 0\n"
    "	selp.f32 	%f380, %f379, %f378, %p13;\n"
    "	mov.f32 	%f381, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f382, %f381, %f380, %p12;\n"
    "	mul.f32 	%f383, %f369, %f382;\n"
    "	mul.f32 	%f384, %f339, %f383;\n"
    "	mul.f32 	%f385, %f358, %f384;\n"
    "	sub.f32 	%f386, %f385, %f373;\n"
    "	mul.f32 	%f387, %f359, %f374;\n"
    "	sub.f32 	%f388, %f386, %f387;\n"
    "	mad.f32 	%f389, %f363, %f365, %f388;\n"
    "	mov.f32 	%f390, 0f00000000;   	// 0\n"
    "	selp.f32 	%f391, %f390, %f389, %p11;\n"
    "	mov.f32 	%f392, %f2;\n"
    "	mov.f32 	%f393, %f314;\n"
    "	mad.f32 	%f394, %f393, %f391, %f392;\n"
    "	mov.f32 	%f2, %f394;\n"
    "	mov.f32 	%f395, %f4;\n"
    "	mov.f32 	%f396, %f326;\n"
    "	mad.f32 	%f397, %f396, %f391, %f395;\n"
    "	mov.f32 	%f4, %f397;\n"
    "	mov.f32 	%f398, %f6;\n"
    "	mov.f32 	%f399, %f336;\n"
    "	mad.f32 	%f400, %f399, %f391, %f398;\n"
    "	mov.f32 	%f6, %f400;\n"
    "	.loc	3	673	0\n"
    "	ld.shared.s32 	%r29, [%rd11+76];\n"
    "	add.s32 	%r30, %r29, %r6;\n"
    "	ld.shared.f32 	%f401, [%rd11+64];\n"
    "	mov.f32 	%f402, %f8;\n"
    "	sub.f32 	%f403, %f402, %f401;\n"
    "	mov.f32 	%f404, %f403;\n"
    "	mul.f32 	%f405, %f14, %f404;\n"
    "	cvt.rni.f32.f32 	%f406, %f405;\n"
    "	mul.f32 	%f407, %f13, %f406;\n"
    "	sub.f32 	%f408, %f403, %f407;\n"
    "	mov.f32 	%f409, %f408;\n"
    "	mov.f32 	%f410, 0f00000000;   	// 0\n"
    "	mad.f32 	%f411, %f408, %f408, %f410;\n"
    "	ld.shared.f32 	%f412, [%rd11+68];\n"
    "	mov.f32 	%f413, %f10;\n"
    "	sub.f32 	%f414, %f413, %f412;\n"
    "	mov.f32 	%f415, %f414;\n"
    "	mov.f32 	%f416, %f415;\n"
    "	mul.f32 	%f417, %f14, %f415;\n"
    "	cvt.rni.f32.f32 	%f418, %f417;\n"
    "	mul.f32 	%f419, %f13, %f418;\n"
    "	sub.f32 	%f420, %f414, %f419;\n"
    "	mov.f32 	%f421, %f420;\n"
    "	mad.f32 	%f422, %f420, %f420, %f411;\n"
    "	ld.shared.f32 	%f423, [%rd11+72];\n"
    "	mov.f32 	%f424, %f12;\n"
    "	sub.f32 	%f425, %f424, %f423;\n"
    "	mov.f32 	%f426, %f425;\n"
    "	mul.f32 	%f427, %f425, %f14;\n"
    "	cvt.rni.f32.f32 	%f428, %f427;\n"
    "	mul.f32 	%f429, %f13, %f428;\n"
    "	sub.f32 	%f430, %f425, %f429;\n"
    "	mov.f32 	%f431, %f430;\n"
    "	mad.f32 	%f432, %f430, %f430, %f422;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f433, %f432;\n"
    "	cvt.s64.s32 	%rd25, %r30;\n"
    "	mul.wide.s32 	%rd26, %r30, 24;\n"
    "	add.u64 	%rd27, %rd10, %rd26;\n"
    "	ld.const.f32 	%f434, [%rd27+8];\n"
    "	ld.const.f32 	%f435, [%rd27+4];\n"
    "	sub.f32 	%f436, %f435, %f433;\n"
    "	mul.f32 	%f437, %f434, %f436;\n"
    "	mov.f32 	%f438, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f439, %f437, %f438;\n"
    "	cvt.rzi.f32.f32 	%f440, %f439;\n"
    "	mov.f32 	%f441, %f440;\n"
    "	mov.f32 	%f442, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f443, %f442;\n"
    "	mov.f32 	%f444, %f437;\n"
    "	mad.f32 %f445, %f441, %f443, %f444;\n"
    "	mov.f32 	%f63, %f445;\n"
    "	mov.f32 	%f446, %f440;\n"
    "	mov.f32 	%f447, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f448, %f447;\n"
    "	mov.f32 	%f449, %f63;\n"
    "	mad.f32 %f450, %f446, %f448, %f449;\n"
    "	mov.f32 	%f63, %f450;\n"
    "	.loc	3	673	0\n"
    "	mov.f32 	%f451, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f451;\n"
    "	mov.f32 	%f452, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p14, %f432, %f452;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f453, %f433;\n"
    "	mul.f32 	%f454, %f453, %f453;\n"
    "	ld.const.f32 	%f455, [%rd27+12];\n"
    "	ld.const.f32 	%f456, [%rd27+0];\n"
    "	ld.const.f32 	%f457, [%rd27+16];\n"
    "	ld.const.f32 	%f458, [%rd27+20];\n"
    "	mul.f32 	%f459, %f454, %f454;\n"
    "	mul.f32 	%f460, %f453, %f454;\n"
    "	mov.f32 	%f461, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f462, %f455, %f461;\n"
    "	mov.f32 	%f463, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f464, %f456, %f463;\n"
    "	mov.f32 	%f465, 0f41000000;   	// 8\n"
    "	mul.f32 	%f466, %f457, %f465;\n"
    "	mul.f32 	%f467, %f459, %f459;\n"
    "	mul.f32 	%f468, %f462, %f467;\n"
    "	mul.f32 	%f469, %f466, %f467;\n"
    "	mov.f32 	%f470, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p15, %f437, %f470;\n"
    "	mov.f32 	%f471, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p16, %f437, %f471;\n"
    "	ex2.approx.f32 	%f472, %f440;\n"
    "	mul.f32 	%f473, %f72, %f472;\n"
    "	mov.f32 	%f474, 0f00000000;   	// 0\n"
    "	selp.f32 	%f475, %f474, %f473, %p16;\n"
    "	mov.f32 	%f476, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f477, %f476, %f475, %p15;\n"
    "	mul.f32 	%f478, %f464, %f477;\n"
    "	mul.f32 	%f479, %f434, %f478;\n"
    "	mul.f32 	%f480, %f453, %f479;\n"
    "	sub.f32 	%f481, %f480, %f468;\n"
    "	mul.f32 	%f482, %f454, %f469;\n"
    "	sub.f32 	%f483, %f481, %f482;\n"
    "	mad.f32 	%f484, %f458, %f460, %f483;\n"
    "	mov.f32 	%f485, 0f00000000;   	// 0\n"
    "	selp.f32 	%f486, %f485, %f484, %p14;\n"
    "	mov.f32 	%f487, %f2;\n"
    "	mov.f32 	%f488, %f409;\n"
    "	mad.f32 	%f489, %f488, %f486, %f487;\n"
    "	mov.f32 	%f2, %f489;\n"
    "	mov.f32 	%f490, %f4;\n"
    "	mov.f32 	%f491, %f421;\n"
    "	mad.f32 	%f492, %f491, %f486, %f490;\n"
    "	mov.f32 	%f4, %f492;\n"
    "	mov.f32 	%f493, %f6;\n"
    "	mov.f32 	%f494, %f431;\n"
    "	mad.f32 	%f495, %f494, %f486, %f493;\n"
    "	mov.f32 	%f6, %f495;\n"
    "	.loc	3	674	0\n"
    "	ld.shared.s32 	%r31, [%rd11+92];\n"
    "	add.s32 	%r32, %r31, %r6;\n"
    "	ld.shared.f32 	%f496, [%rd11+80];\n"
    "	mov.f32 	%f497, %f8;\n"
    "	sub.f32 	%f498, %f497, %f496;\n"
    "	mov.f32 	%f499, %f498;\n"
    "	mul.f32 	%f500, %f14, %f499;\n"
    "	cvt.rni.f32.f32 	%f501, %f500;\n"
    "	mul.f32 	%f502, %f13, %f501;\n"
    "	sub.f32 	%f503, %f498, %f502;\n"
    "	mov.f32 	%f504, %f503;\n"
    "	mov.f32 	%f505, 0f00000000;   	// 0\n"
    "	mad.f32 	%f506, %f503, %f503, %f505;\n"
    "	ld.shared.f32 	%f507, [%rd11+84];\n"
    "	mov.f32 	%f508, %f10;\n"
    "	sub.f32 	%f509, %f508, %f507;\n"
    "	mov.f32 	%f510, %f509;\n"
    "	mov.f32 	%f511, %f510;\n"
    "	mul.f32 	%f512, %f14, %f510;\n"
    "	cvt.rni.f32.f32 	%f513, %f512;\n"
    "	mul.f32 	%f514, %f13, %f513;\n"
    "	sub.f32 	%f515, %f509, %f514;\n"
    "	mov.f32 	%f516, %f515;\n"
    "	mad.f32 	%f517, %f515, %f515, %f506;\n"
    "	ld.shared.f32 	%f518, [%rd11+88];\n"
    "	mov.f32 	%f519, %f12;\n"
    "	sub.f32 	%f520, %f519, %f518;\n"
    "	mov.f32 	%f521, %f520;\n"
    "	mul.f32 	%f522, %f520, %f14;\n"
    "	cvt.rni.f32.f32 	%f523, %f522;\n"
    "	mul.f32 	%f524, %f13, %f523;\n"
    "	sub.f32 	%f525, %f520, %f524;\n"
    "	mov.f32 	%f526, %f525;\n"
    "	mad.f32 	%f527, %f525, %f525, %f517;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f528, %f527;\n"
    "	cvt.s64.s32 	%rd28, %r32;\n"
    "	mul.wide.s32 	%rd29, %r32, 24;\n"
    "	add.u64 	%rd30, %rd10, %rd29;\n"
    "	ld.const.f32 	%f529, [%rd30+8];\n"
    "	ld.const.f32 	%f530, [%rd30+4];\n"
    "	sub.f32 	%f531, %f530, %f528;\n"
    "	mul.f32 	%f532, %f529, %f531;\n"
    "	mov.f32 	%f533, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f534, %f532, %f533;\n"
    "	cvt.rzi.f32.f32 	%f535, %f534;\n"
    "	mov.f32 	%f536, %f535;\n"
    "	mov.f32 	%f537, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f538, %f537;\n"
    "	mov.f32 	%f539, %f532;\n"
    "	mad.f32 %f540, %f536, %f538, %f539;\n"
    "	mov.f32 	%f63, %f540;\n"
    "	mov.f32 	%f541, %f535;\n"
    "	mov.f32 	%f542, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f543, %f542;\n"
    "	mov.f32 	%f544, %f63;\n"
    "	mad.f32 %f545, %f541, %f543, %f544;\n"
    "	mov.f32 	%f63, %f545;\n"
    "	.loc	3	674	0\n"
    "	mov.f32 	%f546, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f546;\n"
    "	mov.f32 	%f547, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p17, %f527, %f547;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f548, %f528;\n"
    "	mul.f32 	%f549, %f548, %f548;\n"
    "	ld.const.f32 	%f550, [%rd30+12];\n"
    "	ld.const.f32 	%f551, [%rd30+0];\n"
    "	ld.const.f32 	%f552, [%rd30+16];\n"
    "	ld.const.f32 	%f553, [%rd30+20];\n"
    "	mul.f32 	%f554, %f549, %f549;\n"
    "	mul.f32 	%f555, %f548, %f549;\n"
    "	mov.f32 	%f556, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f557, %f550, %f556;\n"
    "	mov.f32 	%f558, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f559, %f551, %f558;\n"
    "	mov.f32 	%f560, 0f41000000;   	// 8\n"
    "	mul.f32 	%f561, %f552, %f560;\n"
    "	mul.f32 	%f562, %f554, %f554;\n"
    "	mul.f32 	%f563, %f557, %f562;\n"
    "	mul.f32 	%f564, %f561, %f562;\n"
    "	mov.f32 	%f565, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p18, %f532, %f565;\n"
    "	mov.f32 	%f566, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p19, %f532, %f566;\n"
    "	ex2.approx.f32 	%f567, %f535;\n"
    "	mul.f32 	%f568, %f72, %f567;\n"
    "	mov.f32 	%f569, 0f00000000;   	// 0\n"
    "	selp.f32 	%f570, %f569, %f568, %p19;\n"
    "	mov.f32 	%f571, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f572, %f571, %f570, %p18;\n"
    "	mul.f32 	%f573, %f559, %f572;\n"
    "	mul.f32 	%f574, %f529, %f573;\n"
    "	mul.f32 	%f575, %f548, %f574;\n"
    "	sub.f32 	%f576, %f575, %f563;\n"
    "	mul.f32 	%f577, %f549, %f564;\n"
    "	sub.f32 	%f578, %f576, %f577;\n"
    "	mad.f32 	%f579, %f553, %f555, %f578;\n"
    "	mov.f32 	%f580, 0f00000000;   	// 0\n"
    "	selp.f32 	%f581, %f580, %f579, %p17;\n"
    "	mov.f32 	%f582, %f2;\n"
    "	mov.f32 	%f583, %f504;\n"
    "	mad.f32 	%f584, %f583, %f581, %f582;\n"
    "	mov.f32 	%f2, %f584;\n"
    "	mov.f32 	%f585, %f4;\n"
    "	mov.f32 	%f586, %f516;\n"
    "	mad.f32 	%f587, %f586, %f581, %f585;\n"
    "	mov.f32 	%f4, %f587;\n"
    "	mov.f32 	%f588, %f6;\n"
    "	mov.f32 	%f589, %f526;\n"
    "	mad.f32 	%f590, %f589, %f581, %f588;\n"
    "	mov.f32 	%f6, %f590;\n"
    "	.loc	3	675	0\n"
    "	ld.shared.s32 	%r33, [%rd11+108];\n"
    "	add.s32 	%r34, %r33, %r6;\n"
    "	ld.shared.f32 	%f591, [%rd11+96];\n"
    "	mov.f32 	%f592, %f8;\n"
    "	sub.f32 	%f593, %f592, %f591;\n"
    "	mov.f32 	%f594, %f593;\n"
    "	mul.f32 	%f595, %f14, %f594;\n"
    "	cvt.rni.f32.f32 	%f596, %f595;\n"
    "	mul.f32 	%f597, %f13, %f596;\n"
    "	sub.f32 	%f598, %f593, %f597;\n"
    "	mov.f32 	%f599, %f598;\n"
    "	mov.f32 	%f600, 0f00000000;   	// 0\n"
    "	mad.f32 	%f601, %f598, %f598, %f600;\n"
    "	ld.shared.f32 	%f602, [%rd11+100];\n"
    "	mov.f32 	%f603, %f10;\n"
    "	sub.f32 	%f604, %f603, %f602;\n"
    "	mov.f32 	%f605, %f604;\n"
    "	mov.f32 	%f606, %f605;\n"
    "	mul.f32 	%f607, %f14, %f605;\n"
    "	cvt.rni.f32.f32 	%f608, %f607;\n"
    "	mul.f32 	%f609, %f13, %f608;\n"
    "	sub.f32 	%f610, %f604, %f609;\n"
    "	mov.f32 	%f611, %f610;\n"
    "	mad.f32 	%f612, %f610, %f610, %f601;\n"
    "	ld.shared.f32 	%f613, [%rd11+104];\n"
    "	mov.f32 	%f614, %f12;\n"
    "	sub.f32 	%f615, %f614, %f613;\n"
    "	mov.f32 	%f616, %f615;\n"
    "	mul.f32 	%f617, %f615, %f14;\n"
    "	cvt.rni.f32.f32 	%f618, %f617;\n"
    "	mul.f32 	%f619, %f13, %f618;\n"
    "	sub.f32 	%f620, %f615, %f619;\n"
    "	mov.f32 	%f621, %f620;\n"
    "	mad.f32 	%f622, %f620, %f620, %f612;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f623, %f622;\n"
    "	cvt.s64.s32 	%rd31, %r34;\n"
    "	mul.wide.s32 	%rd32, %r34, 24;\n"
    "	add.u64 	%rd33, %rd10, %rd32;\n"
    "	ld.const.f32 	%f624, [%rd33+8];\n"
    "	ld.const.f32 	%f625, [%rd33+4];\n"
    "	sub.f32 	%f626, %f625, %f623;\n"
    "	mul.f32 	%f627, %f624, %f626;\n"
    "	mov.f32 	%f628, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f629, %f627, %f628;\n"
    "	cvt.rzi.f32.f32 	%f630, %f629;\n"
    "	mov.f32 	%f631, %f630;\n"
    "	mov.f32 	%f632, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f633, %f632;\n"
    "	mov.f32 	%f634, %f627;\n"
    "	mad.f32 %f635, %f631, %f633, %f634;\n"
    "	mov.f32 	%f63, %f635;\n"
    "	mov.f32 	%f636, %f630;\n"
    "	mov.f32 	%f637, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f638, %f637;\n"
    "	mov.f32 	%f639, %f63;\n"
    "	mad.f32 %f640, %f636, %f638, %f639;\n"
    "	mov.f32 	%f63, %f640;\n"
    "	.loc	3	675	0\n"
    "	mov.f32 	%f641, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f641;\n"
    "	mov.f32 	%f642, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p20, %f622, %f642;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f643, %f623;\n"
    "	mul.f32 	%f644, %f643, %f643;\n"
    "	ld.const.f32 	%f645, [%rd33+12];\n"
    "	ld.const.f32 	%f646, [%rd33+0];\n"
    "	ld.const.f32 	%f647, [%rd33+16];\n"
    "	ld.const.f32 	%f648, [%rd33+20];\n"
    "	mul.f32 	%f649, %f644, %f644;\n"
    "	mul.f32 	%f650, %f643, %f644;\n"
    "	mov.f32 	%f651, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f652, %f645, %f651;\n"
    "	mov.f32 	%f653, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f654, %f646, %f653;\n"
    "	mov.f32 	%f655, 0f41000000;   	// 8\n"
    "	mul.f32 	%f656, %f647, %f655;\n"
    "	mul.f32 	%f657, %f649, %f649;\n"
    "	mul.f32 	%f658, %f652, %f657;\n"
    "	mul.f32 	%f659, %f656, %f657;\n"
    "	mov.f32 	%f660, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p21, %f627, %f660;\n"
    "	mov.f32 	%f661, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p22, %f627, %f661;\n"
    "	ex2.approx.f32 	%f662, %f630;\n"
    "	mul.f32 	%f663, %f72, %f662;\n"
    "	mov.f32 	%f664, 0f00000000;   	// 0\n"
    "	selp.f32 	%f665, %f664, %f663, %p22;\n"
    "	mov.f32 	%f666, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f667, %f666, %f665, %p21;\n"
    "	mul.f32 	%f668, %f654, %f667;\n"
    "	mul.f32 	%f669, %f624, %f668;\n"
    "	mul.f32 	%f670, %f643, %f669;\n"
    "	sub.f32 	%f671, %f670, %f658;\n"
    "	mul.f32 	%f672, %f644, %f659;\n"
    "	sub.f32 	%f673, %f671, %f672;\n"
    "	mad.f32 	%f674, %f648, %f650, %f673;\n"
    "	mov.f32 	%f675, 0f00000000;   	// 0\n"
    "	selp.f32 	%f676, %f675, %f674, %p20;\n"
    "	mov.f32 	%f677, %f2;\n"
    "	mov.f32 	%f678, %f599;\n"
    "	mad.f32 	%f679, %f678, %f676, %f677;\n"
    "	mov.f32 	%f2, %f679;\n"
    "	mov.f32 	%f680, %f4;\n"
    "	mov.f32 	%f681, %f611;\n"
    "	mad.f32 	%f682, %f681, %f676, %f680;\n"
    "	mov.f32 	%f4, %f682;\n"
    "	mov.f32 	%f683, %f6;\n"
    "	mov.f32 	%f684, %f621;\n"
    "	mad.f32 	%f685, %f684, %f676, %f683;\n"
    "	mov.f32 	%f6, %f685;\n"
    "	.loc	3	676	0\n"
    "	ld.shared.s32 	%r35, [%rd11+124];\n"
    "	add.s32 	%r36, %r35, %r6;\n"
    "	ld.shared.f32 	%f686, [%rd11+112];\n"
    "	mov.f32 	%f687, %f8;\n"
    "	sub.f32 	%f688, %f687, %f686;\n"
    "	mov.f32 	%f689, %f688;\n"
    "	mul.f32 	%f690, %f14, %f689;\n"
    "	cvt.rni.f32.f32 	%f691, %f690;\n"
    "	mul.f32 	%f692, %f13, %f691;\n"
    "	sub.f32 	%f693, %f688, %f692;\n"
    "	mov.f32 	%f694, %f693;\n"
    "	mov.f32 	%f695, 0f00000000;   	// 0\n"
    "	mad.f32 	%f696, %f693, %f693, %f695;\n"
    "	ld.shared.f32 	%f697, [%rd11+116];\n"
    "	mov.f32 	%f698, %f10;\n"
    "	sub.f32 	%f699, %f698, %f697;\n"
    "	mov.f32 	%f700, %f699;\n"
    "	mov.f32 	%f701, %f700;\n"
    "	mul.f32 	%f702, %f14, %f700;\n"
    "	cvt.rni.f32.f32 	%f703, %f702;\n"
    "	mul.f32 	%f704, %f13, %f703;\n"
    "	sub.f32 	%f705, %f699, %f704;\n"
    "	mov.f32 	%f706, %f705;\n"
    "	mad.f32 	%f707, %f705, %f705, %f696;\n"
    "	ld.shared.f32 	%f708, [%rd11+120];\n"
    "	mov.f32 	%f709, %f12;\n"
    "	sub.f32 	%f710, %f709, %f708;\n"
    "	mov.f32 	%f711, %f710;\n"
    "	mul.f32 	%f712, %f710, %f14;\n"
    "	cvt.rni.f32.f32 	%f713, %f712;\n"
    "	mul.f32 	%f714, %f13, %f713;\n"
    "	sub.f32 	%f715, %f710, %f714;\n"
    "	mov.f32 	%f716, %f715;\n"
    "	mad.f32 	%f717, %f715, %f715, %f707;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f718, %f717;\n"
    "	cvt.s64.s32 	%rd34, %r36;\n"
    "	mul.wide.s32 	%rd35, %r36, 24;\n"
    "	add.u64 	%rd36, %rd10, %rd35;\n"
    "	ld.const.f32 	%f719, [%rd36+8];\n"
    "	ld.const.f32 	%f720, [%rd36+4];\n"
    "	sub.f32 	%f721, %f720, %f718;\n"
    "	mul.f32 	%f722, %f719, %f721;\n"
    "	mov.f32 	%f723, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f724, %f722, %f723;\n"
    "	cvt.rzi.f32.f32 	%f725, %f724;\n"
    "	mov.f32 	%f726, %f725;\n"
    "	mov.f32 	%f727, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f728, %f727;\n"
    "	mov.f32 	%f729, %f722;\n"
    "	mad.f32 %f730, %f726, %f728, %f729;\n"
    "	mov.f32 	%f63, %f730;\n"
    "	mov.f32 	%f731, %f725;\n"
    "	mov.f32 	%f732, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f733, %f732;\n"
    "	mov.f32 	%f734, %f63;\n"
    "	mad.f32 %f735, %f731, %f733, %f734;\n"
    "	mov.f32 	%f63, %f735;\n"
    "	.loc	3	676	0\n"
    "	mov.f32 	%f736, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f736;\n"
    "	mov.f32 	%f737, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p23, %f717, %f737;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f738, %f718;\n"
    "	mul.f32 	%f739, %f738, %f738;\n"
    "	ld.const.f32 	%f740, [%rd36+12];\n"
    "	ld.const.f32 	%f741, [%rd36+0];\n"
    "	ld.const.f32 	%f742, [%rd36+16];\n"
    "	ld.const.f32 	%f743, [%rd36+20];\n"
    "	mul.f32 	%f744, %f739, %f739;\n"
    "	mul.f32 	%f745, %f738, %f739;\n"
    "	mov.f32 	%f746, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f747, %f740, %f746;\n"
    "	mov.f32 	%f748, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f749, %f741, %f748;\n"
    "	mov.f32 	%f750, 0f41000000;   	// 8\n"
    "	mul.f32 	%f751, %f742, %f750;\n"
    "	mul.f32 	%f752, %f744, %f744;\n"
    "	mul.f32 	%f753, %f747, %f752;\n"
    "	mul.f32 	%f754, %f751, %f752;\n"
    "	mov.f32 	%f755, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p24, %f722, %f755;\n"
    "	mov.f32 	%f756, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p25, %f722, %f756;\n"
    "	ex2.approx.f32 	%f757, %f725;\n"
    "	mul.f32 	%f758, %f72, %f757;\n"
    "	mov.f32 	%f759, 0f00000000;   	// 0\n"
    "	selp.f32 	%f760, %f759, %f758, %p25;\n"
    "	mov.f32 	%f761, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f762, %f761, %f760, %p24;\n"
    "	mul.f32 	%f763, %f749, %f762;\n"
    "	mul.f32 	%f764, %f719, %f763;\n"
    "	mul.f32 	%f765, %f738, %f764;\n"
    "	sub.f32 	%f766, %f765, %f753;\n"
    "	mul.f32 	%f767, %f739, %f754;\n"
    "	sub.f32 	%f768, %f766, %f767;\n"
    "	mad.f32 	%f769, %f743, %f745, %f768;\n"
    "	mov.f32 	%f770, 0f00000000;   	// 0\n"
    "	selp.f32 	%f771, %f770, %f769, %p23;\n"
    "	mov.f32 	%f772, %f2;\n"
    "	mov.f32 	%f773, %f694;\n"
    "	mad.f32 	%f774, %f773, %f771, %f772;\n"
    "	mov.f32 	%f2, %f774;\n"
    "	mov.f32 	%f775, %f4;\n"
    "	mov.f32 	%f776, %f706;\n"
    "	mad.f32 	%f777, %f776, %f771, %f775;\n"
    "	mov.f32 	%f4, %f777;\n"
    "	mov.f32 	%f778, %f6;\n"
    "	mov.f32 	%f779, %f716;\n"
    "	mad.f32 	%f780, %f779, %f771, %f778;\n"
    "	mov.f32 	%f6, %f780;\n"
    "	add.s32 	%r20, %r20, 8;\n"
    "	add.u64 	%rd12, %rd12, 128;\n"
    "	add.u64 	%rd11, %rd11, 128;\n"
    "	mov.u32 	%r37, 255;\n"
    "	setp.le.s32 	%p26, %r20, %r37;\n"
    "	@%p26 bra 	$Lt_5_48386;\n"
    "	add.s32 	%r17, %r17, 256;\n"
    "	add.s32 	%r15, %r15, 256;\n"
    "	add.u64 	%rd9, %rd9, 4096;\n"
    "	setp.lt.s32 	%p27, %r15, %r16;\n"
    "	@%p27 bra 	$Lt_5_47618;\n"
    "	bra.uni 	$Lt_5_47106;\n"
    "$Lt_5_51202:\n"
    "	mov.s32 	%r17, 0;\n"
    "	mov.u64 	%rd10, c_matrix;\n"
    "	mov.u64 	%rd5, __cuda___cuda_local_var_16098_35_non_const_s_xj33904;\n"
    "$Lt_5_47106:\n"
    "	.loc	3	679	0\n"
    "	bar.sync 	0;\n"
    "	sub.s32 	%r38, %r7, %r17;\n"
    "	setp.le.s32 	%p28, %r38, %r1;\n"
    "	@%p28 bra 	$Lt_5_49154;\n"
    "	.loc	3	680	0\n"
    "	cvt.s64.s32 	%rd37, %r1;\n"
    "	mul.wide.s32 	%rd38, %r1, 16;\n"
    "	add.u64 	%rd39, %rd38, %rd5;\n"
    "	add.s32 	%r39, %r17, %r1;\n"
    "	cvt.s64.s32 	%rd40, %r39;\n"
    "	mul.wide.s32 	%rd41, %r39, 16;\n"
    "	add.u64 	%rd9, %rd1, %rd41;\n"
    "	ld.global.f32 	%f781, [%rd9+0];\n"
    "	st.shared.f32 	[%rd39+0], %f781;\n"
    "	ld.global.f32 	%f782, [%rd9+4];\n"
    "	st.shared.f32 	[%rd39+4], %f782;\n"
    "	ld.global.f32 	%f783, [%rd9+8];\n"
    "	st.shared.f32 	[%rd39+8], %f783;\n"
    "	ld.global.s32 	%r40, [%rd9+12];\n"
    "	st.shared.s32 	[%rd39+12], %r40;\n"
    "$Lt_5_49154:\n"
    "	.loc	3	681	0\n"
    "	bar.sync 	0;\n"
    "	mov.u32 	%r41, 0;\n"
    "	setp.le.s32 	%p29, %r38, %r41;\n"
    "	@%p29 bra 	$Lt_5_49666;\n"
    "	mov.s32 	%r42, %r38;\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_gpu_kadai12_xmax];\n"
    "	rcp.approx.f32 	%f14, %f13;\n"
    "	mov.s64 	%rd42, %rd5;\n"
    "	mov.s64 	%rd43, %rd5;\n"
    "	mov.s32 	%r43, 0;\n"
    "	mov.s32 	%r44, %r42;\n"
    "$Lt_5_50178:\n"
    " //<loop> Loop body line 681, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	683	0\n"
    "	ld.shared.s32 	%r45, [%rd42+12];\n"
    "	add.s32 	%r46, %r45, %r6;\n"
    "	ld.shared.f32 	%f784, [%rd43+0];\n"
    "	mov.f32 	%f785, %f8;\n"
    "	sub.f32 	%f786, %f785, %f784;\n"
    "	mov.f32 	%f787, %f786;\n"
    "	mul.f32 	%f788, %f14, %f787;\n"
    "	cvt.rni.f32.f32 	%f789, %f788;\n"
    "	.loc	3	681	0\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_gpu_kadai12_xmax];\n"
    "	.loc	3	683	0\n"
    "	mul.f32 	%f790, %f13, %f789;\n"
    "	sub.f32 	%f791, %f786, %f790;\n"
    "	mov.f32 	%f792, %f791;\n"
    "	mov.f32 	%f793, 0f00000000;   	// 0\n"
    "	mad.f32 	%f794, %f791, %f791, %f793;\n"
    "	ld.shared.f32 	%f795, [%rd43+4];\n"
    "	mov.f32 	%f796, %f10;\n"
    "	sub.f32 	%f797, %f796, %f795;\n"
    "	mov.f32 	%f798, %f797;\n"
    "	mov.f32 	%f799, %f798;\n"
    "	mul.f32 	%f800, %f14, %f798;\n"
    "	cvt.rni.f32.f32 	%f801, %f800;\n"
    "	mul.f32 	%f802, %f13, %f801;\n"
    "	sub.f32 	%f803, %f797, %f802;\n"
    "	mov.f32 	%f804, %f803;\n"
    "	mad.f32 	%f805, %f803, %f803, %f794;\n"
    "	ld.shared.f32 	%f806, [%rd43+8];\n"
    "	mov.f32 	%f807, %f12;\n"
    "	sub.f32 	%f808, %f807, %f806;\n"
    "	mov.f32 	%f809, %f808;\n"
    "	mul.f32 	%f810, %f808, %f14;\n"
    "	cvt.rni.f32.f32 	%f811, %f810;\n"
    "	mul.f32 	%f812, %f13, %f811;\n"
    "	sub.f32 	%f813, %f808, %f812;\n"
    "	mov.f32 	%f814, %f813;\n"
    "	mad.f32 	%f815, %f813, %f813, %f805;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f816, %f815;\n"
    "	cvt.s64.s32 	%rd44, %r46;\n"
    "	mul.wide.s32 	%rd45, %r46, 24;\n"
    "	add.u64 	%rd46, %rd10, %rd45;\n"
    "	ld.const.f32 	%f817, [%rd46+8];\n"
    "	ld.const.f32 	%f818, [%rd46+4];\n"
    "	sub.f32 	%f819, %f818, %f816;\n"
    "	mul.f32 	%f820, %f817, %f819;\n"
    "	mov.f32 	%f821, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f822, %f820, %f821;\n"
    "	cvt.rzi.f32.f32 	%f823, %f822;\n"
    "	mov.f32 	%f824, %f823;\n"
    "	mov.f32 	%f825, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f826, %f825;\n"
    "	mov.f32 	%f827, %f820;\n"
    "	mad.f32 %f828, %f824, %f826, %f827;\n"
    "	mov.f32 	%f63, %f828;\n"
    "	mov.f32 	%f829, %f823;\n"
    "	mov.f32 	%f830, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f831, %f830;\n"
    "	mov.f32 	%f832, %f63;\n"
    "	mad.f32 %f833, %f829, %f831, %f832;\n"
    "	mov.f32 	%f63, %f833;\n"
    "	.loc	3	683	0\n"
    "	mov.f32 	%f834, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p30, %f815, %f834;\n"
    "	mov.f32 	%f835, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f835;\n"
    "	rcp.approx.f32 	%f836, %f816;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	mul.f32 	%f837, %f836, %f836;\n"
    "	ld.const.f32 	%f838, [%rd46+12];\n"
    "	ld.const.f32 	%f839, [%rd46+0];\n"
    "	ld.const.f32 	%f840, [%rd46+16];\n"
    "	ld.const.f32 	%f841, [%rd46+20];\n"
    "	mul.f32 	%f842, %f837, %f837;\n"
    "	mul.f32 	%f843, %f836, %f837;\n"
    "	mov.f32 	%f844, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f845, %f838, %f844;\n"
    "	mov.f32 	%f846, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f847, %f839, %f846;\n"
    "	mov.f32 	%f848, 0f41000000;   	// 8\n"
    "	mul.f32 	%f849, %f840, %f848;\n"
    "	mul.f32 	%f850, %f842, %f842;\n"
    "	mul.f32 	%f851, %f845, %f850;\n"
    "	mul.f32 	%f852, %f849, %f850;\n"
    "	mov.f32 	%f853, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p31, %f820, %f853;\n"
    "	mov.f32 	%f854, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p32, %f820, %f854;\n"
    "	ex2.approx.f32 	%f855, %f823;\n"
    "	mul.f32 	%f856, %f72, %f855;\n"
    "	mov.f32 	%f857, 0f00000000;   	// 0\n"
    "	selp.f32 	%f858, %f857, %f856, %p32;\n"
    "	mov.f32 	%f859, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f860, %f859, %f858, %p31;\n"
    "	mul.f32 	%f861, %f847, %f860;\n"
    "	mul.f32 	%f862, %f817, %f861;\n"
    "	mul.f32 	%f863, %f836, %f862;\n"
    "	sub.f32 	%f864, %f863, %f851;\n"
    "	mul.f32 	%f865, %f837, %f852;\n"
    "	sub.f32 	%f866, %f864, %f865;\n"
    "	mad.f32 	%f867, %f841, %f843, %f866;\n"
    "	mov.f32 	%f868, 0f00000000;   	// 0\n"
    "	selp.f32 	%f869, %f868, %f867, %p30;\n"
    "	mov.f32 	%f870, %f2;\n"
    "	mov.f32 	%f871, %f792;\n"
    "	mad.f32 	%f872, %f871, %f869, %f870;\n"
    "	mov.f32 	%f2, %f872;\n"
    "	mov.f32 	%f873, %f4;\n"
    "	mov.f32 	%f874, %f804;\n"
    "	mad.f32 	%f875, %f874, %f869, %f873;\n"
    "	mov.f32 	%f4, %f875;\n"
    "	mov.f32 	%f876, %f6;\n"
    "	mov.f32 	%f877, %f814;\n"
    "	mad.f32 	%f878, %f877, %f869, %f876;\n"
    "	mov.f32 	%f6, %f878;\n"
    "	add.s32 	%r43, %r43, 1;\n"
    "	add.u64 	%rd43, %rd43, 16;\n"
    "	add.u64 	%rd42, %rd42, 16;\n"
    "	setp.ne.s32 	%p33, %r38, %r43;\n"
    "	@%p33 bra 	$Lt_5_50178;\n"
    "$Lt_5_49666:\n"
    "	setp.le.s32 	%p34, %r7, %r3;\n"
    "	@%p34 bra 	$Lt_5_50690;\n"
    "	.loc	3	685	0\n"
    "	ld.param.u64 	%rd47, [__cudaparm_nacl_kernel_gpu_kadai12_fvec];\n"
    "	mul.lo.s32 	%r47, %r3, 3;\n"
    "	cvt.s64.s32 	%rd48, %r47;\n"
    "	mul.wide.s32 	%rd49, %r47, 4;\n"
    "	add.u64 	%rd50, %rd47, %rd49;\n"
    "	mov.f32 	%f879, %f2;\n"
    "	st.global.f32 	[%rd50+0], %f879;\n"
    "	mov.f32 	%f880, %f4;\n"
    "	st.global.f32 	[%rd50+4], %f880;\n"
    "	mov.f32 	%f881, %f6;\n"
    "	st.global.f32 	[%rd50+8], %f881;\n"
    "$Lt_5_50690:\n"
    "	.loc	3	686	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel_gpu_kadai12:\n"
    "	} // nacl_kernel_gpu_kadai12\n"
    "\n"
    "	.entry nacl_kernel_initial (\n"
    "		.param .u64 __cudaparm_nacl_kernel_initial_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_initial_n,\n"
    "		.param .u64 __cudaparm_nacl_kernel_initial_atype,\n"
    "		.param .s32 __cudaparm_nacl_kernel_initial_nat,\n"
    "		.param .u64 __cudaparm_nacl_kernel_initial_pol,\n"
    "		.param .u64 __cudaparm_nacl_kernel_initial_sigm,\n"
    "		.param .u64 __cudaparm_nacl_kernel_initial_ipotro,\n"
    "		.param .u64 __cudaparm_nacl_kernel_initial_pc,\n"
    "		.param .u64 __cudaparm_nacl_kernel_initial_pd,\n"
    "		.param .u64 __cudaparm_nacl_kernel_initial_zz,\n"
    "		.param .s32 __cudaparm_nacl_kernel_initial_tblno,\n"
    "		.param .f32 __cudaparm_nacl_kernel_initial___val_paramxmax,\n"
    "		.param .s32 __cudaparm_nacl_kernel_initial_periodicflag,\n"
    "		.param .u64 __cudaparm_nacl_kernel_initial_force)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<22>;\n"
    "	.reg .u64 %rd<31>;\n"
    "	.reg .f32 %f<110>;\n"
    "	.reg .pred %p<9>;\n"
    "	.loc	3	883	0\n"
    "$LDWbegin_nacl_kernel_initial:\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	mul.wide.u16 	%r1, %rh1, 64;\n"
    "	cvt.u32.u16 	%r2, %tid.x;\n"
    "	add.u32 	%r3, %r2, %r1;\n"
    "	ld.param.s32 	%r4, [__cudaparm_nacl_kernel_initial_n];\n"
    "	setp.le.s32 	%p1, %r4, %r3;\n"
    "	@%p1 bra 	$Lt_6_9218;\n"
    "	.loc	3	893	0\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	mov.f32 	%f2, %f1;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	mov.f32 	%f4, %f3;\n"
    "	mov.f32 	%f5, 0f00000000;     	// 0\n"
    "	mov.f32 	%f6, %f5;\n"
    "	mov.u32 	%r5, 0;\n"
    "	.loc	3	883	0\n"
    "	ld.param.s32 	%r4, [__cudaparm_nacl_kernel_initial_n];\n"
    "	.loc	3	893	0\n"
    "	setp.le.s32 	%p2, %r4, %r5;\n"
    "	@%p2 bra 	$Lt_6_11266;\n"
    "	.loc	3	883	0\n"
    "	ld.param.s32 	%r4, [__cudaparm_nacl_kernel_initial_n];\n"
    "	.loc	3	893	0\n"
    "	mov.s32 	%r6, %r4;\n"
    "	mov.s32 	%r7, 0;\n"
    "	mul.lo.s32 	%r8, %r4, 3;\n"
    "	ld.param.s32 	%r9, [__cudaparm_nacl_kernel_initial_periodicflag];\n"
    "	and.b32 	%r10, %r9, 1;\n"
    "	ld.param.f32 	%f7, [__cudaparm_nacl_kernel_initial___val_paramxmax];\n"
    "	add.f32 	%f8, %f7, %f7;\n"
    "	mov.s32 	%r11, 0;\n"
    "	setp.eq.s32 	%p3, %r10, %r11;\n"
    "	mul.lo.s32 	%r12, %r3, 3;\n"
    "	selp.f32 	%f9, %f8, %f7, %p3;\n"
    "	cvt.s64.s32 	%rd1, %r12;\n"
    "	ld.param.u64 	%rd2, [__cudaparm_nacl_kernel_initial_x];\n"
    "	mov.s64 	%rd3, %rd2;\n"
    "	rcp.approx.f32 	%f10, %f9;\n"
    "	mul.wide.s32 	%rd4, %r12, 4;\n"
    "	add.u64 	%rd5, %rd4, %rd2;\n"
    "	ld.global.f32 	%f11, [%rd5+0];\n"
    "	ld.global.f32 	%f12, [%rd5+4];\n"
    "	ld.global.f32 	%f13, [%rd5+8];\n"
    "	mov.s32 	%r13, 0;\n"
    "	mov.s32 	%r14, %r6;\n"
    "$Lt_6_10242:\n"
    " //<loop> Loop body line 893, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	898	0\n"
    "	ld.global.f32 	%f14, [%rd3+0];\n"
    "	sub.f32 	%f15, %f11, %f14;\n"
    "	mul.f32 	%f16, %f10, %f15;\n"
    "	cvt.rni.f32.f32 	%f17, %f16;\n"
    "	mul.f32 	%f18, %f9, %f17;\n"
    "	sub.f32 	%f19, %f15, %f18;\n"
    "	mov.f32 	%f20, %f19;\n"
    "	.loc	3	899	0\n"
    "	mov.f32 	%f21, 0f00000000;    	// 0\n"
    "	mad.f32 	%f22, %f19, %f19, %f21;\n"
    "	.loc	3	897	0\n"
    "	ld.global.f32 	%f23, [%rd3+4];\n"
    "	sub.f32 	%f24, %f12, %f23;\n"
    "	mov.f32 	%f25, %f24;\n"
    "	.loc	3	898	0\n"
    "	mul.f32 	%f26, %f10, %f24;\n"
    "	cvt.rni.f32.f32 	%f27, %f26;\n"
    "	mul.f32 	%f28, %f9, %f27;\n"
    "	sub.f32 	%f29, %f24, %f28;\n"
    "	mov.f32 	%f30, %f29;\n"
    "	.loc	3	899	0\n"
    "	mad.f32 	%f31, %f29, %f29, %f22;\n"
    "	.loc	3	897	0\n"
    "	ld.global.f32 	%f32, [%rd3+8];\n"
    "	sub.f32 	%f33, %f13, %f32;\n"
    "	mov.f32 	%f34, %f33;\n"
    "	.loc	3	898	0\n"
    "	mul.f32 	%f35, %f10, %f33;\n"
    "	cvt.rni.f32.f32 	%f36, %f35;\n"
    "	mul.f32 	%f37, %f9, %f36;\n"
    "	sub.f32 	%f38, %f33, %f37;\n"
    "	mov.f32 	%f39, %f38;\n"
    "	.loc	3	899	0\n"
    "	mad.f32 	%f40, %f38, %f38, %f31;\n"
    "	mov.f32 	%f41, 0f00000000;    	// 0\n"
    "	setp.neu.f32 	%p4, %f40, %f41;\n"
    "	@!%p4 bra 	$Lt_6_10498;\n"
    "	.loc	3	907	0\n"
    "	ld.param.u64 	%rd6, [__cudaparm_nacl_kernel_initial_atype];\n"
    "	cvt.s64.s32 	%rd7, %r13;\n"
    "	mul.wide.s32 	%rd8, %r13, 4;\n"
    "	add.u64 	%rd9, %rd6, %rd8;\n"
    "	ld.global.s32 	%r15, [%rd9+0];\n"
    "	cvt.s64.s32 	%rd10, %r3;\n"
    "	mul.wide.s32 	%rd11, %r3, 4;\n"
    "	add.u64 	%rd12, %rd6, %rd11;\n"
    "	ld.global.s32 	%r16, [%rd12+0];\n"
    "	ld.param.s32 	%r17, [__cudaparm_nacl_kernel_initial_nat];\n"
    "	mul.lo.s32 	%r18, %r16, %r17;\n"
    "	add.s32 	%r19, %r15, %r18;\n"
    "	.loc	3	908	0\n"
    "	sqrt.approx.f32 	%f42, %f40;\n"
    "	cvt.s64.s32 	%rd13, %r19;\n"
    "	mul.wide.s32 	%rd14, %r19, 4;\n"
    "	ld.param.u64 	%rd15, [__cudaparm_nacl_kernel_initial_ipotro];\n"
    "	add.u64 	%rd16, %rd15, %rd14;\n"
    "	ld.global.f32 	%f43, [%rd16+0];\n"
    "	ld.param.u64 	%rd17, [__cudaparm_nacl_kernel_initial_sigm];\n"
    "	add.u64 	%rd18, %rd17, %rd14;\n"
    "	ld.global.f32 	%f44, [%rd18+0];\n"
    "	sub.f32 	%f45, %f44, %f42;\n"
    "	mul.f32 	%f46, %f43, %f45;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f47, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f48, %f46, %f47;\n"
    "	cvt.rzi.f32.f32 	%f49, %f48;\n"
    "	mov.f32 	%f50, %f49;\n"
    "	mov.f32 	%f51, 0fbf317200;    	// -0.693146\n"
    "	mov.f32 	%f52, %f51;\n"
    "	mov.f32 	%f53, %f46;\n"
    "	mad.f32 %f54, %f50, %f52, %f53;\n"
    "	mov.f32 	%f55, %f54;\n"
    "	mov.f32 	%f56, %f49;\n"
    "	mov.f32 	%f57, 0fb5bfbe8e;    	// -1.42861e-06\n"
    "	mov.f32 	%f58, %f57;\n"
    "	mov.f32 	%f59, %f55;\n"
    "	mad.f32 %f60, %f56, %f58, %f59;\n"
    "	mov.f32 	%f61, %f60;\n"
    "	.loc	3	909	0\n"
    "	rcp.approx.f32 	%f62, %f42;\n"
    "	mul.f32 	%f63, %f62, %f62;\n"
    "	mul.f32 	%f64, %f63, %f63;\n"
    "	mul.f32 	%f65, %f64, %f64;\n"
    "	ld.param.u64 	%rd19, [__cudaparm_nacl_kernel_initial_pc];\n"
    "	add.u64 	%rd20, %rd19, %rd14;\n"
    "	ld.global.f32 	%f66, [%rd20+0];\n"
    "	mov.f32 	%f67, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f68, %f66, %f67;\n"
    "	mul.f32 	%f69, %f65, %f68;\n"
    "	mov.f32 	%f70, 0f7f800000;    	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f71, 0f00000000;    	// 0\n"
    "	ex2.approx.f32 	%f72, %f49;\n"
    "	mov.f32 	%f73, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f74, %f61, %f73;\n"
    "	ex2.approx.f32 	%f75, %f74;\n"
    "	mul.f32 	%f76, %f72, %f75;\n"
    "	mov.f32 	%f77, 0fc2d20000;    	// -105\n"
    "	setp.lt.f32 	%p5, %f46, %f77;\n"
    "	selp.f32 	%f78, %f71, %f76, %p5;\n"
    "	mov.f32 	%f79, 0f42d20000;    	// 105\n"
    "	setp.gt.f32 	%p6, %f46, %f79;\n"
    "	selp.f32 	%f80, %f70, %f78, %p6;\n"
    "	ld.param.u64 	%rd21, [__cudaparm_nacl_kernel_initial_pol];\n"
    "	add.u64 	%rd22, %rd21, %rd14;\n"
    "	ld.global.f32 	%f81, [%rd22+0];\n"
    "	mov.f32 	%f82, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f83, %f81, %f82;\n"
    "	mul.f32 	%f84, %f80, %f83;\n"
    "	mul.f32 	%f85, %f43, %f84;\n"
    "	mul.f32 	%f86, %f62, %f85;\n"
    "	sub.f32 	%f87, %f86, %f69;\n"
    "	ld.param.u64 	%rd23, [__cudaparm_nacl_kernel_initial_pd];\n"
    "	add.u64 	%rd24, %rd23, %rd14;\n"
    "	ld.global.f32 	%f88, [%rd24+0];\n"
    "	mov.f32 	%f89, 0f41000000;    	// 8\n"
    "	mul.f32 	%f90, %f88, %f89;\n"
    "	mul.f32 	%f91, %f65, %f90;\n"
    "	mul.f32 	%f92, %f63, %f91;\n"
    "	sub.f32 	%f93, %f87, %f92;\n"
    "	ld.param.u64 	%rd25, [__cudaparm_nacl_kernel_initial_zz];\n"
    "	add.u64 	%rd26, %rd25, %rd14;\n"
    "	ld.global.f32 	%f94, [%rd26+0];\n"
    "	mul.f32 	%f95, %f62, %f63;\n"
    "	mad.f32 	%f96, %f94, %f95, %f93;\n"
    "	.loc	3	913	0\n"
    "	mov.f32 	%f97, %f2;\n"
    "	mov.f32 	%f98, %f20;\n"
    "	mad.f32 	%f99, %f98, %f96, %f97;\n"
    "	mov.f32 	%f2, %f99;\n"
    "	mov.f32 	%f100, %f4;\n"
    "	mov.f32 	%f101, %f30;\n"
    "	mad.f32 	%f102, %f101, %f96, %f100;\n"
    "	mov.f32 	%f4, %f102;\n"
    "	mov.f32 	%f103, %f6;\n"
    "	mov.f32 	%f104, %f39;\n"
    "	mad.f32 	%f105, %f104, %f96, %f103;\n"
    "	mov.f32 	%f6, %f105;\n"
    "$Lt_6_10498:\n"
    "	add.s32 	%r13, %r13, 1;\n"
    "	add.s32 	%r7, %r7, 3;\n"
    "	add.u64 	%rd3, %rd3, 12;\n"
    "	setp.ne.s32 	%p7, %r7, %r8;\n"
    "	@%p7 bra 	$Lt_6_10242;\n"
    "	bra.uni 	$Lt_6_9730;\n"
    "$Lt_6_11266:\n"
    "	mul.lo.s32 	%r20, %r3, 3;\n"
    "	cvt.s64.s32 	%rd27, %r20;\n"
    "	mul.wide.s32 	%rd4, %r20, 4;\n"
    "$Lt_6_9730:\n"
    "	.loc	3	916	0\n"
    "	ld.param.u64 	%rd28, [__cudaparm_nacl_kernel_initial_force];\n"
    "	add.u64 	%rd29, %rd28, %rd4;\n"
    "	mov.f32 	%f106, %f2;\n"
    "	st.global.f32 	[%rd29+0], %f106;\n"
    "	mov.f32 	%f107, %f4;\n"
    "	st.global.f32 	[%rd29+4], %f107;\n"
    "	mov.f32 	%f108, %f6;\n"
    "	st.global.f32 	[%rd29+8], %f108;\n"
    "$Lt_6_9218:\n"
    "	.loc	3	918	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel_initial:\n"
    "	} // nacl_kernel_initial\n"
    "\n"
    "	.entry nacl_kernel_128bit (\n"
    "		.param .u64 __cudaparm_nacl_kernel_128bit_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_128bit_n,\n"
    "		.param .s32 __cudaparm_nacl_kernel_128bit_nat,\n"
    "		.param .u64 __cudaparm_nacl_kernel_128bit_d_matrix,\n"
    "		.param .f32 __cudaparm_nacl_kernel_128bit_xmax,\n"
    "		.param .u64 __cudaparm_nacl_kernel_128bit_fvec)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<17>;\n"
    "	.reg .u64 %rd<15>;\n"
    "	.reg .f32 %f<108>;\n"
    "	.reg .pred %p<7>;\n"
    "	.loc	3	1004	0\n"
    "$LDWbegin_nacl_kernel_128bit:\n"
    "	.loc	3	1013	0\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	mov.f32 	%f2, %f1;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	mov.f32 	%f4, %f3;\n"
    "	mov.f32 	%f5, 0f00000000;     	// 0\n"
    "	mov.f32 	%f6, %f5;\n"
    "	cvt.s32.u16 	%r1, %tid.x;\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	ld.param.s32 	%r2, [__cudaparm_nacl_kernel_128bit_n];\n"
    "	mov.u32 	%r3, 0;\n"
    "	setp.le.s32 	%p1, %r2, %r3;\n"
    "	@%p1 bra 	$Lt_7_10242;\n"
    "	ld.param.s32 	%r2, [__cudaparm_nacl_kernel_128bit_n];\n"
    "	mov.s32 	%r4, %r2;\n"
    "	mul.wide.u16 	%r5, %rh1, 256;\n"
    "	ld.param.f32 	%f7, [__cudaparm_nacl_kernel_128bit_xmax];\n"
    "	rcp.approx.f32 	%f8, %f7;\n"
    "	add.u32 	%r6, %r1, %r5;\n"
    "	ld.param.u64 	%rd1, [__cudaparm_nacl_kernel_128bit_x];\n"
    "	mov.s64 	%rd2, %rd1;\n"
    "	cvt.s64.s32 	%rd3, %r6;\n"
    "	mul.wide.s32 	%rd4, %r6, 16;\n"
    "	add.u64 	%rd5, %rd1, %rd4;\n"
    "	ld.global.s32 	%r7, [%rd5+12];\n"
    "	ld.global.f32 	%f9, [%rd5+0];\n"
    "	ld.global.f32 	%f10, [%rd5+4];\n"
    "	ld.global.f32 	%f11, [%rd5+8];\n"
    "	ld.param.s32 	%r8, [__cudaparm_nacl_kernel_128bit_nat];\n"
    "	mul.lo.s32 	%r9, %r8, %r7;\n"
    "	mov.s32 	%r10, 0;\n"
    "	mov.s32 	%r11, %r4;\n"
    "$Lt_7_9218:\n"
    " //<loop> Loop body line 1013, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	1017	0\n"
    "	ld.global.s32 	%r12, [%rd2+12];\n"
    "	add.s32 	%r13, %r12, %r9;\n"
    "	ld.global.f32 	%f12, [%rd2+0];\n"
    "	sub.f32 	%f13, %f9, %f12;\n"
    "	mul.f32 	%f14, %f8, %f13;\n"
    "	cvt.rni.f32.f32 	%f15, %f14;\n"
    "	.loc	3	1013	0\n"
    "	ld.param.f32 	%f7, [__cudaparm_nacl_kernel_128bit_xmax];\n"
    "	.loc	3	1017	0\n"
    "	mul.f32 	%f16, %f7, %f15;\n"
    "	sub.f32 	%f17, %f13, %f16;\n"
    "	mov.f32 	%f18, %f17;\n"
    "	mov.f32 	%f19, 0f00000000;    	// 0\n"
    "	mad.f32 	%f20, %f17, %f17, %f19;\n"
    "	ld.global.f32 	%f21, [%rd2+4];\n"
    "	sub.f32 	%f22, %f10, %f21;\n"
    "	mov.f32 	%f23, %f22;\n"
    "	mul.f32 	%f24, %f8, %f22;\n"
    "	cvt.rni.f32.f32 	%f25, %f24;\n"
    "	mul.f32 	%f26, %f7, %f25;\n"
    "	sub.f32 	%f27, %f22, %f26;\n"
    "	mov.f32 	%f28, %f27;\n"
    "	mad.f32 	%f29, %f27, %f27, %f20;\n"
    "	ld.global.f32 	%f30, [%rd2+8];\n"
    "	sub.f32 	%f31, %f11, %f30;\n"
    "	mov.f32 	%f32, %f31;\n"
    "	mul.f32 	%f33, %f8, %f31;\n"
    "	cvt.rni.f32.f32 	%f34, %f33;\n"
    "	mul.f32 	%f35, %f7, %f34;\n"
    "	sub.f32 	%f36, %f31, %f35;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f38, %f36, %f36, %f29;\n"
    "	mov.f32 	%f39, 0f00000000;    	// 0\n"
    "	setp.neu.f32 	%p2, %f38, %f39;\n"
    "	@!%p2 bra 	$Lt_7_9474;\n"
    "	sqrt.approx.f32 	%f40, %f38;\n"
    "	ld.param.u64 	%rd6, [__cudaparm_nacl_kernel_128bit_d_matrix];\n"
    "	cvt.s64.s32 	%rd7, %r13;\n"
    "	mul.wide.s32 	%rd8, %r13, 24;\n"
    "	add.u64 	%rd9, %rd6, %rd8;\n"
    "	ld.global.f32 	%f41, [%rd9+8];\n"
    "	ld.global.f32 	%f42, [%rd9+4];\n"
    "	sub.f32 	%f43, %f42, %f40;\n"
    "	mul.f32 	%f44, %f41, %f43;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f45, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f46, %f44, %f45;\n"
    "	cvt.rzi.f32.f32 	%f47, %f46;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mov.f32 	%f49, 0fbf317200;    	// -0.693146\n"
    "	mov.f32 	%f50, %f49;\n"
    "	mov.f32 	%f51, %f44;\n"
    "	mad.f32 %f52, %f48, %f50, %f51;\n"
    "	mov.f32 	%f53, %f52;\n"
    "	mov.f32 	%f54, %f47;\n"
    "	mov.f32 	%f55, 0fb5bfbe8e;    	// -1.42861e-06\n"
    "	mov.f32 	%f56, %f55;\n"
    "	mov.f32 	%f57, %f53;\n"
    "	mad.f32 %f58, %f54, %f56, %f57;\n"
    "	mov.f32 	%f59, %f58;\n"
    "	.loc	3	1017	0\n"
    "	rcp.approx.f32 	%f60, %f40;\n"
    "	mul.f32 	%f61, %f60, %f60;\n"
    "	mul.f32 	%f62, %f61, %f61;\n"
    "	mul.f32 	%f63, %f62, %f62;\n"
    "	ld.global.f32 	%f64, [%rd9+12];\n"
    "	mov.f32 	%f65, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f66, %f64, %f65;\n"
    "	mul.f32 	%f67, %f63, %f66;\n"
    "	mov.f32 	%f68, 0f7f800000;    	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f69, 0f00000000;    	// 0\n"
    "	ex2.approx.f32 	%f70, %f47;\n"
    "	mov.f32 	%f71, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f72, %f59, %f71;\n"
    "	ex2.approx.f32 	%f73, %f72;\n"
    "	mul.f32 	%f74, %f70, %f73;\n"
    "	mov.f32 	%f75, 0fc2d20000;    	// -105\n"
    "	setp.lt.f32 	%p3, %f44, %f75;\n"
    "	selp.f32 	%f76, %f69, %f74, %p3;\n"
    "	mov.f32 	%f77, 0f42d20000;    	// 105\n"
    "	setp.gt.f32 	%p4, %f44, %f77;\n"
    "	selp.f32 	%f78, %f68, %f76, %p4;\n"
    "	ld.global.f32 	%f79, [%rd9+0];\n"
    "	mov.f32 	%f80, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f81, %f79, %f80;\n"
    "	mul.f32 	%f82, %f78, %f81;\n"
    "	mul.f32 	%f83, %f41, %f82;\n"
    "	mul.f32 	%f84, %f60, %f83;\n"
    "	sub.f32 	%f85, %f84, %f67;\n"
    "	ld.global.f32 	%f86, [%rd9+16];\n"
    "	mov.f32 	%f87, 0f41000000;    	// 8\n"
    "	mul.f32 	%f88, %f86, %f87;\n"
    "	mul.f32 	%f89, %f63, %f88;\n"
    "	mul.f32 	%f90, %f61, %f89;\n"
    "	sub.f32 	%f91, %f85, %f90;\n"
    "	ld.global.f32 	%f92, [%rd9+20];\n"
    "	mul.f32 	%f93, %f60, %f61;\n"
    "	mad.f32 	%f94, %f92, %f93, %f91;\n"
    "	mov.f32 	%f95, %f2;\n"
    "	mov.f32 	%f96, %f18;\n"
    "	mad.f32 	%f97, %f96, %f94, %f95;\n"
    "	mov.f32 	%f2, %f97;\n"
    "	mov.f32 	%f98, %f4;\n"
    "	mov.f32 	%f99, %f28;\n"
    "	mad.f32 	%f100, %f99, %f94, %f98;\n"
    "	mov.f32 	%f4, %f100;\n"
    "	mov.f32 	%f101, %f6;\n"
    "	mov.f32 	%f102, %f37;\n"
    "	mad.f32 	%f103, %f102, %f94, %f101;\n"
    "	mov.f32 	%f6, %f103;\n"
    "$Lt_7_9474:\n"
    "	add.s32 	%r10, %r10, 1;\n"
    "	add.u64 	%rd2, %rd2, 16;\n"
    "	.loc	3	1013	0\n"
    "	ld.param.s32 	%r2, [__cudaparm_nacl_kernel_128bit_n];\n"
    "	.loc	3	1017	0\n"
    "	setp.ne.s32 	%p5, %r2, %r10;\n"
    "	@%p5 bra 	$Lt_7_9218;\n"
    "	bra.uni 	$Lt_7_8706;\n"
    "$Lt_7_10242:\n"
    "	mul.wide.u16 	%r14, %rh1, 256;\n"
    "	add.u32 	%r6, %r1, %r14;\n"
    "$Lt_7_8706:\n"
    "	.loc	3	1019	0\n"
    "	ld.param.u64 	%rd10, [__cudaparm_nacl_kernel_128bit_fvec];\n"
    "	mul.lo.s32 	%r15, %r6, 3;\n"
    "	cvt.s64.s32 	%rd11, %r15;\n"
    "	mul.wide.s32 	%rd12, %r15, 4;\n"
    "	add.u64 	%rd13, %rd10, %rd12;\n"
    "	mov.f32 	%f104, %f2;\n"
    "	st.global.f32 	[%rd13+0], %f104;\n"
    "	mov.f32 	%f105, %f4;\n"
    "	st.global.f32 	[%rd13+4], %f105;\n"
    "	mov.f32 	%f106, %f6;\n"
    "	st.global.f32 	[%rd13+8], %f106;\n"
    "	.loc	3	1020	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel_128bit:\n"
    "	} // nacl_kernel_128bit\n"
    "\n"
    "	.entry nacl_kernel_shared (\n"
    "		.param .u64 __cudaparm_nacl_kernel_shared_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_shared_n,\n"
    "		.param .s32 __cudaparm_nacl_kernel_shared_nat,\n"
    "		.param .u64 __cudaparm_nacl_kernel_shared_d_matrix,\n"
    "		.param .f32 __cudaparm_nacl_kernel_shared_xmax,\n"
    "		.param .u64 __cudaparm_nacl_kernel_shared_fvec)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<98>;\n"
    "	.reg .u64 %rd<220>;\n"
    "	.reg .f32 %f<5001>;\n"
    "	.reg .pred %p<202>;\n"
    "	.shared .align 4 .b8 __cuda___cuda_local_var_16603_35_non_const_s_xj38184[4096];\n"
    "	.loc	3	1156	0\n"
    "$LDWbegin_nacl_kernel_shared:\n"
    "	.loc	3	1166	0\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	mov.f32 	%f2, %f1;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	mov.f32 	%f4, %f3;\n"
    "	mov.f32 	%f5, 0f00000000;     	// 0\n"
    "	mov.f32 	%f6, %f5;\n"
    "	.loc	3	1167	0\n"
    "	cvt.s32.u16 	%r1, %tid.x;\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	mul.wide.u16 	%r2, %rh1, 256;\n"
    "	add.u32 	%r3, %r1, %r2;\n"
    "	ld.param.u64 	%rd1, [__cudaparm_nacl_kernel_shared_x];\n"
    "	cvt.s64.s32 	%rd2, %r3;\n"
    "	mul.wide.s32 	%rd3, %r3, 16;\n"
    "	add.u64 	%rd4, %rd1, %rd3;\n"
    "	ld.global.f32 	%f7, [%rd4+0];\n"
    "	mov.f32 	%f8, %f7;\n"
    "	ld.global.f32 	%f9, [%rd4+4];\n"
    "	mov.f32 	%f10, %f9;\n"
    "	ld.global.f32 	%f11, [%rd4+8];\n"
    "	mov.f32 	%f12, %f11;\n"
    "	.loc	3	1168	0\n"
    "	ld.global.s32 	%r4, [%rd4+12];\n"
    "	ld.param.s32 	%r5, [__cudaparm_nacl_kernel_shared_nat];\n"
    "	mul.lo.s32 	%r6, %r4, %r5;\n"
    "	ld.param.s32 	%r7, [__cudaparm_nacl_kernel_shared_n];\n"
    "	shr.s32 	%r8, %r7, 31;\n"
    "	mov.s32 	%r9, 255;\n"
    "	and.b32 	%r10, %r8, %r9;\n"
    "	add.s32 	%r11, %r10, %r7;\n"
    "	shr.s32 	%r12, %r11, 8;\n"
    "	mul.lo.s32 	%r13, %r12, 256;\n"
    "	mov.u32 	%r14, 0;\n"
    "	setp.le.s32 	%p1, %r13, %r14;\n"
    "	@%p1 bra 	$Lt_8_15106;\n"
    "	mov.u64 	%rd5, __cuda___cuda_local_var_16603_35_non_const_s_xj38184;\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_shared_xmax];\n"
    "	rcp.approx.f32 	%f14, %f13;\n"
    "	add.s32 	%r15, %r13, 255;\n"
    "	shr.s32 	%r16, %r15, 31;\n"
    "	mov.s32 	%r17, 255;\n"
    "	and.b32 	%r18, %r16, %r17;\n"
    "	add.s32 	%r19, %r18, %r15;\n"
    "	shr.s32 	%r20, %r19, 8;\n"
    "	cvt.s64.s32 	%rd6, %r1;\n"
    "	mul.wide.s32 	%rd7, %r1, 16;\n"
    "	add.u64 	%rd8, %rd5, %rd7;\n"
    "	mov.s32 	%r21, 0;\n"
    "	mov.s32 	%r22, %r20;\n"
    "$Lt_8_15618:\n"
    " //<loop> Loop body line 1168, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	1173	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	1174	0\n"
    "	add.s32 	%r23, %r21, %r1;\n"
    "	cvt.s64.s32 	%rd9, %r23;\n"
    "	mul.wide.s32 	%rd10, %r23, 16;\n"
    "	add.u64 	%rd11, %rd1, %rd10;\n"
    "	ld.global.f32 	%f15, [%rd11+0];\n"
    "	st.shared.f32 	[%rd8+0], %f15;\n"
    "	ld.global.f32 	%f16, [%rd11+4];\n"
    "	st.shared.f32 	[%rd8+4], %f16;\n"
    "	ld.global.f32 	%f17, [%rd11+8];\n"
    "	st.shared.f32 	[%rd8+8], %f17;\n"
    "	ld.global.s32 	%r24, [%rd11+12];\n"
    "	st.shared.s32 	[%rd8+12], %r24;\n"
    "	.loc	3	1175	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	24	0\n"
    "	mov.s64 	%rd12, 0;\n"
    "	mov.s32 	%r25, 0;\n"
    "$Lt_8_16386:\n"
    " //<loop> Loop body line 24, nesting depth: 2, iterations: 4\n"
    "	.loc	3	1178	0\n"
    "	add.u64 	%rd13, %rd12, %rd5;\n"
    "	ld.shared.s32 	%r26, [%rd13+12];\n"
    "	add.s32 	%r27, %r26, %r6;\n"
    "	add.u64 	%rd14, %rd12, %rd5;\n"
    "	ld.shared.f32 	%f18, [%rd14+0];\n"
    "	mov.f32 	%f19, %f8;\n"
    "	sub.f32 	%f20, %f19, %f18;\n"
    "	mov.f32 	%f21, %f20;\n"
    "	mul.f32 	%f22, %f14, %f21;\n"
    "	cvt.rni.f32.f32 	%f23, %f22;\n"
    "	mul.f32 	%f24, %f13, %f23;\n"
    "	sub.f32 	%f25, %f20, %f24;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f27, 0f00000000;    	// 0\n"
    "	mad.f32 	%f28, %f25, %f25, %f27;\n"
    "	ld.shared.f32 	%f29, [%rd14+4];\n"
    "	mov.f32 	%f30, %f10;\n"
    "	sub.f32 	%f31, %f30, %f29;\n"
    "	mov.f32 	%f32, %f31;\n"
    "	mov.f32 	%f33, %f32;\n"
    "	mul.f32 	%f34, %f14, %f32;\n"
    "	cvt.rni.f32.f32 	%f35, %f34;\n"
    "	mul.f32 	%f36, %f13, %f35;\n"
    "	sub.f32 	%f37, %f31, %f36;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f39, %f37, %f37, %f28;\n"
    "	ld.shared.f32 	%f40, [%rd14+8];\n"
    "	mov.f32 	%f41, %f12;\n"
    "	sub.f32 	%f42, %f41, %f40;\n"
    "	mov.f32 	%f43, %f42;\n"
    "	mul.f32 	%f44, %f42, %f14;\n"
    "	cvt.rni.f32.f32 	%f45, %f44;\n"
    "	mul.f32 	%f46, %f13, %f45;\n"
    "	sub.f32 	%f47, %f42, %f46;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f39;\n"
    "	mov.f32 	%f50, 0f00000000;    	// 0\n"
    "	setp.neu.f32 	%p2, %f49, %f50;\n"
    "	@!%p2 bra 	$Lt_8_16642;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd15, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd16, %r27;\n"
    "	mul.wide.s32 	%rd17, %r27, 24;\n"
    "	add.u64 	%rd18, %rd15, %rd17;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f56, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f57, %f55, %f56;\n"
    "	cvt.rzi.f32.f32 	%f58, %f57;\n"
    "	mov.f32 	%f59, %f58;\n"
    "	mov.f32 	%f60, 0fbf317200;    	// -0.693146\n"
    "	mov.f32 	%f61, %f60;\n"
    "	mov.f32 	%f62, %f55;\n"
    "	mad.f32 %f63, %f59, %f61, %f62;\n"
    "	mov.f32 	%f64, %f63;\n"
    "	mov.f32 	%f65, %f58;\n"
    "	mov.f32 	%f66, 0fb5bfbe8e;    	// -1.42861e-06\n"
    "	mov.f32 	%f67, %f66;\n"
    "	mov.f32 	%f68, %f64;\n"
    "	mad.f32 %f69, %f65, %f67, %f68;\n"
    "	mov.f32 	%f64, %f69;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f74, [%rd18+12];\n"
    "	mov.f32 	%f75, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f76, %f74, %f75;\n"
    "	mul.f32 	%f77, %f73, %f76;\n"
    "	mov.f32 	%f78, 0f7f800000;    	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f79, 0f00000000;    	// 0\n"
    "	ex2.approx.f32 	%f80, %f58;\n"
    "	mov.f32 	%f81, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f82, %f64, %f81;\n"
    "	ex2.approx.f32 	%f83, %f82;\n"
    "	mul.f32 	%f84, %f80, %f83;\n"
    "	mov.f32 	%f85, 0fc2d20000;    	// -105\n"
    "	setp.lt.f32 	%p3, %f55, %f85;\n"
    "	selp.f32 	%f86, %f79, %f84, %p3;\n"
    "	mov.f32 	%f87, 0f42d20000;    	// 105\n"
    "	setp.gt.f32 	%p4, %f55, %f87;\n"
    "	selp.f32 	%f88, %f78, %f86, %p4;\n"
    "	ld.global.f32 	%f89, [%rd18+0];\n"
    "	mov.f32 	%f90, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f91, %f89, %f90;\n"
    "	mul.f32 	%f92, %f88, %f91;\n"
    "	mul.f32 	%f93, %f52, %f92;\n"
    "	mul.f32 	%f94, %f70, %f93;\n"
    "	sub.f32 	%f95, %f94, %f77;\n"
    "	ld.global.f32 	%f96, [%rd18+16];\n"
    "	mov.f32 	%f97, 0f41000000;    	// 8\n"
    "	mul.f32 	%f98, %f96, %f97;\n"
    "	mul.f32 	%f99, %f73, %f98;\n"
    "	mul.f32 	%f100, %f71, %f99;\n"
    "	sub.f32 	%f101, %f95, %f100;\n"
    "	ld.global.f32 	%f102, [%rd18+20];\n"
    "	mul.f32 	%f103, %f70, %f71;\n"
    "	mad.f32 	%f104, %f102, %f103, %f101;\n"
    "	mov.f32 	%f105, %f2;\n"
    "	mov.f32 	%f106, %f26;\n"
    "	mad.f32 	%f107, %f106, %f104, %f105;\n"
    "	mov.f32 	%f2, %f107;\n"
    "	mov.f32 	%f108, %f4;\n"
    "	mov.f32 	%f109, %f38;\n"
    "	mad.f32 	%f110, %f109, %f104, %f108;\n"
    "	mov.f32 	%f4, %f110;\n"
    "	mov.f32 	%f111, %f6;\n"
    "	mov.f32 	%f112, %f48;\n"
    "	mad.f32 	%f113, %f112, %f104, %f111;\n"
    "	mov.f32 	%f6, %f113;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_16642:\n"
    "	ld.shared.s32 	%r28, [%rd13+28];\n"
    "	add.s32 	%r27, %r28, %r6;\n"
    "	ld.shared.f32 	%f114, [%rd14+16];\n"
    "	sub.f32 	%f115, %f19, %f114;\n"
    "	mov.f32 	%f116, %f115;\n"
    "	mul.f32 	%f117, %f14, %f116;\n"
    "	cvt.rni.f32.f32 	%f118, %f117;\n"
    "	mul.f32 	%f119, %f13, %f118;\n"
    "	sub.f32 	%f25, %f115, %f119;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f120, 0f00000000;   	// 0\n"
    "	mad.f32 	%f121, %f25, %f25, %f120;\n"
    "	ld.shared.f32 	%f122, [%rd14+20];\n"
    "	sub.f32 	%f123, %f30, %f122;\n"
    "	mov.f32 	%f124, %f123;\n"
    "	mov.f32 	%f125, %f124;\n"
    "	mul.f32 	%f126, %f14, %f124;\n"
    "	cvt.rni.f32.f32 	%f127, %f126;\n"
    "	mul.f32 	%f128, %f13, %f127;\n"
    "	sub.f32 	%f37, %f123, %f128;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f129, %f37, %f37, %f121;\n"
    "	ld.shared.f32 	%f130, [%rd14+24];\n"
    "	sub.f32 	%f131, %f41, %f130;\n"
    "	mov.f32 	%f132, %f131;\n"
    "	mul.f32 	%f133, %f131, %f14;\n"
    "	cvt.rni.f32.f32 	%f134, %f133;\n"
    "	mul.f32 	%f135, %f13, %f134;\n"
    "	sub.f32 	%f47, %f131, %f135;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f129;\n"
    "	mov.f32 	%f136, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p5, %f49, %f136;\n"
    "	@!%p5 bra 	$Lt_8_17154;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd19, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd20, %r27;\n"
    "	mul.wide.s32 	%rd21, %r27, 24;\n"
    "	add.u64 	%rd18, %rd19, %rd21;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f137, [%rd18+4];\n"
    "	sub.f32 	%f138, %f137, %f51;\n"
    "	mul.f32 	%f55, %f52, %f138;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f139, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f140, %f55, %f139;\n"
    "	cvt.rzi.f32.f32 	%f58, %f140;\n"
    "	mov.f32 	%f141, %f58;\n"
    "	mov.f32 	%f142, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f143, %f142;\n"
    "	mov.f32 	%f144, %f55;\n"
    "	mad.f32 %f145, %f141, %f143, %f144;\n"
    "	mov.f32 	%f64, %f145;\n"
    "	mov.f32 	%f146, %f58;\n"
    "	mov.f32 	%f147, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f148, %f147;\n"
    "	mov.f32 	%f149, %f64;\n"
    "	mad.f32 %f150, %f146, %f148, %f149;\n"
    "	mov.f32 	%f64, %f150;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f151, [%rd18+12];\n"
    "	mov.f32 	%f152, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f153, %f151, %f152;\n"
    "	mul.f32 	%f154, %f73, %f153;\n"
    "	mov.f32 	%f155, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f156, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f157, %f58;\n"
    "	mov.f32 	%f158, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f159, %f64, %f158;\n"
    "	ex2.approx.f32 	%f160, %f159;\n"
    "	mul.f32 	%f161, %f157, %f160;\n"
    "	mov.f32 	%f162, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p6, %f55, %f162;\n"
    "	selp.f32 	%f163, %f156, %f161, %p6;\n"
    "	mov.f32 	%f164, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p7, %f55, %f164;\n"
    "	selp.f32 	%f165, %f155, %f163, %p7;\n"
    "	ld.global.f32 	%f166, [%rd18+0];\n"
    "	mov.f32 	%f167, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f168, %f166, %f167;\n"
    "	mul.f32 	%f169, %f165, %f168;\n"
    "	mul.f32 	%f170, %f52, %f169;\n"
    "	mul.f32 	%f171, %f70, %f170;\n"
    "	sub.f32 	%f172, %f171, %f154;\n"
    "	ld.global.f32 	%f173, [%rd18+16];\n"
    "	mov.f32 	%f174, 0f41000000;   	// 8\n"
    "	mul.f32 	%f175, %f173, %f174;\n"
    "	mul.f32 	%f176, %f73, %f175;\n"
    "	mul.f32 	%f177, %f71, %f176;\n"
    "	sub.f32 	%f178, %f172, %f177;\n"
    "	ld.global.f32 	%f179, [%rd18+20];\n"
    "	mul.f32 	%f180, %f70, %f71;\n"
    "	mad.f32 	%f104, %f179, %f180, %f178;\n"
    "	mov.f32 	%f181, %f2;\n"
    "	mov.f32 	%f182, %f26;\n"
    "	mad.f32 	%f183, %f182, %f104, %f181;\n"
    "	mov.f32 	%f2, %f183;\n"
    "	mov.f32 	%f184, %f4;\n"
    "	mov.f32 	%f185, %f38;\n"
    "	mad.f32 	%f186, %f185, %f104, %f184;\n"
    "	mov.f32 	%f4, %f186;\n"
    "	mov.f32 	%f187, %f6;\n"
    "	mov.f32 	%f188, %f48;\n"
    "	mad.f32 	%f189, %f188, %f104, %f187;\n"
    "	mov.f32 	%f6, %f189;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_17154:\n"
    "	ld.shared.s32 	%r29, [%rd13+44];\n"
    "	add.s32 	%r27, %r29, %r6;\n"
    "	ld.shared.f32 	%f190, [%rd14+32];\n"
    "	sub.f32 	%f191, %f19, %f190;\n"
    "	mov.f32 	%f192, %f191;\n"
    "	mul.f32 	%f193, %f14, %f192;\n"
    "	cvt.rni.f32.f32 	%f194, %f193;\n"
    "	mul.f32 	%f195, %f13, %f194;\n"
    "	sub.f32 	%f25, %f191, %f195;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f196, 0f00000000;   	// 0\n"
    "	mad.f32 	%f197, %f25, %f25, %f196;\n"
    "	ld.shared.f32 	%f198, [%rd14+36];\n"
    "	sub.f32 	%f199, %f30, %f198;\n"
    "	mov.f32 	%f200, %f199;\n"
    "	mov.f32 	%f201, %f200;\n"
    "	mul.f32 	%f202, %f14, %f200;\n"
    "	cvt.rni.f32.f32 	%f203, %f202;\n"
    "	mul.f32 	%f204, %f13, %f203;\n"
    "	sub.f32 	%f37, %f199, %f204;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f205, %f37, %f37, %f197;\n"
    "	ld.shared.f32 	%f206, [%rd14+40];\n"
    "	sub.f32 	%f207, %f41, %f206;\n"
    "	mov.f32 	%f208, %f207;\n"
    "	mul.f32 	%f209, %f207, %f14;\n"
    "	cvt.rni.f32.f32 	%f210, %f209;\n"
    "	mul.f32 	%f211, %f13, %f210;\n"
    "	sub.f32 	%f47, %f207, %f211;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f205;\n"
    "	mov.f32 	%f212, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p8, %f49, %f212;\n"
    "	@!%p8 bra 	$Lt_8_17666;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd22, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd23, %r27;\n"
    "	mul.wide.s32 	%rd24, %r27, 24;\n"
    "	add.u64 	%rd18, %rd22, %rd24;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f213, [%rd18+4];\n"
    "	sub.f32 	%f214, %f213, %f51;\n"
    "	mul.f32 	%f55, %f52, %f214;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f215, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f216, %f55, %f215;\n"
    "	cvt.rzi.f32.f32 	%f58, %f216;\n"
    "	mov.f32 	%f217, %f58;\n"
    "	mov.f32 	%f218, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f219, %f218;\n"
    "	mov.f32 	%f220, %f55;\n"
    "	mad.f32 %f221, %f217, %f219, %f220;\n"
    "	mov.f32 	%f64, %f221;\n"
    "	mov.f32 	%f222, %f58;\n"
    "	mov.f32 	%f223, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f224, %f223;\n"
    "	mov.f32 	%f225, %f64;\n"
    "	mad.f32 %f226, %f222, %f224, %f225;\n"
    "	mov.f32 	%f64, %f226;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f227, [%rd18+12];\n"
    "	mov.f32 	%f228, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f229, %f227, %f228;\n"
    "	mul.f32 	%f230, %f73, %f229;\n"
    "	mov.f32 	%f231, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f232, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f233, %f58;\n"
    "	mov.f32 	%f234, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f235, %f64, %f234;\n"
    "	ex2.approx.f32 	%f236, %f235;\n"
    "	mul.f32 	%f237, %f233, %f236;\n"
    "	mov.f32 	%f238, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p9, %f55, %f238;\n"
    "	selp.f32 	%f239, %f232, %f237, %p9;\n"
    "	mov.f32 	%f240, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p10, %f55, %f240;\n"
    "	selp.f32 	%f241, %f231, %f239, %p10;\n"
    "	ld.global.f32 	%f242, [%rd18+0];\n"
    "	mov.f32 	%f243, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f244, %f242, %f243;\n"
    "	mul.f32 	%f245, %f241, %f244;\n"
    "	mul.f32 	%f246, %f52, %f245;\n"
    "	mul.f32 	%f247, %f70, %f246;\n"
    "	sub.f32 	%f248, %f247, %f230;\n"
    "	ld.global.f32 	%f249, [%rd18+16];\n"
    "	mov.f32 	%f250, 0f41000000;   	// 8\n"
    "	mul.f32 	%f251, %f249, %f250;\n"
    "	mul.f32 	%f252, %f73, %f251;\n"
    "	mul.f32 	%f253, %f71, %f252;\n"
    "	sub.f32 	%f254, %f248, %f253;\n"
    "	ld.global.f32 	%f255, [%rd18+20];\n"
    "	mul.f32 	%f256, %f70, %f71;\n"
    "	mad.f32 	%f104, %f255, %f256, %f254;\n"
    "	mov.f32 	%f257, %f2;\n"
    "	mov.f32 	%f258, %f26;\n"
    "	mad.f32 	%f259, %f258, %f104, %f257;\n"
    "	mov.f32 	%f2, %f259;\n"
    "	mov.f32 	%f260, %f4;\n"
    "	mov.f32 	%f261, %f38;\n"
    "	mad.f32 	%f262, %f261, %f104, %f260;\n"
    "	mov.f32 	%f4, %f262;\n"
    "	mov.f32 	%f263, %f6;\n"
    "	mov.f32 	%f264, %f48;\n"
    "	mad.f32 	%f265, %f264, %f104, %f263;\n"
    "	mov.f32 	%f6, %f265;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_17666:\n"
    "	ld.shared.s32 	%r30, [%rd13+60];\n"
    "	add.s32 	%r27, %r30, %r6;\n"
    "	ld.shared.f32 	%f266, [%rd14+48];\n"
    "	sub.f32 	%f267, %f19, %f266;\n"
    "	mov.f32 	%f268, %f267;\n"
    "	mul.f32 	%f269, %f14, %f268;\n"
    "	cvt.rni.f32.f32 	%f270, %f269;\n"
    "	mul.f32 	%f271, %f13, %f270;\n"
    "	sub.f32 	%f25, %f267, %f271;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f272, 0f00000000;   	// 0\n"
    "	mad.f32 	%f273, %f25, %f25, %f272;\n"
    "	ld.shared.f32 	%f274, [%rd14+52];\n"
    "	sub.f32 	%f275, %f30, %f274;\n"
    "	mov.f32 	%f276, %f275;\n"
    "	mov.f32 	%f277, %f276;\n"
    "	mul.f32 	%f278, %f14, %f276;\n"
    "	cvt.rni.f32.f32 	%f279, %f278;\n"
    "	mul.f32 	%f280, %f13, %f279;\n"
    "	sub.f32 	%f37, %f275, %f280;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f281, %f37, %f37, %f273;\n"
    "	ld.shared.f32 	%f282, [%rd14+56];\n"
    "	sub.f32 	%f283, %f41, %f282;\n"
    "	mov.f32 	%f284, %f283;\n"
    "	mul.f32 	%f285, %f283, %f14;\n"
    "	cvt.rni.f32.f32 	%f286, %f285;\n"
    "	mul.f32 	%f287, %f13, %f286;\n"
    "	sub.f32 	%f47, %f283, %f287;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f281;\n"
    "	mov.f32 	%f288, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p11, %f49, %f288;\n"
    "	@!%p11 bra 	$Lt_8_18178;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd25, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd26, %r27;\n"
    "	mul.wide.s32 	%rd27, %r27, 24;\n"
    "	add.u64 	%rd18, %rd25, %rd27;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f289, [%rd18+4];\n"
    "	sub.f32 	%f290, %f289, %f51;\n"
    "	mul.f32 	%f55, %f52, %f290;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f291, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f292, %f55, %f291;\n"
    "	cvt.rzi.f32.f32 	%f58, %f292;\n"
    "	mov.f32 	%f293, %f58;\n"
    "	mov.f32 	%f294, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f295, %f294;\n"
    "	mov.f32 	%f296, %f55;\n"
    "	mad.f32 %f297, %f293, %f295, %f296;\n"
    "	mov.f32 	%f64, %f297;\n"
    "	mov.f32 	%f298, %f58;\n"
    "	mov.f32 	%f299, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f300, %f299;\n"
    "	mov.f32 	%f301, %f64;\n"
    "	mad.f32 %f302, %f298, %f300, %f301;\n"
    "	mov.f32 	%f64, %f302;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f303, [%rd18+12];\n"
    "	mov.f32 	%f304, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f305, %f303, %f304;\n"
    "	mul.f32 	%f306, %f73, %f305;\n"
    "	mov.f32 	%f307, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f308, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f309, %f58;\n"
    "	mov.f32 	%f310, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f311, %f64, %f310;\n"
    "	ex2.approx.f32 	%f312, %f311;\n"
    "	mul.f32 	%f313, %f309, %f312;\n"
    "	mov.f32 	%f314, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p12, %f55, %f314;\n"
    "	selp.f32 	%f315, %f308, %f313, %p12;\n"
    "	mov.f32 	%f316, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p13, %f55, %f316;\n"
    "	selp.f32 	%f317, %f307, %f315, %p13;\n"
    "	ld.global.f32 	%f318, [%rd18+0];\n"
    "	mov.f32 	%f319, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f320, %f318, %f319;\n"
    "	mul.f32 	%f321, %f317, %f320;\n"
    "	mul.f32 	%f322, %f52, %f321;\n"
    "	mul.f32 	%f323, %f70, %f322;\n"
    "	sub.f32 	%f324, %f323, %f306;\n"
    "	ld.global.f32 	%f325, [%rd18+16];\n"
    "	mov.f32 	%f326, 0f41000000;   	// 8\n"
    "	mul.f32 	%f327, %f325, %f326;\n"
    "	mul.f32 	%f328, %f73, %f327;\n"
    "	mul.f32 	%f329, %f71, %f328;\n"
    "	sub.f32 	%f330, %f324, %f329;\n"
    "	ld.global.f32 	%f331, [%rd18+20];\n"
    "	mul.f32 	%f332, %f70, %f71;\n"
    "	mad.f32 	%f104, %f331, %f332, %f330;\n"
    "	mov.f32 	%f333, %f2;\n"
    "	mov.f32 	%f334, %f26;\n"
    "	mad.f32 	%f335, %f334, %f104, %f333;\n"
    "	mov.f32 	%f2, %f335;\n"
    "	mov.f32 	%f336, %f4;\n"
    "	mov.f32 	%f337, %f38;\n"
    "	mad.f32 	%f338, %f337, %f104, %f336;\n"
    "	mov.f32 	%f4, %f338;\n"
    "	mov.f32 	%f339, %f6;\n"
    "	mov.f32 	%f340, %f48;\n"
    "	mad.f32 	%f341, %f340, %f104, %f339;\n"
    "	mov.f32 	%f6, %f341;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_18178:\n"
    "	ld.shared.s32 	%r31, [%rd13+76];\n"
    "	add.s32 	%r27, %r31, %r6;\n"
    "	ld.shared.f32 	%f342, [%rd14+64];\n"
    "	sub.f32 	%f343, %f19, %f342;\n"
    "	mov.f32 	%f344, %f343;\n"
    "	mul.f32 	%f345, %f14, %f344;\n"
    "	cvt.rni.f32.f32 	%f346, %f345;\n"
    "	mul.f32 	%f347, %f13, %f346;\n"
    "	sub.f32 	%f25, %f343, %f347;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f348, 0f00000000;   	// 0\n"
    "	mad.f32 	%f349, %f25, %f25, %f348;\n"
    "	ld.shared.f32 	%f350, [%rd14+68];\n"
    "	sub.f32 	%f351, %f30, %f350;\n"
    "	mov.f32 	%f352, %f351;\n"
    "	mov.f32 	%f353, %f352;\n"
    "	mul.f32 	%f354, %f14, %f352;\n"
    "	cvt.rni.f32.f32 	%f355, %f354;\n"
    "	mul.f32 	%f356, %f13, %f355;\n"
    "	sub.f32 	%f37, %f351, %f356;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f357, %f37, %f37, %f349;\n"
    "	ld.shared.f32 	%f358, [%rd14+72];\n"
    "	sub.f32 	%f359, %f41, %f358;\n"
    "	mov.f32 	%f360, %f359;\n"
    "	mul.f32 	%f361, %f359, %f14;\n"
    "	cvt.rni.f32.f32 	%f362, %f361;\n"
    "	mul.f32 	%f363, %f13, %f362;\n"
    "	sub.f32 	%f47, %f359, %f363;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f357;\n"
    "	mov.f32 	%f364, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p14, %f49, %f364;\n"
    "	@!%p14 bra 	$Lt_8_18690;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd28, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd29, %r27;\n"
    "	mul.wide.s32 	%rd30, %r27, 24;\n"
    "	add.u64 	%rd18, %rd28, %rd30;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f365, [%rd18+4];\n"
    "	sub.f32 	%f366, %f365, %f51;\n"
    "	mul.f32 	%f55, %f52, %f366;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f367, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f368, %f55, %f367;\n"
    "	cvt.rzi.f32.f32 	%f58, %f368;\n"
    "	mov.f32 	%f369, %f58;\n"
    "	mov.f32 	%f370, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f371, %f370;\n"
    "	mov.f32 	%f372, %f55;\n"
    "	mad.f32 %f373, %f369, %f371, %f372;\n"
    "	mov.f32 	%f64, %f373;\n"
    "	mov.f32 	%f374, %f58;\n"
    "	mov.f32 	%f375, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f376, %f375;\n"
    "	mov.f32 	%f377, %f64;\n"
    "	mad.f32 %f378, %f374, %f376, %f377;\n"
    "	mov.f32 	%f64, %f378;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f379, [%rd18+12];\n"
    "	mov.f32 	%f380, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f381, %f379, %f380;\n"
    "	mul.f32 	%f382, %f73, %f381;\n"
    "	mov.f32 	%f383, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f384, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f385, %f58;\n"
    "	mov.f32 	%f386, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f387, %f64, %f386;\n"
    "	ex2.approx.f32 	%f388, %f387;\n"
    "	mul.f32 	%f389, %f385, %f388;\n"
    "	mov.f32 	%f390, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p15, %f55, %f390;\n"
    "	selp.f32 	%f391, %f384, %f389, %p15;\n"
    "	mov.f32 	%f392, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p16, %f55, %f392;\n"
    "	selp.f32 	%f393, %f383, %f391, %p16;\n"
    "	ld.global.f32 	%f394, [%rd18+0];\n"
    "	mov.f32 	%f395, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f396, %f394, %f395;\n"
    "	mul.f32 	%f397, %f393, %f396;\n"
    "	mul.f32 	%f398, %f52, %f397;\n"
    "	mul.f32 	%f399, %f70, %f398;\n"
    "	sub.f32 	%f400, %f399, %f382;\n"
    "	ld.global.f32 	%f401, [%rd18+16];\n"
    "	mov.f32 	%f402, 0f41000000;   	// 8\n"
    "	mul.f32 	%f403, %f401, %f402;\n"
    "	mul.f32 	%f404, %f73, %f403;\n"
    "	mul.f32 	%f405, %f71, %f404;\n"
    "	sub.f32 	%f406, %f400, %f405;\n"
    "	ld.global.f32 	%f407, [%rd18+20];\n"
    "	mul.f32 	%f408, %f70, %f71;\n"
    "	mad.f32 	%f104, %f407, %f408, %f406;\n"
    "	mov.f32 	%f409, %f2;\n"
    "	mov.f32 	%f410, %f26;\n"
    "	mad.f32 	%f411, %f410, %f104, %f409;\n"
    "	mov.f32 	%f2, %f411;\n"
    "	mov.f32 	%f412, %f4;\n"
    "	mov.f32 	%f413, %f38;\n"
    "	mad.f32 	%f414, %f413, %f104, %f412;\n"
    "	mov.f32 	%f4, %f414;\n"
    "	mov.f32 	%f415, %f6;\n"
    "	mov.f32 	%f416, %f48;\n"
    "	mad.f32 	%f417, %f416, %f104, %f415;\n"
    "	mov.f32 	%f6, %f417;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_18690:\n"
    "	ld.shared.s32 	%r32, [%rd13+92];\n"
    "	add.s32 	%r27, %r32, %r6;\n"
    "	ld.shared.f32 	%f418, [%rd14+80];\n"
    "	sub.f32 	%f419, %f19, %f418;\n"
    "	mov.f32 	%f420, %f419;\n"
    "	mul.f32 	%f421, %f14, %f420;\n"
    "	cvt.rni.f32.f32 	%f422, %f421;\n"
    "	mul.f32 	%f423, %f13, %f422;\n"
    "	sub.f32 	%f25, %f419, %f423;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f424, 0f00000000;   	// 0\n"
    "	mad.f32 	%f425, %f25, %f25, %f424;\n"
    "	ld.shared.f32 	%f426, [%rd14+84];\n"
    "	sub.f32 	%f427, %f30, %f426;\n"
    "	mov.f32 	%f428, %f427;\n"
    "	mov.f32 	%f429, %f428;\n"
    "	mul.f32 	%f430, %f14, %f428;\n"
    "	cvt.rni.f32.f32 	%f431, %f430;\n"
    "	mul.f32 	%f432, %f13, %f431;\n"
    "	sub.f32 	%f37, %f427, %f432;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f433, %f37, %f37, %f425;\n"
    "	ld.shared.f32 	%f434, [%rd14+88];\n"
    "	sub.f32 	%f435, %f41, %f434;\n"
    "	mov.f32 	%f436, %f435;\n"
    "	mul.f32 	%f437, %f435, %f14;\n"
    "	cvt.rni.f32.f32 	%f438, %f437;\n"
    "	mul.f32 	%f439, %f13, %f438;\n"
    "	sub.f32 	%f47, %f435, %f439;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f433;\n"
    "	mov.f32 	%f440, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p17, %f49, %f440;\n"
    "	@!%p17 bra 	$Lt_8_19202;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd31, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd32, %r27;\n"
    "	mul.wide.s32 	%rd33, %r27, 24;\n"
    "	add.u64 	%rd18, %rd31, %rd33;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f441, [%rd18+4];\n"
    "	sub.f32 	%f442, %f441, %f51;\n"
    "	mul.f32 	%f55, %f52, %f442;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f443, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f444, %f55, %f443;\n"
    "	cvt.rzi.f32.f32 	%f58, %f444;\n"
    "	mov.f32 	%f445, %f58;\n"
    "	mov.f32 	%f446, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f447, %f446;\n"
    "	mov.f32 	%f448, %f55;\n"
    "	mad.f32 %f449, %f445, %f447, %f448;\n"
    "	mov.f32 	%f64, %f449;\n"
    "	mov.f32 	%f450, %f58;\n"
    "	mov.f32 	%f451, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f452, %f451;\n"
    "	mov.f32 	%f453, %f64;\n"
    "	mad.f32 %f454, %f450, %f452, %f453;\n"
    "	mov.f32 	%f64, %f454;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f455, [%rd18+12];\n"
    "	mov.f32 	%f456, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f457, %f455, %f456;\n"
    "	mul.f32 	%f458, %f73, %f457;\n"
    "	mov.f32 	%f459, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f460, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f461, %f58;\n"
    "	mov.f32 	%f462, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f463, %f64, %f462;\n"
    "	ex2.approx.f32 	%f464, %f463;\n"
    "	mul.f32 	%f465, %f461, %f464;\n"
    "	mov.f32 	%f466, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p18, %f55, %f466;\n"
    "	selp.f32 	%f467, %f460, %f465, %p18;\n"
    "	mov.f32 	%f468, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p19, %f55, %f468;\n"
    "	selp.f32 	%f469, %f459, %f467, %p19;\n"
    "	ld.global.f32 	%f470, [%rd18+0];\n"
    "	mov.f32 	%f471, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f472, %f470, %f471;\n"
    "	mul.f32 	%f473, %f469, %f472;\n"
    "	mul.f32 	%f474, %f52, %f473;\n"
    "	mul.f32 	%f475, %f70, %f474;\n"
    "	sub.f32 	%f476, %f475, %f458;\n"
    "	ld.global.f32 	%f477, [%rd18+16];\n"
    "	mov.f32 	%f478, 0f41000000;   	// 8\n"
    "	mul.f32 	%f479, %f477, %f478;\n"
    "	mul.f32 	%f480, %f73, %f479;\n"
    "	mul.f32 	%f481, %f71, %f480;\n"
    "	sub.f32 	%f482, %f476, %f481;\n"
    "	ld.global.f32 	%f483, [%rd18+20];\n"
    "	mul.f32 	%f484, %f70, %f71;\n"
    "	mad.f32 	%f104, %f483, %f484, %f482;\n"
    "	mov.f32 	%f485, %f2;\n"
    "	mov.f32 	%f486, %f26;\n"
    "	mad.f32 	%f487, %f486, %f104, %f485;\n"
    "	mov.f32 	%f2, %f487;\n"
    "	mov.f32 	%f488, %f4;\n"
    "	mov.f32 	%f489, %f38;\n"
    "	mad.f32 	%f490, %f489, %f104, %f488;\n"
    "	mov.f32 	%f4, %f490;\n"
    "	mov.f32 	%f491, %f6;\n"
    "	mov.f32 	%f492, %f48;\n"
    "	mad.f32 	%f493, %f492, %f104, %f491;\n"
    "	mov.f32 	%f6, %f493;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_19202:\n"
    "	ld.shared.s32 	%r33, [%rd13+108];\n"
    "	add.s32 	%r27, %r33, %r6;\n"
    "	ld.shared.f32 	%f494, [%rd14+96];\n"
    "	sub.f32 	%f495, %f19, %f494;\n"
    "	mov.f32 	%f496, %f495;\n"
    "	mul.f32 	%f497, %f14, %f496;\n"
    "	cvt.rni.f32.f32 	%f498, %f497;\n"
    "	mul.f32 	%f499, %f13, %f498;\n"
    "	sub.f32 	%f25, %f495, %f499;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f500, 0f00000000;   	// 0\n"
    "	mad.f32 	%f501, %f25, %f25, %f500;\n"
    "	ld.shared.f32 	%f502, [%rd14+100];\n"
    "	sub.f32 	%f503, %f30, %f502;\n"
    "	mov.f32 	%f504, %f503;\n"
    "	mov.f32 	%f505, %f504;\n"
    "	mul.f32 	%f506, %f14, %f504;\n"
    "	cvt.rni.f32.f32 	%f507, %f506;\n"
    "	mul.f32 	%f508, %f13, %f507;\n"
    "	sub.f32 	%f37, %f503, %f508;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f509, %f37, %f37, %f501;\n"
    "	ld.shared.f32 	%f510, [%rd14+104];\n"
    "	sub.f32 	%f511, %f41, %f510;\n"
    "	mov.f32 	%f512, %f511;\n"
    "	mul.f32 	%f513, %f511, %f14;\n"
    "	cvt.rni.f32.f32 	%f514, %f513;\n"
    "	mul.f32 	%f515, %f13, %f514;\n"
    "	sub.f32 	%f47, %f511, %f515;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f509;\n"
    "	mov.f32 	%f516, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p20, %f49, %f516;\n"
    "	@!%p20 bra 	$Lt_8_19714;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd34, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd35, %r27;\n"
    "	mul.wide.s32 	%rd36, %r27, 24;\n"
    "	add.u64 	%rd18, %rd34, %rd36;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f517, [%rd18+4];\n"
    "	sub.f32 	%f518, %f517, %f51;\n"
    "	mul.f32 	%f55, %f52, %f518;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f519, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f520, %f55, %f519;\n"
    "	cvt.rzi.f32.f32 	%f58, %f520;\n"
    "	mov.f32 	%f521, %f58;\n"
    "	mov.f32 	%f522, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f523, %f522;\n"
    "	mov.f32 	%f524, %f55;\n"
    "	mad.f32 %f525, %f521, %f523, %f524;\n"
    "	mov.f32 	%f64, %f525;\n"
    "	mov.f32 	%f526, %f58;\n"
    "	mov.f32 	%f527, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f528, %f527;\n"
    "	mov.f32 	%f529, %f64;\n"
    "	mad.f32 %f530, %f526, %f528, %f529;\n"
    "	mov.f32 	%f64, %f530;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f531, [%rd18+12];\n"
    "	mov.f32 	%f532, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f533, %f531, %f532;\n"
    "	mul.f32 	%f534, %f73, %f533;\n"
    "	mov.f32 	%f535, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f536, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f537, %f58;\n"
    "	mov.f32 	%f538, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f539, %f64, %f538;\n"
    "	ex2.approx.f32 	%f540, %f539;\n"
    "	mul.f32 	%f541, %f537, %f540;\n"
    "	mov.f32 	%f542, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p21, %f55, %f542;\n"
    "	selp.f32 	%f543, %f536, %f541, %p21;\n"
    "	mov.f32 	%f544, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p22, %f55, %f544;\n"
    "	selp.f32 	%f545, %f535, %f543, %p22;\n"
    "	ld.global.f32 	%f546, [%rd18+0];\n"
    "	mov.f32 	%f547, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f548, %f546, %f547;\n"
    "	mul.f32 	%f549, %f545, %f548;\n"
    "	mul.f32 	%f550, %f52, %f549;\n"
    "	mul.f32 	%f551, %f70, %f550;\n"
    "	sub.f32 	%f552, %f551, %f534;\n"
    "	ld.global.f32 	%f553, [%rd18+16];\n"
    "	mov.f32 	%f554, 0f41000000;   	// 8\n"
    "	mul.f32 	%f555, %f553, %f554;\n"
    "	mul.f32 	%f556, %f73, %f555;\n"
    "	mul.f32 	%f557, %f71, %f556;\n"
    "	sub.f32 	%f558, %f552, %f557;\n"
    "	ld.global.f32 	%f559, [%rd18+20];\n"
    "	mul.f32 	%f560, %f70, %f71;\n"
    "	mad.f32 	%f104, %f559, %f560, %f558;\n"
    "	mov.f32 	%f561, %f2;\n"
    "	mov.f32 	%f562, %f26;\n"
    "	mad.f32 	%f563, %f562, %f104, %f561;\n"
    "	mov.f32 	%f2, %f563;\n"
    "	mov.f32 	%f564, %f4;\n"
    "	mov.f32 	%f565, %f38;\n"
    "	mad.f32 	%f566, %f565, %f104, %f564;\n"
    "	mov.f32 	%f4, %f566;\n"
    "	mov.f32 	%f567, %f6;\n"
    "	mov.f32 	%f568, %f48;\n"
    "	mad.f32 	%f569, %f568, %f104, %f567;\n"
    "	mov.f32 	%f6, %f569;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_19714:\n"
    "	ld.shared.s32 	%r34, [%rd13+124];\n"
    "	add.s32 	%r27, %r34, %r6;\n"
    "	ld.shared.f32 	%f570, [%rd14+112];\n"
    "	sub.f32 	%f571, %f19, %f570;\n"
    "	mov.f32 	%f572, %f571;\n"
    "	mul.f32 	%f573, %f14, %f572;\n"
    "	cvt.rni.f32.f32 	%f574, %f573;\n"
    "	mul.f32 	%f575, %f13, %f574;\n"
    "	sub.f32 	%f25, %f571, %f575;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f576, 0f00000000;   	// 0\n"
    "	mad.f32 	%f577, %f25, %f25, %f576;\n"
    "	ld.shared.f32 	%f578, [%rd14+116];\n"
    "	sub.f32 	%f579, %f30, %f578;\n"
    "	mov.f32 	%f580, %f579;\n"
    "	mov.f32 	%f581, %f580;\n"
    "	mul.f32 	%f582, %f14, %f580;\n"
    "	cvt.rni.f32.f32 	%f583, %f582;\n"
    "	mul.f32 	%f584, %f13, %f583;\n"
    "	sub.f32 	%f37, %f579, %f584;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f585, %f37, %f37, %f577;\n"
    "	ld.shared.f32 	%f586, [%rd14+120];\n"
    "	sub.f32 	%f587, %f41, %f586;\n"
    "	mov.f32 	%f588, %f587;\n"
    "	mul.f32 	%f589, %f587, %f14;\n"
    "	cvt.rni.f32.f32 	%f590, %f589;\n"
    "	mul.f32 	%f591, %f13, %f590;\n"
    "	sub.f32 	%f47, %f587, %f591;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f585;\n"
    "	mov.f32 	%f592, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p23, %f49, %f592;\n"
    "	@!%p23 bra 	$Lt_8_20226;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd37, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd38, %r27;\n"
    "	mul.wide.s32 	%rd39, %r27, 24;\n"
    "	add.u64 	%rd18, %rd37, %rd39;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f593, [%rd18+4];\n"
    "	sub.f32 	%f594, %f593, %f51;\n"
    "	mul.f32 	%f55, %f52, %f594;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f595, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f596, %f55, %f595;\n"
    "	cvt.rzi.f32.f32 	%f58, %f596;\n"
    "	mov.f32 	%f597, %f58;\n"
    "	mov.f32 	%f598, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f599, %f598;\n"
    "	mov.f32 	%f600, %f55;\n"
    "	mad.f32 %f601, %f597, %f599, %f600;\n"
    "	mov.f32 	%f64, %f601;\n"
    "	mov.f32 	%f602, %f58;\n"
    "	mov.f32 	%f603, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f604, %f603;\n"
    "	mov.f32 	%f605, %f64;\n"
    "	mad.f32 %f606, %f602, %f604, %f605;\n"
    "	mov.f32 	%f64, %f606;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f607, [%rd18+12];\n"
    "	mov.f32 	%f608, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f609, %f607, %f608;\n"
    "	mul.f32 	%f610, %f73, %f609;\n"
    "	mov.f32 	%f611, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f612, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f613, %f58;\n"
    "	mov.f32 	%f614, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f615, %f64, %f614;\n"
    "	ex2.approx.f32 	%f616, %f615;\n"
    "	mul.f32 	%f617, %f613, %f616;\n"
    "	mov.f32 	%f618, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p24, %f55, %f618;\n"
    "	selp.f32 	%f619, %f612, %f617, %p24;\n"
    "	mov.f32 	%f620, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p25, %f55, %f620;\n"
    "	selp.f32 	%f621, %f611, %f619, %p25;\n"
    "	ld.global.f32 	%f622, [%rd18+0];\n"
    "	mov.f32 	%f623, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f624, %f622, %f623;\n"
    "	mul.f32 	%f625, %f621, %f624;\n"
    "	mul.f32 	%f626, %f52, %f625;\n"
    "	mul.f32 	%f627, %f70, %f626;\n"
    "	sub.f32 	%f628, %f627, %f610;\n"
    "	ld.global.f32 	%f629, [%rd18+16];\n"
    "	mov.f32 	%f630, 0f41000000;   	// 8\n"
    "	mul.f32 	%f631, %f629, %f630;\n"
    "	mul.f32 	%f632, %f73, %f631;\n"
    "	mul.f32 	%f633, %f71, %f632;\n"
    "	sub.f32 	%f634, %f628, %f633;\n"
    "	ld.global.f32 	%f635, [%rd18+20];\n"
    "	mul.f32 	%f636, %f70, %f71;\n"
    "	mad.f32 	%f104, %f635, %f636, %f634;\n"
    "	mov.f32 	%f637, %f2;\n"
    "	mov.f32 	%f638, %f26;\n"
    "	mad.f32 	%f639, %f638, %f104, %f637;\n"
    "	mov.f32 	%f2, %f639;\n"
    "	mov.f32 	%f640, %f4;\n"
    "	mov.f32 	%f641, %f38;\n"
    "	mad.f32 	%f642, %f641, %f104, %f640;\n"
    "	mov.f32 	%f4, %f642;\n"
    "	mov.f32 	%f643, %f6;\n"
    "	mov.f32 	%f644, %f48;\n"
    "	mad.f32 	%f645, %f644, %f104, %f643;\n"
    "	mov.f32 	%f6, %f645;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_20226:\n"
    "	ld.shared.s32 	%r35, [%rd13+140];\n"
    "	add.s32 	%r27, %r35, %r6;\n"
    "	ld.shared.f32 	%f646, [%rd14+128];\n"
    "	sub.f32 	%f647, %f19, %f646;\n"
    "	mov.f32 	%f648, %f647;\n"
    "	mul.f32 	%f649, %f14, %f648;\n"
    "	cvt.rni.f32.f32 	%f650, %f649;\n"
    "	mul.f32 	%f651, %f13, %f650;\n"
    "	sub.f32 	%f25, %f647, %f651;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f652, 0f00000000;   	// 0\n"
    "	mad.f32 	%f653, %f25, %f25, %f652;\n"
    "	ld.shared.f32 	%f654, [%rd14+132];\n"
    "	sub.f32 	%f655, %f30, %f654;\n"
    "	mov.f32 	%f656, %f655;\n"
    "	mov.f32 	%f657, %f656;\n"
    "	mul.f32 	%f658, %f14, %f656;\n"
    "	cvt.rni.f32.f32 	%f659, %f658;\n"
    "	mul.f32 	%f660, %f13, %f659;\n"
    "	sub.f32 	%f37, %f655, %f660;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f661, %f37, %f37, %f653;\n"
    "	ld.shared.f32 	%f662, [%rd14+136];\n"
    "	sub.f32 	%f663, %f41, %f662;\n"
    "	mov.f32 	%f664, %f663;\n"
    "	mul.f32 	%f665, %f663, %f14;\n"
    "	cvt.rni.f32.f32 	%f666, %f665;\n"
    "	mul.f32 	%f667, %f13, %f666;\n"
    "	sub.f32 	%f47, %f663, %f667;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f661;\n"
    "	mov.f32 	%f668, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p26, %f49, %f668;\n"
    "	@!%p26 bra 	$Lt_8_20738;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd40, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd41, %r27;\n"
    "	mul.wide.s32 	%rd42, %r27, 24;\n"
    "	add.u64 	%rd18, %rd40, %rd42;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f669, [%rd18+4];\n"
    "	sub.f32 	%f670, %f669, %f51;\n"
    "	mul.f32 	%f55, %f52, %f670;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f671, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f672, %f55, %f671;\n"
    "	cvt.rzi.f32.f32 	%f58, %f672;\n"
    "	mov.f32 	%f673, %f58;\n"
    "	mov.f32 	%f674, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f675, %f674;\n"
    "	mov.f32 	%f676, %f55;\n"
    "	mad.f32 %f677, %f673, %f675, %f676;\n"
    "	mov.f32 	%f64, %f677;\n"
    "	mov.f32 	%f678, %f58;\n"
    "	mov.f32 	%f679, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f680, %f679;\n"
    "	mov.f32 	%f681, %f64;\n"
    "	mad.f32 %f682, %f678, %f680, %f681;\n"
    "	mov.f32 	%f64, %f682;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f683, [%rd18+12];\n"
    "	mov.f32 	%f684, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f685, %f683, %f684;\n"
    "	mul.f32 	%f686, %f73, %f685;\n"
    "	mov.f32 	%f687, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f688, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f689, %f58;\n"
    "	mov.f32 	%f690, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f691, %f64, %f690;\n"
    "	ex2.approx.f32 	%f692, %f691;\n"
    "	mul.f32 	%f693, %f689, %f692;\n"
    "	mov.f32 	%f694, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p27, %f55, %f694;\n"
    "	selp.f32 	%f695, %f688, %f693, %p27;\n"
    "	mov.f32 	%f696, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p28, %f55, %f696;\n"
    "	selp.f32 	%f697, %f687, %f695, %p28;\n"
    "	ld.global.f32 	%f698, [%rd18+0];\n"
    "	mov.f32 	%f699, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f700, %f698, %f699;\n"
    "	mul.f32 	%f701, %f697, %f700;\n"
    "	mul.f32 	%f702, %f52, %f701;\n"
    "	mul.f32 	%f703, %f70, %f702;\n"
    "	sub.f32 	%f704, %f703, %f686;\n"
    "	ld.global.f32 	%f705, [%rd18+16];\n"
    "	mov.f32 	%f706, 0f41000000;   	// 8\n"
    "	mul.f32 	%f707, %f705, %f706;\n"
    "	mul.f32 	%f708, %f73, %f707;\n"
    "	mul.f32 	%f709, %f71, %f708;\n"
    "	sub.f32 	%f710, %f704, %f709;\n"
    "	ld.global.f32 	%f711, [%rd18+20];\n"
    "	mul.f32 	%f712, %f70, %f71;\n"
    "	mad.f32 	%f104, %f711, %f712, %f710;\n"
    "	mov.f32 	%f713, %f2;\n"
    "	mov.f32 	%f714, %f26;\n"
    "	mad.f32 	%f715, %f714, %f104, %f713;\n"
    "	mov.f32 	%f2, %f715;\n"
    "	mov.f32 	%f716, %f4;\n"
    "	mov.f32 	%f717, %f38;\n"
    "	mad.f32 	%f718, %f717, %f104, %f716;\n"
    "	mov.f32 	%f4, %f718;\n"
    "	mov.f32 	%f719, %f6;\n"
    "	mov.f32 	%f720, %f48;\n"
    "	mad.f32 	%f721, %f720, %f104, %f719;\n"
    "	mov.f32 	%f6, %f721;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_20738:\n"
    "	ld.shared.s32 	%r36, [%rd13+156];\n"
    "	add.s32 	%r27, %r36, %r6;\n"
    "	ld.shared.f32 	%f722, [%rd14+144];\n"
    "	sub.f32 	%f723, %f19, %f722;\n"
    "	mov.f32 	%f724, %f723;\n"
    "	mul.f32 	%f725, %f14, %f724;\n"
    "	cvt.rni.f32.f32 	%f726, %f725;\n"
    "	mul.f32 	%f727, %f13, %f726;\n"
    "	sub.f32 	%f25, %f723, %f727;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f728, 0f00000000;   	// 0\n"
    "	mad.f32 	%f729, %f25, %f25, %f728;\n"
    "	ld.shared.f32 	%f730, [%rd14+148];\n"
    "	sub.f32 	%f731, %f30, %f730;\n"
    "	mov.f32 	%f732, %f731;\n"
    "	mov.f32 	%f733, %f732;\n"
    "	mul.f32 	%f734, %f14, %f732;\n"
    "	cvt.rni.f32.f32 	%f735, %f734;\n"
    "	mul.f32 	%f736, %f13, %f735;\n"
    "	sub.f32 	%f37, %f731, %f736;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f737, %f37, %f37, %f729;\n"
    "	ld.shared.f32 	%f738, [%rd14+152];\n"
    "	sub.f32 	%f739, %f41, %f738;\n"
    "	mov.f32 	%f740, %f739;\n"
    "	mul.f32 	%f741, %f739, %f14;\n"
    "	cvt.rni.f32.f32 	%f742, %f741;\n"
    "	mul.f32 	%f743, %f13, %f742;\n"
    "	sub.f32 	%f47, %f739, %f743;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f737;\n"
    "	mov.f32 	%f744, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p29, %f49, %f744;\n"
    "	@!%p29 bra 	$Lt_8_21250;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd43, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd44, %r27;\n"
    "	mul.wide.s32 	%rd45, %r27, 24;\n"
    "	add.u64 	%rd18, %rd43, %rd45;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f745, [%rd18+4];\n"
    "	sub.f32 	%f746, %f745, %f51;\n"
    "	mul.f32 	%f55, %f52, %f746;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f747, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f748, %f55, %f747;\n"
    "	cvt.rzi.f32.f32 	%f58, %f748;\n"
    "	mov.f32 	%f749, %f58;\n"
    "	mov.f32 	%f750, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f751, %f750;\n"
    "	mov.f32 	%f752, %f55;\n"
    "	mad.f32 %f753, %f749, %f751, %f752;\n"
    "	mov.f32 	%f64, %f753;\n"
    "	mov.f32 	%f754, %f58;\n"
    "	mov.f32 	%f755, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f756, %f755;\n"
    "	mov.f32 	%f757, %f64;\n"
    "	mad.f32 %f758, %f754, %f756, %f757;\n"
    "	mov.f32 	%f64, %f758;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f759, [%rd18+12];\n"
    "	mov.f32 	%f760, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f761, %f759, %f760;\n"
    "	mul.f32 	%f762, %f73, %f761;\n"
    "	mov.f32 	%f763, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f764, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f765, %f58;\n"
    "	mov.f32 	%f766, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f767, %f64, %f766;\n"
    "	ex2.approx.f32 	%f768, %f767;\n"
    "	mul.f32 	%f769, %f765, %f768;\n"
    "	mov.f32 	%f770, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p30, %f55, %f770;\n"
    "	selp.f32 	%f771, %f764, %f769, %p30;\n"
    "	mov.f32 	%f772, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p31, %f55, %f772;\n"
    "	selp.f32 	%f773, %f763, %f771, %p31;\n"
    "	ld.global.f32 	%f774, [%rd18+0];\n"
    "	mov.f32 	%f775, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f776, %f774, %f775;\n"
    "	mul.f32 	%f777, %f773, %f776;\n"
    "	mul.f32 	%f778, %f52, %f777;\n"
    "	mul.f32 	%f779, %f70, %f778;\n"
    "	sub.f32 	%f780, %f779, %f762;\n"
    "	ld.global.f32 	%f781, [%rd18+16];\n"
    "	mov.f32 	%f782, 0f41000000;   	// 8\n"
    "	mul.f32 	%f783, %f781, %f782;\n"
    "	mul.f32 	%f784, %f73, %f783;\n"
    "	mul.f32 	%f785, %f71, %f784;\n"
    "	sub.f32 	%f786, %f780, %f785;\n"
    "	ld.global.f32 	%f787, [%rd18+20];\n"
    "	mul.f32 	%f788, %f70, %f71;\n"
    "	mad.f32 	%f104, %f787, %f788, %f786;\n"
    "	mov.f32 	%f789, %f2;\n"
    "	mov.f32 	%f790, %f26;\n"
    "	mad.f32 	%f791, %f790, %f104, %f789;\n"
    "	mov.f32 	%f2, %f791;\n"
    "	mov.f32 	%f792, %f4;\n"
    "	mov.f32 	%f793, %f38;\n"
    "	mad.f32 	%f794, %f793, %f104, %f792;\n"
    "	mov.f32 	%f4, %f794;\n"
    "	mov.f32 	%f795, %f6;\n"
    "	mov.f32 	%f796, %f48;\n"
    "	mad.f32 	%f797, %f796, %f104, %f795;\n"
    "	mov.f32 	%f6, %f797;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_21250:\n"
    "	ld.shared.s32 	%r37, [%rd13+172];\n"
    "	add.s32 	%r27, %r37, %r6;\n"
    "	ld.shared.f32 	%f798, [%rd14+160];\n"
    "	sub.f32 	%f799, %f19, %f798;\n"
    "	mov.f32 	%f800, %f799;\n"
    "	mul.f32 	%f801, %f14, %f800;\n"
    "	cvt.rni.f32.f32 	%f802, %f801;\n"
    "	mul.f32 	%f803, %f13, %f802;\n"
    "	sub.f32 	%f25, %f799, %f803;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f804, 0f00000000;   	// 0\n"
    "	mad.f32 	%f805, %f25, %f25, %f804;\n"
    "	ld.shared.f32 	%f806, [%rd14+164];\n"
    "	sub.f32 	%f807, %f30, %f806;\n"
    "	mov.f32 	%f808, %f807;\n"
    "	mov.f32 	%f809, %f808;\n"
    "	mul.f32 	%f810, %f14, %f808;\n"
    "	cvt.rni.f32.f32 	%f811, %f810;\n"
    "	mul.f32 	%f812, %f13, %f811;\n"
    "	sub.f32 	%f37, %f807, %f812;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f813, %f37, %f37, %f805;\n"
    "	ld.shared.f32 	%f814, [%rd14+168];\n"
    "	sub.f32 	%f815, %f41, %f814;\n"
    "	mov.f32 	%f816, %f815;\n"
    "	mul.f32 	%f817, %f815, %f14;\n"
    "	cvt.rni.f32.f32 	%f818, %f817;\n"
    "	mul.f32 	%f819, %f13, %f818;\n"
    "	sub.f32 	%f47, %f815, %f819;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f813;\n"
    "	mov.f32 	%f820, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p32, %f49, %f820;\n"
    "	@!%p32 bra 	$Lt_8_21762;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd46, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd47, %r27;\n"
    "	mul.wide.s32 	%rd48, %r27, 24;\n"
    "	add.u64 	%rd18, %rd46, %rd48;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f821, [%rd18+4];\n"
    "	sub.f32 	%f822, %f821, %f51;\n"
    "	mul.f32 	%f55, %f52, %f822;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f823, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f824, %f55, %f823;\n"
    "	cvt.rzi.f32.f32 	%f58, %f824;\n"
    "	mov.f32 	%f825, %f58;\n"
    "	mov.f32 	%f826, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f827, %f826;\n"
    "	mov.f32 	%f828, %f55;\n"
    "	mad.f32 %f829, %f825, %f827, %f828;\n"
    "	mov.f32 	%f64, %f829;\n"
    "	mov.f32 	%f830, %f58;\n"
    "	mov.f32 	%f831, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f832, %f831;\n"
    "	mov.f32 	%f833, %f64;\n"
    "	mad.f32 %f834, %f830, %f832, %f833;\n"
    "	mov.f32 	%f64, %f834;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f835, [%rd18+12];\n"
    "	mov.f32 	%f836, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f837, %f835, %f836;\n"
    "	mul.f32 	%f838, %f73, %f837;\n"
    "	mov.f32 	%f839, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f840, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f841, %f58;\n"
    "	mov.f32 	%f842, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f843, %f64, %f842;\n"
    "	ex2.approx.f32 	%f844, %f843;\n"
    "	mul.f32 	%f845, %f841, %f844;\n"
    "	mov.f32 	%f846, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p33, %f55, %f846;\n"
    "	selp.f32 	%f847, %f840, %f845, %p33;\n"
    "	mov.f32 	%f848, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p34, %f55, %f848;\n"
    "	selp.f32 	%f849, %f839, %f847, %p34;\n"
    "	ld.global.f32 	%f850, [%rd18+0];\n"
    "	mov.f32 	%f851, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f852, %f850, %f851;\n"
    "	mul.f32 	%f853, %f849, %f852;\n"
    "	mul.f32 	%f854, %f52, %f853;\n"
    "	mul.f32 	%f855, %f70, %f854;\n"
    "	sub.f32 	%f856, %f855, %f838;\n"
    "	ld.global.f32 	%f857, [%rd18+16];\n"
    "	mov.f32 	%f858, 0f41000000;   	// 8\n"
    "	mul.f32 	%f859, %f857, %f858;\n"
    "	mul.f32 	%f860, %f73, %f859;\n"
    "	mul.f32 	%f861, %f71, %f860;\n"
    "	sub.f32 	%f862, %f856, %f861;\n"
    "	ld.global.f32 	%f863, [%rd18+20];\n"
    "	mul.f32 	%f864, %f70, %f71;\n"
    "	mad.f32 	%f104, %f863, %f864, %f862;\n"
    "	mov.f32 	%f865, %f2;\n"
    "	mov.f32 	%f866, %f26;\n"
    "	mad.f32 	%f867, %f866, %f104, %f865;\n"
    "	mov.f32 	%f2, %f867;\n"
    "	mov.f32 	%f868, %f4;\n"
    "	mov.f32 	%f869, %f38;\n"
    "	mad.f32 	%f870, %f869, %f104, %f868;\n"
    "	mov.f32 	%f4, %f870;\n"
    "	mov.f32 	%f871, %f6;\n"
    "	mov.f32 	%f872, %f48;\n"
    "	mad.f32 	%f873, %f872, %f104, %f871;\n"
    "	mov.f32 	%f6, %f873;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_21762:\n"
    "	ld.shared.s32 	%r38, [%rd13+188];\n"
    "	add.s32 	%r27, %r38, %r6;\n"
    "	ld.shared.f32 	%f874, [%rd14+176];\n"
    "	sub.f32 	%f875, %f19, %f874;\n"
    "	mov.f32 	%f876, %f875;\n"
    "	mul.f32 	%f877, %f14, %f876;\n"
    "	cvt.rni.f32.f32 	%f878, %f877;\n"
    "	mul.f32 	%f879, %f13, %f878;\n"
    "	sub.f32 	%f25, %f875, %f879;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f880, 0f00000000;   	// 0\n"
    "	mad.f32 	%f881, %f25, %f25, %f880;\n"
    "	ld.shared.f32 	%f882, [%rd14+180];\n"
    "	sub.f32 	%f883, %f30, %f882;\n"
    "	mov.f32 	%f884, %f883;\n"
    "	mov.f32 	%f885, %f884;\n"
    "	mul.f32 	%f886, %f14, %f884;\n"
    "	cvt.rni.f32.f32 	%f887, %f886;\n"
    "	mul.f32 	%f888, %f13, %f887;\n"
    "	sub.f32 	%f37, %f883, %f888;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f889, %f37, %f37, %f881;\n"
    "	ld.shared.f32 	%f890, [%rd14+184];\n"
    "	sub.f32 	%f891, %f41, %f890;\n"
    "	mov.f32 	%f892, %f891;\n"
    "	mul.f32 	%f893, %f891, %f14;\n"
    "	cvt.rni.f32.f32 	%f894, %f893;\n"
    "	mul.f32 	%f895, %f13, %f894;\n"
    "	sub.f32 	%f47, %f891, %f895;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f889;\n"
    "	mov.f32 	%f896, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p35, %f49, %f896;\n"
    "	@!%p35 bra 	$Lt_8_22274;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd49, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd50, %r27;\n"
    "	mul.wide.s32 	%rd51, %r27, 24;\n"
    "	add.u64 	%rd18, %rd49, %rd51;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f897, [%rd18+4];\n"
    "	sub.f32 	%f898, %f897, %f51;\n"
    "	mul.f32 	%f55, %f52, %f898;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f899, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f900, %f55, %f899;\n"
    "	cvt.rzi.f32.f32 	%f58, %f900;\n"
    "	mov.f32 	%f901, %f58;\n"
    "	mov.f32 	%f902, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f903, %f902;\n"
    "	mov.f32 	%f904, %f55;\n"
    "	mad.f32 %f905, %f901, %f903, %f904;\n"
    "	mov.f32 	%f64, %f905;\n"
    "	mov.f32 	%f906, %f58;\n"
    "	mov.f32 	%f907, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f908, %f907;\n"
    "	mov.f32 	%f909, %f64;\n"
    "	mad.f32 %f910, %f906, %f908, %f909;\n"
    "	mov.f32 	%f64, %f910;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f911, [%rd18+12];\n"
    "	mov.f32 	%f912, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f913, %f911, %f912;\n"
    "	mul.f32 	%f914, %f73, %f913;\n"
    "	mov.f32 	%f915, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f916, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f917, %f58;\n"
    "	mov.f32 	%f918, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f919, %f64, %f918;\n"
    "	ex2.approx.f32 	%f920, %f919;\n"
    "	mul.f32 	%f921, %f917, %f920;\n"
    "	mov.f32 	%f922, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p36, %f55, %f922;\n"
    "	selp.f32 	%f923, %f916, %f921, %p36;\n"
    "	mov.f32 	%f924, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p37, %f55, %f924;\n"
    "	selp.f32 	%f925, %f915, %f923, %p37;\n"
    "	ld.global.f32 	%f926, [%rd18+0];\n"
    "	mov.f32 	%f927, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f928, %f926, %f927;\n"
    "	mul.f32 	%f929, %f925, %f928;\n"
    "	mul.f32 	%f930, %f52, %f929;\n"
    "	mul.f32 	%f931, %f70, %f930;\n"
    "	sub.f32 	%f932, %f931, %f914;\n"
    "	ld.global.f32 	%f933, [%rd18+16];\n"
    "	mov.f32 	%f934, 0f41000000;   	// 8\n"
    "	mul.f32 	%f935, %f933, %f934;\n"
    "	mul.f32 	%f936, %f73, %f935;\n"
    "	mul.f32 	%f937, %f71, %f936;\n"
    "	sub.f32 	%f938, %f932, %f937;\n"
    "	ld.global.f32 	%f939, [%rd18+20];\n"
    "	mul.f32 	%f940, %f70, %f71;\n"
    "	mad.f32 	%f104, %f939, %f940, %f938;\n"
    "	mov.f32 	%f941, %f2;\n"
    "	mov.f32 	%f942, %f26;\n"
    "	mad.f32 	%f943, %f942, %f104, %f941;\n"
    "	mov.f32 	%f2, %f943;\n"
    "	mov.f32 	%f944, %f4;\n"
    "	mov.f32 	%f945, %f38;\n"
    "	mad.f32 	%f946, %f945, %f104, %f944;\n"
    "	mov.f32 	%f4, %f946;\n"
    "	mov.f32 	%f947, %f6;\n"
    "	mov.f32 	%f948, %f48;\n"
    "	mad.f32 	%f949, %f948, %f104, %f947;\n"
    "	mov.f32 	%f6, %f949;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_22274:\n"
    "	ld.shared.s32 	%r39, [%rd13+204];\n"
    "	add.s32 	%r27, %r39, %r6;\n"
    "	ld.shared.f32 	%f950, [%rd14+192];\n"
    "	sub.f32 	%f951, %f19, %f950;\n"
    "	mov.f32 	%f952, %f951;\n"
    "	mul.f32 	%f953, %f14, %f952;\n"
    "	cvt.rni.f32.f32 	%f954, %f953;\n"
    "	mul.f32 	%f955, %f13, %f954;\n"
    "	sub.f32 	%f25, %f951, %f955;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f956, 0f00000000;   	// 0\n"
    "	mad.f32 	%f957, %f25, %f25, %f956;\n"
    "	ld.shared.f32 	%f958, [%rd14+196];\n"
    "	sub.f32 	%f959, %f30, %f958;\n"
    "	mov.f32 	%f960, %f959;\n"
    "	mov.f32 	%f961, %f960;\n"
    "	mul.f32 	%f962, %f14, %f960;\n"
    "	cvt.rni.f32.f32 	%f963, %f962;\n"
    "	mul.f32 	%f964, %f13, %f963;\n"
    "	sub.f32 	%f37, %f959, %f964;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f965, %f37, %f37, %f957;\n"
    "	ld.shared.f32 	%f966, [%rd14+200];\n"
    "	sub.f32 	%f967, %f41, %f966;\n"
    "	mov.f32 	%f968, %f967;\n"
    "	mul.f32 	%f969, %f967, %f14;\n"
    "	cvt.rni.f32.f32 	%f970, %f969;\n"
    "	mul.f32 	%f971, %f13, %f970;\n"
    "	sub.f32 	%f47, %f967, %f971;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f965;\n"
    "	mov.f32 	%f972, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p38, %f49, %f972;\n"
    "	@!%p38 bra 	$Lt_8_22786;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd52, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd53, %r27;\n"
    "	mul.wide.s32 	%rd54, %r27, 24;\n"
    "	add.u64 	%rd18, %rd52, %rd54;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f973, [%rd18+4];\n"
    "	sub.f32 	%f974, %f973, %f51;\n"
    "	mul.f32 	%f55, %f52, %f974;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f975, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f976, %f55, %f975;\n"
    "	cvt.rzi.f32.f32 	%f58, %f976;\n"
    "	mov.f32 	%f977, %f58;\n"
    "	mov.f32 	%f978, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f979, %f978;\n"
    "	mov.f32 	%f980, %f55;\n"
    "	mad.f32 %f981, %f977, %f979, %f980;\n"
    "	mov.f32 	%f64, %f981;\n"
    "	mov.f32 	%f982, %f58;\n"
    "	mov.f32 	%f983, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f984, %f983;\n"
    "	mov.f32 	%f985, %f64;\n"
    "	mad.f32 %f986, %f982, %f984, %f985;\n"
    "	mov.f32 	%f64, %f986;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f987, [%rd18+12];\n"
    "	mov.f32 	%f988, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f989, %f987, %f988;\n"
    "	mul.f32 	%f990, %f73, %f989;\n"
    "	mov.f32 	%f991, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f992, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f993, %f58;\n"
    "	mov.f32 	%f994, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f995, %f64, %f994;\n"
    "	ex2.approx.f32 	%f996, %f995;\n"
    "	mul.f32 	%f997, %f993, %f996;\n"
    "	mov.f32 	%f998, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p39, %f55, %f998;\n"
    "	selp.f32 	%f999, %f992, %f997, %p39;\n"
    "	mov.f32 	%f1000, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p40, %f55, %f1000;\n"
    "	selp.f32 	%f1001, %f991, %f999, %p40;\n"
    "	ld.global.f32 	%f1002, [%rd18+0];\n"
    "	mov.f32 	%f1003, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1004, %f1002, %f1003;\n"
    "	mul.f32 	%f1005, %f1001, %f1004;\n"
    "	mul.f32 	%f1006, %f52, %f1005;\n"
    "	mul.f32 	%f1007, %f70, %f1006;\n"
    "	sub.f32 	%f1008, %f1007, %f990;\n"
    "	ld.global.f32 	%f1009, [%rd18+16];\n"
    "	mov.f32 	%f1010, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1011, %f1009, %f1010;\n"
    "	mul.f32 	%f1012, %f73, %f1011;\n"
    "	mul.f32 	%f1013, %f71, %f1012;\n"
    "	sub.f32 	%f1014, %f1008, %f1013;\n"
    "	ld.global.f32 	%f1015, [%rd18+20];\n"
    "	mul.f32 	%f1016, %f70, %f71;\n"
    "	mad.f32 	%f104, %f1015, %f1016, %f1014;\n"
    "	mov.f32 	%f1017, %f2;\n"
    "	mov.f32 	%f1018, %f26;\n"
    "	mad.f32 	%f1019, %f1018, %f104, %f1017;\n"
    "	mov.f32 	%f2, %f1019;\n"
    "	mov.f32 	%f1020, %f4;\n"
    "	mov.f32 	%f1021, %f38;\n"
    "	mad.f32 	%f1022, %f1021, %f104, %f1020;\n"
    "	mov.f32 	%f4, %f1022;\n"
    "	mov.f32 	%f1023, %f6;\n"
    "	mov.f32 	%f1024, %f48;\n"
    "	mad.f32 	%f1025, %f1024, %f104, %f1023;\n"
    "	mov.f32 	%f6, %f1025;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_22786:\n"
    "	ld.shared.s32 	%r40, [%rd13+220];\n"
    "	add.s32 	%r27, %r40, %r6;\n"
    "	ld.shared.f32 	%f1026, [%rd14+208];\n"
    "	sub.f32 	%f1027, %f19, %f1026;\n"
    "	mov.f32 	%f1028, %f1027;\n"
    "	mul.f32 	%f1029, %f14, %f1028;\n"
    "	cvt.rni.f32.f32 	%f1030, %f1029;\n"
    "	mul.f32 	%f1031, %f13, %f1030;\n"
    "	sub.f32 	%f25, %f1027, %f1031;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1032, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1033, %f25, %f25, %f1032;\n"
    "	ld.shared.f32 	%f1034, [%rd14+212];\n"
    "	sub.f32 	%f1035, %f30, %f1034;\n"
    "	mov.f32 	%f1036, %f1035;\n"
    "	mov.f32 	%f1037, %f1036;\n"
    "	mul.f32 	%f1038, %f14, %f1036;\n"
    "	cvt.rni.f32.f32 	%f1039, %f1038;\n"
    "	mul.f32 	%f1040, %f13, %f1039;\n"
    "	sub.f32 	%f37, %f1035, %f1040;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1041, %f37, %f37, %f1033;\n"
    "	ld.shared.f32 	%f1042, [%rd14+216];\n"
    "	sub.f32 	%f1043, %f41, %f1042;\n"
    "	mov.f32 	%f1044, %f1043;\n"
    "	mul.f32 	%f1045, %f1043, %f14;\n"
    "	cvt.rni.f32.f32 	%f1046, %f1045;\n"
    "	mul.f32 	%f1047, %f13, %f1046;\n"
    "	sub.f32 	%f47, %f1043, %f1047;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1041;\n"
    "	mov.f32 	%f1048, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p41, %f49, %f1048;\n"
    "	@!%p41 bra 	$Lt_8_23298;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd55, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd56, %r27;\n"
    "	mul.wide.s32 	%rd57, %r27, 24;\n"
    "	add.u64 	%rd18, %rd55, %rd57;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f1049, [%rd18+4];\n"
    "	sub.f32 	%f1050, %f1049, %f51;\n"
    "	mul.f32 	%f55, %f52, %f1050;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f1051, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1052, %f55, %f1051;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1052;\n"
    "	mov.f32 	%f1053, %f58;\n"
    "	mov.f32 	%f1054, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1055, %f1054;\n"
    "	mov.f32 	%f1056, %f55;\n"
    "	mad.f32 %f1057, %f1053, %f1055, %f1056;\n"
    "	mov.f32 	%f64, %f1057;\n"
    "	mov.f32 	%f1058, %f58;\n"
    "	mov.f32 	%f1059, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1060, %f1059;\n"
    "	mov.f32 	%f1061, %f64;\n"
    "	mad.f32 %f1062, %f1058, %f1060, %f1061;\n"
    "	mov.f32 	%f64, %f1062;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f1063, [%rd18+12];\n"
    "	mov.f32 	%f1064, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1065, %f1063, %f1064;\n"
    "	mul.f32 	%f1066, %f73, %f1065;\n"
    "	mov.f32 	%f1067, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1068, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1069, %f58;\n"
    "	mov.f32 	%f1070, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1071, %f64, %f1070;\n"
    "	ex2.approx.f32 	%f1072, %f1071;\n"
    "	mul.f32 	%f1073, %f1069, %f1072;\n"
    "	mov.f32 	%f1074, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p42, %f55, %f1074;\n"
    "	selp.f32 	%f1075, %f1068, %f1073, %p42;\n"
    "	mov.f32 	%f1076, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p43, %f55, %f1076;\n"
    "	selp.f32 	%f1077, %f1067, %f1075, %p43;\n"
    "	ld.global.f32 	%f1078, [%rd18+0];\n"
    "	mov.f32 	%f1079, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1080, %f1078, %f1079;\n"
    "	mul.f32 	%f1081, %f1077, %f1080;\n"
    "	mul.f32 	%f1082, %f52, %f1081;\n"
    "	mul.f32 	%f1083, %f70, %f1082;\n"
    "	sub.f32 	%f1084, %f1083, %f1066;\n"
    "	ld.global.f32 	%f1085, [%rd18+16];\n"
    "	mov.f32 	%f1086, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1087, %f1085, %f1086;\n"
    "	mul.f32 	%f1088, %f73, %f1087;\n"
    "	mul.f32 	%f1089, %f71, %f1088;\n"
    "	sub.f32 	%f1090, %f1084, %f1089;\n"
    "	ld.global.f32 	%f1091, [%rd18+20];\n"
    "	mul.f32 	%f1092, %f70, %f71;\n"
    "	mad.f32 	%f104, %f1091, %f1092, %f1090;\n"
    "	mov.f32 	%f1093, %f2;\n"
    "	mov.f32 	%f1094, %f26;\n"
    "	mad.f32 	%f1095, %f1094, %f104, %f1093;\n"
    "	mov.f32 	%f2, %f1095;\n"
    "	mov.f32 	%f1096, %f4;\n"
    "	mov.f32 	%f1097, %f38;\n"
    "	mad.f32 	%f1098, %f1097, %f104, %f1096;\n"
    "	mov.f32 	%f4, %f1098;\n"
    "	mov.f32 	%f1099, %f6;\n"
    "	mov.f32 	%f1100, %f48;\n"
    "	mad.f32 	%f1101, %f1100, %f104, %f1099;\n"
    "	mov.f32 	%f6, %f1101;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_23298:\n"
    "	ld.shared.s32 	%r41, [%rd13+236];\n"
    "	add.s32 	%r27, %r41, %r6;\n"
    "	ld.shared.f32 	%f1102, [%rd14+224];\n"
    "	sub.f32 	%f1103, %f19, %f1102;\n"
    "	mov.f32 	%f1104, %f1103;\n"
    "	mul.f32 	%f1105, %f14, %f1104;\n"
    "	cvt.rni.f32.f32 	%f1106, %f1105;\n"
    "	mul.f32 	%f1107, %f13, %f1106;\n"
    "	sub.f32 	%f25, %f1103, %f1107;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1108, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1109, %f25, %f25, %f1108;\n"
    "	ld.shared.f32 	%f1110, [%rd14+228];\n"
    "	sub.f32 	%f1111, %f30, %f1110;\n"
    "	mov.f32 	%f1112, %f1111;\n"
    "	mov.f32 	%f1113, %f1112;\n"
    "	mul.f32 	%f1114, %f14, %f1112;\n"
    "	cvt.rni.f32.f32 	%f1115, %f1114;\n"
    "	mul.f32 	%f1116, %f13, %f1115;\n"
    "	sub.f32 	%f37, %f1111, %f1116;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1117, %f37, %f37, %f1109;\n"
    "	ld.shared.f32 	%f1118, [%rd14+232];\n"
    "	sub.f32 	%f1119, %f41, %f1118;\n"
    "	mov.f32 	%f1120, %f1119;\n"
    "	mul.f32 	%f1121, %f1119, %f14;\n"
    "	cvt.rni.f32.f32 	%f1122, %f1121;\n"
    "	mul.f32 	%f1123, %f13, %f1122;\n"
    "	sub.f32 	%f47, %f1119, %f1123;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1117;\n"
    "	mov.f32 	%f1124, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p44, %f49, %f1124;\n"
    "	@!%p44 bra 	$Lt_8_23810;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd58, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd59, %r27;\n"
    "	mul.wide.s32 	%rd60, %r27, 24;\n"
    "	add.u64 	%rd18, %rd58, %rd60;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f1125, [%rd18+4];\n"
    "	sub.f32 	%f1126, %f1125, %f51;\n"
    "	mul.f32 	%f55, %f52, %f1126;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f1127, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1128, %f55, %f1127;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1128;\n"
    "	mov.f32 	%f1129, %f58;\n"
    "	mov.f32 	%f1130, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1131, %f1130;\n"
    "	mov.f32 	%f1132, %f55;\n"
    "	mad.f32 %f1133, %f1129, %f1131, %f1132;\n"
    "	mov.f32 	%f64, %f1133;\n"
    "	mov.f32 	%f1134, %f58;\n"
    "	mov.f32 	%f1135, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1136, %f1135;\n"
    "	mov.f32 	%f1137, %f64;\n"
    "	mad.f32 %f1138, %f1134, %f1136, %f1137;\n"
    "	mov.f32 	%f64, %f1138;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f1139, [%rd18+12];\n"
    "	mov.f32 	%f1140, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1141, %f1139, %f1140;\n"
    "	mul.f32 	%f1142, %f73, %f1141;\n"
    "	mov.f32 	%f1143, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1144, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1145, %f58;\n"
    "	mov.f32 	%f1146, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1147, %f64, %f1146;\n"
    "	ex2.approx.f32 	%f1148, %f1147;\n"
    "	mul.f32 	%f1149, %f1145, %f1148;\n"
    "	mov.f32 	%f1150, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p45, %f55, %f1150;\n"
    "	selp.f32 	%f1151, %f1144, %f1149, %p45;\n"
    "	mov.f32 	%f1152, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p46, %f55, %f1152;\n"
    "	selp.f32 	%f1153, %f1143, %f1151, %p46;\n"
    "	ld.global.f32 	%f1154, [%rd18+0];\n"
    "	mov.f32 	%f1155, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1156, %f1154, %f1155;\n"
    "	mul.f32 	%f1157, %f1153, %f1156;\n"
    "	mul.f32 	%f1158, %f52, %f1157;\n"
    "	mul.f32 	%f1159, %f70, %f1158;\n"
    "	sub.f32 	%f1160, %f1159, %f1142;\n"
    "	ld.global.f32 	%f1161, [%rd18+16];\n"
    "	mov.f32 	%f1162, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1163, %f1161, %f1162;\n"
    "	mul.f32 	%f1164, %f73, %f1163;\n"
    "	mul.f32 	%f1165, %f71, %f1164;\n"
    "	sub.f32 	%f1166, %f1160, %f1165;\n"
    "	ld.global.f32 	%f1167, [%rd18+20];\n"
    "	mul.f32 	%f1168, %f70, %f71;\n"
    "	mad.f32 	%f104, %f1167, %f1168, %f1166;\n"
    "	mov.f32 	%f1169, %f2;\n"
    "	mov.f32 	%f1170, %f26;\n"
    "	mad.f32 	%f1171, %f1170, %f104, %f1169;\n"
    "	mov.f32 	%f2, %f1171;\n"
    "	mov.f32 	%f1172, %f4;\n"
    "	mov.f32 	%f1173, %f38;\n"
    "	mad.f32 	%f1174, %f1173, %f104, %f1172;\n"
    "	mov.f32 	%f4, %f1174;\n"
    "	mov.f32 	%f1175, %f6;\n"
    "	mov.f32 	%f1176, %f48;\n"
    "	mad.f32 	%f1177, %f1176, %f104, %f1175;\n"
    "	mov.f32 	%f6, %f1177;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_23810:\n"
    "	ld.shared.s32 	%r42, [%rd13+252];\n"
    "	add.s32 	%r27, %r42, %r6;\n"
    "	ld.shared.f32 	%f1178, [%rd14+240];\n"
    "	sub.f32 	%f1179, %f19, %f1178;\n"
    "	mov.f32 	%f1180, %f1179;\n"
    "	mul.f32 	%f1181, %f14, %f1180;\n"
    "	cvt.rni.f32.f32 	%f1182, %f1181;\n"
    "	mul.f32 	%f1183, %f13, %f1182;\n"
    "	sub.f32 	%f25, %f1179, %f1183;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1184, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1185, %f25, %f25, %f1184;\n"
    "	ld.shared.f32 	%f1186, [%rd14+244];\n"
    "	sub.f32 	%f1187, %f30, %f1186;\n"
    "	mov.f32 	%f1188, %f1187;\n"
    "	mov.f32 	%f1189, %f1188;\n"
    "	mul.f32 	%f1190, %f14, %f1188;\n"
    "	cvt.rni.f32.f32 	%f1191, %f1190;\n"
    "	mul.f32 	%f1192, %f13, %f1191;\n"
    "	sub.f32 	%f37, %f1187, %f1192;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1193, %f37, %f37, %f1185;\n"
    "	ld.shared.f32 	%f1194, [%rd14+248];\n"
    "	sub.f32 	%f1195, %f41, %f1194;\n"
    "	mov.f32 	%f1196, %f1195;\n"
    "	mul.f32 	%f1197, %f1195, %f14;\n"
    "	cvt.rni.f32.f32 	%f1198, %f1197;\n"
    "	mul.f32 	%f1199, %f13, %f1198;\n"
    "	sub.f32 	%f47, %f1195, %f1199;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1193;\n"
    "	mov.f32 	%f1200, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p47, %f49, %f1200;\n"
    "	@!%p47 bra 	$Lt_8_24322;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd61, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd62, %r27;\n"
    "	mul.wide.s32 	%rd63, %r27, 24;\n"
    "	add.u64 	%rd18, %rd61, %rd63;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f1201, [%rd18+4];\n"
    "	sub.f32 	%f1202, %f1201, %f51;\n"
    "	mul.f32 	%f55, %f52, %f1202;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f1203, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1204, %f55, %f1203;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1204;\n"
    "	mov.f32 	%f1205, %f58;\n"
    "	mov.f32 	%f1206, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1207, %f1206;\n"
    "	mov.f32 	%f1208, %f55;\n"
    "	mad.f32 %f1209, %f1205, %f1207, %f1208;\n"
    "	mov.f32 	%f64, %f1209;\n"
    "	mov.f32 	%f1210, %f58;\n"
    "	mov.f32 	%f1211, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1212, %f1211;\n"
    "	mov.f32 	%f1213, %f64;\n"
    "	mad.f32 %f1214, %f1210, %f1212, %f1213;\n"
    "	mov.f32 	%f64, %f1214;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f1215, [%rd18+12];\n"
    "	mov.f32 	%f1216, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1217, %f1215, %f1216;\n"
    "	mul.f32 	%f1218, %f73, %f1217;\n"
    "	mov.f32 	%f1219, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1220, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1221, %f58;\n"
    "	mov.f32 	%f1222, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1223, %f64, %f1222;\n"
    "	ex2.approx.f32 	%f1224, %f1223;\n"
    "	mul.f32 	%f1225, %f1221, %f1224;\n"
    "	mov.f32 	%f1226, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p48, %f55, %f1226;\n"
    "	selp.f32 	%f1227, %f1220, %f1225, %p48;\n"
    "	mov.f32 	%f1228, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p49, %f55, %f1228;\n"
    "	selp.f32 	%f1229, %f1219, %f1227, %p49;\n"
    "	ld.global.f32 	%f1230, [%rd18+0];\n"
    "	mov.f32 	%f1231, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1232, %f1230, %f1231;\n"
    "	mul.f32 	%f1233, %f1229, %f1232;\n"
    "	mul.f32 	%f1234, %f52, %f1233;\n"
    "	mul.f32 	%f1235, %f70, %f1234;\n"
    "	sub.f32 	%f1236, %f1235, %f1218;\n"
    "	ld.global.f32 	%f1237, [%rd18+16];\n"
    "	mov.f32 	%f1238, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1239, %f1237, %f1238;\n"
    "	mul.f32 	%f1240, %f73, %f1239;\n"
    "	mul.f32 	%f1241, %f71, %f1240;\n"
    "	sub.f32 	%f1242, %f1236, %f1241;\n"
    "	ld.global.f32 	%f1243, [%rd18+20];\n"
    "	mul.f32 	%f1244, %f70, %f71;\n"
    "	mad.f32 	%f104, %f1243, %f1244, %f1242;\n"
    "	mov.f32 	%f1245, %f2;\n"
    "	mov.f32 	%f1246, %f26;\n"
    "	mad.f32 	%f1247, %f1246, %f104, %f1245;\n"
    "	mov.f32 	%f2, %f1247;\n"
    "	mov.f32 	%f1248, %f4;\n"
    "	mov.f32 	%f1249, %f38;\n"
    "	mad.f32 	%f1250, %f1249, %f104, %f1248;\n"
    "	mov.f32 	%f4, %f1250;\n"
    "	mov.f32 	%f1251, %f6;\n"
    "	mov.f32 	%f1252, %f48;\n"
    "	mad.f32 	%f1253, %f1252, %f104, %f1251;\n"
    "	mov.f32 	%f6, %f1253;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_24322:\n"
    "	ld.shared.s32 	%r43, [%rd13+268];\n"
    "	add.s32 	%r27, %r43, %r6;\n"
    "	ld.shared.f32 	%f1254, [%rd14+256];\n"
    "	sub.f32 	%f1255, %f19, %f1254;\n"
    "	mov.f32 	%f1256, %f1255;\n"
    "	mul.f32 	%f1257, %f14, %f1256;\n"
    "	cvt.rni.f32.f32 	%f1258, %f1257;\n"
    "	mul.f32 	%f1259, %f13, %f1258;\n"
    "	sub.f32 	%f25, %f1255, %f1259;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1260, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1261, %f25, %f25, %f1260;\n"
    "	ld.shared.f32 	%f1262, [%rd14+260];\n"
    "	sub.f32 	%f1263, %f30, %f1262;\n"
    "	mov.f32 	%f1264, %f1263;\n"
    "	mov.f32 	%f1265, %f1264;\n"
    "	mul.f32 	%f1266, %f14, %f1264;\n"
    "	cvt.rni.f32.f32 	%f1267, %f1266;\n"
    "	mul.f32 	%f1268, %f13, %f1267;\n"
    "	sub.f32 	%f37, %f1263, %f1268;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1269, %f37, %f37, %f1261;\n"
    "	ld.shared.f32 	%f1270, [%rd14+264];\n"
    "	sub.f32 	%f1271, %f41, %f1270;\n"
    "	mov.f32 	%f1272, %f1271;\n"
    "	mul.f32 	%f1273, %f1271, %f14;\n"
    "	cvt.rni.f32.f32 	%f1274, %f1273;\n"
    "	mul.f32 	%f1275, %f13, %f1274;\n"
    "	sub.f32 	%f47, %f1271, %f1275;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1269;\n"
    "	mov.f32 	%f1276, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p50, %f49, %f1276;\n"
    "	@!%p50 bra 	$Lt_8_24834;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd64, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd65, %r27;\n"
    "	mul.wide.s32 	%rd66, %r27, 24;\n"
    "	add.u64 	%rd18, %rd64, %rd66;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f1277, [%rd18+4];\n"
    "	sub.f32 	%f1278, %f1277, %f51;\n"
    "	mul.f32 	%f55, %f52, %f1278;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f1279, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1280, %f55, %f1279;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1280;\n"
    "	mov.f32 	%f1281, %f58;\n"
    "	mov.f32 	%f1282, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1283, %f1282;\n"
    "	mov.f32 	%f1284, %f55;\n"
    "	mad.f32 %f1285, %f1281, %f1283, %f1284;\n"
    "	mov.f32 	%f64, %f1285;\n"
    "	mov.f32 	%f1286, %f58;\n"
    "	mov.f32 	%f1287, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1288, %f1287;\n"
    "	mov.f32 	%f1289, %f64;\n"
    "	mad.f32 %f1290, %f1286, %f1288, %f1289;\n"
    "	mov.f32 	%f64, %f1290;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f1291, [%rd18+12];\n"
    "	mov.f32 	%f1292, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1293, %f1291, %f1292;\n"
    "	mul.f32 	%f1294, %f73, %f1293;\n"
    "	mov.f32 	%f1295, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1296, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1297, %f58;\n"
    "	mov.f32 	%f1298, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1299, %f64, %f1298;\n"
    "	ex2.approx.f32 	%f1300, %f1299;\n"
    "	mul.f32 	%f1301, %f1297, %f1300;\n"
    "	mov.f32 	%f1302, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p51, %f55, %f1302;\n"
    "	selp.f32 	%f1303, %f1296, %f1301, %p51;\n"
    "	mov.f32 	%f1304, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p52, %f55, %f1304;\n"
    "	selp.f32 	%f1305, %f1295, %f1303, %p52;\n"
    "	ld.global.f32 	%f1306, [%rd18+0];\n"
    "	mov.f32 	%f1307, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1308, %f1306, %f1307;\n"
    "	mul.f32 	%f1309, %f1305, %f1308;\n"
    "	mul.f32 	%f1310, %f52, %f1309;\n"
    "	mul.f32 	%f1311, %f70, %f1310;\n"
    "	sub.f32 	%f1312, %f1311, %f1294;\n"
    "	ld.global.f32 	%f1313, [%rd18+16];\n"
    "	mov.f32 	%f1314, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1315, %f1313, %f1314;\n"
    "	mul.f32 	%f1316, %f73, %f1315;\n"
    "	mul.f32 	%f1317, %f71, %f1316;\n"
    "	sub.f32 	%f1318, %f1312, %f1317;\n"
    "	ld.global.f32 	%f1319, [%rd18+20];\n"
    "	mul.f32 	%f1320, %f70, %f71;\n"
    "	mad.f32 	%f104, %f1319, %f1320, %f1318;\n"
    "	mov.f32 	%f1321, %f2;\n"
    "	mov.f32 	%f1322, %f26;\n"
    "	mad.f32 	%f1323, %f1322, %f104, %f1321;\n"
    "	mov.f32 	%f2, %f1323;\n"
    "	mov.f32 	%f1324, %f4;\n"
    "	mov.f32 	%f1325, %f38;\n"
    "	mad.f32 	%f1326, %f1325, %f104, %f1324;\n"
    "	mov.f32 	%f4, %f1326;\n"
    "	mov.f32 	%f1327, %f6;\n"
    "	mov.f32 	%f1328, %f48;\n"
    "	mad.f32 	%f1329, %f1328, %f104, %f1327;\n"
    "	mov.f32 	%f6, %f1329;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_24834:\n"
    "	ld.shared.s32 	%r44, [%rd13+284];\n"
    "	add.s32 	%r27, %r44, %r6;\n"
    "	ld.shared.f32 	%f1330, [%rd14+272];\n"
    "	sub.f32 	%f1331, %f19, %f1330;\n"
    "	mov.f32 	%f1332, %f1331;\n"
    "	mul.f32 	%f1333, %f14, %f1332;\n"
    "	cvt.rni.f32.f32 	%f1334, %f1333;\n"
    "	mul.f32 	%f1335, %f13, %f1334;\n"
    "	sub.f32 	%f25, %f1331, %f1335;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1336, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1337, %f25, %f25, %f1336;\n"
    "	ld.shared.f32 	%f1338, [%rd14+276];\n"
    "	sub.f32 	%f1339, %f30, %f1338;\n"
    "	mov.f32 	%f1340, %f1339;\n"
    "	mov.f32 	%f1341, %f1340;\n"
    "	mul.f32 	%f1342, %f14, %f1340;\n"
    "	cvt.rni.f32.f32 	%f1343, %f1342;\n"
    "	mul.f32 	%f1344, %f13, %f1343;\n"
    "	sub.f32 	%f37, %f1339, %f1344;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1345, %f37, %f37, %f1337;\n"
    "	ld.shared.f32 	%f1346, [%rd14+280];\n"
    "	sub.f32 	%f1347, %f41, %f1346;\n"
    "	mov.f32 	%f1348, %f1347;\n"
    "	mul.f32 	%f1349, %f1347, %f14;\n"
    "	cvt.rni.f32.f32 	%f1350, %f1349;\n"
    "	mul.f32 	%f1351, %f13, %f1350;\n"
    "	sub.f32 	%f47, %f1347, %f1351;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1345;\n"
    "	mov.f32 	%f1352, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p53, %f49, %f1352;\n"
    "	@!%p53 bra 	$Lt_8_25346;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd67, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd68, %r27;\n"
    "	mul.wide.s32 	%rd69, %r27, 24;\n"
    "	add.u64 	%rd18, %rd67, %rd69;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f1353, [%rd18+4];\n"
    "	sub.f32 	%f1354, %f1353, %f51;\n"
    "	mul.f32 	%f55, %f52, %f1354;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f1355, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1356, %f55, %f1355;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1356;\n"
    "	mov.f32 	%f1357, %f58;\n"
    "	mov.f32 	%f1358, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1359, %f1358;\n"
    "	mov.f32 	%f1360, %f55;\n"
    "	mad.f32 %f1361, %f1357, %f1359, %f1360;\n"
    "	mov.f32 	%f64, %f1361;\n"
    "	mov.f32 	%f1362, %f58;\n"
    "	mov.f32 	%f1363, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1364, %f1363;\n"
    "	mov.f32 	%f1365, %f64;\n"
    "	mad.f32 %f1366, %f1362, %f1364, %f1365;\n"
    "	mov.f32 	%f64, %f1366;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f1367, [%rd18+12];\n"
    "	mov.f32 	%f1368, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1369, %f1367, %f1368;\n"
    "	mul.f32 	%f1370, %f73, %f1369;\n"
    "	mov.f32 	%f1371, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1372, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1373, %f58;\n"
    "	mov.f32 	%f1374, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1375, %f64, %f1374;\n"
    "	ex2.approx.f32 	%f1376, %f1375;\n"
    "	mul.f32 	%f1377, %f1373, %f1376;\n"
    "	mov.f32 	%f1378, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p54, %f55, %f1378;\n"
    "	selp.f32 	%f1379, %f1372, %f1377, %p54;\n"
    "	mov.f32 	%f1380, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p55, %f55, %f1380;\n"
    "	selp.f32 	%f1381, %f1371, %f1379, %p55;\n"
    "	ld.global.f32 	%f1382, [%rd18+0];\n"
    "	mov.f32 	%f1383, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1384, %f1382, %f1383;\n"
    "	mul.f32 	%f1385, %f1381, %f1384;\n"
    "	mul.f32 	%f1386, %f52, %f1385;\n"
    "	mul.f32 	%f1387, %f70, %f1386;\n"
    "	sub.f32 	%f1388, %f1387, %f1370;\n"
    "	ld.global.f32 	%f1389, [%rd18+16];\n"
    "	mov.f32 	%f1390, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1391, %f1389, %f1390;\n"
    "	mul.f32 	%f1392, %f73, %f1391;\n"
    "	mul.f32 	%f1393, %f71, %f1392;\n"
    "	sub.f32 	%f1394, %f1388, %f1393;\n"
    "	ld.global.f32 	%f1395, [%rd18+20];\n"
    "	mul.f32 	%f1396, %f70, %f71;\n"
    "	mad.f32 	%f104, %f1395, %f1396, %f1394;\n"
    "	mov.f32 	%f1397, %f2;\n"
    "	mov.f32 	%f1398, %f26;\n"
    "	mad.f32 	%f1399, %f1398, %f104, %f1397;\n"
    "	mov.f32 	%f2, %f1399;\n"
    "	mov.f32 	%f1400, %f4;\n"
    "	mov.f32 	%f1401, %f38;\n"
    "	mad.f32 	%f1402, %f1401, %f104, %f1400;\n"
    "	mov.f32 	%f4, %f1402;\n"
    "	mov.f32 	%f1403, %f6;\n"
    "	mov.f32 	%f1404, %f48;\n"
    "	mad.f32 	%f1405, %f1404, %f104, %f1403;\n"
    "	mov.f32 	%f6, %f1405;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_25346:\n"
    "	ld.shared.s32 	%r45, [%rd13+300];\n"
    "	add.s32 	%r27, %r45, %r6;\n"
    "	ld.shared.f32 	%f1406, [%rd14+288];\n"
    "	sub.f32 	%f1407, %f19, %f1406;\n"
    "	mov.f32 	%f1408, %f1407;\n"
    "	mul.f32 	%f1409, %f14, %f1408;\n"
    "	cvt.rni.f32.f32 	%f1410, %f1409;\n"
    "	mul.f32 	%f1411, %f13, %f1410;\n"
    "	sub.f32 	%f25, %f1407, %f1411;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1412, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1413, %f25, %f25, %f1412;\n"
    "	ld.shared.f32 	%f1414, [%rd14+292];\n"
    "	sub.f32 	%f1415, %f30, %f1414;\n"
    "	mov.f32 	%f1416, %f1415;\n"
    "	mov.f32 	%f1417, %f1416;\n"
    "	mul.f32 	%f1418, %f14, %f1416;\n"
    "	cvt.rni.f32.f32 	%f1419, %f1418;\n"
    "	mul.f32 	%f1420, %f13, %f1419;\n"
    "	sub.f32 	%f37, %f1415, %f1420;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1421, %f37, %f37, %f1413;\n"
    "	ld.shared.f32 	%f1422, [%rd14+296];\n"
    "	sub.f32 	%f1423, %f41, %f1422;\n"
    "	mov.f32 	%f1424, %f1423;\n"
    "	mul.f32 	%f1425, %f1423, %f14;\n"
    "	cvt.rni.f32.f32 	%f1426, %f1425;\n"
    "	mul.f32 	%f1427, %f13, %f1426;\n"
    "	sub.f32 	%f47, %f1423, %f1427;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1421;\n"
    "	mov.f32 	%f1428, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p56, %f49, %f1428;\n"
    "	@!%p56 bra 	$Lt_8_25858;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd70, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd71, %r27;\n"
    "	mul.wide.s32 	%rd72, %r27, 24;\n"
    "	add.u64 	%rd18, %rd70, %rd72;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f1429, [%rd18+4];\n"
    "	sub.f32 	%f1430, %f1429, %f51;\n"
    "	mul.f32 	%f55, %f52, %f1430;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f1431, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1432, %f55, %f1431;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1432;\n"
    "	mov.f32 	%f1433, %f58;\n"
    "	mov.f32 	%f1434, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1435, %f1434;\n"
    "	mov.f32 	%f1436, %f55;\n"
    "	mad.f32 %f1437, %f1433, %f1435, %f1436;\n"
    "	mov.f32 	%f64, %f1437;\n"
    "	mov.f32 	%f1438, %f58;\n"
    "	mov.f32 	%f1439, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1440, %f1439;\n"
    "	mov.f32 	%f1441, %f64;\n"
    "	mad.f32 %f1442, %f1438, %f1440, %f1441;\n"
    "	mov.f32 	%f64, %f1442;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f1443, [%rd18+12];\n"
    "	mov.f32 	%f1444, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1445, %f1443, %f1444;\n"
    "	mul.f32 	%f1446, %f73, %f1445;\n"
    "	mov.f32 	%f1447, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1448, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1449, %f58;\n"
    "	mov.f32 	%f1450, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1451, %f64, %f1450;\n"
    "	ex2.approx.f32 	%f1452, %f1451;\n"
    "	mul.f32 	%f1453, %f1449, %f1452;\n"
    "	mov.f32 	%f1454, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p57, %f55, %f1454;\n"
    "	selp.f32 	%f1455, %f1448, %f1453, %p57;\n"
    "	mov.f32 	%f1456, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p58, %f55, %f1456;\n"
    "	selp.f32 	%f1457, %f1447, %f1455, %p58;\n"
    "	ld.global.f32 	%f1458, [%rd18+0];\n"
    "	mov.f32 	%f1459, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1460, %f1458, %f1459;\n"
    "	mul.f32 	%f1461, %f1457, %f1460;\n"
    "	mul.f32 	%f1462, %f52, %f1461;\n"
    "	mul.f32 	%f1463, %f70, %f1462;\n"
    "	sub.f32 	%f1464, %f1463, %f1446;\n"
    "	ld.global.f32 	%f1465, [%rd18+16];\n"
    "	mov.f32 	%f1466, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1467, %f1465, %f1466;\n"
    "	mul.f32 	%f1468, %f73, %f1467;\n"
    "	mul.f32 	%f1469, %f71, %f1468;\n"
    "	sub.f32 	%f1470, %f1464, %f1469;\n"
    "	ld.global.f32 	%f1471, [%rd18+20];\n"
    "	mul.f32 	%f1472, %f70, %f71;\n"
    "	mad.f32 	%f104, %f1471, %f1472, %f1470;\n"
    "	mov.f32 	%f1473, %f2;\n"
    "	mov.f32 	%f1474, %f26;\n"
    "	mad.f32 	%f1475, %f1474, %f104, %f1473;\n"
    "	mov.f32 	%f2, %f1475;\n"
    "	mov.f32 	%f1476, %f4;\n"
    "	mov.f32 	%f1477, %f38;\n"
    "	mad.f32 	%f1478, %f1477, %f104, %f1476;\n"
    "	mov.f32 	%f4, %f1478;\n"
    "	mov.f32 	%f1479, %f6;\n"
    "	mov.f32 	%f1480, %f48;\n"
    "	mad.f32 	%f1481, %f1480, %f104, %f1479;\n"
    "	mov.f32 	%f6, %f1481;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_25858:\n"
    "	ld.shared.s32 	%r46, [%rd13+316];\n"
    "	add.s32 	%r27, %r46, %r6;\n"
    "	ld.shared.f32 	%f1482, [%rd14+304];\n"
    "	sub.f32 	%f1483, %f19, %f1482;\n"
    "	mov.f32 	%f1484, %f1483;\n"
    "	mul.f32 	%f1485, %f14, %f1484;\n"
    "	cvt.rni.f32.f32 	%f1486, %f1485;\n"
    "	mul.f32 	%f1487, %f13, %f1486;\n"
    "	sub.f32 	%f25, %f1483, %f1487;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1488, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1489, %f25, %f25, %f1488;\n"
    "	ld.shared.f32 	%f1490, [%rd14+308];\n"
    "	sub.f32 	%f1491, %f30, %f1490;\n"
    "	mov.f32 	%f1492, %f1491;\n"
    "	mov.f32 	%f1493, %f1492;\n"
    "	mul.f32 	%f1494, %f14, %f1492;\n"
    "	cvt.rni.f32.f32 	%f1495, %f1494;\n"
    "	mul.f32 	%f1496, %f13, %f1495;\n"
    "	sub.f32 	%f37, %f1491, %f1496;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1497, %f37, %f37, %f1489;\n"
    "	ld.shared.f32 	%f1498, [%rd14+312];\n"
    "	sub.f32 	%f1499, %f41, %f1498;\n"
    "	mov.f32 	%f1500, %f1499;\n"
    "	mul.f32 	%f1501, %f1499, %f14;\n"
    "	cvt.rni.f32.f32 	%f1502, %f1501;\n"
    "	mul.f32 	%f1503, %f13, %f1502;\n"
    "	sub.f32 	%f47, %f1499, %f1503;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1497;\n"
    "	mov.f32 	%f1504, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p59, %f49, %f1504;\n"
    "	@!%p59 bra 	$Lt_8_26370;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd73, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd74, %r27;\n"
    "	mul.wide.s32 	%rd75, %r27, 24;\n"
    "	add.u64 	%rd18, %rd73, %rd75;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f1505, [%rd18+4];\n"
    "	sub.f32 	%f1506, %f1505, %f51;\n"
    "	mul.f32 	%f55, %f52, %f1506;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f1507, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1508, %f55, %f1507;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1508;\n"
    "	mov.f32 	%f1509, %f58;\n"
    "	mov.f32 	%f1510, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1511, %f1510;\n"
    "	mov.f32 	%f1512, %f55;\n"
    "	mad.f32 %f1513, %f1509, %f1511, %f1512;\n"
    "	mov.f32 	%f64, %f1513;\n"
    "	mov.f32 	%f1514, %f58;\n"
    "	mov.f32 	%f1515, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1516, %f1515;\n"
    "	mov.f32 	%f1517, %f64;\n"
    "	mad.f32 %f1518, %f1514, %f1516, %f1517;\n"
    "	mov.f32 	%f64, %f1518;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f1519, [%rd18+12];\n"
    "	mov.f32 	%f1520, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1521, %f1519, %f1520;\n"
    "	mul.f32 	%f1522, %f73, %f1521;\n"
    "	mov.f32 	%f1523, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1524, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1525, %f58;\n"
    "	mov.f32 	%f1526, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1527, %f64, %f1526;\n"
    "	ex2.approx.f32 	%f1528, %f1527;\n"
    "	mul.f32 	%f1529, %f1525, %f1528;\n"
    "	mov.f32 	%f1530, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p60, %f55, %f1530;\n"
    "	selp.f32 	%f1531, %f1524, %f1529, %p60;\n"
    "	mov.f32 	%f1532, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p61, %f55, %f1532;\n"
    "	selp.f32 	%f1533, %f1523, %f1531, %p61;\n"
    "	ld.global.f32 	%f1534, [%rd18+0];\n"
    "	mov.f32 	%f1535, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1536, %f1534, %f1535;\n"
    "	mul.f32 	%f1537, %f1533, %f1536;\n"
    "	mul.f32 	%f1538, %f52, %f1537;\n"
    "	mul.f32 	%f1539, %f70, %f1538;\n"
    "	sub.f32 	%f1540, %f1539, %f1522;\n"
    "	ld.global.f32 	%f1541, [%rd18+16];\n"
    "	mov.f32 	%f1542, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1543, %f1541, %f1542;\n"
    "	mul.f32 	%f1544, %f73, %f1543;\n"
    "	mul.f32 	%f1545, %f71, %f1544;\n"
    "	sub.f32 	%f1546, %f1540, %f1545;\n"
    "	ld.global.f32 	%f1547, [%rd18+20];\n"
    "	mul.f32 	%f1548, %f70, %f71;\n"
    "	mad.f32 	%f104, %f1547, %f1548, %f1546;\n"
    "	mov.f32 	%f1549, %f2;\n"
    "	mov.f32 	%f1550, %f26;\n"
    "	mad.f32 	%f1551, %f1550, %f104, %f1549;\n"
    "	mov.f32 	%f2, %f1551;\n"
    "	mov.f32 	%f1552, %f4;\n"
    "	mov.f32 	%f1553, %f38;\n"
    "	mad.f32 	%f1554, %f1553, %f104, %f1552;\n"
    "	mov.f32 	%f4, %f1554;\n"
    "	mov.f32 	%f1555, %f6;\n"
    "	mov.f32 	%f1556, %f48;\n"
    "	mad.f32 	%f1557, %f1556, %f104, %f1555;\n"
    "	mov.f32 	%f6, %f1557;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_26370:\n"
    "	ld.shared.s32 	%r47, [%rd13+332];\n"
    "	add.s32 	%r27, %r47, %r6;\n"
    "	ld.shared.f32 	%f1558, [%rd14+320];\n"
    "	sub.f32 	%f1559, %f19, %f1558;\n"
    "	mov.f32 	%f1560, %f1559;\n"
    "	mul.f32 	%f1561, %f14, %f1560;\n"
    "	cvt.rni.f32.f32 	%f1562, %f1561;\n"
    "	mul.f32 	%f1563, %f13, %f1562;\n"
    "	sub.f32 	%f25, %f1559, %f1563;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1564, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1565, %f25, %f25, %f1564;\n"
    "	ld.shared.f32 	%f1566, [%rd14+324];\n"
    "	sub.f32 	%f1567, %f30, %f1566;\n"
    "	mov.f32 	%f1568, %f1567;\n"
    "	mov.f32 	%f1569, %f1568;\n"
    "	mul.f32 	%f1570, %f14, %f1568;\n"
    "	cvt.rni.f32.f32 	%f1571, %f1570;\n"
    "	mul.f32 	%f1572, %f13, %f1571;\n"
    "	sub.f32 	%f37, %f1567, %f1572;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1573, %f37, %f37, %f1565;\n"
    "	ld.shared.f32 	%f1574, [%rd14+328];\n"
    "	sub.f32 	%f1575, %f41, %f1574;\n"
    "	mov.f32 	%f1576, %f1575;\n"
    "	mul.f32 	%f1577, %f1575, %f14;\n"
    "	cvt.rni.f32.f32 	%f1578, %f1577;\n"
    "	mul.f32 	%f1579, %f13, %f1578;\n"
    "	sub.f32 	%f47, %f1575, %f1579;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1573;\n"
    "	mov.f32 	%f1580, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p62, %f49, %f1580;\n"
    "	@!%p62 bra 	$Lt_8_26882;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd76, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd77, %r27;\n"
    "	mul.wide.s32 	%rd78, %r27, 24;\n"
    "	add.u64 	%rd18, %rd76, %rd78;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f1581, [%rd18+4];\n"
    "	sub.f32 	%f1582, %f1581, %f51;\n"
    "	mul.f32 	%f55, %f52, %f1582;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f1583, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1584, %f55, %f1583;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1584;\n"
    "	mov.f32 	%f1585, %f58;\n"
    "	mov.f32 	%f1586, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1587, %f1586;\n"
    "	mov.f32 	%f1588, %f55;\n"
    "	mad.f32 %f1589, %f1585, %f1587, %f1588;\n"
    "	mov.f32 	%f64, %f1589;\n"
    "	mov.f32 	%f1590, %f58;\n"
    "	mov.f32 	%f1591, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1592, %f1591;\n"
    "	mov.f32 	%f1593, %f64;\n"
    "	mad.f32 %f1594, %f1590, %f1592, %f1593;\n"
    "	mov.f32 	%f64, %f1594;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f1595, [%rd18+12];\n"
    "	mov.f32 	%f1596, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1597, %f1595, %f1596;\n"
    "	mul.f32 	%f1598, %f73, %f1597;\n"
    "	mov.f32 	%f1599, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1600, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1601, %f58;\n"
    "	mov.f32 	%f1602, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1603, %f64, %f1602;\n"
    "	ex2.approx.f32 	%f1604, %f1603;\n"
    "	mul.f32 	%f1605, %f1601, %f1604;\n"
    "	mov.f32 	%f1606, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p63, %f55, %f1606;\n"
    "	selp.f32 	%f1607, %f1600, %f1605, %p63;\n"
    "	mov.f32 	%f1608, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p64, %f55, %f1608;\n"
    "	selp.f32 	%f1609, %f1599, %f1607, %p64;\n"
    "	ld.global.f32 	%f1610, [%rd18+0];\n"
    "	mov.f32 	%f1611, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1612, %f1610, %f1611;\n"
    "	mul.f32 	%f1613, %f1609, %f1612;\n"
    "	mul.f32 	%f1614, %f52, %f1613;\n"
    "	mul.f32 	%f1615, %f70, %f1614;\n"
    "	sub.f32 	%f1616, %f1615, %f1598;\n"
    "	ld.global.f32 	%f1617, [%rd18+16];\n"
    "	mov.f32 	%f1618, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1619, %f1617, %f1618;\n"
    "	mul.f32 	%f1620, %f73, %f1619;\n"
    "	mul.f32 	%f1621, %f71, %f1620;\n"
    "	sub.f32 	%f1622, %f1616, %f1621;\n"
    "	ld.global.f32 	%f1623, [%rd18+20];\n"
    "	mul.f32 	%f1624, %f70, %f71;\n"
    "	mad.f32 	%f104, %f1623, %f1624, %f1622;\n"
    "	mov.f32 	%f1625, %f2;\n"
    "	mov.f32 	%f1626, %f26;\n"
    "	mad.f32 	%f1627, %f1626, %f104, %f1625;\n"
    "	mov.f32 	%f2, %f1627;\n"
    "	mov.f32 	%f1628, %f4;\n"
    "	mov.f32 	%f1629, %f38;\n"
    "	mad.f32 	%f1630, %f1629, %f104, %f1628;\n"
    "	mov.f32 	%f4, %f1630;\n"
    "	mov.f32 	%f1631, %f6;\n"
    "	mov.f32 	%f1632, %f48;\n"
    "	mad.f32 	%f1633, %f1632, %f104, %f1631;\n"
    "	mov.f32 	%f6, %f1633;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_26882:\n"
    "	ld.shared.s32 	%r48, [%rd13+348];\n"
    "	add.s32 	%r27, %r48, %r6;\n"
    "	ld.shared.f32 	%f1634, [%rd14+336];\n"
    "	sub.f32 	%f1635, %f19, %f1634;\n"
    "	mov.f32 	%f1636, %f1635;\n"
    "	mul.f32 	%f1637, %f14, %f1636;\n"
    "	cvt.rni.f32.f32 	%f1638, %f1637;\n"
    "	mul.f32 	%f1639, %f13, %f1638;\n"
    "	sub.f32 	%f25, %f1635, %f1639;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1640, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1641, %f25, %f25, %f1640;\n"
    "	ld.shared.f32 	%f1642, [%rd14+340];\n"
    "	sub.f32 	%f1643, %f30, %f1642;\n"
    "	mov.f32 	%f1644, %f1643;\n"
    "	mov.f32 	%f1645, %f1644;\n"
    "	mul.f32 	%f1646, %f14, %f1644;\n"
    "	cvt.rni.f32.f32 	%f1647, %f1646;\n"
    "	mul.f32 	%f1648, %f13, %f1647;\n"
    "	sub.f32 	%f37, %f1643, %f1648;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1649, %f37, %f37, %f1641;\n"
    "	ld.shared.f32 	%f1650, [%rd14+344];\n"
    "	sub.f32 	%f1651, %f41, %f1650;\n"
    "	mov.f32 	%f1652, %f1651;\n"
    "	mul.f32 	%f1653, %f1651, %f14;\n"
    "	cvt.rni.f32.f32 	%f1654, %f1653;\n"
    "	mul.f32 	%f1655, %f13, %f1654;\n"
    "	sub.f32 	%f47, %f1651, %f1655;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1649;\n"
    "	mov.f32 	%f1656, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p65, %f49, %f1656;\n"
    "	@!%p65 bra 	$Lt_8_27394;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd79, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd80, %r27;\n"
    "	mul.wide.s32 	%rd81, %r27, 24;\n"
    "	add.u64 	%rd18, %rd79, %rd81;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f1657, [%rd18+4];\n"
    "	sub.f32 	%f1658, %f1657, %f51;\n"
    "	mul.f32 	%f55, %f52, %f1658;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f1659, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1660, %f55, %f1659;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1660;\n"
    "	mov.f32 	%f1661, %f58;\n"
    "	mov.f32 	%f1662, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1663, %f1662;\n"
    "	mov.f32 	%f1664, %f55;\n"
    "	mad.f32 %f1665, %f1661, %f1663, %f1664;\n"
    "	mov.f32 	%f64, %f1665;\n"
    "	mov.f32 	%f1666, %f58;\n"
    "	mov.f32 	%f1667, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1668, %f1667;\n"
    "	mov.f32 	%f1669, %f64;\n"
    "	mad.f32 %f1670, %f1666, %f1668, %f1669;\n"
    "	mov.f32 	%f64, %f1670;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f1671, [%rd18+12];\n"
    "	mov.f32 	%f1672, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1673, %f1671, %f1672;\n"
    "	mul.f32 	%f1674, %f73, %f1673;\n"
    "	mov.f32 	%f1675, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1676, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1677, %f58;\n"
    "	mov.f32 	%f1678, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1679, %f64, %f1678;\n"
    "	ex2.approx.f32 	%f1680, %f1679;\n"
    "	mul.f32 	%f1681, %f1677, %f1680;\n"
    "	mov.f32 	%f1682, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p66, %f55, %f1682;\n"
    "	selp.f32 	%f1683, %f1676, %f1681, %p66;\n"
    "	mov.f32 	%f1684, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p67, %f55, %f1684;\n"
    "	selp.f32 	%f1685, %f1675, %f1683, %p67;\n"
    "	ld.global.f32 	%f1686, [%rd18+0];\n"
    "	mov.f32 	%f1687, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1688, %f1686, %f1687;\n"
    "	mul.f32 	%f1689, %f1685, %f1688;\n"
    "	mul.f32 	%f1690, %f52, %f1689;\n"
    "	mul.f32 	%f1691, %f70, %f1690;\n"
    "	sub.f32 	%f1692, %f1691, %f1674;\n"
    "	ld.global.f32 	%f1693, [%rd18+16];\n"
    "	mov.f32 	%f1694, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1695, %f1693, %f1694;\n"
    "	mul.f32 	%f1696, %f73, %f1695;\n"
    "	mul.f32 	%f1697, %f71, %f1696;\n"
    "	sub.f32 	%f1698, %f1692, %f1697;\n"
    "	ld.global.f32 	%f1699, [%rd18+20];\n"
    "	mul.f32 	%f1700, %f70, %f71;\n"
    "	mad.f32 	%f104, %f1699, %f1700, %f1698;\n"
    "	mov.f32 	%f1701, %f2;\n"
    "	mov.f32 	%f1702, %f26;\n"
    "	mad.f32 	%f1703, %f1702, %f104, %f1701;\n"
    "	mov.f32 	%f2, %f1703;\n"
    "	mov.f32 	%f1704, %f4;\n"
    "	mov.f32 	%f1705, %f38;\n"
    "	mad.f32 	%f1706, %f1705, %f104, %f1704;\n"
    "	mov.f32 	%f4, %f1706;\n"
    "	mov.f32 	%f1707, %f6;\n"
    "	mov.f32 	%f1708, %f48;\n"
    "	mad.f32 	%f1709, %f1708, %f104, %f1707;\n"
    "	mov.f32 	%f6, %f1709;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_27394:\n"
    "	ld.shared.s32 	%r49, [%rd13+364];\n"
    "	add.s32 	%r27, %r49, %r6;\n"
    "	ld.shared.f32 	%f1710, [%rd14+352];\n"
    "	sub.f32 	%f1711, %f19, %f1710;\n"
    "	mov.f32 	%f1712, %f1711;\n"
    "	mul.f32 	%f1713, %f14, %f1712;\n"
    "	cvt.rni.f32.f32 	%f1714, %f1713;\n"
    "	mul.f32 	%f1715, %f13, %f1714;\n"
    "	sub.f32 	%f25, %f1711, %f1715;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1716, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1717, %f25, %f25, %f1716;\n"
    "	ld.shared.f32 	%f1718, [%rd14+356];\n"
    "	sub.f32 	%f1719, %f30, %f1718;\n"
    "	mov.f32 	%f1720, %f1719;\n"
    "	mov.f32 	%f1721, %f1720;\n"
    "	mul.f32 	%f1722, %f14, %f1720;\n"
    "	cvt.rni.f32.f32 	%f1723, %f1722;\n"
    "	mul.f32 	%f1724, %f13, %f1723;\n"
    "	sub.f32 	%f37, %f1719, %f1724;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1725, %f37, %f37, %f1717;\n"
    "	ld.shared.f32 	%f1726, [%rd14+360];\n"
    "	sub.f32 	%f1727, %f41, %f1726;\n"
    "	mov.f32 	%f1728, %f1727;\n"
    "	mul.f32 	%f1729, %f1727, %f14;\n"
    "	cvt.rni.f32.f32 	%f1730, %f1729;\n"
    "	mul.f32 	%f1731, %f13, %f1730;\n"
    "	sub.f32 	%f47, %f1727, %f1731;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1725;\n"
    "	mov.f32 	%f1732, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p68, %f49, %f1732;\n"
    "	@!%p68 bra 	$Lt_8_27906;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd82, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd83, %r27;\n"
    "	mul.wide.s32 	%rd84, %r27, 24;\n"
    "	add.u64 	%rd18, %rd82, %rd84;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f1733, [%rd18+4];\n"
    "	sub.f32 	%f1734, %f1733, %f51;\n"
    "	mul.f32 	%f55, %f52, %f1734;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f1735, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1736, %f55, %f1735;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1736;\n"
    "	mov.f32 	%f1737, %f58;\n"
    "	mov.f32 	%f1738, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1739, %f1738;\n"
    "	mov.f32 	%f1740, %f55;\n"
    "	mad.f32 %f1741, %f1737, %f1739, %f1740;\n"
    "	mov.f32 	%f64, %f1741;\n"
    "	mov.f32 	%f1742, %f58;\n"
    "	mov.f32 	%f1743, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1744, %f1743;\n"
    "	mov.f32 	%f1745, %f64;\n"
    "	mad.f32 %f1746, %f1742, %f1744, %f1745;\n"
    "	mov.f32 	%f64, %f1746;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f1747, [%rd18+12];\n"
    "	mov.f32 	%f1748, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1749, %f1747, %f1748;\n"
    "	mul.f32 	%f1750, %f73, %f1749;\n"
    "	mov.f32 	%f1751, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1752, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1753, %f58;\n"
    "	mov.f32 	%f1754, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1755, %f64, %f1754;\n"
    "	ex2.approx.f32 	%f1756, %f1755;\n"
    "	mul.f32 	%f1757, %f1753, %f1756;\n"
    "	mov.f32 	%f1758, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p69, %f55, %f1758;\n"
    "	selp.f32 	%f1759, %f1752, %f1757, %p69;\n"
    "	mov.f32 	%f1760, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p70, %f55, %f1760;\n"
    "	selp.f32 	%f1761, %f1751, %f1759, %p70;\n"
    "	ld.global.f32 	%f1762, [%rd18+0];\n"
    "	mov.f32 	%f1763, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1764, %f1762, %f1763;\n"
    "	mul.f32 	%f1765, %f1761, %f1764;\n"
    "	mul.f32 	%f1766, %f52, %f1765;\n"
    "	mul.f32 	%f1767, %f70, %f1766;\n"
    "	sub.f32 	%f1768, %f1767, %f1750;\n"
    "	ld.global.f32 	%f1769, [%rd18+16];\n"
    "	mov.f32 	%f1770, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1771, %f1769, %f1770;\n"
    "	mul.f32 	%f1772, %f73, %f1771;\n"
    "	mul.f32 	%f1773, %f71, %f1772;\n"
    "	sub.f32 	%f1774, %f1768, %f1773;\n"
    "	ld.global.f32 	%f1775, [%rd18+20];\n"
    "	mul.f32 	%f1776, %f70, %f71;\n"
    "	mad.f32 	%f104, %f1775, %f1776, %f1774;\n"
    "	mov.f32 	%f1777, %f2;\n"
    "	mov.f32 	%f1778, %f26;\n"
    "	mad.f32 	%f1779, %f1778, %f104, %f1777;\n"
    "	mov.f32 	%f2, %f1779;\n"
    "	mov.f32 	%f1780, %f4;\n"
    "	mov.f32 	%f1781, %f38;\n"
    "	mad.f32 	%f1782, %f1781, %f104, %f1780;\n"
    "	mov.f32 	%f4, %f1782;\n"
    "	mov.f32 	%f1783, %f6;\n"
    "	mov.f32 	%f1784, %f48;\n"
    "	mad.f32 	%f1785, %f1784, %f104, %f1783;\n"
    "	mov.f32 	%f6, %f1785;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_27906:\n"
    "	ld.shared.s32 	%r50, [%rd13+380];\n"
    "	add.s32 	%r27, %r50, %r6;\n"
    "	ld.shared.f32 	%f1786, [%rd14+368];\n"
    "	sub.f32 	%f1787, %f19, %f1786;\n"
    "	mov.f32 	%f1788, %f1787;\n"
    "	mul.f32 	%f1789, %f14, %f1788;\n"
    "	cvt.rni.f32.f32 	%f1790, %f1789;\n"
    "	mul.f32 	%f1791, %f13, %f1790;\n"
    "	sub.f32 	%f25, %f1787, %f1791;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1792, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1793, %f25, %f25, %f1792;\n"
    "	ld.shared.f32 	%f1794, [%rd14+372];\n"
    "	sub.f32 	%f1795, %f30, %f1794;\n"
    "	mov.f32 	%f1796, %f1795;\n"
    "	mov.f32 	%f1797, %f1796;\n"
    "	mul.f32 	%f1798, %f14, %f1796;\n"
    "	cvt.rni.f32.f32 	%f1799, %f1798;\n"
    "	mul.f32 	%f1800, %f13, %f1799;\n"
    "	sub.f32 	%f37, %f1795, %f1800;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1801, %f37, %f37, %f1793;\n"
    "	ld.shared.f32 	%f1802, [%rd14+376];\n"
    "	sub.f32 	%f1803, %f41, %f1802;\n"
    "	mov.f32 	%f1804, %f1803;\n"
    "	mul.f32 	%f1805, %f1803, %f14;\n"
    "	cvt.rni.f32.f32 	%f1806, %f1805;\n"
    "	mul.f32 	%f1807, %f13, %f1806;\n"
    "	sub.f32 	%f47, %f1803, %f1807;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1801;\n"
    "	mov.f32 	%f1808, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p71, %f49, %f1808;\n"
    "	@!%p71 bra 	$Lt_8_28418;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd85, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd86, %r27;\n"
    "	mul.wide.s32 	%rd87, %r27, 24;\n"
    "	add.u64 	%rd18, %rd85, %rd87;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f1809, [%rd18+4];\n"
    "	sub.f32 	%f1810, %f1809, %f51;\n"
    "	mul.f32 	%f55, %f52, %f1810;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f1811, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1812, %f55, %f1811;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1812;\n"
    "	mov.f32 	%f1813, %f58;\n"
    "	mov.f32 	%f1814, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1815, %f1814;\n"
    "	mov.f32 	%f1816, %f55;\n"
    "	mad.f32 %f1817, %f1813, %f1815, %f1816;\n"
    "	mov.f32 	%f64, %f1817;\n"
    "	mov.f32 	%f1818, %f58;\n"
    "	mov.f32 	%f1819, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1820, %f1819;\n"
    "	mov.f32 	%f1821, %f64;\n"
    "	mad.f32 %f1822, %f1818, %f1820, %f1821;\n"
    "	mov.f32 	%f64, %f1822;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f1823, [%rd18+12];\n"
    "	mov.f32 	%f1824, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1825, %f1823, %f1824;\n"
    "	mul.f32 	%f1826, %f73, %f1825;\n"
    "	mov.f32 	%f1827, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1828, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1829, %f58;\n"
    "	mov.f32 	%f1830, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1831, %f64, %f1830;\n"
    "	ex2.approx.f32 	%f1832, %f1831;\n"
    "	mul.f32 	%f1833, %f1829, %f1832;\n"
    "	mov.f32 	%f1834, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p72, %f55, %f1834;\n"
    "	selp.f32 	%f1835, %f1828, %f1833, %p72;\n"
    "	mov.f32 	%f1836, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p73, %f55, %f1836;\n"
    "	selp.f32 	%f1837, %f1827, %f1835, %p73;\n"
    "	ld.global.f32 	%f1838, [%rd18+0];\n"
    "	mov.f32 	%f1839, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1840, %f1838, %f1839;\n"
    "	mul.f32 	%f1841, %f1837, %f1840;\n"
    "	mul.f32 	%f1842, %f52, %f1841;\n"
    "	mul.f32 	%f1843, %f70, %f1842;\n"
    "	sub.f32 	%f1844, %f1843, %f1826;\n"
    "	ld.global.f32 	%f1845, [%rd18+16];\n"
    "	mov.f32 	%f1846, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1847, %f1845, %f1846;\n"
    "	mul.f32 	%f1848, %f73, %f1847;\n"
    "	mul.f32 	%f1849, %f71, %f1848;\n"
    "	sub.f32 	%f1850, %f1844, %f1849;\n"
    "	ld.global.f32 	%f1851, [%rd18+20];\n"
    "	mul.f32 	%f1852, %f70, %f71;\n"
    "	mad.f32 	%f104, %f1851, %f1852, %f1850;\n"
    "	mov.f32 	%f1853, %f2;\n"
    "	mov.f32 	%f1854, %f26;\n"
    "	mad.f32 	%f1855, %f1854, %f104, %f1853;\n"
    "	mov.f32 	%f2, %f1855;\n"
    "	mov.f32 	%f1856, %f4;\n"
    "	mov.f32 	%f1857, %f38;\n"
    "	mad.f32 	%f1858, %f1857, %f104, %f1856;\n"
    "	mov.f32 	%f4, %f1858;\n"
    "	mov.f32 	%f1859, %f6;\n"
    "	mov.f32 	%f1860, %f48;\n"
    "	mad.f32 	%f1861, %f1860, %f104, %f1859;\n"
    "	mov.f32 	%f6, %f1861;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_28418:\n"
    "	ld.shared.s32 	%r51, [%rd13+396];\n"
    "	add.s32 	%r27, %r51, %r6;\n"
    "	ld.shared.f32 	%f1862, [%rd14+384];\n"
    "	sub.f32 	%f1863, %f19, %f1862;\n"
    "	mov.f32 	%f1864, %f1863;\n"
    "	mul.f32 	%f1865, %f14, %f1864;\n"
    "	cvt.rni.f32.f32 	%f1866, %f1865;\n"
    "	mul.f32 	%f1867, %f13, %f1866;\n"
    "	sub.f32 	%f25, %f1863, %f1867;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1868, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1869, %f25, %f25, %f1868;\n"
    "	ld.shared.f32 	%f1870, [%rd14+388];\n"
    "	sub.f32 	%f1871, %f30, %f1870;\n"
    "	mov.f32 	%f1872, %f1871;\n"
    "	mov.f32 	%f1873, %f1872;\n"
    "	mul.f32 	%f1874, %f14, %f1872;\n"
    "	cvt.rni.f32.f32 	%f1875, %f1874;\n"
    "	mul.f32 	%f1876, %f13, %f1875;\n"
    "	sub.f32 	%f37, %f1871, %f1876;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1877, %f37, %f37, %f1869;\n"
    "	ld.shared.f32 	%f1878, [%rd14+392];\n"
    "	sub.f32 	%f1879, %f41, %f1878;\n"
    "	mov.f32 	%f1880, %f1879;\n"
    "	mul.f32 	%f1881, %f1879, %f14;\n"
    "	cvt.rni.f32.f32 	%f1882, %f1881;\n"
    "	mul.f32 	%f1883, %f13, %f1882;\n"
    "	sub.f32 	%f47, %f1879, %f1883;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1877;\n"
    "	mov.f32 	%f1884, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p74, %f49, %f1884;\n"
    "	@!%p74 bra 	$Lt_8_28930;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd88, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd89, %r27;\n"
    "	mul.wide.s32 	%rd90, %r27, 24;\n"
    "	add.u64 	%rd18, %rd88, %rd90;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f1885, [%rd18+4];\n"
    "	sub.f32 	%f1886, %f1885, %f51;\n"
    "	mul.f32 	%f55, %f52, %f1886;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f1887, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1888, %f55, %f1887;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1888;\n"
    "	mov.f32 	%f1889, %f58;\n"
    "	mov.f32 	%f1890, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1891, %f1890;\n"
    "	mov.f32 	%f1892, %f55;\n"
    "	mad.f32 %f1893, %f1889, %f1891, %f1892;\n"
    "	mov.f32 	%f64, %f1893;\n"
    "	mov.f32 	%f1894, %f58;\n"
    "	mov.f32 	%f1895, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1896, %f1895;\n"
    "	mov.f32 	%f1897, %f64;\n"
    "	mad.f32 %f1898, %f1894, %f1896, %f1897;\n"
    "	mov.f32 	%f64, %f1898;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f1899, [%rd18+12];\n"
    "	mov.f32 	%f1900, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1901, %f1899, %f1900;\n"
    "	mul.f32 	%f1902, %f73, %f1901;\n"
    "	mov.f32 	%f1903, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1904, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1905, %f58;\n"
    "	mov.f32 	%f1906, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1907, %f64, %f1906;\n"
    "	ex2.approx.f32 	%f1908, %f1907;\n"
    "	mul.f32 	%f1909, %f1905, %f1908;\n"
    "	mov.f32 	%f1910, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p75, %f55, %f1910;\n"
    "	selp.f32 	%f1911, %f1904, %f1909, %p75;\n"
    "	mov.f32 	%f1912, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p76, %f55, %f1912;\n"
    "	selp.f32 	%f1913, %f1903, %f1911, %p76;\n"
    "	ld.global.f32 	%f1914, [%rd18+0];\n"
    "	mov.f32 	%f1915, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1916, %f1914, %f1915;\n"
    "	mul.f32 	%f1917, %f1913, %f1916;\n"
    "	mul.f32 	%f1918, %f52, %f1917;\n"
    "	mul.f32 	%f1919, %f70, %f1918;\n"
    "	sub.f32 	%f1920, %f1919, %f1902;\n"
    "	ld.global.f32 	%f1921, [%rd18+16];\n"
    "	mov.f32 	%f1922, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1923, %f1921, %f1922;\n"
    "	mul.f32 	%f1924, %f73, %f1923;\n"
    "	mul.f32 	%f1925, %f71, %f1924;\n"
    "	sub.f32 	%f1926, %f1920, %f1925;\n"
    "	ld.global.f32 	%f1927, [%rd18+20];\n"
    "	mul.f32 	%f1928, %f70, %f71;\n"
    "	mad.f32 	%f104, %f1927, %f1928, %f1926;\n"
    "	mov.f32 	%f1929, %f2;\n"
    "	mov.f32 	%f1930, %f26;\n"
    "	mad.f32 	%f1931, %f1930, %f104, %f1929;\n"
    "	mov.f32 	%f2, %f1931;\n"
    "	mov.f32 	%f1932, %f4;\n"
    "	mov.f32 	%f1933, %f38;\n"
    "	mad.f32 	%f1934, %f1933, %f104, %f1932;\n"
    "	mov.f32 	%f4, %f1934;\n"
    "	mov.f32 	%f1935, %f6;\n"
    "	mov.f32 	%f1936, %f48;\n"
    "	mad.f32 	%f1937, %f1936, %f104, %f1935;\n"
    "	mov.f32 	%f6, %f1937;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_28930:\n"
    "	ld.shared.s32 	%r52, [%rd13+412];\n"
    "	add.s32 	%r27, %r52, %r6;\n"
    "	ld.shared.f32 	%f1938, [%rd14+400];\n"
    "	sub.f32 	%f1939, %f19, %f1938;\n"
    "	mov.f32 	%f1940, %f1939;\n"
    "	mul.f32 	%f1941, %f14, %f1940;\n"
    "	cvt.rni.f32.f32 	%f1942, %f1941;\n"
    "	mul.f32 	%f1943, %f13, %f1942;\n"
    "	sub.f32 	%f25, %f1939, %f1943;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1944, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1945, %f25, %f25, %f1944;\n"
    "	ld.shared.f32 	%f1946, [%rd14+404];\n"
    "	sub.f32 	%f1947, %f30, %f1946;\n"
    "	mov.f32 	%f1948, %f1947;\n"
    "	mov.f32 	%f1949, %f1948;\n"
    "	mul.f32 	%f1950, %f14, %f1948;\n"
    "	cvt.rni.f32.f32 	%f1951, %f1950;\n"
    "	mul.f32 	%f1952, %f13, %f1951;\n"
    "	sub.f32 	%f37, %f1947, %f1952;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1953, %f37, %f37, %f1945;\n"
    "	ld.shared.f32 	%f1954, [%rd14+408];\n"
    "	sub.f32 	%f1955, %f41, %f1954;\n"
    "	mov.f32 	%f1956, %f1955;\n"
    "	mul.f32 	%f1957, %f1955, %f14;\n"
    "	cvt.rni.f32.f32 	%f1958, %f1957;\n"
    "	mul.f32 	%f1959, %f13, %f1958;\n"
    "	sub.f32 	%f47, %f1955, %f1959;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1953;\n"
    "	mov.f32 	%f1960, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p77, %f49, %f1960;\n"
    "	@!%p77 bra 	$Lt_8_29442;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd91, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd92, %r27;\n"
    "	mul.wide.s32 	%rd93, %r27, 24;\n"
    "	add.u64 	%rd18, %rd91, %rd93;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f1961, [%rd18+4];\n"
    "	sub.f32 	%f1962, %f1961, %f51;\n"
    "	mul.f32 	%f55, %f52, %f1962;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f1963, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1964, %f55, %f1963;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1964;\n"
    "	mov.f32 	%f1965, %f58;\n"
    "	mov.f32 	%f1966, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1967, %f1966;\n"
    "	mov.f32 	%f1968, %f55;\n"
    "	mad.f32 %f1969, %f1965, %f1967, %f1968;\n"
    "	mov.f32 	%f64, %f1969;\n"
    "	mov.f32 	%f1970, %f58;\n"
    "	mov.f32 	%f1971, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1972, %f1971;\n"
    "	mov.f32 	%f1973, %f64;\n"
    "	mad.f32 %f1974, %f1970, %f1972, %f1973;\n"
    "	mov.f32 	%f64, %f1974;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f1975, [%rd18+12];\n"
    "	mov.f32 	%f1976, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1977, %f1975, %f1976;\n"
    "	mul.f32 	%f1978, %f73, %f1977;\n"
    "	mov.f32 	%f1979, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1980, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1981, %f58;\n"
    "	mov.f32 	%f1982, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1983, %f64, %f1982;\n"
    "	ex2.approx.f32 	%f1984, %f1983;\n"
    "	mul.f32 	%f1985, %f1981, %f1984;\n"
    "	mov.f32 	%f1986, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p78, %f55, %f1986;\n"
    "	selp.f32 	%f1987, %f1980, %f1985, %p78;\n"
    "	mov.f32 	%f1988, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p79, %f55, %f1988;\n"
    "	selp.f32 	%f1989, %f1979, %f1987, %p79;\n"
    "	ld.global.f32 	%f1990, [%rd18+0];\n"
    "	mov.f32 	%f1991, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1992, %f1990, %f1991;\n"
    "	mul.f32 	%f1993, %f1989, %f1992;\n"
    "	mul.f32 	%f1994, %f52, %f1993;\n"
    "	mul.f32 	%f1995, %f70, %f1994;\n"
    "	sub.f32 	%f1996, %f1995, %f1978;\n"
    "	ld.global.f32 	%f1997, [%rd18+16];\n"
    "	mov.f32 	%f1998, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1999, %f1997, %f1998;\n"
    "	mul.f32 	%f2000, %f73, %f1999;\n"
    "	mul.f32 	%f2001, %f71, %f2000;\n"
    "	sub.f32 	%f2002, %f1996, %f2001;\n"
    "	ld.global.f32 	%f2003, [%rd18+20];\n"
    "	mul.f32 	%f2004, %f70, %f71;\n"
    "	mad.f32 	%f104, %f2003, %f2004, %f2002;\n"
    "	mov.f32 	%f2005, %f2;\n"
    "	mov.f32 	%f2006, %f26;\n"
    "	mad.f32 	%f2007, %f2006, %f104, %f2005;\n"
    "	mov.f32 	%f2, %f2007;\n"
    "	mov.f32 	%f2008, %f4;\n"
    "	mov.f32 	%f2009, %f38;\n"
    "	mad.f32 	%f2010, %f2009, %f104, %f2008;\n"
    "	mov.f32 	%f4, %f2010;\n"
    "	mov.f32 	%f2011, %f6;\n"
    "	mov.f32 	%f2012, %f48;\n"
    "	mad.f32 	%f2013, %f2012, %f104, %f2011;\n"
    "	mov.f32 	%f6, %f2013;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_29442:\n"
    "	ld.shared.s32 	%r53, [%rd13+428];\n"
    "	add.s32 	%r27, %r53, %r6;\n"
    "	ld.shared.f32 	%f2014, [%rd14+416];\n"
    "	sub.f32 	%f2015, %f19, %f2014;\n"
    "	mov.f32 	%f2016, %f2015;\n"
    "	mul.f32 	%f2017, %f14, %f2016;\n"
    "	cvt.rni.f32.f32 	%f2018, %f2017;\n"
    "	mul.f32 	%f2019, %f13, %f2018;\n"
    "	sub.f32 	%f25, %f2015, %f2019;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2020, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2021, %f25, %f25, %f2020;\n"
    "	ld.shared.f32 	%f2022, [%rd14+420];\n"
    "	sub.f32 	%f2023, %f30, %f2022;\n"
    "	mov.f32 	%f2024, %f2023;\n"
    "	mov.f32 	%f2025, %f2024;\n"
    "	mul.f32 	%f2026, %f14, %f2024;\n"
    "	cvt.rni.f32.f32 	%f2027, %f2026;\n"
    "	mul.f32 	%f2028, %f13, %f2027;\n"
    "	sub.f32 	%f37, %f2023, %f2028;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2029, %f37, %f37, %f2021;\n"
    "	ld.shared.f32 	%f2030, [%rd14+424];\n"
    "	sub.f32 	%f2031, %f41, %f2030;\n"
    "	mov.f32 	%f2032, %f2031;\n"
    "	mul.f32 	%f2033, %f2031, %f14;\n"
    "	cvt.rni.f32.f32 	%f2034, %f2033;\n"
    "	mul.f32 	%f2035, %f13, %f2034;\n"
    "	sub.f32 	%f47, %f2031, %f2035;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2029;\n"
    "	mov.f32 	%f2036, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p80, %f49, %f2036;\n"
    "	@!%p80 bra 	$Lt_8_29954;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd94, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd95, %r27;\n"
    "	mul.wide.s32 	%rd96, %r27, 24;\n"
    "	add.u64 	%rd18, %rd94, %rd96;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f2037, [%rd18+4];\n"
    "	sub.f32 	%f2038, %f2037, %f51;\n"
    "	mul.f32 	%f55, %f52, %f2038;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f2039, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2040, %f55, %f2039;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2040;\n"
    "	mov.f32 	%f2041, %f58;\n"
    "	mov.f32 	%f2042, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2043, %f2042;\n"
    "	mov.f32 	%f2044, %f55;\n"
    "	mad.f32 %f2045, %f2041, %f2043, %f2044;\n"
    "	mov.f32 	%f64, %f2045;\n"
    "	mov.f32 	%f2046, %f58;\n"
    "	mov.f32 	%f2047, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2048, %f2047;\n"
    "	mov.f32 	%f2049, %f64;\n"
    "	mad.f32 %f2050, %f2046, %f2048, %f2049;\n"
    "	mov.f32 	%f64, %f2050;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f2051, [%rd18+12];\n"
    "	mov.f32 	%f2052, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2053, %f2051, %f2052;\n"
    "	mul.f32 	%f2054, %f73, %f2053;\n"
    "	mov.f32 	%f2055, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2056, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2057, %f58;\n"
    "	mov.f32 	%f2058, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2059, %f64, %f2058;\n"
    "	ex2.approx.f32 	%f2060, %f2059;\n"
    "	mul.f32 	%f2061, %f2057, %f2060;\n"
    "	mov.f32 	%f2062, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p81, %f55, %f2062;\n"
    "	selp.f32 	%f2063, %f2056, %f2061, %p81;\n"
    "	mov.f32 	%f2064, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p82, %f55, %f2064;\n"
    "	selp.f32 	%f2065, %f2055, %f2063, %p82;\n"
    "	ld.global.f32 	%f2066, [%rd18+0];\n"
    "	mov.f32 	%f2067, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2068, %f2066, %f2067;\n"
    "	mul.f32 	%f2069, %f2065, %f2068;\n"
    "	mul.f32 	%f2070, %f52, %f2069;\n"
    "	mul.f32 	%f2071, %f70, %f2070;\n"
    "	sub.f32 	%f2072, %f2071, %f2054;\n"
    "	ld.global.f32 	%f2073, [%rd18+16];\n"
    "	mov.f32 	%f2074, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2075, %f2073, %f2074;\n"
    "	mul.f32 	%f2076, %f73, %f2075;\n"
    "	mul.f32 	%f2077, %f71, %f2076;\n"
    "	sub.f32 	%f2078, %f2072, %f2077;\n"
    "	ld.global.f32 	%f2079, [%rd18+20];\n"
    "	mul.f32 	%f2080, %f70, %f71;\n"
    "	mad.f32 	%f104, %f2079, %f2080, %f2078;\n"
    "	mov.f32 	%f2081, %f2;\n"
    "	mov.f32 	%f2082, %f26;\n"
    "	mad.f32 	%f2083, %f2082, %f104, %f2081;\n"
    "	mov.f32 	%f2, %f2083;\n"
    "	mov.f32 	%f2084, %f4;\n"
    "	mov.f32 	%f2085, %f38;\n"
    "	mad.f32 	%f2086, %f2085, %f104, %f2084;\n"
    "	mov.f32 	%f4, %f2086;\n"
    "	mov.f32 	%f2087, %f6;\n"
    "	mov.f32 	%f2088, %f48;\n"
    "	mad.f32 	%f2089, %f2088, %f104, %f2087;\n"
    "	mov.f32 	%f6, %f2089;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_29954:\n"
    "	ld.shared.s32 	%r54, [%rd13+444];\n"
    "	add.s32 	%r27, %r54, %r6;\n"
    "	ld.shared.f32 	%f2090, [%rd14+432];\n"
    "	sub.f32 	%f2091, %f19, %f2090;\n"
    "	mov.f32 	%f2092, %f2091;\n"
    "	mul.f32 	%f2093, %f14, %f2092;\n"
    "	cvt.rni.f32.f32 	%f2094, %f2093;\n"
    "	mul.f32 	%f2095, %f13, %f2094;\n"
    "	sub.f32 	%f25, %f2091, %f2095;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2096, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2097, %f25, %f25, %f2096;\n"
    "	ld.shared.f32 	%f2098, [%rd14+436];\n"
    "	sub.f32 	%f2099, %f30, %f2098;\n"
    "	mov.f32 	%f2100, %f2099;\n"
    "	mov.f32 	%f2101, %f2100;\n"
    "	mul.f32 	%f2102, %f14, %f2100;\n"
    "	cvt.rni.f32.f32 	%f2103, %f2102;\n"
    "	mul.f32 	%f2104, %f13, %f2103;\n"
    "	sub.f32 	%f37, %f2099, %f2104;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2105, %f37, %f37, %f2097;\n"
    "	ld.shared.f32 	%f2106, [%rd14+440];\n"
    "	sub.f32 	%f2107, %f41, %f2106;\n"
    "	mov.f32 	%f2108, %f2107;\n"
    "	mul.f32 	%f2109, %f2107, %f14;\n"
    "	cvt.rni.f32.f32 	%f2110, %f2109;\n"
    "	mul.f32 	%f2111, %f13, %f2110;\n"
    "	sub.f32 	%f47, %f2107, %f2111;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2105;\n"
    "	mov.f32 	%f2112, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p83, %f49, %f2112;\n"
    "	@!%p83 bra 	$Lt_8_30466;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd97, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd98, %r27;\n"
    "	mul.wide.s32 	%rd99, %r27, 24;\n"
    "	add.u64 	%rd18, %rd97, %rd99;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f2113, [%rd18+4];\n"
    "	sub.f32 	%f2114, %f2113, %f51;\n"
    "	mul.f32 	%f55, %f52, %f2114;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f2115, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2116, %f55, %f2115;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2116;\n"
    "	mov.f32 	%f2117, %f58;\n"
    "	mov.f32 	%f2118, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2119, %f2118;\n"
    "	mov.f32 	%f2120, %f55;\n"
    "	mad.f32 %f2121, %f2117, %f2119, %f2120;\n"
    "	mov.f32 	%f64, %f2121;\n"
    "	mov.f32 	%f2122, %f58;\n"
    "	mov.f32 	%f2123, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2124, %f2123;\n"
    "	mov.f32 	%f2125, %f64;\n"
    "	mad.f32 %f2126, %f2122, %f2124, %f2125;\n"
    "	mov.f32 	%f64, %f2126;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f2127, [%rd18+12];\n"
    "	mov.f32 	%f2128, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2129, %f2127, %f2128;\n"
    "	mul.f32 	%f2130, %f73, %f2129;\n"
    "	mov.f32 	%f2131, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2132, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2133, %f58;\n"
    "	mov.f32 	%f2134, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2135, %f64, %f2134;\n"
    "	ex2.approx.f32 	%f2136, %f2135;\n"
    "	mul.f32 	%f2137, %f2133, %f2136;\n"
    "	mov.f32 	%f2138, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p84, %f55, %f2138;\n"
    "	selp.f32 	%f2139, %f2132, %f2137, %p84;\n"
    "	mov.f32 	%f2140, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p85, %f55, %f2140;\n"
    "	selp.f32 	%f2141, %f2131, %f2139, %p85;\n"
    "	ld.global.f32 	%f2142, [%rd18+0];\n"
    "	mov.f32 	%f2143, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2144, %f2142, %f2143;\n"
    "	mul.f32 	%f2145, %f2141, %f2144;\n"
    "	mul.f32 	%f2146, %f52, %f2145;\n"
    "	mul.f32 	%f2147, %f70, %f2146;\n"
    "	sub.f32 	%f2148, %f2147, %f2130;\n"
    "	ld.global.f32 	%f2149, [%rd18+16];\n"
    "	mov.f32 	%f2150, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2151, %f2149, %f2150;\n"
    "	mul.f32 	%f2152, %f73, %f2151;\n"
    "	mul.f32 	%f2153, %f71, %f2152;\n"
    "	sub.f32 	%f2154, %f2148, %f2153;\n"
    "	ld.global.f32 	%f2155, [%rd18+20];\n"
    "	mul.f32 	%f2156, %f70, %f71;\n"
    "	mad.f32 	%f104, %f2155, %f2156, %f2154;\n"
    "	mov.f32 	%f2157, %f2;\n"
    "	mov.f32 	%f2158, %f26;\n"
    "	mad.f32 	%f2159, %f2158, %f104, %f2157;\n"
    "	mov.f32 	%f2, %f2159;\n"
    "	mov.f32 	%f2160, %f4;\n"
    "	mov.f32 	%f2161, %f38;\n"
    "	mad.f32 	%f2162, %f2161, %f104, %f2160;\n"
    "	mov.f32 	%f4, %f2162;\n"
    "	mov.f32 	%f2163, %f6;\n"
    "	mov.f32 	%f2164, %f48;\n"
    "	mad.f32 	%f2165, %f2164, %f104, %f2163;\n"
    "	mov.f32 	%f6, %f2165;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_30466:\n"
    "	ld.shared.s32 	%r55, [%rd13+460];\n"
    "	add.s32 	%r27, %r55, %r6;\n"
    "	ld.shared.f32 	%f2166, [%rd14+448];\n"
    "	sub.f32 	%f2167, %f19, %f2166;\n"
    "	mov.f32 	%f2168, %f2167;\n"
    "	mul.f32 	%f2169, %f14, %f2168;\n"
    "	cvt.rni.f32.f32 	%f2170, %f2169;\n"
    "	mul.f32 	%f2171, %f13, %f2170;\n"
    "	sub.f32 	%f25, %f2167, %f2171;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2172, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2173, %f25, %f25, %f2172;\n"
    "	ld.shared.f32 	%f2174, [%rd14+452];\n"
    "	sub.f32 	%f2175, %f30, %f2174;\n"
    "	mov.f32 	%f2176, %f2175;\n"
    "	mov.f32 	%f2177, %f2176;\n"
    "	mul.f32 	%f2178, %f14, %f2176;\n"
    "	cvt.rni.f32.f32 	%f2179, %f2178;\n"
    "	mul.f32 	%f2180, %f13, %f2179;\n"
    "	sub.f32 	%f37, %f2175, %f2180;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2181, %f37, %f37, %f2173;\n"
    "	ld.shared.f32 	%f2182, [%rd14+456];\n"
    "	sub.f32 	%f2183, %f41, %f2182;\n"
    "	mov.f32 	%f2184, %f2183;\n"
    "	mul.f32 	%f2185, %f2183, %f14;\n"
    "	cvt.rni.f32.f32 	%f2186, %f2185;\n"
    "	mul.f32 	%f2187, %f13, %f2186;\n"
    "	sub.f32 	%f47, %f2183, %f2187;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2181;\n"
    "	mov.f32 	%f2188, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p86, %f49, %f2188;\n"
    "	@!%p86 bra 	$Lt_8_30978;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd100, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd101, %r27;\n"
    "	mul.wide.s32 	%rd102, %r27, 24;\n"
    "	add.u64 	%rd18, %rd100, %rd102;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f2189, [%rd18+4];\n"
    "	sub.f32 	%f2190, %f2189, %f51;\n"
    "	mul.f32 	%f55, %f52, %f2190;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f2191, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2192, %f55, %f2191;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2192;\n"
    "	mov.f32 	%f2193, %f58;\n"
    "	mov.f32 	%f2194, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2195, %f2194;\n"
    "	mov.f32 	%f2196, %f55;\n"
    "	mad.f32 %f2197, %f2193, %f2195, %f2196;\n"
    "	mov.f32 	%f64, %f2197;\n"
    "	mov.f32 	%f2198, %f58;\n"
    "	mov.f32 	%f2199, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2200, %f2199;\n"
    "	mov.f32 	%f2201, %f64;\n"
    "	mad.f32 %f2202, %f2198, %f2200, %f2201;\n"
    "	mov.f32 	%f64, %f2202;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f2203, [%rd18+12];\n"
    "	mov.f32 	%f2204, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2205, %f2203, %f2204;\n"
    "	mul.f32 	%f2206, %f73, %f2205;\n"
    "	mov.f32 	%f2207, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2208, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2209, %f58;\n"
    "	mov.f32 	%f2210, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2211, %f64, %f2210;\n"
    "	ex2.approx.f32 	%f2212, %f2211;\n"
    "	mul.f32 	%f2213, %f2209, %f2212;\n"
    "	mov.f32 	%f2214, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p87, %f55, %f2214;\n"
    "	selp.f32 	%f2215, %f2208, %f2213, %p87;\n"
    "	mov.f32 	%f2216, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p88, %f55, %f2216;\n"
    "	selp.f32 	%f2217, %f2207, %f2215, %p88;\n"
    "	ld.global.f32 	%f2218, [%rd18+0];\n"
    "	mov.f32 	%f2219, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2220, %f2218, %f2219;\n"
    "	mul.f32 	%f2221, %f2217, %f2220;\n"
    "	mul.f32 	%f2222, %f52, %f2221;\n"
    "	mul.f32 	%f2223, %f70, %f2222;\n"
    "	sub.f32 	%f2224, %f2223, %f2206;\n"
    "	ld.global.f32 	%f2225, [%rd18+16];\n"
    "	mov.f32 	%f2226, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2227, %f2225, %f2226;\n"
    "	mul.f32 	%f2228, %f73, %f2227;\n"
    "	mul.f32 	%f2229, %f71, %f2228;\n"
    "	sub.f32 	%f2230, %f2224, %f2229;\n"
    "	ld.global.f32 	%f2231, [%rd18+20];\n"
    "	mul.f32 	%f2232, %f70, %f71;\n"
    "	mad.f32 	%f104, %f2231, %f2232, %f2230;\n"
    "	mov.f32 	%f2233, %f2;\n"
    "	mov.f32 	%f2234, %f26;\n"
    "	mad.f32 	%f2235, %f2234, %f104, %f2233;\n"
    "	mov.f32 	%f2, %f2235;\n"
    "	mov.f32 	%f2236, %f4;\n"
    "	mov.f32 	%f2237, %f38;\n"
    "	mad.f32 	%f2238, %f2237, %f104, %f2236;\n"
    "	mov.f32 	%f4, %f2238;\n"
    "	mov.f32 	%f2239, %f6;\n"
    "	mov.f32 	%f2240, %f48;\n"
    "	mad.f32 	%f2241, %f2240, %f104, %f2239;\n"
    "	mov.f32 	%f6, %f2241;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_30978:\n"
    "	ld.shared.s32 	%r56, [%rd13+476];\n"
    "	add.s32 	%r27, %r56, %r6;\n"
    "	ld.shared.f32 	%f2242, [%rd14+464];\n"
    "	sub.f32 	%f2243, %f19, %f2242;\n"
    "	mov.f32 	%f2244, %f2243;\n"
    "	mul.f32 	%f2245, %f14, %f2244;\n"
    "	cvt.rni.f32.f32 	%f2246, %f2245;\n"
    "	mul.f32 	%f2247, %f13, %f2246;\n"
    "	sub.f32 	%f25, %f2243, %f2247;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2248, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2249, %f25, %f25, %f2248;\n"
    "	ld.shared.f32 	%f2250, [%rd14+468];\n"
    "	sub.f32 	%f2251, %f30, %f2250;\n"
    "	mov.f32 	%f2252, %f2251;\n"
    "	mov.f32 	%f2253, %f2252;\n"
    "	mul.f32 	%f2254, %f14, %f2252;\n"
    "	cvt.rni.f32.f32 	%f2255, %f2254;\n"
    "	mul.f32 	%f2256, %f13, %f2255;\n"
    "	sub.f32 	%f37, %f2251, %f2256;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2257, %f37, %f37, %f2249;\n"
    "	ld.shared.f32 	%f2258, [%rd14+472];\n"
    "	sub.f32 	%f2259, %f41, %f2258;\n"
    "	mov.f32 	%f2260, %f2259;\n"
    "	mul.f32 	%f2261, %f2259, %f14;\n"
    "	cvt.rni.f32.f32 	%f2262, %f2261;\n"
    "	mul.f32 	%f2263, %f13, %f2262;\n"
    "	sub.f32 	%f47, %f2259, %f2263;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2257;\n"
    "	mov.f32 	%f2264, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p89, %f49, %f2264;\n"
    "	@!%p89 bra 	$Lt_8_31490;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd103, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd104, %r27;\n"
    "	mul.wide.s32 	%rd105, %r27, 24;\n"
    "	add.u64 	%rd18, %rd103, %rd105;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f2265, [%rd18+4];\n"
    "	sub.f32 	%f2266, %f2265, %f51;\n"
    "	mul.f32 	%f55, %f52, %f2266;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f2267, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2268, %f55, %f2267;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2268;\n"
    "	mov.f32 	%f2269, %f58;\n"
    "	mov.f32 	%f2270, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2271, %f2270;\n"
    "	mov.f32 	%f2272, %f55;\n"
    "	mad.f32 %f2273, %f2269, %f2271, %f2272;\n"
    "	mov.f32 	%f64, %f2273;\n"
    "	mov.f32 	%f2274, %f58;\n"
    "	mov.f32 	%f2275, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2276, %f2275;\n"
    "	mov.f32 	%f2277, %f64;\n"
    "	mad.f32 %f2278, %f2274, %f2276, %f2277;\n"
    "	mov.f32 	%f64, %f2278;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f2279, [%rd18+12];\n"
    "	mov.f32 	%f2280, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2281, %f2279, %f2280;\n"
    "	mul.f32 	%f2282, %f73, %f2281;\n"
    "	mov.f32 	%f2283, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2284, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2285, %f58;\n"
    "	mov.f32 	%f2286, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2287, %f64, %f2286;\n"
    "	ex2.approx.f32 	%f2288, %f2287;\n"
    "	mul.f32 	%f2289, %f2285, %f2288;\n"
    "	mov.f32 	%f2290, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p90, %f55, %f2290;\n"
    "	selp.f32 	%f2291, %f2284, %f2289, %p90;\n"
    "	mov.f32 	%f2292, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p91, %f55, %f2292;\n"
    "	selp.f32 	%f2293, %f2283, %f2291, %p91;\n"
    "	ld.global.f32 	%f2294, [%rd18+0];\n"
    "	mov.f32 	%f2295, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2296, %f2294, %f2295;\n"
    "	mul.f32 	%f2297, %f2293, %f2296;\n"
    "	mul.f32 	%f2298, %f52, %f2297;\n"
    "	mul.f32 	%f2299, %f70, %f2298;\n"
    "	sub.f32 	%f2300, %f2299, %f2282;\n"
    "	ld.global.f32 	%f2301, [%rd18+16];\n"
    "	mov.f32 	%f2302, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2303, %f2301, %f2302;\n"
    "	mul.f32 	%f2304, %f73, %f2303;\n"
    "	mul.f32 	%f2305, %f71, %f2304;\n"
    "	sub.f32 	%f2306, %f2300, %f2305;\n"
    "	ld.global.f32 	%f2307, [%rd18+20];\n"
    "	mul.f32 	%f2308, %f70, %f71;\n"
    "	mad.f32 	%f104, %f2307, %f2308, %f2306;\n"
    "	mov.f32 	%f2309, %f2;\n"
    "	mov.f32 	%f2310, %f26;\n"
    "	mad.f32 	%f2311, %f2310, %f104, %f2309;\n"
    "	mov.f32 	%f2, %f2311;\n"
    "	mov.f32 	%f2312, %f4;\n"
    "	mov.f32 	%f2313, %f38;\n"
    "	mad.f32 	%f2314, %f2313, %f104, %f2312;\n"
    "	mov.f32 	%f4, %f2314;\n"
    "	mov.f32 	%f2315, %f6;\n"
    "	mov.f32 	%f2316, %f48;\n"
    "	mad.f32 	%f2317, %f2316, %f104, %f2315;\n"
    "	mov.f32 	%f6, %f2317;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_31490:\n"
    "	ld.shared.s32 	%r57, [%rd13+492];\n"
    "	add.s32 	%r27, %r57, %r6;\n"
    "	ld.shared.f32 	%f2318, [%rd14+480];\n"
    "	sub.f32 	%f2319, %f19, %f2318;\n"
    "	mov.f32 	%f2320, %f2319;\n"
    "	mul.f32 	%f2321, %f14, %f2320;\n"
    "	cvt.rni.f32.f32 	%f2322, %f2321;\n"
    "	mul.f32 	%f2323, %f13, %f2322;\n"
    "	sub.f32 	%f25, %f2319, %f2323;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2324, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2325, %f25, %f25, %f2324;\n"
    "	ld.shared.f32 	%f2326, [%rd14+484];\n"
    "	sub.f32 	%f2327, %f30, %f2326;\n"
    "	mov.f32 	%f2328, %f2327;\n"
    "	mov.f32 	%f2329, %f2328;\n"
    "	mul.f32 	%f2330, %f14, %f2328;\n"
    "	cvt.rni.f32.f32 	%f2331, %f2330;\n"
    "	mul.f32 	%f2332, %f13, %f2331;\n"
    "	sub.f32 	%f37, %f2327, %f2332;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2333, %f37, %f37, %f2325;\n"
    "	ld.shared.f32 	%f2334, [%rd14+488];\n"
    "	sub.f32 	%f2335, %f41, %f2334;\n"
    "	mov.f32 	%f2336, %f2335;\n"
    "	mul.f32 	%f2337, %f2335, %f14;\n"
    "	cvt.rni.f32.f32 	%f2338, %f2337;\n"
    "	mul.f32 	%f2339, %f13, %f2338;\n"
    "	sub.f32 	%f47, %f2335, %f2339;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2333;\n"
    "	mov.f32 	%f2340, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p92, %f49, %f2340;\n"
    "	@!%p92 bra 	$Lt_8_32002;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd106, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd107, %r27;\n"
    "	mul.wide.s32 	%rd108, %r27, 24;\n"
    "	add.u64 	%rd18, %rd106, %rd108;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f2341, [%rd18+4];\n"
    "	sub.f32 	%f2342, %f2341, %f51;\n"
    "	mul.f32 	%f55, %f52, %f2342;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f2343, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2344, %f55, %f2343;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2344;\n"
    "	mov.f32 	%f2345, %f58;\n"
    "	mov.f32 	%f2346, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2347, %f2346;\n"
    "	mov.f32 	%f2348, %f55;\n"
    "	mad.f32 %f2349, %f2345, %f2347, %f2348;\n"
    "	mov.f32 	%f64, %f2349;\n"
    "	mov.f32 	%f2350, %f58;\n"
    "	mov.f32 	%f2351, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2352, %f2351;\n"
    "	mov.f32 	%f2353, %f64;\n"
    "	mad.f32 %f2354, %f2350, %f2352, %f2353;\n"
    "	mov.f32 	%f64, %f2354;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f2355, [%rd18+12];\n"
    "	mov.f32 	%f2356, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2357, %f2355, %f2356;\n"
    "	mul.f32 	%f2358, %f73, %f2357;\n"
    "	mov.f32 	%f2359, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2360, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2361, %f58;\n"
    "	mov.f32 	%f2362, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2363, %f64, %f2362;\n"
    "	ex2.approx.f32 	%f2364, %f2363;\n"
    "	mul.f32 	%f2365, %f2361, %f2364;\n"
    "	mov.f32 	%f2366, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p93, %f55, %f2366;\n"
    "	selp.f32 	%f2367, %f2360, %f2365, %p93;\n"
    "	mov.f32 	%f2368, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p94, %f55, %f2368;\n"
    "	selp.f32 	%f2369, %f2359, %f2367, %p94;\n"
    "	ld.global.f32 	%f2370, [%rd18+0];\n"
    "	mov.f32 	%f2371, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2372, %f2370, %f2371;\n"
    "	mul.f32 	%f2373, %f2369, %f2372;\n"
    "	mul.f32 	%f2374, %f52, %f2373;\n"
    "	mul.f32 	%f2375, %f70, %f2374;\n"
    "	sub.f32 	%f2376, %f2375, %f2358;\n"
    "	ld.global.f32 	%f2377, [%rd18+16];\n"
    "	mov.f32 	%f2378, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2379, %f2377, %f2378;\n"
    "	mul.f32 	%f2380, %f73, %f2379;\n"
    "	mul.f32 	%f2381, %f71, %f2380;\n"
    "	sub.f32 	%f2382, %f2376, %f2381;\n"
    "	ld.global.f32 	%f2383, [%rd18+20];\n"
    "	mul.f32 	%f2384, %f70, %f71;\n"
    "	mad.f32 	%f104, %f2383, %f2384, %f2382;\n"
    "	mov.f32 	%f2385, %f2;\n"
    "	mov.f32 	%f2386, %f26;\n"
    "	mad.f32 	%f2387, %f2386, %f104, %f2385;\n"
    "	mov.f32 	%f2, %f2387;\n"
    "	mov.f32 	%f2388, %f4;\n"
    "	mov.f32 	%f2389, %f38;\n"
    "	mad.f32 	%f2390, %f2389, %f104, %f2388;\n"
    "	mov.f32 	%f4, %f2390;\n"
    "	mov.f32 	%f2391, %f6;\n"
    "	mov.f32 	%f2392, %f48;\n"
    "	mad.f32 	%f2393, %f2392, %f104, %f2391;\n"
    "	mov.f32 	%f6, %f2393;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_32002:\n"
    "	ld.shared.s32 	%r58, [%rd13+508];\n"
    "	add.s32 	%r27, %r58, %r6;\n"
    "	ld.shared.f32 	%f2394, [%rd14+496];\n"
    "	sub.f32 	%f2395, %f19, %f2394;\n"
    "	mov.f32 	%f2396, %f2395;\n"
    "	mul.f32 	%f2397, %f14, %f2396;\n"
    "	cvt.rni.f32.f32 	%f2398, %f2397;\n"
    "	mul.f32 	%f2399, %f13, %f2398;\n"
    "	sub.f32 	%f25, %f2395, %f2399;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2400, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2401, %f25, %f25, %f2400;\n"
    "	ld.shared.f32 	%f2402, [%rd14+500];\n"
    "	sub.f32 	%f2403, %f30, %f2402;\n"
    "	mov.f32 	%f2404, %f2403;\n"
    "	mov.f32 	%f2405, %f2404;\n"
    "	mul.f32 	%f2406, %f14, %f2404;\n"
    "	cvt.rni.f32.f32 	%f2407, %f2406;\n"
    "	mul.f32 	%f2408, %f13, %f2407;\n"
    "	sub.f32 	%f37, %f2403, %f2408;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2409, %f37, %f37, %f2401;\n"
    "	ld.shared.f32 	%f2410, [%rd14+504];\n"
    "	sub.f32 	%f2411, %f41, %f2410;\n"
    "	mov.f32 	%f2412, %f2411;\n"
    "	mul.f32 	%f2413, %f2411, %f14;\n"
    "	cvt.rni.f32.f32 	%f2414, %f2413;\n"
    "	mul.f32 	%f2415, %f13, %f2414;\n"
    "	sub.f32 	%f47, %f2411, %f2415;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2409;\n"
    "	mov.f32 	%f2416, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p95, %f49, %f2416;\n"
    "	@!%p95 bra 	$Lt_8_32514;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd109, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd110, %r27;\n"
    "	mul.wide.s32 	%rd111, %r27, 24;\n"
    "	add.u64 	%rd18, %rd109, %rd111;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f2417, [%rd18+4];\n"
    "	sub.f32 	%f2418, %f2417, %f51;\n"
    "	mul.f32 	%f55, %f52, %f2418;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f2419, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2420, %f55, %f2419;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2420;\n"
    "	mov.f32 	%f2421, %f58;\n"
    "	mov.f32 	%f2422, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2423, %f2422;\n"
    "	mov.f32 	%f2424, %f55;\n"
    "	mad.f32 %f2425, %f2421, %f2423, %f2424;\n"
    "	mov.f32 	%f64, %f2425;\n"
    "	mov.f32 	%f2426, %f58;\n"
    "	mov.f32 	%f2427, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2428, %f2427;\n"
    "	mov.f32 	%f2429, %f64;\n"
    "	mad.f32 %f2430, %f2426, %f2428, %f2429;\n"
    "	mov.f32 	%f64, %f2430;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f2431, [%rd18+12];\n"
    "	mov.f32 	%f2432, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2433, %f2431, %f2432;\n"
    "	mul.f32 	%f2434, %f73, %f2433;\n"
    "	mov.f32 	%f2435, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2436, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2437, %f58;\n"
    "	mov.f32 	%f2438, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2439, %f64, %f2438;\n"
    "	ex2.approx.f32 	%f2440, %f2439;\n"
    "	mul.f32 	%f2441, %f2437, %f2440;\n"
    "	mov.f32 	%f2442, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p96, %f55, %f2442;\n"
    "	selp.f32 	%f2443, %f2436, %f2441, %p96;\n"
    "	mov.f32 	%f2444, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p97, %f55, %f2444;\n"
    "	selp.f32 	%f2445, %f2435, %f2443, %p97;\n"
    "	ld.global.f32 	%f2446, [%rd18+0];\n"
    "	mov.f32 	%f2447, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2448, %f2446, %f2447;\n"
    "	mul.f32 	%f2449, %f2445, %f2448;\n"
    "	mul.f32 	%f2450, %f52, %f2449;\n"
    "	mul.f32 	%f2451, %f70, %f2450;\n"
    "	sub.f32 	%f2452, %f2451, %f2434;\n"
    "	ld.global.f32 	%f2453, [%rd18+16];\n"
    "	mov.f32 	%f2454, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2455, %f2453, %f2454;\n"
    "	mul.f32 	%f2456, %f73, %f2455;\n"
    "	mul.f32 	%f2457, %f71, %f2456;\n"
    "	sub.f32 	%f2458, %f2452, %f2457;\n"
    "	ld.global.f32 	%f2459, [%rd18+20];\n"
    "	mul.f32 	%f2460, %f70, %f71;\n"
    "	mad.f32 	%f104, %f2459, %f2460, %f2458;\n"
    "	mov.f32 	%f2461, %f2;\n"
    "	mov.f32 	%f2462, %f26;\n"
    "	mad.f32 	%f2463, %f2462, %f104, %f2461;\n"
    "	mov.f32 	%f2, %f2463;\n"
    "	mov.f32 	%f2464, %f4;\n"
    "	mov.f32 	%f2465, %f38;\n"
    "	mad.f32 	%f2466, %f2465, %f104, %f2464;\n"
    "	mov.f32 	%f4, %f2466;\n"
    "	mov.f32 	%f2467, %f6;\n"
    "	mov.f32 	%f2468, %f48;\n"
    "	mad.f32 	%f2469, %f2468, %f104, %f2467;\n"
    "	mov.f32 	%f6, %f2469;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_32514:\n"
    "	ld.shared.s32 	%r59, [%rd13+524];\n"
    "	add.s32 	%r27, %r59, %r6;\n"
    "	ld.shared.f32 	%f2470, [%rd14+512];\n"
    "	sub.f32 	%f2471, %f19, %f2470;\n"
    "	mov.f32 	%f2472, %f2471;\n"
    "	mul.f32 	%f2473, %f14, %f2472;\n"
    "	cvt.rni.f32.f32 	%f2474, %f2473;\n"
    "	mul.f32 	%f2475, %f13, %f2474;\n"
    "	sub.f32 	%f25, %f2471, %f2475;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2476, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2477, %f25, %f25, %f2476;\n"
    "	ld.shared.f32 	%f2478, [%rd14+516];\n"
    "	sub.f32 	%f2479, %f30, %f2478;\n"
    "	mov.f32 	%f2480, %f2479;\n"
    "	mov.f32 	%f2481, %f2480;\n"
    "	mul.f32 	%f2482, %f14, %f2480;\n"
    "	cvt.rni.f32.f32 	%f2483, %f2482;\n"
    "	mul.f32 	%f2484, %f13, %f2483;\n"
    "	sub.f32 	%f37, %f2479, %f2484;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2485, %f37, %f37, %f2477;\n"
    "	ld.shared.f32 	%f2486, [%rd14+520];\n"
    "	sub.f32 	%f2487, %f41, %f2486;\n"
    "	mov.f32 	%f2488, %f2487;\n"
    "	mul.f32 	%f2489, %f2487, %f14;\n"
    "	cvt.rni.f32.f32 	%f2490, %f2489;\n"
    "	mul.f32 	%f2491, %f13, %f2490;\n"
    "	sub.f32 	%f47, %f2487, %f2491;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2485;\n"
    "	mov.f32 	%f2492, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p98, %f49, %f2492;\n"
    "	@!%p98 bra 	$Lt_8_33026;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd112, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd113, %r27;\n"
    "	mul.wide.s32 	%rd114, %r27, 24;\n"
    "	add.u64 	%rd18, %rd112, %rd114;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f2493, [%rd18+4];\n"
    "	sub.f32 	%f2494, %f2493, %f51;\n"
    "	mul.f32 	%f55, %f52, %f2494;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f2495, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2496, %f55, %f2495;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2496;\n"
    "	mov.f32 	%f2497, %f58;\n"
    "	mov.f32 	%f2498, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2499, %f2498;\n"
    "	mov.f32 	%f2500, %f55;\n"
    "	mad.f32 %f2501, %f2497, %f2499, %f2500;\n"
    "	mov.f32 	%f64, %f2501;\n"
    "	mov.f32 	%f2502, %f58;\n"
    "	mov.f32 	%f2503, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2504, %f2503;\n"
    "	mov.f32 	%f2505, %f64;\n"
    "	mad.f32 %f2506, %f2502, %f2504, %f2505;\n"
    "	mov.f32 	%f64, %f2506;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f2507, [%rd18+12];\n"
    "	mov.f32 	%f2508, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2509, %f2507, %f2508;\n"
    "	mul.f32 	%f2510, %f73, %f2509;\n"
    "	mov.f32 	%f2511, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2512, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2513, %f58;\n"
    "	mov.f32 	%f2514, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2515, %f64, %f2514;\n"
    "	ex2.approx.f32 	%f2516, %f2515;\n"
    "	mul.f32 	%f2517, %f2513, %f2516;\n"
    "	mov.f32 	%f2518, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p99, %f55, %f2518;\n"
    "	selp.f32 	%f2519, %f2512, %f2517, %p99;\n"
    "	mov.f32 	%f2520, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p100, %f55, %f2520;\n"
    "	selp.f32 	%f2521, %f2511, %f2519, %p100;\n"
    "	ld.global.f32 	%f2522, [%rd18+0];\n"
    "	mov.f32 	%f2523, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2524, %f2522, %f2523;\n"
    "	mul.f32 	%f2525, %f2521, %f2524;\n"
    "	mul.f32 	%f2526, %f52, %f2525;\n"
    "	mul.f32 	%f2527, %f70, %f2526;\n"
    "	sub.f32 	%f2528, %f2527, %f2510;\n"
    "	ld.global.f32 	%f2529, [%rd18+16];\n"
    "	mov.f32 	%f2530, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2531, %f2529, %f2530;\n"
    "	mul.f32 	%f2532, %f73, %f2531;\n"
    "	mul.f32 	%f2533, %f71, %f2532;\n"
    "	sub.f32 	%f2534, %f2528, %f2533;\n"
    "	ld.global.f32 	%f2535, [%rd18+20];\n"
    "	mul.f32 	%f2536, %f70, %f71;\n"
    "	mad.f32 	%f104, %f2535, %f2536, %f2534;\n"
    "	mov.f32 	%f2537, %f2;\n"
    "	mov.f32 	%f2538, %f26;\n"
    "	mad.f32 	%f2539, %f2538, %f104, %f2537;\n"
    "	mov.f32 	%f2, %f2539;\n"
    "	mov.f32 	%f2540, %f4;\n"
    "	mov.f32 	%f2541, %f38;\n"
    "	mad.f32 	%f2542, %f2541, %f104, %f2540;\n"
    "	mov.f32 	%f4, %f2542;\n"
    "	mov.f32 	%f2543, %f6;\n"
    "	mov.f32 	%f2544, %f48;\n"
    "	mad.f32 	%f2545, %f2544, %f104, %f2543;\n"
    "	mov.f32 	%f6, %f2545;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_33026:\n"
    "	ld.shared.s32 	%r60, [%rd13+540];\n"
    "	add.s32 	%r27, %r60, %r6;\n"
    "	ld.shared.f32 	%f2546, [%rd14+528];\n"
    "	sub.f32 	%f2547, %f19, %f2546;\n"
    "	mov.f32 	%f2548, %f2547;\n"
    "	mul.f32 	%f2549, %f14, %f2548;\n"
    "	cvt.rni.f32.f32 	%f2550, %f2549;\n"
    "	mul.f32 	%f2551, %f13, %f2550;\n"
    "	sub.f32 	%f25, %f2547, %f2551;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2552, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2553, %f25, %f25, %f2552;\n"
    "	ld.shared.f32 	%f2554, [%rd14+532];\n"
    "	sub.f32 	%f2555, %f30, %f2554;\n"
    "	mov.f32 	%f2556, %f2555;\n"
    "	mov.f32 	%f2557, %f2556;\n"
    "	mul.f32 	%f2558, %f14, %f2556;\n"
    "	cvt.rni.f32.f32 	%f2559, %f2558;\n"
    "	mul.f32 	%f2560, %f13, %f2559;\n"
    "	sub.f32 	%f37, %f2555, %f2560;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2561, %f37, %f37, %f2553;\n"
    "	ld.shared.f32 	%f2562, [%rd14+536];\n"
    "	sub.f32 	%f2563, %f41, %f2562;\n"
    "	mov.f32 	%f2564, %f2563;\n"
    "	mul.f32 	%f2565, %f2563, %f14;\n"
    "	cvt.rni.f32.f32 	%f2566, %f2565;\n"
    "	mul.f32 	%f2567, %f13, %f2566;\n"
    "	sub.f32 	%f47, %f2563, %f2567;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2561;\n"
    "	mov.f32 	%f2568, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p101, %f49, %f2568;\n"
    "	@!%p101 bra 	$Lt_8_33538;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd115, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd116, %r27;\n"
    "	mul.wide.s32 	%rd117, %r27, 24;\n"
    "	add.u64 	%rd18, %rd115, %rd117;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f2569, [%rd18+4];\n"
    "	sub.f32 	%f2570, %f2569, %f51;\n"
    "	mul.f32 	%f55, %f52, %f2570;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f2571, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2572, %f55, %f2571;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2572;\n"
    "	mov.f32 	%f2573, %f58;\n"
    "	mov.f32 	%f2574, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2575, %f2574;\n"
    "	mov.f32 	%f2576, %f55;\n"
    "	mad.f32 %f2577, %f2573, %f2575, %f2576;\n"
    "	mov.f32 	%f64, %f2577;\n"
    "	mov.f32 	%f2578, %f58;\n"
    "	mov.f32 	%f2579, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2580, %f2579;\n"
    "	mov.f32 	%f2581, %f64;\n"
    "	mad.f32 %f2582, %f2578, %f2580, %f2581;\n"
    "	mov.f32 	%f64, %f2582;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f2583, [%rd18+12];\n"
    "	mov.f32 	%f2584, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2585, %f2583, %f2584;\n"
    "	mul.f32 	%f2586, %f73, %f2585;\n"
    "	mov.f32 	%f2587, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2588, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2589, %f58;\n"
    "	mov.f32 	%f2590, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2591, %f64, %f2590;\n"
    "	ex2.approx.f32 	%f2592, %f2591;\n"
    "	mul.f32 	%f2593, %f2589, %f2592;\n"
    "	mov.f32 	%f2594, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p102, %f55, %f2594;\n"
    "	selp.f32 	%f2595, %f2588, %f2593, %p102;\n"
    "	mov.f32 	%f2596, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p103, %f55, %f2596;\n"
    "	selp.f32 	%f2597, %f2587, %f2595, %p103;\n"
    "	ld.global.f32 	%f2598, [%rd18+0];\n"
    "	mov.f32 	%f2599, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2600, %f2598, %f2599;\n"
    "	mul.f32 	%f2601, %f2597, %f2600;\n"
    "	mul.f32 	%f2602, %f52, %f2601;\n"
    "	mul.f32 	%f2603, %f70, %f2602;\n"
    "	sub.f32 	%f2604, %f2603, %f2586;\n"
    "	ld.global.f32 	%f2605, [%rd18+16];\n"
    "	mov.f32 	%f2606, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2607, %f2605, %f2606;\n"
    "	mul.f32 	%f2608, %f73, %f2607;\n"
    "	mul.f32 	%f2609, %f71, %f2608;\n"
    "	sub.f32 	%f2610, %f2604, %f2609;\n"
    "	ld.global.f32 	%f2611, [%rd18+20];\n"
    "	mul.f32 	%f2612, %f70, %f71;\n"
    "	mad.f32 	%f104, %f2611, %f2612, %f2610;\n"
    "	mov.f32 	%f2613, %f2;\n"
    "	mov.f32 	%f2614, %f26;\n"
    "	mad.f32 	%f2615, %f2614, %f104, %f2613;\n"
    "	mov.f32 	%f2, %f2615;\n"
    "	mov.f32 	%f2616, %f4;\n"
    "	mov.f32 	%f2617, %f38;\n"
    "	mad.f32 	%f2618, %f2617, %f104, %f2616;\n"
    "	mov.f32 	%f4, %f2618;\n"
    "	mov.f32 	%f2619, %f6;\n"
    "	mov.f32 	%f2620, %f48;\n"
    "	mad.f32 	%f2621, %f2620, %f104, %f2619;\n"
    "	mov.f32 	%f6, %f2621;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_33538:\n"
    "	ld.shared.s32 	%r61, [%rd13+556];\n"
    "	add.s32 	%r27, %r61, %r6;\n"
    "	ld.shared.f32 	%f2622, [%rd14+544];\n"
    "	sub.f32 	%f2623, %f19, %f2622;\n"
    "	mov.f32 	%f2624, %f2623;\n"
    "	mul.f32 	%f2625, %f14, %f2624;\n"
    "	cvt.rni.f32.f32 	%f2626, %f2625;\n"
    "	mul.f32 	%f2627, %f13, %f2626;\n"
    "	sub.f32 	%f25, %f2623, %f2627;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2628, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2629, %f25, %f25, %f2628;\n"
    "	ld.shared.f32 	%f2630, [%rd14+548];\n"
    "	sub.f32 	%f2631, %f30, %f2630;\n"
    "	mov.f32 	%f2632, %f2631;\n"
    "	mov.f32 	%f2633, %f2632;\n"
    "	mul.f32 	%f2634, %f14, %f2632;\n"
    "	cvt.rni.f32.f32 	%f2635, %f2634;\n"
    "	mul.f32 	%f2636, %f13, %f2635;\n"
    "	sub.f32 	%f37, %f2631, %f2636;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2637, %f37, %f37, %f2629;\n"
    "	ld.shared.f32 	%f2638, [%rd14+552];\n"
    "	sub.f32 	%f2639, %f41, %f2638;\n"
    "	mov.f32 	%f2640, %f2639;\n"
    "	mul.f32 	%f2641, %f2639, %f14;\n"
    "	cvt.rni.f32.f32 	%f2642, %f2641;\n"
    "	mul.f32 	%f2643, %f13, %f2642;\n"
    "	sub.f32 	%f47, %f2639, %f2643;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2637;\n"
    "	mov.f32 	%f2644, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p104, %f49, %f2644;\n"
    "	@!%p104 bra 	$Lt_8_34050;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd118, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd119, %r27;\n"
    "	mul.wide.s32 	%rd120, %r27, 24;\n"
    "	add.u64 	%rd18, %rd118, %rd120;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f2645, [%rd18+4];\n"
    "	sub.f32 	%f2646, %f2645, %f51;\n"
    "	mul.f32 	%f55, %f52, %f2646;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f2647, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2648, %f55, %f2647;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2648;\n"
    "	mov.f32 	%f2649, %f58;\n"
    "	mov.f32 	%f2650, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2651, %f2650;\n"
    "	mov.f32 	%f2652, %f55;\n"
    "	mad.f32 %f2653, %f2649, %f2651, %f2652;\n"
    "	mov.f32 	%f64, %f2653;\n"
    "	mov.f32 	%f2654, %f58;\n"
    "	mov.f32 	%f2655, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2656, %f2655;\n"
    "	mov.f32 	%f2657, %f64;\n"
    "	mad.f32 %f2658, %f2654, %f2656, %f2657;\n"
    "	mov.f32 	%f64, %f2658;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f2659, [%rd18+12];\n"
    "	mov.f32 	%f2660, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2661, %f2659, %f2660;\n"
    "	mul.f32 	%f2662, %f73, %f2661;\n"
    "	mov.f32 	%f2663, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2664, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2665, %f58;\n"
    "	mov.f32 	%f2666, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2667, %f64, %f2666;\n"
    "	ex2.approx.f32 	%f2668, %f2667;\n"
    "	mul.f32 	%f2669, %f2665, %f2668;\n"
    "	mov.f32 	%f2670, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p105, %f55, %f2670;\n"
    "	selp.f32 	%f2671, %f2664, %f2669, %p105;\n"
    "	mov.f32 	%f2672, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p106, %f55, %f2672;\n"
    "	selp.f32 	%f2673, %f2663, %f2671, %p106;\n"
    "	ld.global.f32 	%f2674, [%rd18+0];\n"
    "	mov.f32 	%f2675, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2676, %f2674, %f2675;\n"
    "	mul.f32 	%f2677, %f2673, %f2676;\n"
    "	mul.f32 	%f2678, %f52, %f2677;\n"
    "	mul.f32 	%f2679, %f70, %f2678;\n"
    "	sub.f32 	%f2680, %f2679, %f2662;\n"
    "	ld.global.f32 	%f2681, [%rd18+16];\n"
    "	mov.f32 	%f2682, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2683, %f2681, %f2682;\n"
    "	mul.f32 	%f2684, %f73, %f2683;\n"
    "	mul.f32 	%f2685, %f71, %f2684;\n"
    "	sub.f32 	%f2686, %f2680, %f2685;\n"
    "	ld.global.f32 	%f2687, [%rd18+20];\n"
    "	mul.f32 	%f2688, %f70, %f71;\n"
    "	mad.f32 	%f104, %f2687, %f2688, %f2686;\n"
    "	mov.f32 	%f2689, %f2;\n"
    "	mov.f32 	%f2690, %f26;\n"
    "	mad.f32 	%f2691, %f2690, %f104, %f2689;\n"
    "	mov.f32 	%f2, %f2691;\n"
    "	mov.f32 	%f2692, %f4;\n"
    "	mov.f32 	%f2693, %f38;\n"
    "	mad.f32 	%f2694, %f2693, %f104, %f2692;\n"
    "	mov.f32 	%f4, %f2694;\n"
    "	mov.f32 	%f2695, %f6;\n"
    "	mov.f32 	%f2696, %f48;\n"
    "	mad.f32 	%f2697, %f2696, %f104, %f2695;\n"
    "	mov.f32 	%f6, %f2697;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_34050:\n"
    "	ld.shared.s32 	%r62, [%rd13+572];\n"
    "	add.s32 	%r27, %r62, %r6;\n"
    "	ld.shared.f32 	%f2698, [%rd14+560];\n"
    "	sub.f32 	%f2699, %f19, %f2698;\n"
    "	mov.f32 	%f2700, %f2699;\n"
    "	mul.f32 	%f2701, %f14, %f2700;\n"
    "	cvt.rni.f32.f32 	%f2702, %f2701;\n"
    "	mul.f32 	%f2703, %f13, %f2702;\n"
    "	sub.f32 	%f25, %f2699, %f2703;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2704, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2705, %f25, %f25, %f2704;\n"
    "	ld.shared.f32 	%f2706, [%rd14+564];\n"
    "	sub.f32 	%f2707, %f30, %f2706;\n"
    "	mov.f32 	%f2708, %f2707;\n"
    "	mov.f32 	%f2709, %f2708;\n"
    "	mul.f32 	%f2710, %f14, %f2708;\n"
    "	cvt.rni.f32.f32 	%f2711, %f2710;\n"
    "	mul.f32 	%f2712, %f13, %f2711;\n"
    "	sub.f32 	%f37, %f2707, %f2712;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2713, %f37, %f37, %f2705;\n"
    "	ld.shared.f32 	%f2714, [%rd14+568];\n"
    "	sub.f32 	%f2715, %f41, %f2714;\n"
    "	mov.f32 	%f2716, %f2715;\n"
    "	mul.f32 	%f2717, %f2715, %f14;\n"
    "	cvt.rni.f32.f32 	%f2718, %f2717;\n"
    "	mul.f32 	%f2719, %f13, %f2718;\n"
    "	sub.f32 	%f47, %f2715, %f2719;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2713;\n"
    "	mov.f32 	%f2720, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p107, %f49, %f2720;\n"
    "	@!%p107 bra 	$Lt_8_34562;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd121, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd122, %r27;\n"
    "	mul.wide.s32 	%rd123, %r27, 24;\n"
    "	add.u64 	%rd18, %rd121, %rd123;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f2721, [%rd18+4];\n"
    "	sub.f32 	%f2722, %f2721, %f51;\n"
    "	mul.f32 	%f55, %f52, %f2722;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f2723, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2724, %f55, %f2723;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2724;\n"
    "	mov.f32 	%f2725, %f58;\n"
    "	mov.f32 	%f2726, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2727, %f2726;\n"
    "	mov.f32 	%f2728, %f55;\n"
    "	mad.f32 %f2729, %f2725, %f2727, %f2728;\n"
    "	mov.f32 	%f64, %f2729;\n"
    "	mov.f32 	%f2730, %f58;\n"
    "	mov.f32 	%f2731, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2732, %f2731;\n"
    "	mov.f32 	%f2733, %f64;\n"
    "	mad.f32 %f2734, %f2730, %f2732, %f2733;\n"
    "	mov.f32 	%f64, %f2734;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f2735, [%rd18+12];\n"
    "	mov.f32 	%f2736, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2737, %f2735, %f2736;\n"
    "	mul.f32 	%f2738, %f73, %f2737;\n"
    "	mov.f32 	%f2739, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2740, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2741, %f58;\n"
    "	mov.f32 	%f2742, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2743, %f64, %f2742;\n"
    "	ex2.approx.f32 	%f2744, %f2743;\n"
    "	mul.f32 	%f2745, %f2741, %f2744;\n"
    "	mov.f32 	%f2746, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p108, %f55, %f2746;\n"
    "	selp.f32 	%f2747, %f2740, %f2745, %p108;\n"
    "	mov.f32 	%f2748, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p109, %f55, %f2748;\n"
    "	selp.f32 	%f2749, %f2739, %f2747, %p109;\n"
    "	ld.global.f32 	%f2750, [%rd18+0];\n"
    "	mov.f32 	%f2751, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2752, %f2750, %f2751;\n"
    "	mul.f32 	%f2753, %f2749, %f2752;\n"
    "	mul.f32 	%f2754, %f52, %f2753;\n"
    "	mul.f32 	%f2755, %f70, %f2754;\n"
    "	sub.f32 	%f2756, %f2755, %f2738;\n"
    "	ld.global.f32 	%f2757, [%rd18+16];\n"
    "	mov.f32 	%f2758, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2759, %f2757, %f2758;\n"
    "	mul.f32 	%f2760, %f73, %f2759;\n"
    "	mul.f32 	%f2761, %f71, %f2760;\n"
    "	sub.f32 	%f2762, %f2756, %f2761;\n"
    "	ld.global.f32 	%f2763, [%rd18+20];\n"
    "	mul.f32 	%f2764, %f70, %f71;\n"
    "	mad.f32 	%f104, %f2763, %f2764, %f2762;\n"
    "	mov.f32 	%f2765, %f2;\n"
    "	mov.f32 	%f2766, %f26;\n"
    "	mad.f32 	%f2767, %f2766, %f104, %f2765;\n"
    "	mov.f32 	%f2, %f2767;\n"
    "	mov.f32 	%f2768, %f4;\n"
    "	mov.f32 	%f2769, %f38;\n"
    "	mad.f32 	%f2770, %f2769, %f104, %f2768;\n"
    "	mov.f32 	%f4, %f2770;\n"
    "	mov.f32 	%f2771, %f6;\n"
    "	mov.f32 	%f2772, %f48;\n"
    "	mad.f32 	%f2773, %f2772, %f104, %f2771;\n"
    "	mov.f32 	%f6, %f2773;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_34562:\n"
    "	ld.shared.s32 	%r63, [%rd13+588];\n"
    "	add.s32 	%r27, %r63, %r6;\n"
    "	ld.shared.f32 	%f2774, [%rd14+576];\n"
    "	sub.f32 	%f2775, %f19, %f2774;\n"
    "	mov.f32 	%f2776, %f2775;\n"
    "	mul.f32 	%f2777, %f14, %f2776;\n"
    "	cvt.rni.f32.f32 	%f2778, %f2777;\n"
    "	mul.f32 	%f2779, %f13, %f2778;\n"
    "	sub.f32 	%f25, %f2775, %f2779;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2780, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2781, %f25, %f25, %f2780;\n"
    "	ld.shared.f32 	%f2782, [%rd14+580];\n"
    "	sub.f32 	%f2783, %f30, %f2782;\n"
    "	mov.f32 	%f2784, %f2783;\n"
    "	mov.f32 	%f2785, %f2784;\n"
    "	mul.f32 	%f2786, %f14, %f2784;\n"
    "	cvt.rni.f32.f32 	%f2787, %f2786;\n"
    "	mul.f32 	%f2788, %f13, %f2787;\n"
    "	sub.f32 	%f37, %f2783, %f2788;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2789, %f37, %f37, %f2781;\n"
    "	ld.shared.f32 	%f2790, [%rd14+584];\n"
    "	sub.f32 	%f2791, %f41, %f2790;\n"
    "	mov.f32 	%f2792, %f2791;\n"
    "	mul.f32 	%f2793, %f2791, %f14;\n"
    "	cvt.rni.f32.f32 	%f2794, %f2793;\n"
    "	mul.f32 	%f2795, %f13, %f2794;\n"
    "	sub.f32 	%f47, %f2791, %f2795;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2789;\n"
    "	mov.f32 	%f2796, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p110, %f49, %f2796;\n"
    "	@!%p110 bra 	$Lt_8_35074;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd124, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd125, %r27;\n"
    "	mul.wide.s32 	%rd126, %r27, 24;\n"
    "	add.u64 	%rd18, %rd124, %rd126;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f2797, [%rd18+4];\n"
    "	sub.f32 	%f2798, %f2797, %f51;\n"
    "	mul.f32 	%f55, %f52, %f2798;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f2799, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2800, %f55, %f2799;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2800;\n"
    "	mov.f32 	%f2801, %f58;\n"
    "	mov.f32 	%f2802, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2803, %f2802;\n"
    "	mov.f32 	%f2804, %f55;\n"
    "	mad.f32 %f2805, %f2801, %f2803, %f2804;\n"
    "	mov.f32 	%f64, %f2805;\n"
    "	mov.f32 	%f2806, %f58;\n"
    "	mov.f32 	%f2807, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2808, %f2807;\n"
    "	mov.f32 	%f2809, %f64;\n"
    "	mad.f32 %f2810, %f2806, %f2808, %f2809;\n"
    "	mov.f32 	%f64, %f2810;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f2811, [%rd18+12];\n"
    "	mov.f32 	%f2812, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2813, %f2811, %f2812;\n"
    "	mul.f32 	%f2814, %f73, %f2813;\n"
    "	mov.f32 	%f2815, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2816, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2817, %f58;\n"
    "	mov.f32 	%f2818, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2819, %f64, %f2818;\n"
    "	ex2.approx.f32 	%f2820, %f2819;\n"
    "	mul.f32 	%f2821, %f2817, %f2820;\n"
    "	mov.f32 	%f2822, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p111, %f55, %f2822;\n"
    "	selp.f32 	%f2823, %f2816, %f2821, %p111;\n"
    "	mov.f32 	%f2824, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p112, %f55, %f2824;\n"
    "	selp.f32 	%f2825, %f2815, %f2823, %p112;\n"
    "	ld.global.f32 	%f2826, [%rd18+0];\n"
    "	mov.f32 	%f2827, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2828, %f2826, %f2827;\n"
    "	mul.f32 	%f2829, %f2825, %f2828;\n"
    "	mul.f32 	%f2830, %f52, %f2829;\n"
    "	mul.f32 	%f2831, %f70, %f2830;\n"
    "	sub.f32 	%f2832, %f2831, %f2814;\n"
    "	ld.global.f32 	%f2833, [%rd18+16];\n"
    "	mov.f32 	%f2834, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2835, %f2833, %f2834;\n"
    "	mul.f32 	%f2836, %f73, %f2835;\n"
    "	mul.f32 	%f2837, %f71, %f2836;\n"
    "	sub.f32 	%f2838, %f2832, %f2837;\n"
    "	ld.global.f32 	%f2839, [%rd18+20];\n"
    "	mul.f32 	%f2840, %f70, %f71;\n"
    "	mad.f32 	%f104, %f2839, %f2840, %f2838;\n"
    "	mov.f32 	%f2841, %f2;\n"
    "	mov.f32 	%f2842, %f26;\n"
    "	mad.f32 	%f2843, %f2842, %f104, %f2841;\n"
    "	mov.f32 	%f2, %f2843;\n"
    "	mov.f32 	%f2844, %f4;\n"
    "	mov.f32 	%f2845, %f38;\n"
    "	mad.f32 	%f2846, %f2845, %f104, %f2844;\n"
    "	mov.f32 	%f4, %f2846;\n"
    "	mov.f32 	%f2847, %f6;\n"
    "	mov.f32 	%f2848, %f48;\n"
    "	mad.f32 	%f2849, %f2848, %f104, %f2847;\n"
    "	mov.f32 	%f6, %f2849;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_35074:\n"
    "	ld.shared.s32 	%r64, [%rd13+604];\n"
    "	add.s32 	%r27, %r64, %r6;\n"
    "	ld.shared.f32 	%f2850, [%rd14+592];\n"
    "	sub.f32 	%f2851, %f19, %f2850;\n"
    "	mov.f32 	%f2852, %f2851;\n"
    "	mul.f32 	%f2853, %f14, %f2852;\n"
    "	cvt.rni.f32.f32 	%f2854, %f2853;\n"
    "	mul.f32 	%f2855, %f13, %f2854;\n"
    "	sub.f32 	%f25, %f2851, %f2855;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2856, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2857, %f25, %f25, %f2856;\n"
    "	ld.shared.f32 	%f2858, [%rd14+596];\n"
    "	sub.f32 	%f2859, %f30, %f2858;\n"
    "	mov.f32 	%f2860, %f2859;\n"
    "	mov.f32 	%f2861, %f2860;\n"
    "	mul.f32 	%f2862, %f14, %f2860;\n"
    "	cvt.rni.f32.f32 	%f2863, %f2862;\n"
    "	mul.f32 	%f2864, %f13, %f2863;\n"
    "	sub.f32 	%f37, %f2859, %f2864;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2865, %f37, %f37, %f2857;\n"
    "	ld.shared.f32 	%f2866, [%rd14+600];\n"
    "	sub.f32 	%f2867, %f41, %f2866;\n"
    "	mov.f32 	%f2868, %f2867;\n"
    "	mul.f32 	%f2869, %f2867, %f14;\n"
    "	cvt.rni.f32.f32 	%f2870, %f2869;\n"
    "	mul.f32 	%f2871, %f13, %f2870;\n"
    "	sub.f32 	%f47, %f2867, %f2871;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2865;\n"
    "	mov.f32 	%f2872, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p113, %f49, %f2872;\n"
    "	@!%p113 bra 	$Lt_8_35586;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd127, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd128, %r27;\n"
    "	mul.wide.s32 	%rd129, %r27, 24;\n"
    "	add.u64 	%rd18, %rd127, %rd129;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f2873, [%rd18+4];\n"
    "	sub.f32 	%f2874, %f2873, %f51;\n"
    "	mul.f32 	%f55, %f52, %f2874;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f2875, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2876, %f55, %f2875;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2876;\n"
    "	mov.f32 	%f2877, %f58;\n"
    "	mov.f32 	%f2878, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2879, %f2878;\n"
    "	mov.f32 	%f2880, %f55;\n"
    "	mad.f32 %f2881, %f2877, %f2879, %f2880;\n"
    "	mov.f32 	%f64, %f2881;\n"
    "	mov.f32 	%f2882, %f58;\n"
    "	mov.f32 	%f2883, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2884, %f2883;\n"
    "	mov.f32 	%f2885, %f64;\n"
    "	mad.f32 %f2886, %f2882, %f2884, %f2885;\n"
    "	mov.f32 	%f64, %f2886;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f2887, [%rd18+12];\n"
    "	mov.f32 	%f2888, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2889, %f2887, %f2888;\n"
    "	mul.f32 	%f2890, %f73, %f2889;\n"
    "	mov.f32 	%f2891, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2892, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2893, %f58;\n"
    "	mov.f32 	%f2894, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2895, %f64, %f2894;\n"
    "	ex2.approx.f32 	%f2896, %f2895;\n"
    "	mul.f32 	%f2897, %f2893, %f2896;\n"
    "	mov.f32 	%f2898, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p114, %f55, %f2898;\n"
    "	selp.f32 	%f2899, %f2892, %f2897, %p114;\n"
    "	mov.f32 	%f2900, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p115, %f55, %f2900;\n"
    "	selp.f32 	%f2901, %f2891, %f2899, %p115;\n"
    "	ld.global.f32 	%f2902, [%rd18+0];\n"
    "	mov.f32 	%f2903, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2904, %f2902, %f2903;\n"
    "	mul.f32 	%f2905, %f2901, %f2904;\n"
    "	mul.f32 	%f2906, %f52, %f2905;\n"
    "	mul.f32 	%f2907, %f70, %f2906;\n"
    "	sub.f32 	%f2908, %f2907, %f2890;\n"
    "	ld.global.f32 	%f2909, [%rd18+16];\n"
    "	mov.f32 	%f2910, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2911, %f2909, %f2910;\n"
    "	mul.f32 	%f2912, %f73, %f2911;\n"
    "	mul.f32 	%f2913, %f71, %f2912;\n"
    "	sub.f32 	%f2914, %f2908, %f2913;\n"
    "	ld.global.f32 	%f2915, [%rd18+20];\n"
    "	mul.f32 	%f2916, %f70, %f71;\n"
    "	mad.f32 	%f104, %f2915, %f2916, %f2914;\n"
    "	mov.f32 	%f2917, %f2;\n"
    "	mov.f32 	%f2918, %f26;\n"
    "	mad.f32 	%f2919, %f2918, %f104, %f2917;\n"
    "	mov.f32 	%f2, %f2919;\n"
    "	mov.f32 	%f2920, %f4;\n"
    "	mov.f32 	%f2921, %f38;\n"
    "	mad.f32 	%f2922, %f2921, %f104, %f2920;\n"
    "	mov.f32 	%f4, %f2922;\n"
    "	mov.f32 	%f2923, %f6;\n"
    "	mov.f32 	%f2924, %f48;\n"
    "	mad.f32 	%f2925, %f2924, %f104, %f2923;\n"
    "	mov.f32 	%f6, %f2925;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_35586:\n"
    "	ld.shared.s32 	%r65, [%rd13+620];\n"
    "	add.s32 	%r27, %r65, %r6;\n"
    "	ld.shared.f32 	%f2926, [%rd14+608];\n"
    "	sub.f32 	%f2927, %f19, %f2926;\n"
    "	mov.f32 	%f2928, %f2927;\n"
    "	mul.f32 	%f2929, %f14, %f2928;\n"
    "	cvt.rni.f32.f32 	%f2930, %f2929;\n"
    "	mul.f32 	%f2931, %f13, %f2930;\n"
    "	sub.f32 	%f25, %f2927, %f2931;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2932, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2933, %f25, %f25, %f2932;\n"
    "	ld.shared.f32 	%f2934, [%rd14+612];\n"
    "	sub.f32 	%f2935, %f30, %f2934;\n"
    "	mov.f32 	%f2936, %f2935;\n"
    "	mov.f32 	%f2937, %f2936;\n"
    "	mul.f32 	%f2938, %f14, %f2936;\n"
    "	cvt.rni.f32.f32 	%f2939, %f2938;\n"
    "	mul.f32 	%f2940, %f13, %f2939;\n"
    "	sub.f32 	%f37, %f2935, %f2940;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2941, %f37, %f37, %f2933;\n"
    "	ld.shared.f32 	%f2942, [%rd14+616];\n"
    "	sub.f32 	%f2943, %f41, %f2942;\n"
    "	mov.f32 	%f2944, %f2943;\n"
    "	mul.f32 	%f2945, %f2943, %f14;\n"
    "	cvt.rni.f32.f32 	%f2946, %f2945;\n"
    "	mul.f32 	%f2947, %f13, %f2946;\n"
    "	sub.f32 	%f47, %f2943, %f2947;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2941;\n"
    "	mov.f32 	%f2948, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p116, %f49, %f2948;\n"
    "	@!%p116 bra 	$Lt_8_36098;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd130, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd131, %r27;\n"
    "	mul.wide.s32 	%rd132, %r27, 24;\n"
    "	add.u64 	%rd18, %rd130, %rd132;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f2949, [%rd18+4];\n"
    "	sub.f32 	%f2950, %f2949, %f51;\n"
    "	mul.f32 	%f55, %f52, %f2950;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f2951, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2952, %f55, %f2951;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2952;\n"
    "	mov.f32 	%f2953, %f58;\n"
    "	mov.f32 	%f2954, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2955, %f2954;\n"
    "	mov.f32 	%f2956, %f55;\n"
    "	mad.f32 %f2957, %f2953, %f2955, %f2956;\n"
    "	mov.f32 	%f64, %f2957;\n"
    "	mov.f32 	%f2958, %f58;\n"
    "	mov.f32 	%f2959, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2960, %f2959;\n"
    "	mov.f32 	%f2961, %f64;\n"
    "	mad.f32 %f2962, %f2958, %f2960, %f2961;\n"
    "	mov.f32 	%f64, %f2962;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f2963, [%rd18+12];\n"
    "	mov.f32 	%f2964, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2965, %f2963, %f2964;\n"
    "	mul.f32 	%f2966, %f73, %f2965;\n"
    "	mov.f32 	%f2967, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2968, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2969, %f58;\n"
    "	mov.f32 	%f2970, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2971, %f64, %f2970;\n"
    "	ex2.approx.f32 	%f2972, %f2971;\n"
    "	mul.f32 	%f2973, %f2969, %f2972;\n"
    "	mov.f32 	%f2974, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p117, %f55, %f2974;\n"
    "	selp.f32 	%f2975, %f2968, %f2973, %p117;\n"
    "	mov.f32 	%f2976, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p118, %f55, %f2976;\n"
    "	selp.f32 	%f2977, %f2967, %f2975, %p118;\n"
    "	ld.global.f32 	%f2978, [%rd18+0];\n"
    "	mov.f32 	%f2979, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2980, %f2978, %f2979;\n"
    "	mul.f32 	%f2981, %f2977, %f2980;\n"
    "	mul.f32 	%f2982, %f52, %f2981;\n"
    "	mul.f32 	%f2983, %f70, %f2982;\n"
    "	sub.f32 	%f2984, %f2983, %f2966;\n"
    "	ld.global.f32 	%f2985, [%rd18+16];\n"
    "	mov.f32 	%f2986, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2987, %f2985, %f2986;\n"
    "	mul.f32 	%f2988, %f73, %f2987;\n"
    "	mul.f32 	%f2989, %f71, %f2988;\n"
    "	sub.f32 	%f2990, %f2984, %f2989;\n"
    "	ld.global.f32 	%f2991, [%rd18+20];\n"
    "	mul.f32 	%f2992, %f70, %f71;\n"
    "	mad.f32 	%f104, %f2991, %f2992, %f2990;\n"
    "	mov.f32 	%f2993, %f2;\n"
    "	mov.f32 	%f2994, %f26;\n"
    "	mad.f32 	%f2995, %f2994, %f104, %f2993;\n"
    "	mov.f32 	%f2, %f2995;\n"
    "	mov.f32 	%f2996, %f4;\n"
    "	mov.f32 	%f2997, %f38;\n"
    "	mad.f32 	%f2998, %f2997, %f104, %f2996;\n"
    "	mov.f32 	%f4, %f2998;\n"
    "	mov.f32 	%f2999, %f6;\n"
    "	mov.f32 	%f3000, %f48;\n"
    "	mad.f32 	%f3001, %f3000, %f104, %f2999;\n"
    "	mov.f32 	%f6, %f3001;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_36098:\n"
    "	ld.shared.s32 	%r66, [%rd13+636];\n"
    "	add.s32 	%r27, %r66, %r6;\n"
    "	ld.shared.f32 	%f3002, [%rd14+624];\n"
    "	sub.f32 	%f3003, %f19, %f3002;\n"
    "	mov.f32 	%f3004, %f3003;\n"
    "	mul.f32 	%f3005, %f14, %f3004;\n"
    "	cvt.rni.f32.f32 	%f3006, %f3005;\n"
    "	mul.f32 	%f3007, %f13, %f3006;\n"
    "	sub.f32 	%f25, %f3003, %f3007;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3008, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3009, %f25, %f25, %f3008;\n"
    "	ld.shared.f32 	%f3010, [%rd14+628];\n"
    "	sub.f32 	%f3011, %f30, %f3010;\n"
    "	mov.f32 	%f3012, %f3011;\n"
    "	mov.f32 	%f3013, %f3012;\n"
    "	mul.f32 	%f3014, %f14, %f3012;\n"
    "	cvt.rni.f32.f32 	%f3015, %f3014;\n"
    "	mul.f32 	%f3016, %f13, %f3015;\n"
    "	sub.f32 	%f37, %f3011, %f3016;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3017, %f37, %f37, %f3009;\n"
    "	ld.shared.f32 	%f3018, [%rd14+632];\n"
    "	sub.f32 	%f3019, %f41, %f3018;\n"
    "	mov.f32 	%f3020, %f3019;\n"
    "	mul.f32 	%f3021, %f3019, %f14;\n"
    "	cvt.rni.f32.f32 	%f3022, %f3021;\n"
    "	mul.f32 	%f3023, %f13, %f3022;\n"
    "	sub.f32 	%f47, %f3019, %f3023;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3017;\n"
    "	mov.f32 	%f3024, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p119, %f49, %f3024;\n"
    "	@!%p119 bra 	$Lt_8_36610;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd133, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd134, %r27;\n"
    "	mul.wide.s32 	%rd135, %r27, 24;\n"
    "	add.u64 	%rd18, %rd133, %rd135;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f3025, [%rd18+4];\n"
    "	sub.f32 	%f3026, %f3025, %f51;\n"
    "	mul.f32 	%f55, %f52, %f3026;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f3027, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3028, %f55, %f3027;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3028;\n"
    "	mov.f32 	%f3029, %f58;\n"
    "	mov.f32 	%f3030, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3031, %f3030;\n"
    "	mov.f32 	%f3032, %f55;\n"
    "	mad.f32 %f3033, %f3029, %f3031, %f3032;\n"
    "	mov.f32 	%f64, %f3033;\n"
    "	mov.f32 	%f3034, %f58;\n"
    "	mov.f32 	%f3035, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3036, %f3035;\n"
    "	mov.f32 	%f3037, %f64;\n"
    "	mad.f32 %f3038, %f3034, %f3036, %f3037;\n"
    "	mov.f32 	%f64, %f3038;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f3039, [%rd18+12];\n"
    "	mov.f32 	%f3040, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3041, %f3039, %f3040;\n"
    "	mul.f32 	%f3042, %f73, %f3041;\n"
    "	mov.f32 	%f3043, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3044, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3045, %f58;\n"
    "	mov.f32 	%f3046, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3047, %f64, %f3046;\n"
    "	ex2.approx.f32 	%f3048, %f3047;\n"
    "	mul.f32 	%f3049, %f3045, %f3048;\n"
    "	mov.f32 	%f3050, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p120, %f55, %f3050;\n"
    "	selp.f32 	%f3051, %f3044, %f3049, %p120;\n"
    "	mov.f32 	%f3052, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p121, %f55, %f3052;\n"
    "	selp.f32 	%f3053, %f3043, %f3051, %p121;\n"
    "	ld.global.f32 	%f3054, [%rd18+0];\n"
    "	mov.f32 	%f3055, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3056, %f3054, %f3055;\n"
    "	mul.f32 	%f3057, %f3053, %f3056;\n"
    "	mul.f32 	%f3058, %f52, %f3057;\n"
    "	mul.f32 	%f3059, %f70, %f3058;\n"
    "	sub.f32 	%f3060, %f3059, %f3042;\n"
    "	ld.global.f32 	%f3061, [%rd18+16];\n"
    "	mov.f32 	%f3062, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3063, %f3061, %f3062;\n"
    "	mul.f32 	%f3064, %f73, %f3063;\n"
    "	mul.f32 	%f3065, %f71, %f3064;\n"
    "	sub.f32 	%f3066, %f3060, %f3065;\n"
    "	ld.global.f32 	%f3067, [%rd18+20];\n"
    "	mul.f32 	%f3068, %f70, %f71;\n"
    "	mad.f32 	%f104, %f3067, %f3068, %f3066;\n"
    "	mov.f32 	%f3069, %f2;\n"
    "	mov.f32 	%f3070, %f26;\n"
    "	mad.f32 	%f3071, %f3070, %f104, %f3069;\n"
    "	mov.f32 	%f2, %f3071;\n"
    "	mov.f32 	%f3072, %f4;\n"
    "	mov.f32 	%f3073, %f38;\n"
    "	mad.f32 	%f3074, %f3073, %f104, %f3072;\n"
    "	mov.f32 	%f4, %f3074;\n"
    "	mov.f32 	%f3075, %f6;\n"
    "	mov.f32 	%f3076, %f48;\n"
    "	mad.f32 	%f3077, %f3076, %f104, %f3075;\n"
    "	mov.f32 	%f6, %f3077;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_36610:\n"
    "	ld.shared.s32 	%r67, [%rd13+652];\n"
    "	add.s32 	%r27, %r67, %r6;\n"
    "	ld.shared.f32 	%f3078, [%rd14+640];\n"
    "	sub.f32 	%f3079, %f19, %f3078;\n"
    "	mov.f32 	%f3080, %f3079;\n"
    "	mul.f32 	%f3081, %f14, %f3080;\n"
    "	cvt.rni.f32.f32 	%f3082, %f3081;\n"
    "	mul.f32 	%f3083, %f13, %f3082;\n"
    "	sub.f32 	%f25, %f3079, %f3083;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3084, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3085, %f25, %f25, %f3084;\n"
    "	ld.shared.f32 	%f3086, [%rd14+644];\n"
    "	sub.f32 	%f3087, %f30, %f3086;\n"
    "	mov.f32 	%f3088, %f3087;\n"
    "	mov.f32 	%f3089, %f3088;\n"
    "	mul.f32 	%f3090, %f14, %f3088;\n"
    "	cvt.rni.f32.f32 	%f3091, %f3090;\n"
    "	mul.f32 	%f3092, %f13, %f3091;\n"
    "	sub.f32 	%f37, %f3087, %f3092;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3093, %f37, %f37, %f3085;\n"
    "	ld.shared.f32 	%f3094, [%rd14+648];\n"
    "	sub.f32 	%f3095, %f41, %f3094;\n"
    "	mov.f32 	%f3096, %f3095;\n"
    "	mul.f32 	%f3097, %f3095, %f14;\n"
    "	cvt.rni.f32.f32 	%f3098, %f3097;\n"
    "	mul.f32 	%f3099, %f13, %f3098;\n"
    "	sub.f32 	%f47, %f3095, %f3099;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3093;\n"
    "	mov.f32 	%f3100, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p122, %f49, %f3100;\n"
    "	@!%p122 bra 	$Lt_8_37122;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd136, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd137, %r27;\n"
    "	mul.wide.s32 	%rd138, %r27, 24;\n"
    "	add.u64 	%rd18, %rd136, %rd138;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f3101, [%rd18+4];\n"
    "	sub.f32 	%f3102, %f3101, %f51;\n"
    "	mul.f32 	%f55, %f52, %f3102;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f3103, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3104, %f55, %f3103;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3104;\n"
    "	mov.f32 	%f3105, %f58;\n"
    "	mov.f32 	%f3106, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3107, %f3106;\n"
    "	mov.f32 	%f3108, %f55;\n"
    "	mad.f32 %f3109, %f3105, %f3107, %f3108;\n"
    "	mov.f32 	%f64, %f3109;\n"
    "	mov.f32 	%f3110, %f58;\n"
    "	mov.f32 	%f3111, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3112, %f3111;\n"
    "	mov.f32 	%f3113, %f64;\n"
    "	mad.f32 %f3114, %f3110, %f3112, %f3113;\n"
    "	mov.f32 	%f64, %f3114;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f3115, [%rd18+12];\n"
    "	mov.f32 	%f3116, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3117, %f3115, %f3116;\n"
    "	mul.f32 	%f3118, %f73, %f3117;\n"
    "	mov.f32 	%f3119, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3120, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3121, %f58;\n"
    "	mov.f32 	%f3122, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3123, %f64, %f3122;\n"
    "	ex2.approx.f32 	%f3124, %f3123;\n"
    "	mul.f32 	%f3125, %f3121, %f3124;\n"
    "	mov.f32 	%f3126, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p123, %f55, %f3126;\n"
    "	selp.f32 	%f3127, %f3120, %f3125, %p123;\n"
    "	mov.f32 	%f3128, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p124, %f55, %f3128;\n"
    "	selp.f32 	%f3129, %f3119, %f3127, %p124;\n"
    "	ld.global.f32 	%f3130, [%rd18+0];\n"
    "	mov.f32 	%f3131, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3132, %f3130, %f3131;\n"
    "	mul.f32 	%f3133, %f3129, %f3132;\n"
    "	mul.f32 	%f3134, %f52, %f3133;\n"
    "	mul.f32 	%f3135, %f70, %f3134;\n"
    "	sub.f32 	%f3136, %f3135, %f3118;\n"
    "	ld.global.f32 	%f3137, [%rd18+16];\n"
    "	mov.f32 	%f3138, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3139, %f3137, %f3138;\n"
    "	mul.f32 	%f3140, %f73, %f3139;\n"
    "	mul.f32 	%f3141, %f71, %f3140;\n"
    "	sub.f32 	%f3142, %f3136, %f3141;\n"
    "	ld.global.f32 	%f3143, [%rd18+20];\n"
    "	mul.f32 	%f3144, %f70, %f71;\n"
    "	mad.f32 	%f104, %f3143, %f3144, %f3142;\n"
    "	mov.f32 	%f3145, %f2;\n"
    "	mov.f32 	%f3146, %f26;\n"
    "	mad.f32 	%f3147, %f3146, %f104, %f3145;\n"
    "	mov.f32 	%f2, %f3147;\n"
    "	mov.f32 	%f3148, %f4;\n"
    "	mov.f32 	%f3149, %f38;\n"
    "	mad.f32 	%f3150, %f3149, %f104, %f3148;\n"
    "	mov.f32 	%f4, %f3150;\n"
    "	mov.f32 	%f3151, %f6;\n"
    "	mov.f32 	%f3152, %f48;\n"
    "	mad.f32 	%f3153, %f3152, %f104, %f3151;\n"
    "	mov.f32 	%f6, %f3153;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_37122:\n"
    "	ld.shared.s32 	%r68, [%rd13+668];\n"
    "	add.s32 	%r27, %r68, %r6;\n"
    "	ld.shared.f32 	%f3154, [%rd14+656];\n"
    "	sub.f32 	%f3155, %f19, %f3154;\n"
    "	mov.f32 	%f3156, %f3155;\n"
    "	mul.f32 	%f3157, %f14, %f3156;\n"
    "	cvt.rni.f32.f32 	%f3158, %f3157;\n"
    "	mul.f32 	%f3159, %f13, %f3158;\n"
    "	sub.f32 	%f25, %f3155, %f3159;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3160, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3161, %f25, %f25, %f3160;\n"
    "	ld.shared.f32 	%f3162, [%rd14+660];\n"
    "	sub.f32 	%f3163, %f30, %f3162;\n"
    "	mov.f32 	%f3164, %f3163;\n"
    "	mov.f32 	%f3165, %f3164;\n"
    "	mul.f32 	%f3166, %f14, %f3164;\n"
    "	cvt.rni.f32.f32 	%f3167, %f3166;\n"
    "	mul.f32 	%f3168, %f13, %f3167;\n"
    "	sub.f32 	%f37, %f3163, %f3168;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3169, %f37, %f37, %f3161;\n"
    "	ld.shared.f32 	%f3170, [%rd14+664];\n"
    "	sub.f32 	%f3171, %f41, %f3170;\n"
    "	mov.f32 	%f3172, %f3171;\n"
    "	mul.f32 	%f3173, %f3171, %f14;\n"
    "	cvt.rni.f32.f32 	%f3174, %f3173;\n"
    "	mul.f32 	%f3175, %f13, %f3174;\n"
    "	sub.f32 	%f47, %f3171, %f3175;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3169;\n"
    "	mov.f32 	%f3176, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p125, %f49, %f3176;\n"
    "	@!%p125 bra 	$Lt_8_37634;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd139, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd140, %r27;\n"
    "	mul.wide.s32 	%rd141, %r27, 24;\n"
    "	add.u64 	%rd18, %rd139, %rd141;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f3177, [%rd18+4];\n"
    "	sub.f32 	%f3178, %f3177, %f51;\n"
    "	mul.f32 	%f55, %f52, %f3178;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f3179, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3180, %f55, %f3179;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3180;\n"
    "	mov.f32 	%f3181, %f58;\n"
    "	mov.f32 	%f3182, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3183, %f3182;\n"
    "	mov.f32 	%f3184, %f55;\n"
    "	mad.f32 %f3185, %f3181, %f3183, %f3184;\n"
    "	mov.f32 	%f64, %f3185;\n"
    "	mov.f32 	%f3186, %f58;\n"
    "	mov.f32 	%f3187, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3188, %f3187;\n"
    "	mov.f32 	%f3189, %f64;\n"
    "	mad.f32 %f3190, %f3186, %f3188, %f3189;\n"
    "	mov.f32 	%f64, %f3190;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f3191, [%rd18+12];\n"
    "	mov.f32 	%f3192, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3193, %f3191, %f3192;\n"
    "	mul.f32 	%f3194, %f73, %f3193;\n"
    "	mov.f32 	%f3195, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3196, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3197, %f58;\n"
    "	mov.f32 	%f3198, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3199, %f64, %f3198;\n"
    "	ex2.approx.f32 	%f3200, %f3199;\n"
    "	mul.f32 	%f3201, %f3197, %f3200;\n"
    "	mov.f32 	%f3202, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p126, %f55, %f3202;\n"
    "	selp.f32 	%f3203, %f3196, %f3201, %p126;\n"
    "	mov.f32 	%f3204, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p127, %f55, %f3204;\n"
    "	selp.f32 	%f3205, %f3195, %f3203, %p127;\n"
    "	ld.global.f32 	%f3206, [%rd18+0];\n"
    "	mov.f32 	%f3207, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3208, %f3206, %f3207;\n"
    "	mul.f32 	%f3209, %f3205, %f3208;\n"
    "	mul.f32 	%f3210, %f52, %f3209;\n"
    "	mul.f32 	%f3211, %f70, %f3210;\n"
    "	sub.f32 	%f3212, %f3211, %f3194;\n"
    "	ld.global.f32 	%f3213, [%rd18+16];\n"
    "	mov.f32 	%f3214, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3215, %f3213, %f3214;\n"
    "	mul.f32 	%f3216, %f73, %f3215;\n"
    "	mul.f32 	%f3217, %f71, %f3216;\n"
    "	sub.f32 	%f3218, %f3212, %f3217;\n"
    "	ld.global.f32 	%f3219, [%rd18+20];\n"
    "	mul.f32 	%f3220, %f70, %f71;\n"
    "	mad.f32 	%f104, %f3219, %f3220, %f3218;\n"
    "	mov.f32 	%f3221, %f2;\n"
    "	mov.f32 	%f3222, %f26;\n"
    "	mad.f32 	%f3223, %f3222, %f104, %f3221;\n"
    "	mov.f32 	%f2, %f3223;\n"
    "	mov.f32 	%f3224, %f4;\n"
    "	mov.f32 	%f3225, %f38;\n"
    "	mad.f32 	%f3226, %f3225, %f104, %f3224;\n"
    "	mov.f32 	%f4, %f3226;\n"
    "	mov.f32 	%f3227, %f6;\n"
    "	mov.f32 	%f3228, %f48;\n"
    "	mad.f32 	%f3229, %f3228, %f104, %f3227;\n"
    "	mov.f32 	%f6, %f3229;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_37634:\n"
    "	ld.shared.s32 	%r69, [%rd13+684];\n"
    "	add.s32 	%r27, %r69, %r6;\n"
    "	ld.shared.f32 	%f3230, [%rd14+672];\n"
    "	sub.f32 	%f3231, %f19, %f3230;\n"
    "	mov.f32 	%f3232, %f3231;\n"
    "	mul.f32 	%f3233, %f14, %f3232;\n"
    "	cvt.rni.f32.f32 	%f3234, %f3233;\n"
    "	mul.f32 	%f3235, %f13, %f3234;\n"
    "	sub.f32 	%f25, %f3231, %f3235;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3236, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3237, %f25, %f25, %f3236;\n"
    "	ld.shared.f32 	%f3238, [%rd14+676];\n"
    "	sub.f32 	%f3239, %f30, %f3238;\n"
    "	mov.f32 	%f3240, %f3239;\n"
    "	mov.f32 	%f3241, %f3240;\n"
    "	mul.f32 	%f3242, %f14, %f3240;\n"
    "	cvt.rni.f32.f32 	%f3243, %f3242;\n"
    "	mul.f32 	%f3244, %f13, %f3243;\n"
    "	sub.f32 	%f37, %f3239, %f3244;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3245, %f37, %f37, %f3237;\n"
    "	ld.shared.f32 	%f3246, [%rd14+680];\n"
    "	sub.f32 	%f3247, %f41, %f3246;\n"
    "	mov.f32 	%f3248, %f3247;\n"
    "	mul.f32 	%f3249, %f3247, %f14;\n"
    "	cvt.rni.f32.f32 	%f3250, %f3249;\n"
    "	mul.f32 	%f3251, %f13, %f3250;\n"
    "	sub.f32 	%f47, %f3247, %f3251;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3245;\n"
    "	mov.f32 	%f3252, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p128, %f49, %f3252;\n"
    "	@!%p128 bra 	$Lt_8_38146;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd142, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd143, %r27;\n"
    "	mul.wide.s32 	%rd144, %r27, 24;\n"
    "	add.u64 	%rd18, %rd142, %rd144;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f3253, [%rd18+4];\n"
    "	sub.f32 	%f3254, %f3253, %f51;\n"
    "	mul.f32 	%f55, %f52, %f3254;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f3255, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3256, %f55, %f3255;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3256;\n"
    "	mov.f32 	%f3257, %f58;\n"
    "	mov.f32 	%f3258, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3259, %f3258;\n"
    "	mov.f32 	%f3260, %f55;\n"
    "	mad.f32 %f3261, %f3257, %f3259, %f3260;\n"
    "	mov.f32 	%f64, %f3261;\n"
    "	mov.f32 	%f3262, %f58;\n"
    "	mov.f32 	%f3263, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3264, %f3263;\n"
    "	mov.f32 	%f3265, %f64;\n"
    "	mad.f32 %f3266, %f3262, %f3264, %f3265;\n"
    "	mov.f32 	%f64, %f3266;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f3267, [%rd18+12];\n"
    "	mov.f32 	%f3268, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3269, %f3267, %f3268;\n"
    "	mul.f32 	%f3270, %f73, %f3269;\n"
    "	mov.f32 	%f3271, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3272, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3273, %f58;\n"
    "	mov.f32 	%f3274, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3275, %f64, %f3274;\n"
    "	ex2.approx.f32 	%f3276, %f3275;\n"
    "	mul.f32 	%f3277, %f3273, %f3276;\n"
    "	mov.f32 	%f3278, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p129, %f55, %f3278;\n"
    "	selp.f32 	%f3279, %f3272, %f3277, %p129;\n"
    "	mov.f32 	%f3280, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p130, %f55, %f3280;\n"
    "	selp.f32 	%f3281, %f3271, %f3279, %p130;\n"
    "	ld.global.f32 	%f3282, [%rd18+0];\n"
    "	mov.f32 	%f3283, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3284, %f3282, %f3283;\n"
    "	mul.f32 	%f3285, %f3281, %f3284;\n"
    "	mul.f32 	%f3286, %f52, %f3285;\n"
    "	mul.f32 	%f3287, %f70, %f3286;\n"
    "	sub.f32 	%f3288, %f3287, %f3270;\n"
    "	ld.global.f32 	%f3289, [%rd18+16];\n"
    "	mov.f32 	%f3290, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3291, %f3289, %f3290;\n"
    "	mul.f32 	%f3292, %f73, %f3291;\n"
    "	mul.f32 	%f3293, %f71, %f3292;\n"
    "	sub.f32 	%f3294, %f3288, %f3293;\n"
    "	ld.global.f32 	%f3295, [%rd18+20];\n"
    "	mul.f32 	%f3296, %f70, %f71;\n"
    "	mad.f32 	%f104, %f3295, %f3296, %f3294;\n"
    "	mov.f32 	%f3297, %f2;\n"
    "	mov.f32 	%f3298, %f26;\n"
    "	mad.f32 	%f3299, %f3298, %f104, %f3297;\n"
    "	mov.f32 	%f2, %f3299;\n"
    "	mov.f32 	%f3300, %f4;\n"
    "	mov.f32 	%f3301, %f38;\n"
    "	mad.f32 	%f3302, %f3301, %f104, %f3300;\n"
    "	mov.f32 	%f4, %f3302;\n"
    "	mov.f32 	%f3303, %f6;\n"
    "	mov.f32 	%f3304, %f48;\n"
    "	mad.f32 	%f3305, %f3304, %f104, %f3303;\n"
    "	mov.f32 	%f6, %f3305;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_38146:\n"
    "	ld.shared.s32 	%r70, [%rd13+700];\n"
    "	add.s32 	%r27, %r70, %r6;\n"
    "	ld.shared.f32 	%f3306, [%rd14+688];\n"
    "	sub.f32 	%f3307, %f19, %f3306;\n"
    "	mov.f32 	%f3308, %f3307;\n"
    "	mul.f32 	%f3309, %f14, %f3308;\n"
    "	cvt.rni.f32.f32 	%f3310, %f3309;\n"
    "	mul.f32 	%f3311, %f13, %f3310;\n"
    "	sub.f32 	%f25, %f3307, %f3311;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3312, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3313, %f25, %f25, %f3312;\n"
    "	ld.shared.f32 	%f3314, [%rd14+692];\n"
    "	sub.f32 	%f3315, %f30, %f3314;\n"
    "	mov.f32 	%f3316, %f3315;\n"
    "	mov.f32 	%f3317, %f3316;\n"
    "	mul.f32 	%f3318, %f14, %f3316;\n"
    "	cvt.rni.f32.f32 	%f3319, %f3318;\n"
    "	mul.f32 	%f3320, %f13, %f3319;\n"
    "	sub.f32 	%f37, %f3315, %f3320;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3321, %f37, %f37, %f3313;\n"
    "	ld.shared.f32 	%f3322, [%rd14+696];\n"
    "	sub.f32 	%f3323, %f41, %f3322;\n"
    "	mov.f32 	%f3324, %f3323;\n"
    "	mul.f32 	%f3325, %f3323, %f14;\n"
    "	cvt.rni.f32.f32 	%f3326, %f3325;\n"
    "	mul.f32 	%f3327, %f13, %f3326;\n"
    "	sub.f32 	%f47, %f3323, %f3327;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3321;\n"
    "	mov.f32 	%f3328, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p131, %f49, %f3328;\n"
    "	@!%p131 bra 	$Lt_8_38658;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd145, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd146, %r27;\n"
    "	mul.wide.s32 	%rd147, %r27, 24;\n"
    "	add.u64 	%rd18, %rd145, %rd147;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f3329, [%rd18+4];\n"
    "	sub.f32 	%f3330, %f3329, %f51;\n"
    "	mul.f32 	%f55, %f52, %f3330;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f3331, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3332, %f55, %f3331;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3332;\n"
    "	mov.f32 	%f3333, %f58;\n"
    "	mov.f32 	%f3334, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3335, %f3334;\n"
    "	mov.f32 	%f3336, %f55;\n"
    "	mad.f32 %f3337, %f3333, %f3335, %f3336;\n"
    "	mov.f32 	%f64, %f3337;\n"
    "	mov.f32 	%f3338, %f58;\n"
    "	mov.f32 	%f3339, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3340, %f3339;\n"
    "	mov.f32 	%f3341, %f64;\n"
    "	mad.f32 %f3342, %f3338, %f3340, %f3341;\n"
    "	mov.f32 	%f64, %f3342;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f3343, [%rd18+12];\n"
    "	mov.f32 	%f3344, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3345, %f3343, %f3344;\n"
    "	mul.f32 	%f3346, %f73, %f3345;\n"
    "	mov.f32 	%f3347, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3348, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3349, %f58;\n"
    "	mov.f32 	%f3350, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3351, %f64, %f3350;\n"
    "	ex2.approx.f32 	%f3352, %f3351;\n"
    "	mul.f32 	%f3353, %f3349, %f3352;\n"
    "	mov.f32 	%f3354, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p132, %f55, %f3354;\n"
    "	selp.f32 	%f3355, %f3348, %f3353, %p132;\n"
    "	mov.f32 	%f3356, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p133, %f55, %f3356;\n"
    "	selp.f32 	%f3357, %f3347, %f3355, %p133;\n"
    "	ld.global.f32 	%f3358, [%rd18+0];\n"
    "	mov.f32 	%f3359, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3360, %f3358, %f3359;\n"
    "	mul.f32 	%f3361, %f3357, %f3360;\n"
    "	mul.f32 	%f3362, %f52, %f3361;\n"
    "	mul.f32 	%f3363, %f70, %f3362;\n"
    "	sub.f32 	%f3364, %f3363, %f3346;\n"
    "	ld.global.f32 	%f3365, [%rd18+16];\n"
    "	mov.f32 	%f3366, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3367, %f3365, %f3366;\n"
    "	mul.f32 	%f3368, %f73, %f3367;\n"
    "	mul.f32 	%f3369, %f71, %f3368;\n"
    "	sub.f32 	%f3370, %f3364, %f3369;\n"
    "	ld.global.f32 	%f3371, [%rd18+20];\n"
    "	mul.f32 	%f3372, %f70, %f71;\n"
    "	mad.f32 	%f104, %f3371, %f3372, %f3370;\n"
    "	mov.f32 	%f3373, %f2;\n"
    "	mov.f32 	%f3374, %f26;\n"
    "	mad.f32 	%f3375, %f3374, %f104, %f3373;\n"
    "	mov.f32 	%f2, %f3375;\n"
    "	mov.f32 	%f3376, %f4;\n"
    "	mov.f32 	%f3377, %f38;\n"
    "	mad.f32 	%f3378, %f3377, %f104, %f3376;\n"
    "	mov.f32 	%f4, %f3378;\n"
    "	mov.f32 	%f3379, %f6;\n"
    "	mov.f32 	%f3380, %f48;\n"
    "	mad.f32 	%f3381, %f3380, %f104, %f3379;\n"
    "	mov.f32 	%f6, %f3381;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_38658:\n"
    "	ld.shared.s32 	%r71, [%rd13+716];\n"
    "	add.s32 	%r27, %r71, %r6;\n"
    "	ld.shared.f32 	%f3382, [%rd14+704];\n"
    "	sub.f32 	%f3383, %f19, %f3382;\n"
    "	mov.f32 	%f3384, %f3383;\n"
    "	mul.f32 	%f3385, %f14, %f3384;\n"
    "	cvt.rni.f32.f32 	%f3386, %f3385;\n"
    "	mul.f32 	%f3387, %f13, %f3386;\n"
    "	sub.f32 	%f25, %f3383, %f3387;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3388, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3389, %f25, %f25, %f3388;\n"
    "	ld.shared.f32 	%f3390, [%rd14+708];\n"
    "	sub.f32 	%f3391, %f30, %f3390;\n"
    "	mov.f32 	%f3392, %f3391;\n"
    "	mov.f32 	%f3393, %f3392;\n"
    "	mul.f32 	%f3394, %f14, %f3392;\n"
    "	cvt.rni.f32.f32 	%f3395, %f3394;\n"
    "	mul.f32 	%f3396, %f13, %f3395;\n"
    "	sub.f32 	%f37, %f3391, %f3396;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3397, %f37, %f37, %f3389;\n"
    "	ld.shared.f32 	%f3398, [%rd14+712];\n"
    "	sub.f32 	%f3399, %f41, %f3398;\n"
    "	mov.f32 	%f3400, %f3399;\n"
    "	mul.f32 	%f3401, %f3399, %f14;\n"
    "	cvt.rni.f32.f32 	%f3402, %f3401;\n"
    "	mul.f32 	%f3403, %f13, %f3402;\n"
    "	sub.f32 	%f47, %f3399, %f3403;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3397;\n"
    "	mov.f32 	%f3404, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p134, %f49, %f3404;\n"
    "	@!%p134 bra 	$Lt_8_39170;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd148, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd149, %r27;\n"
    "	mul.wide.s32 	%rd150, %r27, 24;\n"
    "	add.u64 	%rd18, %rd148, %rd150;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f3405, [%rd18+4];\n"
    "	sub.f32 	%f3406, %f3405, %f51;\n"
    "	mul.f32 	%f55, %f52, %f3406;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f3407, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3408, %f55, %f3407;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3408;\n"
    "	mov.f32 	%f3409, %f58;\n"
    "	mov.f32 	%f3410, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3411, %f3410;\n"
    "	mov.f32 	%f3412, %f55;\n"
    "	mad.f32 %f3413, %f3409, %f3411, %f3412;\n"
    "	mov.f32 	%f64, %f3413;\n"
    "	mov.f32 	%f3414, %f58;\n"
    "	mov.f32 	%f3415, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3416, %f3415;\n"
    "	mov.f32 	%f3417, %f64;\n"
    "	mad.f32 %f3418, %f3414, %f3416, %f3417;\n"
    "	mov.f32 	%f64, %f3418;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f3419, [%rd18+12];\n"
    "	mov.f32 	%f3420, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3421, %f3419, %f3420;\n"
    "	mul.f32 	%f3422, %f73, %f3421;\n"
    "	mov.f32 	%f3423, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3424, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3425, %f58;\n"
    "	mov.f32 	%f3426, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3427, %f64, %f3426;\n"
    "	ex2.approx.f32 	%f3428, %f3427;\n"
    "	mul.f32 	%f3429, %f3425, %f3428;\n"
    "	mov.f32 	%f3430, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p135, %f55, %f3430;\n"
    "	selp.f32 	%f3431, %f3424, %f3429, %p135;\n"
    "	mov.f32 	%f3432, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p136, %f55, %f3432;\n"
    "	selp.f32 	%f3433, %f3423, %f3431, %p136;\n"
    "	ld.global.f32 	%f3434, [%rd18+0];\n"
    "	mov.f32 	%f3435, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3436, %f3434, %f3435;\n"
    "	mul.f32 	%f3437, %f3433, %f3436;\n"
    "	mul.f32 	%f3438, %f52, %f3437;\n"
    "	mul.f32 	%f3439, %f70, %f3438;\n"
    "	sub.f32 	%f3440, %f3439, %f3422;\n"
    "	ld.global.f32 	%f3441, [%rd18+16];\n"
    "	mov.f32 	%f3442, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3443, %f3441, %f3442;\n"
    "	mul.f32 	%f3444, %f73, %f3443;\n"
    "	mul.f32 	%f3445, %f71, %f3444;\n"
    "	sub.f32 	%f3446, %f3440, %f3445;\n"
    "	ld.global.f32 	%f3447, [%rd18+20];\n"
    "	mul.f32 	%f3448, %f70, %f71;\n"
    "	mad.f32 	%f104, %f3447, %f3448, %f3446;\n"
    "	mov.f32 	%f3449, %f2;\n"
    "	mov.f32 	%f3450, %f26;\n"
    "	mad.f32 	%f3451, %f3450, %f104, %f3449;\n"
    "	mov.f32 	%f2, %f3451;\n"
    "	mov.f32 	%f3452, %f4;\n"
    "	mov.f32 	%f3453, %f38;\n"
    "	mad.f32 	%f3454, %f3453, %f104, %f3452;\n"
    "	mov.f32 	%f4, %f3454;\n"
    "	mov.f32 	%f3455, %f6;\n"
    "	mov.f32 	%f3456, %f48;\n"
    "	mad.f32 	%f3457, %f3456, %f104, %f3455;\n"
    "	mov.f32 	%f6, %f3457;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_39170:\n"
    "	ld.shared.s32 	%r72, [%rd13+732];\n"
    "	add.s32 	%r27, %r72, %r6;\n"
    "	ld.shared.f32 	%f3458, [%rd14+720];\n"
    "	sub.f32 	%f3459, %f19, %f3458;\n"
    "	mov.f32 	%f3460, %f3459;\n"
    "	mul.f32 	%f3461, %f14, %f3460;\n"
    "	cvt.rni.f32.f32 	%f3462, %f3461;\n"
    "	mul.f32 	%f3463, %f13, %f3462;\n"
    "	sub.f32 	%f25, %f3459, %f3463;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3464, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3465, %f25, %f25, %f3464;\n"
    "	ld.shared.f32 	%f3466, [%rd14+724];\n"
    "	sub.f32 	%f3467, %f30, %f3466;\n"
    "	mov.f32 	%f3468, %f3467;\n"
    "	mov.f32 	%f3469, %f3468;\n"
    "	mul.f32 	%f3470, %f14, %f3468;\n"
    "	cvt.rni.f32.f32 	%f3471, %f3470;\n"
    "	mul.f32 	%f3472, %f13, %f3471;\n"
    "	sub.f32 	%f37, %f3467, %f3472;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3473, %f37, %f37, %f3465;\n"
    "	ld.shared.f32 	%f3474, [%rd14+728];\n"
    "	sub.f32 	%f3475, %f41, %f3474;\n"
    "	mov.f32 	%f3476, %f3475;\n"
    "	mul.f32 	%f3477, %f3475, %f14;\n"
    "	cvt.rni.f32.f32 	%f3478, %f3477;\n"
    "	mul.f32 	%f3479, %f13, %f3478;\n"
    "	sub.f32 	%f47, %f3475, %f3479;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3473;\n"
    "	mov.f32 	%f3480, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p137, %f49, %f3480;\n"
    "	@!%p137 bra 	$Lt_8_39682;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd151, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd152, %r27;\n"
    "	mul.wide.s32 	%rd153, %r27, 24;\n"
    "	add.u64 	%rd18, %rd151, %rd153;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f3481, [%rd18+4];\n"
    "	sub.f32 	%f3482, %f3481, %f51;\n"
    "	mul.f32 	%f55, %f52, %f3482;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f3483, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3484, %f55, %f3483;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3484;\n"
    "	mov.f32 	%f3485, %f58;\n"
    "	mov.f32 	%f3486, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3487, %f3486;\n"
    "	mov.f32 	%f3488, %f55;\n"
    "	mad.f32 %f3489, %f3485, %f3487, %f3488;\n"
    "	mov.f32 	%f64, %f3489;\n"
    "	mov.f32 	%f3490, %f58;\n"
    "	mov.f32 	%f3491, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3492, %f3491;\n"
    "	mov.f32 	%f3493, %f64;\n"
    "	mad.f32 %f3494, %f3490, %f3492, %f3493;\n"
    "	mov.f32 	%f64, %f3494;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f3495, [%rd18+12];\n"
    "	mov.f32 	%f3496, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3497, %f3495, %f3496;\n"
    "	mul.f32 	%f3498, %f73, %f3497;\n"
    "	mov.f32 	%f3499, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3500, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3501, %f58;\n"
    "	mov.f32 	%f3502, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3503, %f64, %f3502;\n"
    "	ex2.approx.f32 	%f3504, %f3503;\n"
    "	mul.f32 	%f3505, %f3501, %f3504;\n"
    "	mov.f32 	%f3506, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p138, %f55, %f3506;\n"
    "	selp.f32 	%f3507, %f3500, %f3505, %p138;\n"
    "	mov.f32 	%f3508, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p139, %f55, %f3508;\n"
    "	selp.f32 	%f3509, %f3499, %f3507, %p139;\n"
    "	ld.global.f32 	%f3510, [%rd18+0];\n"
    "	mov.f32 	%f3511, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3512, %f3510, %f3511;\n"
    "	mul.f32 	%f3513, %f3509, %f3512;\n"
    "	mul.f32 	%f3514, %f52, %f3513;\n"
    "	mul.f32 	%f3515, %f70, %f3514;\n"
    "	sub.f32 	%f3516, %f3515, %f3498;\n"
    "	ld.global.f32 	%f3517, [%rd18+16];\n"
    "	mov.f32 	%f3518, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3519, %f3517, %f3518;\n"
    "	mul.f32 	%f3520, %f73, %f3519;\n"
    "	mul.f32 	%f3521, %f71, %f3520;\n"
    "	sub.f32 	%f3522, %f3516, %f3521;\n"
    "	ld.global.f32 	%f3523, [%rd18+20];\n"
    "	mul.f32 	%f3524, %f70, %f71;\n"
    "	mad.f32 	%f104, %f3523, %f3524, %f3522;\n"
    "	mov.f32 	%f3525, %f2;\n"
    "	mov.f32 	%f3526, %f26;\n"
    "	mad.f32 	%f3527, %f3526, %f104, %f3525;\n"
    "	mov.f32 	%f2, %f3527;\n"
    "	mov.f32 	%f3528, %f4;\n"
    "	mov.f32 	%f3529, %f38;\n"
    "	mad.f32 	%f3530, %f3529, %f104, %f3528;\n"
    "	mov.f32 	%f4, %f3530;\n"
    "	mov.f32 	%f3531, %f6;\n"
    "	mov.f32 	%f3532, %f48;\n"
    "	mad.f32 	%f3533, %f3532, %f104, %f3531;\n"
    "	mov.f32 	%f6, %f3533;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_39682:\n"
    "	ld.shared.s32 	%r73, [%rd13+748];\n"
    "	add.s32 	%r27, %r73, %r6;\n"
    "	ld.shared.f32 	%f3534, [%rd14+736];\n"
    "	sub.f32 	%f3535, %f19, %f3534;\n"
    "	mov.f32 	%f3536, %f3535;\n"
    "	mul.f32 	%f3537, %f14, %f3536;\n"
    "	cvt.rni.f32.f32 	%f3538, %f3537;\n"
    "	mul.f32 	%f3539, %f13, %f3538;\n"
    "	sub.f32 	%f25, %f3535, %f3539;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3540, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3541, %f25, %f25, %f3540;\n"
    "	ld.shared.f32 	%f3542, [%rd14+740];\n"
    "	sub.f32 	%f3543, %f30, %f3542;\n"
    "	mov.f32 	%f3544, %f3543;\n"
    "	mov.f32 	%f3545, %f3544;\n"
    "	mul.f32 	%f3546, %f14, %f3544;\n"
    "	cvt.rni.f32.f32 	%f3547, %f3546;\n"
    "	mul.f32 	%f3548, %f13, %f3547;\n"
    "	sub.f32 	%f37, %f3543, %f3548;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3549, %f37, %f37, %f3541;\n"
    "	ld.shared.f32 	%f3550, [%rd14+744];\n"
    "	sub.f32 	%f3551, %f41, %f3550;\n"
    "	mov.f32 	%f3552, %f3551;\n"
    "	mul.f32 	%f3553, %f3551, %f14;\n"
    "	cvt.rni.f32.f32 	%f3554, %f3553;\n"
    "	mul.f32 	%f3555, %f13, %f3554;\n"
    "	sub.f32 	%f47, %f3551, %f3555;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3549;\n"
    "	mov.f32 	%f3556, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p140, %f49, %f3556;\n"
    "	@!%p140 bra 	$Lt_8_40194;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd154, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd155, %r27;\n"
    "	mul.wide.s32 	%rd156, %r27, 24;\n"
    "	add.u64 	%rd18, %rd154, %rd156;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f3557, [%rd18+4];\n"
    "	sub.f32 	%f3558, %f3557, %f51;\n"
    "	mul.f32 	%f55, %f52, %f3558;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f3559, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3560, %f55, %f3559;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3560;\n"
    "	mov.f32 	%f3561, %f58;\n"
    "	mov.f32 	%f3562, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3563, %f3562;\n"
    "	mov.f32 	%f3564, %f55;\n"
    "	mad.f32 %f3565, %f3561, %f3563, %f3564;\n"
    "	mov.f32 	%f64, %f3565;\n"
    "	mov.f32 	%f3566, %f58;\n"
    "	mov.f32 	%f3567, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3568, %f3567;\n"
    "	mov.f32 	%f3569, %f64;\n"
    "	mad.f32 %f3570, %f3566, %f3568, %f3569;\n"
    "	mov.f32 	%f64, %f3570;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f3571, [%rd18+12];\n"
    "	mov.f32 	%f3572, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3573, %f3571, %f3572;\n"
    "	mul.f32 	%f3574, %f73, %f3573;\n"
    "	mov.f32 	%f3575, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3576, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3577, %f58;\n"
    "	mov.f32 	%f3578, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3579, %f64, %f3578;\n"
    "	ex2.approx.f32 	%f3580, %f3579;\n"
    "	mul.f32 	%f3581, %f3577, %f3580;\n"
    "	mov.f32 	%f3582, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p141, %f55, %f3582;\n"
    "	selp.f32 	%f3583, %f3576, %f3581, %p141;\n"
    "	mov.f32 	%f3584, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p142, %f55, %f3584;\n"
    "	selp.f32 	%f3585, %f3575, %f3583, %p142;\n"
    "	ld.global.f32 	%f3586, [%rd18+0];\n"
    "	mov.f32 	%f3587, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3588, %f3586, %f3587;\n"
    "	mul.f32 	%f3589, %f3585, %f3588;\n"
    "	mul.f32 	%f3590, %f52, %f3589;\n"
    "	mul.f32 	%f3591, %f70, %f3590;\n"
    "	sub.f32 	%f3592, %f3591, %f3574;\n"
    "	ld.global.f32 	%f3593, [%rd18+16];\n"
    "	mov.f32 	%f3594, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3595, %f3593, %f3594;\n"
    "	mul.f32 	%f3596, %f73, %f3595;\n"
    "	mul.f32 	%f3597, %f71, %f3596;\n"
    "	sub.f32 	%f3598, %f3592, %f3597;\n"
    "	ld.global.f32 	%f3599, [%rd18+20];\n"
    "	mul.f32 	%f3600, %f70, %f71;\n"
    "	mad.f32 	%f104, %f3599, %f3600, %f3598;\n"
    "	mov.f32 	%f3601, %f2;\n"
    "	mov.f32 	%f3602, %f26;\n"
    "	mad.f32 	%f3603, %f3602, %f104, %f3601;\n"
    "	mov.f32 	%f2, %f3603;\n"
    "	mov.f32 	%f3604, %f4;\n"
    "	mov.f32 	%f3605, %f38;\n"
    "	mad.f32 	%f3606, %f3605, %f104, %f3604;\n"
    "	mov.f32 	%f4, %f3606;\n"
    "	mov.f32 	%f3607, %f6;\n"
    "	mov.f32 	%f3608, %f48;\n"
    "	mad.f32 	%f3609, %f3608, %f104, %f3607;\n"
    "	mov.f32 	%f6, %f3609;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_40194:\n"
    "	ld.shared.s32 	%r74, [%rd13+764];\n"
    "	add.s32 	%r27, %r74, %r6;\n"
    "	ld.shared.f32 	%f3610, [%rd14+752];\n"
    "	sub.f32 	%f3611, %f19, %f3610;\n"
    "	mov.f32 	%f3612, %f3611;\n"
    "	mul.f32 	%f3613, %f14, %f3612;\n"
    "	cvt.rni.f32.f32 	%f3614, %f3613;\n"
    "	mul.f32 	%f3615, %f13, %f3614;\n"
    "	sub.f32 	%f25, %f3611, %f3615;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3616, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3617, %f25, %f25, %f3616;\n"
    "	ld.shared.f32 	%f3618, [%rd14+756];\n"
    "	sub.f32 	%f3619, %f30, %f3618;\n"
    "	mov.f32 	%f3620, %f3619;\n"
    "	mov.f32 	%f3621, %f3620;\n"
    "	mul.f32 	%f3622, %f14, %f3620;\n"
    "	cvt.rni.f32.f32 	%f3623, %f3622;\n"
    "	mul.f32 	%f3624, %f13, %f3623;\n"
    "	sub.f32 	%f37, %f3619, %f3624;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3625, %f37, %f37, %f3617;\n"
    "	ld.shared.f32 	%f3626, [%rd14+760];\n"
    "	sub.f32 	%f3627, %f41, %f3626;\n"
    "	mov.f32 	%f3628, %f3627;\n"
    "	mul.f32 	%f3629, %f3627, %f14;\n"
    "	cvt.rni.f32.f32 	%f3630, %f3629;\n"
    "	mul.f32 	%f3631, %f13, %f3630;\n"
    "	sub.f32 	%f47, %f3627, %f3631;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3625;\n"
    "	mov.f32 	%f3632, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p143, %f49, %f3632;\n"
    "	@!%p143 bra 	$Lt_8_40706;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd157, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd158, %r27;\n"
    "	mul.wide.s32 	%rd159, %r27, 24;\n"
    "	add.u64 	%rd18, %rd157, %rd159;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f3633, [%rd18+4];\n"
    "	sub.f32 	%f3634, %f3633, %f51;\n"
    "	mul.f32 	%f55, %f52, %f3634;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f3635, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3636, %f55, %f3635;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3636;\n"
    "	mov.f32 	%f3637, %f58;\n"
    "	mov.f32 	%f3638, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3639, %f3638;\n"
    "	mov.f32 	%f3640, %f55;\n"
    "	mad.f32 %f3641, %f3637, %f3639, %f3640;\n"
    "	mov.f32 	%f64, %f3641;\n"
    "	mov.f32 	%f3642, %f58;\n"
    "	mov.f32 	%f3643, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3644, %f3643;\n"
    "	mov.f32 	%f3645, %f64;\n"
    "	mad.f32 %f3646, %f3642, %f3644, %f3645;\n"
    "	mov.f32 	%f64, %f3646;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f3647, [%rd18+12];\n"
    "	mov.f32 	%f3648, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3649, %f3647, %f3648;\n"
    "	mul.f32 	%f3650, %f73, %f3649;\n"
    "	mov.f32 	%f3651, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3652, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3653, %f58;\n"
    "	mov.f32 	%f3654, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3655, %f64, %f3654;\n"
    "	ex2.approx.f32 	%f3656, %f3655;\n"
    "	mul.f32 	%f3657, %f3653, %f3656;\n"
    "	mov.f32 	%f3658, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p144, %f55, %f3658;\n"
    "	selp.f32 	%f3659, %f3652, %f3657, %p144;\n"
    "	mov.f32 	%f3660, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p145, %f55, %f3660;\n"
    "	selp.f32 	%f3661, %f3651, %f3659, %p145;\n"
    "	ld.global.f32 	%f3662, [%rd18+0];\n"
    "	mov.f32 	%f3663, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3664, %f3662, %f3663;\n"
    "	mul.f32 	%f3665, %f3661, %f3664;\n"
    "	mul.f32 	%f3666, %f52, %f3665;\n"
    "	mul.f32 	%f3667, %f70, %f3666;\n"
    "	sub.f32 	%f3668, %f3667, %f3650;\n"
    "	ld.global.f32 	%f3669, [%rd18+16];\n"
    "	mov.f32 	%f3670, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3671, %f3669, %f3670;\n"
    "	mul.f32 	%f3672, %f73, %f3671;\n"
    "	mul.f32 	%f3673, %f71, %f3672;\n"
    "	sub.f32 	%f3674, %f3668, %f3673;\n"
    "	ld.global.f32 	%f3675, [%rd18+20];\n"
    "	mul.f32 	%f3676, %f70, %f71;\n"
    "	mad.f32 	%f104, %f3675, %f3676, %f3674;\n"
    "	mov.f32 	%f3677, %f2;\n"
    "	mov.f32 	%f3678, %f26;\n"
    "	mad.f32 	%f3679, %f3678, %f104, %f3677;\n"
    "	mov.f32 	%f2, %f3679;\n"
    "	mov.f32 	%f3680, %f4;\n"
    "	mov.f32 	%f3681, %f38;\n"
    "	mad.f32 	%f3682, %f3681, %f104, %f3680;\n"
    "	mov.f32 	%f4, %f3682;\n"
    "	mov.f32 	%f3683, %f6;\n"
    "	mov.f32 	%f3684, %f48;\n"
    "	mad.f32 	%f3685, %f3684, %f104, %f3683;\n"
    "	mov.f32 	%f6, %f3685;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_40706:\n"
    "	ld.shared.s32 	%r75, [%rd13+780];\n"
    "	add.s32 	%r27, %r75, %r6;\n"
    "	ld.shared.f32 	%f3686, [%rd14+768];\n"
    "	sub.f32 	%f3687, %f19, %f3686;\n"
    "	mov.f32 	%f3688, %f3687;\n"
    "	mul.f32 	%f3689, %f14, %f3688;\n"
    "	cvt.rni.f32.f32 	%f3690, %f3689;\n"
    "	mul.f32 	%f3691, %f13, %f3690;\n"
    "	sub.f32 	%f25, %f3687, %f3691;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3692, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3693, %f25, %f25, %f3692;\n"
    "	ld.shared.f32 	%f3694, [%rd14+772];\n"
    "	sub.f32 	%f3695, %f30, %f3694;\n"
    "	mov.f32 	%f3696, %f3695;\n"
    "	mov.f32 	%f3697, %f3696;\n"
    "	mul.f32 	%f3698, %f14, %f3696;\n"
    "	cvt.rni.f32.f32 	%f3699, %f3698;\n"
    "	mul.f32 	%f3700, %f13, %f3699;\n"
    "	sub.f32 	%f37, %f3695, %f3700;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3701, %f37, %f37, %f3693;\n"
    "	ld.shared.f32 	%f3702, [%rd14+776];\n"
    "	sub.f32 	%f3703, %f41, %f3702;\n"
    "	mov.f32 	%f3704, %f3703;\n"
    "	mul.f32 	%f3705, %f3703, %f14;\n"
    "	cvt.rni.f32.f32 	%f3706, %f3705;\n"
    "	mul.f32 	%f3707, %f13, %f3706;\n"
    "	sub.f32 	%f47, %f3703, %f3707;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3701;\n"
    "	mov.f32 	%f3708, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p146, %f49, %f3708;\n"
    "	@!%p146 bra 	$Lt_8_41218;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd160, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd161, %r27;\n"
    "	mul.wide.s32 	%rd162, %r27, 24;\n"
    "	add.u64 	%rd18, %rd160, %rd162;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f3709, [%rd18+4];\n"
    "	sub.f32 	%f3710, %f3709, %f51;\n"
    "	mul.f32 	%f55, %f52, %f3710;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f3711, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3712, %f55, %f3711;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3712;\n"
    "	mov.f32 	%f3713, %f58;\n"
    "	mov.f32 	%f3714, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3715, %f3714;\n"
    "	mov.f32 	%f3716, %f55;\n"
    "	mad.f32 %f3717, %f3713, %f3715, %f3716;\n"
    "	mov.f32 	%f64, %f3717;\n"
    "	mov.f32 	%f3718, %f58;\n"
    "	mov.f32 	%f3719, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3720, %f3719;\n"
    "	mov.f32 	%f3721, %f64;\n"
    "	mad.f32 %f3722, %f3718, %f3720, %f3721;\n"
    "	mov.f32 	%f64, %f3722;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f3723, [%rd18+12];\n"
    "	mov.f32 	%f3724, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3725, %f3723, %f3724;\n"
    "	mul.f32 	%f3726, %f73, %f3725;\n"
    "	mov.f32 	%f3727, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3728, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3729, %f58;\n"
    "	mov.f32 	%f3730, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3731, %f64, %f3730;\n"
    "	ex2.approx.f32 	%f3732, %f3731;\n"
    "	mul.f32 	%f3733, %f3729, %f3732;\n"
    "	mov.f32 	%f3734, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p147, %f55, %f3734;\n"
    "	selp.f32 	%f3735, %f3728, %f3733, %p147;\n"
    "	mov.f32 	%f3736, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p148, %f55, %f3736;\n"
    "	selp.f32 	%f3737, %f3727, %f3735, %p148;\n"
    "	ld.global.f32 	%f3738, [%rd18+0];\n"
    "	mov.f32 	%f3739, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3740, %f3738, %f3739;\n"
    "	mul.f32 	%f3741, %f3737, %f3740;\n"
    "	mul.f32 	%f3742, %f52, %f3741;\n"
    "	mul.f32 	%f3743, %f70, %f3742;\n"
    "	sub.f32 	%f3744, %f3743, %f3726;\n"
    "	ld.global.f32 	%f3745, [%rd18+16];\n"
    "	mov.f32 	%f3746, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3747, %f3745, %f3746;\n"
    "	mul.f32 	%f3748, %f73, %f3747;\n"
    "	mul.f32 	%f3749, %f71, %f3748;\n"
    "	sub.f32 	%f3750, %f3744, %f3749;\n"
    "	ld.global.f32 	%f3751, [%rd18+20];\n"
    "	mul.f32 	%f3752, %f70, %f71;\n"
    "	mad.f32 	%f104, %f3751, %f3752, %f3750;\n"
    "	mov.f32 	%f3753, %f2;\n"
    "	mov.f32 	%f3754, %f26;\n"
    "	mad.f32 	%f3755, %f3754, %f104, %f3753;\n"
    "	mov.f32 	%f2, %f3755;\n"
    "	mov.f32 	%f3756, %f4;\n"
    "	mov.f32 	%f3757, %f38;\n"
    "	mad.f32 	%f3758, %f3757, %f104, %f3756;\n"
    "	mov.f32 	%f4, %f3758;\n"
    "	mov.f32 	%f3759, %f6;\n"
    "	mov.f32 	%f3760, %f48;\n"
    "	mad.f32 	%f3761, %f3760, %f104, %f3759;\n"
    "	mov.f32 	%f6, %f3761;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_41218:\n"
    "	ld.shared.s32 	%r76, [%rd13+796];\n"
    "	add.s32 	%r27, %r76, %r6;\n"
    "	ld.shared.f32 	%f3762, [%rd14+784];\n"
    "	sub.f32 	%f3763, %f19, %f3762;\n"
    "	mov.f32 	%f3764, %f3763;\n"
    "	mul.f32 	%f3765, %f14, %f3764;\n"
    "	cvt.rni.f32.f32 	%f3766, %f3765;\n"
    "	mul.f32 	%f3767, %f13, %f3766;\n"
    "	sub.f32 	%f25, %f3763, %f3767;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3768, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3769, %f25, %f25, %f3768;\n"
    "	ld.shared.f32 	%f3770, [%rd14+788];\n"
    "	sub.f32 	%f3771, %f30, %f3770;\n"
    "	mov.f32 	%f3772, %f3771;\n"
    "	mov.f32 	%f3773, %f3772;\n"
    "	mul.f32 	%f3774, %f14, %f3772;\n"
    "	cvt.rni.f32.f32 	%f3775, %f3774;\n"
    "	mul.f32 	%f3776, %f13, %f3775;\n"
    "	sub.f32 	%f37, %f3771, %f3776;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3777, %f37, %f37, %f3769;\n"
    "	ld.shared.f32 	%f3778, [%rd14+792];\n"
    "	sub.f32 	%f3779, %f41, %f3778;\n"
    "	mov.f32 	%f3780, %f3779;\n"
    "	mul.f32 	%f3781, %f3779, %f14;\n"
    "	cvt.rni.f32.f32 	%f3782, %f3781;\n"
    "	mul.f32 	%f3783, %f13, %f3782;\n"
    "	sub.f32 	%f47, %f3779, %f3783;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3777;\n"
    "	mov.f32 	%f3784, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p149, %f49, %f3784;\n"
    "	@!%p149 bra 	$Lt_8_41730;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd163, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd164, %r27;\n"
    "	mul.wide.s32 	%rd165, %r27, 24;\n"
    "	add.u64 	%rd18, %rd163, %rd165;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f3785, [%rd18+4];\n"
    "	sub.f32 	%f3786, %f3785, %f51;\n"
    "	mul.f32 	%f55, %f52, %f3786;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f3787, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3788, %f55, %f3787;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3788;\n"
    "	mov.f32 	%f3789, %f58;\n"
    "	mov.f32 	%f3790, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3791, %f3790;\n"
    "	mov.f32 	%f3792, %f55;\n"
    "	mad.f32 %f3793, %f3789, %f3791, %f3792;\n"
    "	mov.f32 	%f64, %f3793;\n"
    "	mov.f32 	%f3794, %f58;\n"
    "	mov.f32 	%f3795, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3796, %f3795;\n"
    "	mov.f32 	%f3797, %f64;\n"
    "	mad.f32 %f3798, %f3794, %f3796, %f3797;\n"
    "	mov.f32 	%f64, %f3798;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f3799, [%rd18+12];\n"
    "	mov.f32 	%f3800, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3801, %f3799, %f3800;\n"
    "	mul.f32 	%f3802, %f73, %f3801;\n"
    "	mov.f32 	%f3803, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3804, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3805, %f58;\n"
    "	mov.f32 	%f3806, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3807, %f64, %f3806;\n"
    "	ex2.approx.f32 	%f3808, %f3807;\n"
    "	mul.f32 	%f3809, %f3805, %f3808;\n"
    "	mov.f32 	%f3810, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p150, %f55, %f3810;\n"
    "	selp.f32 	%f3811, %f3804, %f3809, %p150;\n"
    "	mov.f32 	%f3812, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p151, %f55, %f3812;\n"
    "	selp.f32 	%f3813, %f3803, %f3811, %p151;\n"
    "	ld.global.f32 	%f3814, [%rd18+0];\n"
    "	mov.f32 	%f3815, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3816, %f3814, %f3815;\n"
    "	mul.f32 	%f3817, %f3813, %f3816;\n"
    "	mul.f32 	%f3818, %f52, %f3817;\n"
    "	mul.f32 	%f3819, %f70, %f3818;\n"
    "	sub.f32 	%f3820, %f3819, %f3802;\n"
    "	ld.global.f32 	%f3821, [%rd18+16];\n"
    "	mov.f32 	%f3822, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3823, %f3821, %f3822;\n"
    "	mul.f32 	%f3824, %f73, %f3823;\n"
    "	mul.f32 	%f3825, %f71, %f3824;\n"
    "	sub.f32 	%f3826, %f3820, %f3825;\n"
    "	ld.global.f32 	%f3827, [%rd18+20];\n"
    "	mul.f32 	%f3828, %f70, %f71;\n"
    "	mad.f32 	%f104, %f3827, %f3828, %f3826;\n"
    "	mov.f32 	%f3829, %f2;\n"
    "	mov.f32 	%f3830, %f26;\n"
    "	mad.f32 	%f3831, %f3830, %f104, %f3829;\n"
    "	mov.f32 	%f2, %f3831;\n"
    "	mov.f32 	%f3832, %f4;\n"
    "	mov.f32 	%f3833, %f38;\n"
    "	mad.f32 	%f3834, %f3833, %f104, %f3832;\n"
    "	mov.f32 	%f4, %f3834;\n"
    "	mov.f32 	%f3835, %f6;\n"
    "	mov.f32 	%f3836, %f48;\n"
    "	mad.f32 	%f3837, %f3836, %f104, %f3835;\n"
    "	mov.f32 	%f6, %f3837;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_41730:\n"
    "	ld.shared.s32 	%r77, [%rd13+812];\n"
    "	add.s32 	%r27, %r77, %r6;\n"
    "	ld.shared.f32 	%f3838, [%rd14+800];\n"
    "	sub.f32 	%f3839, %f19, %f3838;\n"
    "	mov.f32 	%f3840, %f3839;\n"
    "	mul.f32 	%f3841, %f14, %f3840;\n"
    "	cvt.rni.f32.f32 	%f3842, %f3841;\n"
    "	mul.f32 	%f3843, %f13, %f3842;\n"
    "	sub.f32 	%f25, %f3839, %f3843;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3844, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3845, %f25, %f25, %f3844;\n"
    "	ld.shared.f32 	%f3846, [%rd14+804];\n"
    "	sub.f32 	%f3847, %f30, %f3846;\n"
    "	mov.f32 	%f3848, %f3847;\n"
    "	mov.f32 	%f3849, %f3848;\n"
    "	mul.f32 	%f3850, %f14, %f3848;\n"
    "	cvt.rni.f32.f32 	%f3851, %f3850;\n"
    "	mul.f32 	%f3852, %f13, %f3851;\n"
    "	sub.f32 	%f37, %f3847, %f3852;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3853, %f37, %f37, %f3845;\n"
    "	ld.shared.f32 	%f3854, [%rd14+808];\n"
    "	sub.f32 	%f3855, %f41, %f3854;\n"
    "	mov.f32 	%f3856, %f3855;\n"
    "	mul.f32 	%f3857, %f3855, %f14;\n"
    "	cvt.rni.f32.f32 	%f3858, %f3857;\n"
    "	mul.f32 	%f3859, %f13, %f3858;\n"
    "	sub.f32 	%f47, %f3855, %f3859;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3853;\n"
    "	mov.f32 	%f3860, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p152, %f49, %f3860;\n"
    "	@!%p152 bra 	$Lt_8_42242;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd166, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd167, %r27;\n"
    "	mul.wide.s32 	%rd168, %r27, 24;\n"
    "	add.u64 	%rd18, %rd166, %rd168;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f3861, [%rd18+4];\n"
    "	sub.f32 	%f3862, %f3861, %f51;\n"
    "	mul.f32 	%f55, %f52, %f3862;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f3863, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3864, %f55, %f3863;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3864;\n"
    "	mov.f32 	%f3865, %f58;\n"
    "	mov.f32 	%f3866, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3867, %f3866;\n"
    "	mov.f32 	%f3868, %f55;\n"
    "	mad.f32 %f3869, %f3865, %f3867, %f3868;\n"
    "	mov.f32 	%f64, %f3869;\n"
    "	mov.f32 	%f3870, %f58;\n"
    "	mov.f32 	%f3871, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3872, %f3871;\n"
    "	mov.f32 	%f3873, %f64;\n"
    "	mad.f32 %f3874, %f3870, %f3872, %f3873;\n"
    "	mov.f32 	%f64, %f3874;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f3875, [%rd18+12];\n"
    "	mov.f32 	%f3876, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3877, %f3875, %f3876;\n"
    "	mul.f32 	%f3878, %f73, %f3877;\n"
    "	mov.f32 	%f3879, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3880, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3881, %f58;\n"
    "	mov.f32 	%f3882, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3883, %f64, %f3882;\n"
    "	ex2.approx.f32 	%f3884, %f3883;\n"
    "	mul.f32 	%f3885, %f3881, %f3884;\n"
    "	mov.f32 	%f3886, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p153, %f55, %f3886;\n"
    "	selp.f32 	%f3887, %f3880, %f3885, %p153;\n"
    "	mov.f32 	%f3888, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p154, %f55, %f3888;\n"
    "	selp.f32 	%f3889, %f3879, %f3887, %p154;\n"
    "	ld.global.f32 	%f3890, [%rd18+0];\n"
    "	mov.f32 	%f3891, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3892, %f3890, %f3891;\n"
    "	mul.f32 	%f3893, %f3889, %f3892;\n"
    "	mul.f32 	%f3894, %f52, %f3893;\n"
    "	mul.f32 	%f3895, %f70, %f3894;\n"
    "	sub.f32 	%f3896, %f3895, %f3878;\n"
    "	ld.global.f32 	%f3897, [%rd18+16];\n"
    "	mov.f32 	%f3898, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3899, %f3897, %f3898;\n"
    "	mul.f32 	%f3900, %f73, %f3899;\n"
    "	mul.f32 	%f3901, %f71, %f3900;\n"
    "	sub.f32 	%f3902, %f3896, %f3901;\n"
    "	ld.global.f32 	%f3903, [%rd18+20];\n"
    "	mul.f32 	%f3904, %f70, %f71;\n"
    "	mad.f32 	%f104, %f3903, %f3904, %f3902;\n"
    "	mov.f32 	%f3905, %f2;\n"
    "	mov.f32 	%f3906, %f26;\n"
    "	mad.f32 	%f3907, %f3906, %f104, %f3905;\n"
    "	mov.f32 	%f2, %f3907;\n"
    "	mov.f32 	%f3908, %f4;\n"
    "	mov.f32 	%f3909, %f38;\n"
    "	mad.f32 	%f3910, %f3909, %f104, %f3908;\n"
    "	mov.f32 	%f4, %f3910;\n"
    "	mov.f32 	%f3911, %f6;\n"
    "	mov.f32 	%f3912, %f48;\n"
    "	mad.f32 	%f3913, %f3912, %f104, %f3911;\n"
    "	mov.f32 	%f6, %f3913;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_42242:\n"
    "	ld.shared.s32 	%r78, [%rd13+828];\n"
    "	add.s32 	%r27, %r78, %r6;\n"
    "	ld.shared.f32 	%f3914, [%rd14+816];\n"
    "	sub.f32 	%f3915, %f19, %f3914;\n"
    "	mov.f32 	%f3916, %f3915;\n"
    "	mul.f32 	%f3917, %f14, %f3916;\n"
    "	cvt.rni.f32.f32 	%f3918, %f3917;\n"
    "	mul.f32 	%f3919, %f13, %f3918;\n"
    "	sub.f32 	%f25, %f3915, %f3919;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3920, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3921, %f25, %f25, %f3920;\n"
    "	ld.shared.f32 	%f3922, [%rd14+820];\n"
    "	sub.f32 	%f3923, %f30, %f3922;\n"
    "	mov.f32 	%f3924, %f3923;\n"
    "	mov.f32 	%f3925, %f3924;\n"
    "	mul.f32 	%f3926, %f14, %f3924;\n"
    "	cvt.rni.f32.f32 	%f3927, %f3926;\n"
    "	mul.f32 	%f3928, %f13, %f3927;\n"
    "	sub.f32 	%f37, %f3923, %f3928;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3929, %f37, %f37, %f3921;\n"
    "	ld.shared.f32 	%f3930, [%rd14+824];\n"
    "	sub.f32 	%f3931, %f41, %f3930;\n"
    "	mov.f32 	%f3932, %f3931;\n"
    "	mul.f32 	%f3933, %f3931, %f14;\n"
    "	cvt.rni.f32.f32 	%f3934, %f3933;\n"
    "	mul.f32 	%f3935, %f13, %f3934;\n"
    "	sub.f32 	%f47, %f3931, %f3935;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3929;\n"
    "	mov.f32 	%f3936, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p155, %f49, %f3936;\n"
    "	@!%p155 bra 	$Lt_8_42754;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd169, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd170, %r27;\n"
    "	mul.wide.s32 	%rd171, %r27, 24;\n"
    "	add.u64 	%rd18, %rd169, %rd171;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f3937, [%rd18+4];\n"
    "	sub.f32 	%f3938, %f3937, %f51;\n"
    "	mul.f32 	%f55, %f52, %f3938;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f3939, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3940, %f55, %f3939;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3940;\n"
    "	mov.f32 	%f3941, %f58;\n"
    "	mov.f32 	%f3942, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3943, %f3942;\n"
    "	mov.f32 	%f3944, %f55;\n"
    "	mad.f32 %f3945, %f3941, %f3943, %f3944;\n"
    "	mov.f32 	%f64, %f3945;\n"
    "	mov.f32 	%f3946, %f58;\n"
    "	mov.f32 	%f3947, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3948, %f3947;\n"
    "	mov.f32 	%f3949, %f64;\n"
    "	mad.f32 %f3950, %f3946, %f3948, %f3949;\n"
    "	mov.f32 	%f64, %f3950;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f3951, [%rd18+12];\n"
    "	mov.f32 	%f3952, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3953, %f3951, %f3952;\n"
    "	mul.f32 	%f3954, %f73, %f3953;\n"
    "	mov.f32 	%f3955, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3956, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3957, %f58;\n"
    "	mov.f32 	%f3958, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3959, %f64, %f3958;\n"
    "	ex2.approx.f32 	%f3960, %f3959;\n"
    "	mul.f32 	%f3961, %f3957, %f3960;\n"
    "	mov.f32 	%f3962, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p156, %f55, %f3962;\n"
    "	selp.f32 	%f3963, %f3956, %f3961, %p156;\n"
    "	mov.f32 	%f3964, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p157, %f55, %f3964;\n"
    "	selp.f32 	%f3965, %f3955, %f3963, %p157;\n"
    "	ld.global.f32 	%f3966, [%rd18+0];\n"
    "	mov.f32 	%f3967, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3968, %f3966, %f3967;\n"
    "	mul.f32 	%f3969, %f3965, %f3968;\n"
    "	mul.f32 	%f3970, %f52, %f3969;\n"
    "	mul.f32 	%f3971, %f70, %f3970;\n"
    "	sub.f32 	%f3972, %f3971, %f3954;\n"
    "	ld.global.f32 	%f3973, [%rd18+16];\n"
    "	mov.f32 	%f3974, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3975, %f3973, %f3974;\n"
    "	mul.f32 	%f3976, %f73, %f3975;\n"
    "	mul.f32 	%f3977, %f71, %f3976;\n"
    "	sub.f32 	%f3978, %f3972, %f3977;\n"
    "	ld.global.f32 	%f3979, [%rd18+20];\n"
    "	mul.f32 	%f3980, %f70, %f71;\n"
    "	mad.f32 	%f104, %f3979, %f3980, %f3978;\n"
    "	mov.f32 	%f3981, %f2;\n"
    "	mov.f32 	%f3982, %f26;\n"
    "	mad.f32 	%f3983, %f3982, %f104, %f3981;\n"
    "	mov.f32 	%f2, %f3983;\n"
    "	mov.f32 	%f3984, %f4;\n"
    "	mov.f32 	%f3985, %f38;\n"
    "	mad.f32 	%f3986, %f3985, %f104, %f3984;\n"
    "	mov.f32 	%f4, %f3986;\n"
    "	mov.f32 	%f3987, %f6;\n"
    "	mov.f32 	%f3988, %f48;\n"
    "	mad.f32 	%f3989, %f3988, %f104, %f3987;\n"
    "	mov.f32 	%f6, %f3989;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_42754:\n"
    "	ld.shared.s32 	%r79, [%rd13+844];\n"
    "	add.s32 	%r27, %r79, %r6;\n"
    "	ld.shared.f32 	%f3990, [%rd14+832];\n"
    "	sub.f32 	%f3991, %f19, %f3990;\n"
    "	mov.f32 	%f3992, %f3991;\n"
    "	mul.f32 	%f3993, %f14, %f3992;\n"
    "	cvt.rni.f32.f32 	%f3994, %f3993;\n"
    "	mul.f32 	%f3995, %f13, %f3994;\n"
    "	sub.f32 	%f25, %f3991, %f3995;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3996, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3997, %f25, %f25, %f3996;\n"
    "	ld.shared.f32 	%f3998, [%rd14+836];\n"
    "	sub.f32 	%f3999, %f30, %f3998;\n"
    "	mov.f32 	%f4000, %f3999;\n"
    "	mov.f32 	%f4001, %f4000;\n"
    "	mul.f32 	%f4002, %f14, %f4000;\n"
    "	cvt.rni.f32.f32 	%f4003, %f4002;\n"
    "	mul.f32 	%f4004, %f13, %f4003;\n"
    "	sub.f32 	%f37, %f3999, %f4004;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f4005, %f37, %f37, %f3997;\n"
    "	ld.shared.f32 	%f4006, [%rd14+840];\n"
    "	sub.f32 	%f4007, %f41, %f4006;\n"
    "	mov.f32 	%f4008, %f4007;\n"
    "	mul.f32 	%f4009, %f4007, %f14;\n"
    "	cvt.rni.f32.f32 	%f4010, %f4009;\n"
    "	mul.f32 	%f4011, %f13, %f4010;\n"
    "	sub.f32 	%f47, %f4007, %f4011;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f4005;\n"
    "	mov.f32 	%f4012, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p158, %f49, %f4012;\n"
    "	@!%p158 bra 	$Lt_8_43266;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd172, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd173, %r27;\n"
    "	mul.wide.s32 	%rd174, %r27, 24;\n"
    "	add.u64 	%rd18, %rd172, %rd174;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f4013, [%rd18+4];\n"
    "	sub.f32 	%f4014, %f4013, %f51;\n"
    "	mul.f32 	%f55, %f52, %f4014;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f4015, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4016, %f55, %f4015;\n"
    "	cvt.rzi.f32.f32 	%f58, %f4016;\n"
    "	mov.f32 	%f4017, %f58;\n"
    "	mov.f32 	%f4018, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f4019, %f4018;\n"
    "	mov.f32 	%f4020, %f55;\n"
    "	mad.f32 %f4021, %f4017, %f4019, %f4020;\n"
    "	mov.f32 	%f64, %f4021;\n"
    "	mov.f32 	%f4022, %f58;\n"
    "	mov.f32 	%f4023, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f4024, %f4023;\n"
    "	mov.f32 	%f4025, %f64;\n"
    "	mad.f32 %f4026, %f4022, %f4024, %f4025;\n"
    "	mov.f32 	%f64, %f4026;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f4027, [%rd18+12];\n"
    "	mov.f32 	%f4028, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4029, %f4027, %f4028;\n"
    "	mul.f32 	%f4030, %f73, %f4029;\n"
    "	mov.f32 	%f4031, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f4032, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f4033, %f58;\n"
    "	mov.f32 	%f4034, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4035, %f64, %f4034;\n"
    "	ex2.approx.f32 	%f4036, %f4035;\n"
    "	mul.f32 	%f4037, %f4033, %f4036;\n"
    "	mov.f32 	%f4038, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p159, %f55, %f4038;\n"
    "	selp.f32 	%f4039, %f4032, %f4037, %p159;\n"
    "	mov.f32 	%f4040, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p160, %f55, %f4040;\n"
    "	selp.f32 	%f4041, %f4031, %f4039, %p160;\n"
    "	ld.global.f32 	%f4042, [%rd18+0];\n"
    "	mov.f32 	%f4043, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4044, %f4042, %f4043;\n"
    "	mul.f32 	%f4045, %f4041, %f4044;\n"
    "	mul.f32 	%f4046, %f52, %f4045;\n"
    "	mul.f32 	%f4047, %f70, %f4046;\n"
    "	sub.f32 	%f4048, %f4047, %f4030;\n"
    "	ld.global.f32 	%f4049, [%rd18+16];\n"
    "	mov.f32 	%f4050, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4051, %f4049, %f4050;\n"
    "	mul.f32 	%f4052, %f73, %f4051;\n"
    "	mul.f32 	%f4053, %f71, %f4052;\n"
    "	sub.f32 	%f4054, %f4048, %f4053;\n"
    "	ld.global.f32 	%f4055, [%rd18+20];\n"
    "	mul.f32 	%f4056, %f70, %f71;\n"
    "	mad.f32 	%f104, %f4055, %f4056, %f4054;\n"
    "	mov.f32 	%f4057, %f2;\n"
    "	mov.f32 	%f4058, %f26;\n"
    "	mad.f32 	%f4059, %f4058, %f104, %f4057;\n"
    "	mov.f32 	%f2, %f4059;\n"
    "	mov.f32 	%f4060, %f4;\n"
    "	mov.f32 	%f4061, %f38;\n"
    "	mad.f32 	%f4062, %f4061, %f104, %f4060;\n"
    "	mov.f32 	%f4, %f4062;\n"
    "	mov.f32 	%f4063, %f6;\n"
    "	mov.f32 	%f4064, %f48;\n"
    "	mad.f32 	%f4065, %f4064, %f104, %f4063;\n"
    "	mov.f32 	%f6, %f4065;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_43266:\n"
    "	ld.shared.s32 	%r80, [%rd13+860];\n"
    "	add.s32 	%r27, %r80, %r6;\n"
    "	ld.shared.f32 	%f4066, [%rd14+848];\n"
    "	sub.f32 	%f4067, %f19, %f4066;\n"
    "	mov.f32 	%f4068, %f4067;\n"
    "	mul.f32 	%f4069, %f14, %f4068;\n"
    "	cvt.rni.f32.f32 	%f4070, %f4069;\n"
    "	mul.f32 	%f4071, %f13, %f4070;\n"
    "	sub.f32 	%f25, %f4067, %f4071;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f4072, 0f00000000;  	// 0\n"
    "	mad.f32 	%f4073, %f25, %f25, %f4072;\n"
    "	ld.shared.f32 	%f4074, [%rd14+852];\n"
    "	sub.f32 	%f4075, %f30, %f4074;\n"
    "	mov.f32 	%f4076, %f4075;\n"
    "	mov.f32 	%f4077, %f4076;\n"
    "	mul.f32 	%f4078, %f14, %f4076;\n"
    "	cvt.rni.f32.f32 	%f4079, %f4078;\n"
    "	mul.f32 	%f4080, %f13, %f4079;\n"
    "	sub.f32 	%f37, %f4075, %f4080;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f4081, %f37, %f37, %f4073;\n"
    "	ld.shared.f32 	%f4082, [%rd14+856];\n"
    "	sub.f32 	%f4083, %f41, %f4082;\n"
    "	mov.f32 	%f4084, %f4083;\n"
    "	mul.f32 	%f4085, %f4083, %f14;\n"
    "	cvt.rni.f32.f32 	%f4086, %f4085;\n"
    "	mul.f32 	%f4087, %f13, %f4086;\n"
    "	sub.f32 	%f47, %f4083, %f4087;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f4081;\n"
    "	mov.f32 	%f4088, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p161, %f49, %f4088;\n"
    "	@!%p161 bra 	$Lt_8_43778;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd175, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd176, %r27;\n"
    "	mul.wide.s32 	%rd177, %r27, 24;\n"
    "	add.u64 	%rd18, %rd175, %rd177;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f4089, [%rd18+4];\n"
    "	sub.f32 	%f4090, %f4089, %f51;\n"
    "	mul.f32 	%f55, %f52, %f4090;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f4091, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4092, %f55, %f4091;\n"
    "	cvt.rzi.f32.f32 	%f58, %f4092;\n"
    "	mov.f32 	%f4093, %f58;\n"
    "	mov.f32 	%f4094, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f4095, %f4094;\n"
    "	mov.f32 	%f4096, %f55;\n"
    "	mad.f32 %f4097, %f4093, %f4095, %f4096;\n"
    "	mov.f32 	%f64, %f4097;\n"
    "	mov.f32 	%f4098, %f58;\n"
    "	mov.f32 	%f4099, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f4100, %f4099;\n"
    "	mov.f32 	%f4101, %f64;\n"
    "	mad.f32 %f4102, %f4098, %f4100, %f4101;\n"
    "	mov.f32 	%f64, %f4102;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f4103, [%rd18+12];\n"
    "	mov.f32 	%f4104, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4105, %f4103, %f4104;\n"
    "	mul.f32 	%f4106, %f73, %f4105;\n"
    "	mov.f32 	%f4107, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f4108, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f4109, %f58;\n"
    "	mov.f32 	%f4110, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4111, %f64, %f4110;\n"
    "	ex2.approx.f32 	%f4112, %f4111;\n"
    "	mul.f32 	%f4113, %f4109, %f4112;\n"
    "	mov.f32 	%f4114, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p162, %f55, %f4114;\n"
    "	selp.f32 	%f4115, %f4108, %f4113, %p162;\n"
    "	mov.f32 	%f4116, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p163, %f55, %f4116;\n"
    "	selp.f32 	%f4117, %f4107, %f4115, %p163;\n"
    "	ld.global.f32 	%f4118, [%rd18+0];\n"
    "	mov.f32 	%f4119, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4120, %f4118, %f4119;\n"
    "	mul.f32 	%f4121, %f4117, %f4120;\n"
    "	mul.f32 	%f4122, %f52, %f4121;\n"
    "	mul.f32 	%f4123, %f70, %f4122;\n"
    "	sub.f32 	%f4124, %f4123, %f4106;\n"
    "	ld.global.f32 	%f4125, [%rd18+16];\n"
    "	mov.f32 	%f4126, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4127, %f4125, %f4126;\n"
    "	mul.f32 	%f4128, %f73, %f4127;\n"
    "	mul.f32 	%f4129, %f71, %f4128;\n"
    "	sub.f32 	%f4130, %f4124, %f4129;\n"
    "	ld.global.f32 	%f4131, [%rd18+20];\n"
    "	mul.f32 	%f4132, %f70, %f71;\n"
    "	mad.f32 	%f104, %f4131, %f4132, %f4130;\n"
    "	mov.f32 	%f4133, %f2;\n"
    "	mov.f32 	%f4134, %f26;\n"
    "	mad.f32 	%f4135, %f4134, %f104, %f4133;\n"
    "	mov.f32 	%f2, %f4135;\n"
    "	mov.f32 	%f4136, %f4;\n"
    "	mov.f32 	%f4137, %f38;\n"
    "	mad.f32 	%f4138, %f4137, %f104, %f4136;\n"
    "	mov.f32 	%f4, %f4138;\n"
    "	mov.f32 	%f4139, %f6;\n"
    "	mov.f32 	%f4140, %f48;\n"
    "	mad.f32 	%f4141, %f4140, %f104, %f4139;\n"
    "	mov.f32 	%f6, %f4141;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_43778:\n"
    "	ld.shared.s32 	%r81, [%rd13+876];\n"
    "	add.s32 	%r27, %r81, %r6;\n"
    "	ld.shared.f32 	%f4142, [%rd14+864];\n"
    "	sub.f32 	%f4143, %f19, %f4142;\n"
    "	mov.f32 	%f4144, %f4143;\n"
    "	mul.f32 	%f4145, %f14, %f4144;\n"
    "	cvt.rni.f32.f32 	%f4146, %f4145;\n"
    "	mul.f32 	%f4147, %f13, %f4146;\n"
    "	sub.f32 	%f25, %f4143, %f4147;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f4148, 0f00000000;  	// 0\n"
    "	mad.f32 	%f4149, %f25, %f25, %f4148;\n"
    "	ld.shared.f32 	%f4150, [%rd14+868];\n"
    "	sub.f32 	%f4151, %f30, %f4150;\n"
    "	mov.f32 	%f4152, %f4151;\n"
    "	mov.f32 	%f4153, %f4152;\n"
    "	mul.f32 	%f4154, %f14, %f4152;\n"
    "	cvt.rni.f32.f32 	%f4155, %f4154;\n"
    "	mul.f32 	%f4156, %f13, %f4155;\n"
    "	sub.f32 	%f37, %f4151, %f4156;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f4157, %f37, %f37, %f4149;\n"
    "	ld.shared.f32 	%f4158, [%rd14+872];\n"
    "	sub.f32 	%f4159, %f41, %f4158;\n"
    "	mov.f32 	%f4160, %f4159;\n"
    "	mul.f32 	%f4161, %f4159, %f14;\n"
    "	cvt.rni.f32.f32 	%f4162, %f4161;\n"
    "	mul.f32 	%f4163, %f13, %f4162;\n"
    "	sub.f32 	%f47, %f4159, %f4163;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f4157;\n"
    "	mov.f32 	%f4164, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p164, %f49, %f4164;\n"
    "	@!%p164 bra 	$Lt_8_44290;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd178, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd179, %r27;\n"
    "	mul.wide.s32 	%rd180, %r27, 24;\n"
    "	add.u64 	%rd18, %rd178, %rd180;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f4165, [%rd18+4];\n"
    "	sub.f32 	%f4166, %f4165, %f51;\n"
    "	mul.f32 	%f55, %f52, %f4166;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f4167, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4168, %f55, %f4167;\n"
    "	cvt.rzi.f32.f32 	%f58, %f4168;\n"
    "	mov.f32 	%f4169, %f58;\n"
    "	mov.f32 	%f4170, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f4171, %f4170;\n"
    "	mov.f32 	%f4172, %f55;\n"
    "	mad.f32 %f4173, %f4169, %f4171, %f4172;\n"
    "	mov.f32 	%f64, %f4173;\n"
    "	mov.f32 	%f4174, %f58;\n"
    "	mov.f32 	%f4175, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f4176, %f4175;\n"
    "	mov.f32 	%f4177, %f64;\n"
    "	mad.f32 %f4178, %f4174, %f4176, %f4177;\n"
    "	mov.f32 	%f64, %f4178;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f4179, [%rd18+12];\n"
    "	mov.f32 	%f4180, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4181, %f4179, %f4180;\n"
    "	mul.f32 	%f4182, %f73, %f4181;\n"
    "	mov.f32 	%f4183, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f4184, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f4185, %f58;\n"
    "	mov.f32 	%f4186, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4187, %f64, %f4186;\n"
    "	ex2.approx.f32 	%f4188, %f4187;\n"
    "	mul.f32 	%f4189, %f4185, %f4188;\n"
    "	mov.f32 	%f4190, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p165, %f55, %f4190;\n"
    "	selp.f32 	%f4191, %f4184, %f4189, %p165;\n"
    "	mov.f32 	%f4192, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p166, %f55, %f4192;\n"
    "	selp.f32 	%f4193, %f4183, %f4191, %p166;\n"
    "	ld.global.f32 	%f4194, [%rd18+0];\n"
    "	mov.f32 	%f4195, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4196, %f4194, %f4195;\n"
    "	mul.f32 	%f4197, %f4193, %f4196;\n"
    "	mul.f32 	%f4198, %f52, %f4197;\n"
    "	mul.f32 	%f4199, %f70, %f4198;\n"
    "	sub.f32 	%f4200, %f4199, %f4182;\n"
    "	ld.global.f32 	%f4201, [%rd18+16];\n"
    "	mov.f32 	%f4202, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4203, %f4201, %f4202;\n"
    "	mul.f32 	%f4204, %f73, %f4203;\n"
    "	mul.f32 	%f4205, %f71, %f4204;\n"
    "	sub.f32 	%f4206, %f4200, %f4205;\n"
    "	ld.global.f32 	%f4207, [%rd18+20];\n"
    "	mul.f32 	%f4208, %f70, %f71;\n"
    "	mad.f32 	%f104, %f4207, %f4208, %f4206;\n"
    "	mov.f32 	%f4209, %f2;\n"
    "	mov.f32 	%f4210, %f26;\n"
    "	mad.f32 	%f4211, %f4210, %f104, %f4209;\n"
    "	mov.f32 	%f2, %f4211;\n"
    "	mov.f32 	%f4212, %f4;\n"
    "	mov.f32 	%f4213, %f38;\n"
    "	mad.f32 	%f4214, %f4213, %f104, %f4212;\n"
    "	mov.f32 	%f4, %f4214;\n"
    "	mov.f32 	%f4215, %f6;\n"
    "	mov.f32 	%f4216, %f48;\n"
    "	mad.f32 	%f4217, %f4216, %f104, %f4215;\n"
    "	mov.f32 	%f6, %f4217;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_44290:\n"
    "	ld.shared.s32 	%r82, [%rd13+892];\n"
    "	add.s32 	%r27, %r82, %r6;\n"
    "	ld.shared.f32 	%f4218, [%rd14+880];\n"
    "	sub.f32 	%f4219, %f19, %f4218;\n"
    "	mov.f32 	%f4220, %f4219;\n"
    "	mul.f32 	%f4221, %f14, %f4220;\n"
    "	cvt.rni.f32.f32 	%f4222, %f4221;\n"
    "	mul.f32 	%f4223, %f13, %f4222;\n"
    "	sub.f32 	%f25, %f4219, %f4223;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f4224, 0f00000000;  	// 0\n"
    "	mad.f32 	%f4225, %f25, %f25, %f4224;\n"
    "	ld.shared.f32 	%f4226, [%rd14+884];\n"
    "	sub.f32 	%f4227, %f30, %f4226;\n"
    "	mov.f32 	%f4228, %f4227;\n"
    "	mov.f32 	%f4229, %f4228;\n"
    "	mul.f32 	%f4230, %f14, %f4228;\n"
    "	cvt.rni.f32.f32 	%f4231, %f4230;\n"
    "	mul.f32 	%f4232, %f13, %f4231;\n"
    "	sub.f32 	%f37, %f4227, %f4232;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f4233, %f37, %f37, %f4225;\n"
    "	ld.shared.f32 	%f4234, [%rd14+888];\n"
    "	sub.f32 	%f4235, %f41, %f4234;\n"
    "	mov.f32 	%f4236, %f4235;\n"
    "	mul.f32 	%f4237, %f4235, %f14;\n"
    "	cvt.rni.f32.f32 	%f4238, %f4237;\n"
    "	mul.f32 	%f4239, %f13, %f4238;\n"
    "	sub.f32 	%f47, %f4235, %f4239;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f4233;\n"
    "	mov.f32 	%f4240, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p167, %f49, %f4240;\n"
    "	@!%p167 bra 	$Lt_8_44802;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd181, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd182, %r27;\n"
    "	mul.wide.s32 	%rd183, %r27, 24;\n"
    "	add.u64 	%rd18, %rd181, %rd183;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f4241, [%rd18+4];\n"
    "	sub.f32 	%f4242, %f4241, %f51;\n"
    "	mul.f32 	%f55, %f52, %f4242;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f4243, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4244, %f55, %f4243;\n"
    "	cvt.rzi.f32.f32 	%f58, %f4244;\n"
    "	mov.f32 	%f4245, %f58;\n"
    "	mov.f32 	%f4246, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f4247, %f4246;\n"
    "	mov.f32 	%f4248, %f55;\n"
    "	mad.f32 %f4249, %f4245, %f4247, %f4248;\n"
    "	mov.f32 	%f64, %f4249;\n"
    "	mov.f32 	%f4250, %f58;\n"
    "	mov.f32 	%f4251, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f4252, %f4251;\n"
    "	mov.f32 	%f4253, %f64;\n"
    "	mad.f32 %f4254, %f4250, %f4252, %f4253;\n"
    "	mov.f32 	%f64, %f4254;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f4255, [%rd18+12];\n"
    "	mov.f32 	%f4256, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4257, %f4255, %f4256;\n"
    "	mul.f32 	%f4258, %f73, %f4257;\n"
    "	mov.f32 	%f4259, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f4260, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f4261, %f58;\n"
    "	mov.f32 	%f4262, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4263, %f64, %f4262;\n"
    "	ex2.approx.f32 	%f4264, %f4263;\n"
    "	mul.f32 	%f4265, %f4261, %f4264;\n"
    "	mov.f32 	%f4266, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p168, %f55, %f4266;\n"
    "	selp.f32 	%f4267, %f4260, %f4265, %p168;\n"
    "	mov.f32 	%f4268, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p169, %f55, %f4268;\n"
    "	selp.f32 	%f4269, %f4259, %f4267, %p169;\n"
    "	ld.global.f32 	%f4270, [%rd18+0];\n"
    "	mov.f32 	%f4271, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4272, %f4270, %f4271;\n"
    "	mul.f32 	%f4273, %f4269, %f4272;\n"
    "	mul.f32 	%f4274, %f52, %f4273;\n"
    "	mul.f32 	%f4275, %f70, %f4274;\n"
    "	sub.f32 	%f4276, %f4275, %f4258;\n"
    "	ld.global.f32 	%f4277, [%rd18+16];\n"
    "	mov.f32 	%f4278, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4279, %f4277, %f4278;\n"
    "	mul.f32 	%f4280, %f73, %f4279;\n"
    "	mul.f32 	%f4281, %f71, %f4280;\n"
    "	sub.f32 	%f4282, %f4276, %f4281;\n"
    "	ld.global.f32 	%f4283, [%rd18+20];\n"
    "	mul.f32 	%f4284, %f70, %f71;\n"
    "	mad.f32 	%f104, %f4283, %f4284, %f4282;\n"
    "	mov.f32 	%f4285, %f2;\n"
    "	mov.f32 	%f4286, %f26;\n"
    "	mad.f32 	%f4287, %f4286, %f104, %f4285;\n"
    "	mov.f32 	%f2, %f4287;\n"
    "	mov.f32 	%f4288, %f4;\n"
    "	mov.f32 	%f4289, %f38;\n"
    "	mad.f32 	%f4290, %f4289, %f104, %f4288;\n"
    "	mov.f32 	%f4, %f4290;\n"
    "	mov.f32 	%f4291, %f6;\n"
    "	mov.f32 	%f4292, %f48;\n"
    "	mad.f32 	%f4293, %f4292, %f104, %f4291;\n"
    "	mov.f32 	%f6, %f4293;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_44802:\n"
    "	ld.shared.s32 	%r83, [%rd13+908];\n"
    "	add.s32 	%r27, %r83, %r6;\n"
    "	ld.shared.f32 	%f4294, [%rd14+896];\n"
    "	sub.f32 	%f4295, %f19, %f4294;\n"
    "	mov.f32 	%f4296, %f4295;\n"
    "	mul.f32 	%f4297, %f14, %f4296;\n"
    "	cvt.rni.f32.f32 	%f4298, %f4297;\n"
    "	mul.f32 	%f4299, %f13, %f4298;\n"
    "	sub.f32 	%f25, %f4295, %f4299;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f4300, 0f00000000;  	// 0\n"
    "	mad.f32 	%f4301, %f25, %f25, %f4300;\n"
    "	ld.shared.f32 	%f4302, [%rd14+900];\n"
    "	sub.f32 	%f4303, %f30, %f4302;\n"
    "	mov.f32 	%f4304, %f4303;\n"
    "	mov.f32 	%f4305, %f4304;\n"
    "	mul.f32 	%f4306, %f14, %f4304;\n"
    "	cvt.rni.f32.f32 	%f4307, %f4306;\n"
    "	mul.f32 	%f4308, %f13, %f4307;\n"
    "	sub.f32 	%f37, %f4303, %f4308;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f4309, %f37, %f37, %f4301;\n"
    "	ld.shared.f32 	%f4310, [%rd14+904];\n"
    "	sub.f32 	%f4311, %f41, %f4310;\n"
    "	mov.f32 	%f4312, %f4311;\n"
    "	mul.f32 	%f4313, %f4311, %f14;\n"
    "	cvt.rni.f32.f32 	%f4314, %f4313;\n"
    "	mul.f32 	%f4315, %f13, %f4314;\n"
    "	sub.f32 	%f47, %f4311, %f4315;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f4309;\n"
    "	mov.f32 	%f4316, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p170, %f49, %f4316;\n"
    "	@!%p170 bra 	$Lt_8_45314;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd184, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd185, %r27;\n"
    "	mul.wide.s32 	%rd186, %r27, 24;\n"
    "	add.u64 	%rd18, %rd184, %rd186;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f4317, [%rd18+4];\n"
    "	sub.f32 	%f4318, %f4317, %f51;\n"
    "	mul.f32 	%f55, %f52, %f4318;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f4319, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4320, %f55, %f4319;\n"
    "	cvt.rzi.f32.f32 	%f58, %f4320;\n"
    "	mov.f32 	%f4321, %f58;\n"
    "	mov.f32 	%f4322, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f4323, %f4322;\n"
    "	mov.f32 	%f4324, %f55;\n"
    "	mad.f32 %f4325, %f4321, %f4323, %f4324;\n"
    "	mov.f32 	%f64, %f4325;\n"
    "	mov.f32 	%f4326, %f58;\n"
    "	mov.f32 	%f4327, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f4328, %f4327;\n"
    "	mov.f32 	%f4329, %f64;\n"
    "	mad.f32 %f4330, %f4326, %f4328, %f4329;\n"
    "	mov.f32 	%f64, %f4330;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f4331, [%rd18+12];\n"
    "	mov.f32 	%f4332, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4333, %f4331, %f4332;\n"
    "	mul.f32 	%f4334, %f73, %f4333;\n"
    "	mov.f32 	%f4335, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f4336, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f4337, %f58;\n"
    "	mov.f32 	%f4338, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4339, %f64, %f4338;\n"
    "	ex2.approx.f32 	%f4340, %f4339;\n"
    "	mul.f32 	%f4341, %f4337, %f4340;\n"
    "	mov.f32 	%f4342, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p171, %f55, %f4342;\n"
    "	selp.f32 	%f4343, %f4336, %f4341, %p171;\n"
    "	mov.f32 	%f4344, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p172, %f55, %f4344;\n"
    "	selp.f32 	%f4345, %f4335, %f4343, %p172;\n"
    "	ld.global.f32 	%f4346, [%rd18+0];\n"
    "	mov.f32 	%f4347, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4348, %f4346, %f4347;\n"
    "	mul.f32 	%f4349, %f4345, %f4348;\n"
    "	mul.f32 	%f4350, %f52, %f4349;\n"
    "	mul.f32 	%f4351, %f70, %f4350;\n"
    "	sub.f32 	%f4352, %f4351, %f4334;\n"
    "	ld.global.f32 	%f4353, [%rd18+16];\n"
    "	mov.f32 	%f4354, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4355, %f4353, %f4354;\n"
    "	mul.f32 	%f4356, %f73, %f4355;\n"
    "	mul.f32 	%f4357, %f71, %f4356;\n"
    "	sub.f32 	%f4358, %f4352, %f4357;\n"
    "	ld.global.f32 	%f4359, [%rd18+20];\n"
    "	mul.f32 	%f4360, %f70, %f71;\n"
    "	mad.f32 	%f104, %f4359, %f4360, %f4358;\n"
    "	mov.f32 	%f4361, %f2;\n"
    "	mov.f32 	%f4362, %f26;\n"
    "	mad.f32 	%f4363, %f4362, %f104, %f4361;\n"
    "	mov.f32 	%f2, %f4363;\n"
    "	mov.f32 	%f4364, %f4;\n"
    "	mov.f32 	%f4365, %f38;\n"
    "	mad.f32 	%f4366, %f4365, %f104, %f4364;\n"
    "	mov.f32 	%f4, %f4366;\n"
    "	mov.f32 	%f4367, %f6;\n"
    "	mov.f32 	%f4368, %f48;\n"
    "	mad.f32 	%f4369, %f4368, %f104, %f4367;\n"
    "	mov.f32 	%f6, %f4369;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_45314:\n"
    "	ld.shared.s32 	%r84, [%rd13+924];\n"
    "	add.s32 	%r27, %r84, %r6;\n"
    "	ld.shared.f32 	%f4370, [%rd14+912];\n"
    "	sub.f32 	%f4371, %f19, %f4370;\n"
    "	mov.f32 	%f4372, %f4371;\n"
    "	mul.f32 	%f4373, %f14, %f4372;\n"
    "	cvt.rni.f32.f32 	%f4374, %f4373;\n"
    "	mul.f32 	%f4375, %f13, %f4374;\n"
    "	sub.f32 	%f25, %f4371, %f4375;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f4376, 0f00000000;  	// 0\n"
    "	mad.f32 	%f4377, %f25, %f25, %f4376;\n"
    "	ld.shared.f32 	%f4378, [%rd14+916];\n"
    "	sub.f32 	%f4379, %f30, %f4378;\n"
    "	mov.f32 	%f4380, %f4379;\n"
    "	mov.f32 	%f4381, %f4380;\n"
    "	mul.f32 	%f4382, %f14, %f4380;\n"
    "	cvt.rni.f32.f32 	%f4383, %f4382;\n"
    "	mul.f32 	%f4384, %f13, %f4383;\n"
    "	sub.f32 	%f37, %f4379, %f4384;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f4385, %f37, %f37, %f4377;\n"
    "	ld.shared.f32 	%f4386, [%rd14+920];\n"
    "	sub.f32 	%f4387, %f41, %f4386;\n"
    "	mov.f32 	%f4388, %f4387;\n"
    "	mul.f32 	%f4389, %f4387, %f14;\n"
    "	cvt.rni.f32.f32 	%f4390, %f4389;\n"
    "	mul.f32 	%f4391, %f13, %f4390;\n"
    "	sub.f32 	%f47, %f4387, %f4391;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f4385;\n"
    "	mov.f32 	%f4392, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p173, %f49, %f4392;\n"
    "	@!%p173 bra 	$Lt_8_45826;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd187, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd188, %r27;\n"
    "	mul.wide.s32 	%rd189, %r27, 24;\n"
    "	add.u64 	%rd18, %rd187, %rd189;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f4393, [%rd18+4];\n"
    "	sub.f32 	%f4394, %f4393, %f51;\n"
    "	mul.f32 	%f55, %f52, %f4394;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f4395, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4396, %f55, %f4395;\n"
    "	cvt.rzi.f32.f32 	%f58, %f4396;\n"
    "	mov.f32 	%f4397, %f58;\n"
    "	mov.f32 	%f4398, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f4399, %f4398;\n"
    "	mov.f32 	%f4400, %f55;\n"
    "	mad.f32 %f4401, %f4397, %f4399, %f4400;\n"
    "	mov.f32 	%f64, %f4401;\n"
    "	mov.f32 	%f4402, %f58;\n"
    "	mov.f32 	%f4403, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f4404, %f4403;\n"
    "	mov.f32 	%f4405, %f64;\n"
    "	mad.f32 %f4406, %f4402, %f4404, %f4405;\n"
    "	mov.f32 	%f64, %f4406;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f4407, [%rd18+12];\n"
    "	mov.f32 	%f4408, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4409, %f4407, %f4408;\n"
    "	mul.f32 	%f4410, %f73, %f4409;\n"
    "	mov.f32 	%f4411, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f4412, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f4413, %f58;\n"
    "	mov.f32 	%f4414, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4415, %f64, %f4414;\n"
    "	ex2.approx.f32 	%f4416, %f4415;\n"
    "	mul.f32 	%f4417, %f4413, %f4416;\n"
    "	mov.f32 	%f4418, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p174, %f55, %f4418;\n"
    "	selp.f32 	%f4419, %f4412, %f4417, %p174;\n"
    "	mov.f32 	%f4420, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p175, %f55, %f4420;\n"
    "	selp.f32 	%f4421, %f4411, %f4419, %p175;\n"
    "	ld.global.f32 	%f4422, [%rd18+0];\n"
    "	mov.f32 	%f4423, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4424, %f4422, %f4423;\n"
    "	mul.f32 	%f4425, %f4421, %f4424;\n"
    "	mul.f32 	%f4426, %f52, %f4425;\n"
    "	mul.f32 	%f4427, %f70, %f4426;\n"
    "	sub.f32 	%f4428, %f4427, %f4410;\n"
    "	ld.global.f32 	%f4429, [%rd18+16];\n"
    "	mov.f32 	%f4430, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4431, %f4429, %f4430;\n"
    "	mul.f32 	%f4432, %f73, %f4431;\n"
    "	mul.f32 	%f4433, %f71, %f4432;\n"
    "	sub.f32 	%f4434, %f4428, %f4433;\n"
    "	ld.global.f32 	%f4435, [%rd18+20];\n"
    "	mul.f32 	%f4436, %f70, %f71;\n"
    "	mad.f32 	%f104, %f4435, %f4436, %f4434;\n"
    "	mov.f32 	%f4437, %f2;\n"
    "	mov.f32 	%f4438, %f26;\n"
    "	mad.f32 	%f4439, %f4438, %f104, %f4437;\n"
    "	mov.f32 	%f2, %f4439;\n"
    "	mov.f32 	%f4440, %f4;\n"
    "	mov.f32 	%f4441, %f38;\n"
    "	mad.f32 	%f4442, %f4441, %f104, %f4440;\n"
    "	mov.f32 	%f4, %f4442;\n"
    "	mov.f32 	%f4443, %f6;\n"
    "	mov.f32 	%f4444, %f48;\n"
    "	mad.f32 	%f4445, %f4444, %f104, %f4443;\n"
    "	mov.f32 	%f6, %f4445;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_45826:\n"
    "	ld.shared.s32 	%r85, [%rd13+940];\n"
    "	add.s32 	%r27, %r85, %r6;\n"
    "	ld.shared.f32 	%f4446, [%rd14+928];\n"
    "	sub.f32 	%f4447, %f19, %f4446;\n"
    "	mov.f32 	%f4448, %f4447;\n"
    "	mul.f32 	%f4449, %f14, %f4448;\n"
    "	cvt.rni.f32.f32 	%f4450, %f4449;\n"
    "	mul.f32 	%f4451, %f13, %f4450;\n"
    "	sub.f32 	%f25, %f4447, %f4451;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f4452, 0f00000000;  	// 0\n"
    "	mad.f32 	%f4453, %f25, %f25, %f4452;\n"
    "	ld.shared.f32 	%f4454, [%rd14+932];\n"
    "	sub.f32 	%f4455, %f30, %f4454;\n"
    "	mov.f32 	%f4456, %f4455;\n"
    "	mov.f32 	%f4457, %f4456;\n"
    "	mul.f32 	%f4458, %f14, %f4456;\n"
    "	cvt.rni.f32.f32 	%f4459, %f4458;\n"
    "	mul.f32 	%f4460, %f13, %f4459;\n"
    "	sub.f32 	%f37, %f4455, %f4460;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f4461, %f37, %f37, %f4453;\n"
    "	ld.shared.f32 	%f4462, [%rd14+936];\n"
    "	sub.f32 	%f4463, %f41, %f4462;\n"
    "	mov.f32 	%f4464, %f4463;\n"
    "	mul.f32 	%f4465, %f4463, %f14;\n"
    "	cvt.rni.f32.f32 	%f4466, %f4465;\n"
    "	mul.f32 	%f4467, %f13, %f4466;\n"
    "	sub.f32 	%f47, %f4463, %f4467;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f4461;\n"
    "	mov.f32 	%f4468, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p176, %f49, %f4468;\n"
    "	@!%p176 bra 	$Lt_8_46338;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd190, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd191, %r27;\n"
    "	mul.wide.s32 	%rd192, %r27, 24;\n"
    "	add.u64 	%rd18, %rd190, %rd192;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f4469, [%rd18+4];\n"
    "	sub.f32 	%f4470, %f4469, %f51;\n"
    "	mul.f32 	%f55, %f52, %f4470;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f4471, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4472, %f55, %f4471;\n"
    "	cvt.rzi.f32.f32 	%f58, %f4472;\n"
    "	mov.f32 	%f4473, %f58;\n"
    "	mov.f32 	%f4474, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f4475, %f4474;\n"
    "	mov.f32 	%f4476, %f55;\n"
    "	mad.f32 %f4477, %f4473, %f4475, %f4476;\n"
    "	mov.f32 	%f64, %f4477;\n"
    "	mov.f32 	%f4478, %f58;\n"
    "	mov.f32 	%f4479, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f4480, %f4479;\n"
    "	mov.f32 	%f4481, %f64;\n"
    "	mad.f32 %f4482, %f4478, %f4480, %f4481;\n"
    "	mov.f32 	%f64, %f4482;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f4483, [%rd18+12];\n"
    "	mov.f32 	%f4484, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4485, %f4483, %f4484;\n"
    "	mul.f32 	%f4486, %f73, %f4485;\n"
    "	mov.f32 	%f4487, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f4488, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f4489, %f58;\n"
    "	mov.f32 	%f4490, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4491, %f64, %f4490;\n"
    "	ex2.approx.f32 	%f4492, %f4491;\n"
    "	mul.f32 	%f4493, %f4489, %f4492;\n"
    "	mov.f32 	%f4494, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p177, %f55, %f4494;\n"
    "	selp.f32 	%f4495, %f4488, %f4493, %p177;\n"
    "	mov.f32 	%f4496, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p178, %f55, %f4496;\n"
    "	selp.f32 	%f4497, %f4487, %f4495, %p178;\n"
    "	ld.global.f32 	%f4498, [%rd18+0];\n"
    "	mov.f32 	%f4499, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4500, %f4498, %f4499;\n"
    "	mul.f32 	%f4501, %f4497, %f4500;\n"
    "	mul.f32 	%f4502, %f52, %f4501;\n"
    "	mul.f32 	%f4503, %f70, %f4502;\n"
    "	sub.f32 	%f4504, %f4503, %f4486;\n"
    "	ld.global.f32 	%f4505, [%rd18+16];\n"
    "	mov.f32 	%f4506, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4507, %f4505, %f4506;\n"
    "	mul.f32 	%f4508, %f73, %f4507;\n"
    "	mul.f32 	%f4509, %f71, %f4508;\n"
    "	sub.f32 	%f4510, %f4504, %f4509;\n"
    "	ld.global.f32 	%f4511, [%rd18+20];\n"
    "	mul.f32 	%f4512, %f70, %f71;\n"
    "	mad.f32 	%f104, %f4511, %f4512, %f4510;\n"
    "	mov.f32 	%f4513, %f2;\n"
    "	mov.f32 	%f4514, %f26;\n"
    "	mad.f32 	%f4515, %f4514, %f104, %f4513;\n"
    "	mov.f32 	%f2, %f4515;\n"
    "	mov.f32 	%f4516, %f4;\n"
    "	mov.f32 	%f4517, %f38;\n"
    "	mad.f32 	%f4518, %f4517, %f104, %f4516;\n"
    "	mov.f32 	%f4, %f4518;\n"
    "	mov.f32 	%f4519, %f6;\n"
    "	mov.f32 	%f4520, %f48;\n"
    "	mad.f32 	%f4521, %f4520, %f104, %f4519;\n"
    "	mov.f32 	%f6, %f4521;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_46338:\n"
    "	ld.shared.s32 	%r86, [%rd13+956];\n"
    "	add.s32 	%r27, %r86, %r6;\n"
    "	ld.shared.f32 	%f4522, [%rd14+944];\n"
    "	sub.f32 	%f4523, %f19, %f4522;\n"
    "	mov.f32 	%f4524, %f4523;\n"
    "	mul.f32 	%f4525, %f14, %f4524;\n"
    "	cvt.rni.f32.f32 	%f4526, %f4525;\n"
    "	mul.f32 	%f4527, %f13, %f4526;\n"
    "	sub.f32 	%f25, %f4523, %f4527;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f4528, 0f00000000;  	// 0\n"
    "	mad.f32 	%f4529, %f25, %f25, %f4528;\n"
    "	ld.shared.f32 	%f4530, [%rd14+948];\n"
    "	sub.f32 	%f4531, %f30, %f4530;\n"
    "	mov.f32 	%f4532, %f4531;\n"
    "	mov.f32 	%f4533, %f4532;\n"
    "	mul.f32 	%f4534, %f14, %f4532;\n"
    "	cvt.rni.f32.f32 	%f4535, %f4534;\n"
    "	mul.f32 	%f4536, %f13, %f4535;\n"
    "	sub.f32 	%f37, %f4531, %f4536;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f4537, %f37, %f37, %f4529;\n"
    "	ld.shared.f32 	%f4538, [%rd14+952];\n"
    "	sub.f32 	%f4539, %f41, %f4538;\n"
    "	mov.f32 	%f4540, %f4539;\n"
    "	mul.f32 	%f4541, %f4539, %f14;\n"
    "	cvt.rni.f32.f32 	%f4542, %f4541;\n"
    "	mul.f32 	%f4543, %f13, %f4542;\n"
    "	sub.f32 	%f47, %f4539, %f4543;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f4537;\n"
    "	mov.f32 	%f4544, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p179, %f49, %f4544;\n"
    "	@!%p179 bra 	$Lt_8_46850;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd193, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd194, %r27;\n"
    "	mul.wide.s32 	%rd195, %r27, 24;\n"
    "	add.u64 	%rd18, %rd193, %rd195;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f4545, [%rd18+4];\n"
    "	sub.f32 	%f4546, %f4545, %f51;\n"
    "	mul.f32 	%f55, %f52, %f4546;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f4547, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4548, %f55, %f4547;\n"
    "	cvt.rzi.f32.f32 	%f58, %f4548;\n"
    "	mov.f32 	%f4549, %f58;\n"
    "	mov.f32 	%f4550, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f4551, %f4550;\n"
    "	mov.f32 	%f4552, %f55;\n"
    "	mad.f32 %f4553, %f4549, %f4551, %f4552;\n"
    "	mov.f32 	%f64, %f4553;\n"
    "	mov.f32 	%f4554, %f58;\n"
    "	mov.f32 	%f4555, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f4556, %f4555;\n"
    "	mov.f32 	%f4557, %f64;\n"
    "	mad.f32 %f4558, %f4554, %f4556, %f4557;\n"
    "	mov.f32 	%f64, %f4558;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f4559, [%rd18+12];\n"
    "	mov.f32 	%f4560, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4561, %f4559, %f4560;\n"
    "	mul.f32 	%f4562, %f73, %f4561;\n"
    "	mov.f32 	%f4563, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f4564, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f4565, %f58;\n"
    "	mov.f32 	%f4566, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4567, %f64, %f4566;\n"
    "	ex2.approx.f32 	%f4568, %f4567;\n"
    "	mul.f32 	%f4569, %f4565, %f4568;\n"
    "	mov.f32 	%f4570, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p180, %f55, %f4570;\n"
    "	selp.f32 	%f4571, %f4564, %f4569, %p180;\n"
    "	mov.f32 	%f4572, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p181, %f55, %f4572;\n"
    "	selp.f32 	%f4573, %f4563, %f4571, %p181;\n"
    "	ld.global.f32 	%f4574, [%rd18+0];\n"
    "	mov.f32 	%f4575, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4576, %f4574, %f4575;\n"
    "	mul.f32 	%f4577, %f4573, %f4576;\n"
    "	mul.f32 	%f4578, %f52, %f4577;\n"
    "	mul.f32 	%f4579, %f70, %f4578;\n"
    "	sub.f32 	%f4580, %f4579, %f4562;\n"
    "	ld.global.f32 	%f4581, [%rd18+16];\n"
    "	mov.f32 	%f4582, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4583, %f4581, %f4582;\n"
    "	mul.f32 	%f4584, %f73, %f4583;\n"
    "	mul.f32 	%f4585, %f71, %f4584;\n"
    "	sub.f32 	%f4586, %f4580, %f4585;\n"
    "	ld.global.f32 	%f4587, [%rd18+20];\n"
    "	mul.f32 	%f4588, %f70, %f71;\n"
    "	mad.f32 	%f104, %f4587, %f4588, %f4586;\n"
    "	mov.f32 	%f4589, %f2;\n"
    "	mov.f32 	%f4590, %f26;\n"
    "	mad.f32 	%f4591, %f4590, %f104, %f4589;\n"
    "	mov.f32 	%f2, %f4591;\n"
    "	mov.f32 	%f4592, %f4;\n"
    "	mov.f32 	%f4593, %f38;\n"
    "	mad.f32 	%f4594, %f4593, %f104, %f4592;\n"
    "	mov.f32 	%f4, %f4594;\n"
    "	mov.f32 	%f4595, %f6;\n"
    "	mov.f32 	%f4596, %f48;\n"
    "	mad.f32 	%f4597, %f4596, %f104, %f4595;\n"
    "	mov.f32 	%f6, %f4597;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_46850:\n"
    "	ld.shared.s32 	%r87, [%rd13+972];\n"
    "	add.s32 	%r27, %r87, %r6;\n"
    "	ld.shared.f32 	%f4598, [%rd14+960];\n"
    "	sub.f32 	%f4599, %f19, %f4598;\n"
    "	mov.f32 	%f4600, %f4599;\n"
    "	mul.f32 	%f4601, %f14, %f4600;\n"
    "	cvt.rni.f32.f32 	%f4602, %f4601;\n"
    "	mul.f32 	%f4603, %f13, %f4602;\n"
    "	sub.f32 	%f25, %f4599, %f4603;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f4604, 0f00000000;  	// 0\n"
    "	mad.f32 	%f4605, %f25, %f25, %f4604;\n"
    "	ld.shared.f32 	%f4606, [%rd14+964];\n"
    "	sub.f32 	%f4607, %f30, %f4606;\n"
    "	mov.f32 	%f4608, %f4607;\n"
    "	mov.f32 	%f4609, %f4608;\n"
    "	mul.f32 	%f4610, %f14, %f4608;\n"
    "	cvt.rni.f32.f32 	%f4611, %f4610;\n"
    "	mul.f32 	%f4612, %f13, %f4611;\n"
    "	sub.f32 	%f37, %f4607, %f4612;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f4613, %f37, %f37, %f4605;\n"
    "	ld.shared.f32 	%f4614, [%rd14+968];\n"
    "	sub.f32 	%f4615, %f41, %f4614;\n"
    "	mov.f32 	%f4616, %f4615;\n"
    "	mul.f32 	%f4617, %f4615, %f14;\n"
    "	cvt.rni.f32.f32 	%f4618, %f4617;\n"
    "	mul.f32 	%f4619, %f13, %f4618;\n"
    "	sub.f32 	%f47, %f4615, %f4619;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f4613;\n"
    "	mov.f32 	%f4620, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p182, %f49, %f4620;\n"
    "	@!%p182 bra 	$Lt_8_47362;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd196, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd197, %r27;\n"
    "	mul.wide.s32 	%rd198, %r27, 24;\n"
    "	add.u64 	%rd18, %rd196, %rd198;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f4621, [%rd18+4];\n"
    "	sub.f32 	%f4622, %f4621, %f51;\n"
    "	mul.f32 	%f55, %f52, %f4622;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f4623, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4624, %f55, %f4623;\n"
    "	cvt.rzi.f32.f32 	%f58, %f4624;\n"
    "	mov.f32 	%f4625, %f58;\n"
    "	mov.f32 	%f4626, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f4627, %f4626;\n"
    "	mov.f32 	%f4628, %f55;\n"
    "	mad.f32 %f4629, %f4625, %f4627, %f4628;\n"
    "	mov.f32 	%f64, %f4629;\n"
    "	mov.f32 	%f4630, %f58;\n"
    "	mov.f32 	%f4631, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f4632, %f4631;\n"
    "	mov.f32 	%f4633, %f64;\n"
    "	mad.f32 %f4634, %f4630, %f4632, %f4633;\n"
    "	mov.f32 	%f64, %f4634;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f4635, [%rd18+12];\n"
    "	mov.f32 	%f4636, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4637, %f4635, %f4636;\n"
    "	mul.f32 	%f4638, %f73, %f4637;\n"
    "	mov.f32 	%f4639, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f4640, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f4641, %f58;\n"
    "	mov.f32 	%f4642, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4643, %f64, %f4642;\n"
    "	ex2.approx.f32 	%f4644, %f4643;\n"
    "	mul.f32 	%f4645, %f4641, %f4644;\n"
    "	mov.f32 	%f4646, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p183, %f55, %f4646;\n"
    "	selp.f32 	%f4647, %f4640, %f4645, %p183;\n"
    "	mov.f32 	%f4648, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p184, %f55, %f4648;\n"
    "	selp.f32 	%f4649, %f4639, %f4647, %p184;\n"
    "	ld.global.f32 	%f4650, [%rd18+0];\n"
    "	mov.f32 	%f4651, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4652, %f4650, %f4651;\n"
    "	mul.f32 	%f4653, %f4649, %f4652;\n"
    "	mul.f32 	%f4654, %f52, %f4653;\n"
    "	mul.f32 	%f4655, %f70, %f4654;\n"
    "	sub.f32 	%f4656, %f4655, %f4638;\n"
    "	ld.global.f32 	%f4657, [%rd18+16];\n"
    "	mov.f32 	%f4658, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4659, %f4657, %f4658;\n"
    "	mul.f32 	%f4660, %f73, %f4659;\n"
    "	mul.f32 	%f4661, %f71, %f4660;\n"
    "	sub.f32 	%f4662, %f4656, %f4661;\n"
    "	ld.global.f32 	%f4663, [%rd18+20];\n"
    "	mul.f32 	%f4664, %f70, %f71;\n"
    "	mad.f32 	%f104, %f4663, %f4664, %f4662;\n"
    "	mov.f32 	%f4665, %f2;\n"
    "	mov.f32 	%f4666, %f26;\n"
    "	mad.f32 	%f4667, %f4666, %f104, %f4665;\n"
    "	mov.f32 	%f2, %f4667;\n"
    "	mov.f32 	%f4668, %f4;\n"
    "	mov.f32 	%f4669, %f38;\n"
    "	mad.f32 	%f4670, %f4669, %f104, %f4668;\n"
    "	mov.f32 	%f4, %f4670;\n"
    "	mov.f32 	%f4671, %f6;\n"
    "	mov.f32 	%f4672, %f48;\n"
    "	mad.f32 	%f4673, %f4672, %f104, %f4671;\n"
    "	mov.f32 	%f6, %f4673;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_47362:\n"
    "	ld.shared.s32 	%r88, [%rd13+988];\n"
    "	add.s32 	%r27, %r88, %r6;\n"
    "	ld.shared.f32 	%f4674, [%rd14+976];\n"
    "	sub.f32 	%f4675, %f19, %f4674;\n"
    "	mov.f32 	%f4676, %f4675;\n"
    "	mul.f32 	%f4677, %f14, %f4676;\n"
    "	cvt.rni.f32.f32 	%f4678, %f4677;\n"
    "	mul.f32 	%f4679, %f13, %f4678;\n"
    "	sub.f32 	%f25, %f4675, %f4679;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f4680, 0f00000000;  	// 0\n"
    "	mad.f32 	%f4681, %f25, %f25, %f4680;\n"
    "	ld.shared.f32 	%f4682, [%rd14+980];\n"
    "	sub.f32 	%f4683, %f30, %f4682;\n"
    "	mov.f32 	%f4684, %f4683;\n"
    "	mov.f32 	%f4685, %f4684;\n"
    "	mul.f32 	%f4686, %f14, %f4684;\n"
    "	cvt.rni.f32.f32 	%f4687, %f4686;\n"
    "	mul.f32 	%f4688, %f13, %f4687;\n"
    "	sub.f32 	%f37, %f4683, %f4688;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f4689, %f37, %f37, %f4681;\n"
    "	ld.shared.f32 	%f4690, [%rd14+984];\n"
    "	sub.f32 	%f4691, %f41, %f4690;\n"
    "	mov.f32 	%f4692, %f4691;\n"
    "	mul.f32 	%f4693, %f4691, %f14;\n"
    "	cvt.rni.f32.f32 	%f4694, %f4693;\n"
    "	mul.f32 	%f4695, %f13, %f4694;\n"
    "	sub.f32 	%f47, %f4691, %f4695;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f4689;\n"
    "	mov.f32 	%f4696, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p185, %f49, %f4696;\n"
    "	@!%p185 bra 	$Lt_8_47874;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd199, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd200, %r27;\n"
    "	mul.wide.s32 	%rd201, %r27, 24;\n"
    "	add.u64 	%rd18, %rd199, %rd201;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f4697, [%rd18+4];\n"
    "	sub.f32 	%f4698, %f4697, %f51;\n"
    "	mul.f32 	%f55, %f52, %f4698;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f4699, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4700, %f55, %f4699;\n"
    "	cvt.rzi.f32.f32 	%f58, %f4700;\n"
    "	mov.f32 	%f4701, %f58;\n"
    "	mov.f32 	%f4702, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f4703, %f4702;\n"
    "	mov.f32 	%f4704, %f55;\n"
    "	mad.f32 %f4705, %f4701, %f4703, %f4704;\n"
    "	mov.f32 	%f64, %f4705;\n"
    "	mov.f32 	%f4706, %f58;\n"
    "	mov.f32 	%f4707, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f4708, %f4707;\n"
    "	mov.f32 	%f4709, %f64;\n"
    "	mad.f32 %f4710, %f4706, %f4708, %f4709;\n"
    "	mov.f32 	%f64, %f4710;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f4711, [%rd18+12];\n"
    "	mov.f32 	%f4712, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4713, %f4711, %f4712;\n"
    "	mul.f32 	%f4714, %f73, %f4713;\n"
    "	mov.f32 	%f4715, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f4716, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f4717, %f58;\n"
    "	mov.f32 	%f4718, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4719, %f64, %f4718;\n"
    "	ex2.approx.f32 	%f4720, %f4719;\n"
    "	mul.f32 	%f4721, %f4717, %f4720;\n"
    "	mov.f32 	%f4722, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p186, %f55, %f4722;\n"
    "	selp.f32 	%f4723, %f4716, %f4721, %p186;\n"
    "	mov.f32 	%f4724, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p187, %f55, %f4724;\n"
    "	selp.f32 	%f4725, %f4715, %f4723, %p187;\n"
    "	ld.global.f32 	%f4726, [%rd18+0];\n"
    "	mov.f32 	%f4727, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4728, %f4726, %f4727;\n"
    "	mul.f32 	%f4729, %f4725, %f4728;\n"
    "	mul.f32 	%f4730, %f52, %f4729;\n"
    "	mul.f32 	%f4731, %f70, %f4730;\n"
    "	sub.f32 	%f4732, %f4731, %f4714;\n"
    "	ld.global.f32 	%f4733, [%rd18+16];\n"
    "	mov.f32 	%f4734, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4735, %f4733, %f4734;\n"
    "	mul.f32 	%f4736, %f73, %f4735;\n"
    "	mul.f32 	%f4737, %f71, %f4736;\n"
    "	sub.f32 	%f4738, %f4732, %f4737;\n"
    "	ld.global.f32 	%f4739, [%rd18+20];\n"
    "	mul.f32 	%f4740, %f70, %f71;\n"
    "	mad.f32 	%f104, %f4739, %f4740, %f4738;\n"
    "	mov.f32 	%f4741, %f2;\n"
    "	mov.f32 	%f4742, %f26;\n"
    "	mad.f32 	%f4743, %f4742, %f104, %f4741;\n"
    "	mov.f32 	%f2, %f4743;\n"
    "	mov.f32 	%f4744, %f4;\n"
    "	mov.f32 	%f4745, %f38;\n"
    "	mad.f32 	%f4746, %f4745, %f104, %f4744;\n"
    "	mov.f32 	%f4, %f4746;\n"
    "	mov.f32 	%f4747, %f6;\n"
    "	mov.f32 	%f4748, %f48;\n"
    "	mad.f32 	%f4749, %f4748, %f104, %f4747;\n"
    "	mov.f32 	%f6, %f4749;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_47874:\n"
    "	ld.shared.s32 	%r89, [%rd13+1004];\n"
    "	add.s32 	%r27, %r89, %r6;\n"
    "	ld.shared.f32 	%f4750, [%rd14+992];\n"
    "	sub.f32 	%f4751, %f19, %f4750;\n"
    "	mov.f32 	%f4752, %f4751;\n"
    "	mul.f32 	%f4753, %f14, %f4752;\n"
    "	cvt.rni.f32.f32 	%f4754, %f4753;\n"
    "	mul.f32 	%f4755, %f13, %f4754;\n"
    "	sub.f32 	%f25, %f4751, %f4755;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f4756, 0f00000000;  	// 0\n"
    "	mad.f32 	%f4757, %f25, %f25, %f4756;\n"
    "	ld.shared.f32 	%f4758, [%rd14+996];\n"
    "	sub.f32 	%f4759, %f30, %f4758;\n"
    "	mov.f32 	%f4760, %f4759;\n"
    "	mov.f32 	%f4761, %f4760;\n"
    "	mul.f32 	%f4762, %f14, %f4760;\n"
    "	cvt.rni.f32.f32 	%f4763, %f4762;\n"
    "	mul.f32 	%f4764, %f13, %f4763;\n"
    "	sub.f32 	%f37, %f4759, %f4764;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f4765, %f37, %f37, %f4757;\n"
    "	ld.shared.f32 	%f4766, [%rd14+1000];\n"
    "	sub.f32 	%f4767, %f41, %f4766;\n"
    "	mov.f32 	%f4768, %f4767;\n"
    "	mul.f32 	%f4769, %f4767, %f14;\n"
    "	cvt.rni.f32.f32 	%f4770, %f4769;\n"
    "	mul.f32 	%f4771, %f13, %f4770;\n"
    "	sub.f32 	%f47, %f4767, %f4771;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f4765;\n"
    "	mov.f32 	%f4772, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p188, %f49, %f4772;\n"
    "	@!%p188 bra 	$Lt_8_48386;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd202, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd203, %r27;\n"
    "	mul.wide.s32 	%rd204, %r27, 24;\n"
    "	add.u64 	%rd18, %rd202, %rd204;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f4773, [%rd18+4];\n"
    "	sub.f32 	%f4774, %f4773, %f51;\n"
    "	mul.f32 	%f55, %f52, %f4774;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f4775, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4776, %f55, %f4775;\n"
    "	cvt.rzi.f32.f32 	%f58, %f4776;\n"
    "	mov.f32 	%f4777, %f58;\n"
    "	mov.f32 	%f4778, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f4779, %f4778;\n"
    "	mov.f32 	%f4780, %f55;\n"
    "	mad.f32 %f4781, %f4777, %f4779, %f4780;\n"
    "	mov.f32 	%f64, %f4781;\n"
    "	mov.f32 	%f4782, %f58;\n"
    "	mov.f32 	%f4783, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f4784, %f4783;\n"
    "	mov.f32 	%f4785, %f64;\n"
    "	mad.f32 %f4786, %f4782, %f4784, %f4785;\n"
    "	mov.f32 	%f64, %f4786;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f4787, [%rd18+12];\n"
    "	mov.f32 	%f4788, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4789, %f4787, %f4788;\n"
    "	mul.f32 	%f4790, %f73, %f4789;\n"
    "	mov.f32 	%f4791, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f4792, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f4793, %f58;\n"
    "	mov.f32 	%f4794, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4795, %f64, %f4794;\n"
    "	ex2.approx.f32 	%f4796, %f4795;\n"
    "	mul.f32 	%f4797, %f4793, %f4796;\n"
    "	mov.f32 	%f4798, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p189, %f55, %f4798;\n"
    "	selp.f32 	%f4799, %f4792, %f4797, %p189;\n"
    "	mov.f32 	%f4800, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p190, %f55, %f4800;\n"
    "	selp.f32 	%f4801, %f4791, %f4799, %p190;\n"
    "	ld.global.f32 	%f4802, [%rd18+0];\n"
    "	mov.f32 	%f4803, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4804, %f4802, %f4803;\n"
    "	mul.f32 	%f4805, %f4801, %f4804;\n"
    "	mul.f32 	%f4806, %f52, %f4805;\n"
    "	mul.f32 	%f4807, %f70, %f4806;\n"
    "	sub.f32 	%f4808, %f4807, %f4790;\n"
    "	ld.global.f32 	%f4809, [%rd18+16];\n"
    "	mov.f32 	%f4810, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4811, %f4809, %f4810;\n"
    "	mul.f32 	%f4812, %f73, %f4811;\n"
    "	mul.f32 	%f4813, %f71, %f4812;\n"
    "	sub.f32 	%f4814, %f4808, %f4813;\n"
    "	ld.global.f32 	%f4815, [%rd18+20];\n"
    "	mul.f32 	%f4816, %f70, %f71;\n"
    "	mad.f32 	%f104, %f4815, %f4816, %f4814;\n"
    "	mov.f32 	%f4817, %f2;\n"
    "	mov.f32 	%f4818, %f26;\n"
    "	mad.f32 	%f4819, %f4818, %f104, %f4817;\n"
    "	mov.f32 	%f2, %f4819;\n"
    "	mov.f32 	%f4820, %f4;\n"
    "	mov.f32 	%f4821, %f38;\n"
    "	mad.f32 	%f4822, %f4821, %f104, %f4820;\n"
    "	mov.f32 	%f4, %f4822;\n"
    "	mov.f32 	%f4823, %f6;\n"
    "	mov.f32 	%f4824, %f48;\n"
    "	mad.f32 	%f4825, %f4824, %f104, %f4823;\n"
    "	mov.f32 	%f6, %f4825;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_48386:\n"
    "	ld.shared.s32 	%r90, [%rd13+1020];\n"
    "	add.s32 	%r27, %r90, %r6;\n"
    "	ld.shared.f32 	%f4826, [%rd14+1008];\n"
    "	sub.f32 	%f4827, %f19, %f4826;\n"
    "	mov.f32 	%f4828, %f4827;\n"
    "	mul.f32 	%f4829, %f14, %f4828;\n"
    "	cvt.rni.f32.f32 	%f4830, %f4829;\n"
    "	mul.f32 	%f4831, %f13, %f4830;\n"
    "	sub.f32 	%f25, %f4827, %f4831;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f4832, 0f00000000;  	// 0\n"
    "	mad.f32 	%f4833, %f25, %f25, %f4832;\n"
    "	ld.shared.f32 	%f4834, [%rd14+1012];\n"
    "	sub.f32 	%f4835, %f30, %f4834;\n"
    "	mov.f32 	%f4836, %f4835;\n"
    "	mov.f32 	%f4837, %f4836;\n"
    "	mul.f32 	%f4838, %f14, %f4836;\n"
    "	cvt.rni.f32.f32 	%f4839, %f4838;\n"
    "	mul.f32 	%f4840, %f13, %f4839;\n"
    "	sub.f32 	%f37, %f4835, %f4840;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f4841, %f37, %f37, %f4833;\n"
    "	ld.shared.f32 	%f4842, [%rd14+1016];\n"
    "	sub.f32 	%f4843, %f41, %f4842;\n"
    "	mov.f32 	%f4844, %f4843;\n"
    "	mul.f32 	%f4845, %f4843, %f14;\n"
    "	cvt.rni.f32.f32 	%f4846, %f4845;\n"
    "	mul.f32 	%f4847, %f13, %f4846;\n"
    "	sub.f32 	%f47, %f4843, %f4847;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f4841;\n"
    "	mov.f32 	%f4848, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p191, %f49, %f4848;\n"
    "	@!%p191 bra 	$Lt_8_48898;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	ld.param.u64 	%rd205, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd206, %r27;\n"
    "	mul.wide.s32 	%rd207, %r27, 24;\n"
    "	add.u64 	%rd18, %rd205, %rd207;\n"
    "	ld.global.f32 	%f52, [%rd18+8];\n"
    "	ld.global.f32 	%f4849, [%rd18+4];\n"
    "	sub.f32 	%f4850, %f4849, %f51;\n"
    "	mul.f32 	%f55, %f52, %f4850;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f4851, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4852, %f55, %f4851;\n"
    "	cvt.rzi.f32.f32 	%f58, %f4852;\n"
    "	mov.f32 	%f4853, %f58;\n"
    "	mov.f32 	%f4854, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f4855, %f4854;\n"
    "	mov.f32 	%f4856, %f55;\n"
    "	mad.f32 %f4857, %f4853, %f4855, %f4856;\n"
    "	mov.f32 	%f64, %f4857;\n"
    "	mov.f32 	%f4858, %f58;\n"
    "	mov.f32 	%f4859, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f4860, %f4859;\n"
    "	mov.f32 	%f4861, %f64;\n"
    "	mad.f32 %f4862, %f4858, %f4860, %f4861;\n"
    "	mov.f32 	%f64, %f4862;\n"
    "	.loc	3	1178	0\n"
    "	rcp.approx.f32 	%f70, %f51;\n"
    "	mul.f32 	%f71, %f70, %f70;\n"
    "	mul.f32 	%f72, %f71, %f71;\n"
    "	mul.f32 	%f73, %f72, %f72;\n"
    "	ld.global.f32 	%f4863, [%rd18+12];\n"
    "	mov.f32 	%f4864, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4865, %f4863, %f4864;\n"
    "	mul.f32 	%f4866, %f73, %f4865;\n"
    "	mov.f32 	%f4867, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f4868, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f4869, %f58;\n"
    "	mov.f32 	%f4870, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4871, %f64, %f4870;\n"
    "	ex2.approx.f32 	%f4872, %f4871;\n"
    "	mul.f32 	%f4873, %f4869, %f4872;\n"
    "	mov.f32 	%f4874, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p192, %f55, %f4874;\n"
    "	selp.f32 	%f4875, %f4868, %f4873, %p192;\n"
    "	mov.f32 	%f4876, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p193, %f55, %f4876;\n"
    "	selp.f32 	%f4877, %f4867, %f4875, %p193;\n"
    "	ld.global.f32 	%f4878, [%rd18+0];\n"
    "	mov.f32 	%f4879, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4880, %f4878, %f4879;\n"
    "	mul.f32 	%f4881, %f4877, %f4880;\n"
    "	mul.f32 	%f4882, %f52, %f4881;\n"
    "	mul.f32 	%f4883, %f70, %f4882;\n"
    "	sub.f32 	%f4884, %f4883, %f4866;\n"
    "	ld.global.f32 	%f4885, [%rd18+16];\n"
    "	mov.f32 	%f4886, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4887, %f4885, %f4886;\n"
    "	mul.f32 	%f4888, %f73, %f4887;\n"
    "	mul.f32 	%f4889, %f71, %f4888;\n"
    "	sub.f32 	%f4890, %f4884, %f4889;\n"
    "	ld.global.f32 	%f4891, [%rd18+20];\n"
    "	mul.f32 	%f4892, %f70, %f71;\n"
    "	mad.f32 	%f104, %f4891, %f4892, %f4890;\n"
    "	mov.f32 	%f4893, %f2;\n"
    "	mov.f32 	%f4894, %f26;\n"
    "	mad.f32 	%f4895, %f4894, %f104, %f4893;\n"
    "	mov.f32 	%f2, %f4895;\n"
    "	mov.f32 	%f4896, %f4;\n"
    "	mov.f32 	%f4897, %f38;\n"
    "	mad.f32 	%f4898, %f4897, %f104, %f4896;\n"
    "	mov.f32 	%f4, %f4898;\n"
    "	mov.f32 	%f4899, %f6;\n"
    "	mov.f32 	%f4900, %f48;\n"
    "	mad.f32 	%f4901, %f4900, %f104, %f4899;\n"
    "	mov.f32 	%f6, %f4901;\n"
    "$Lt_8_48898:\n"
    "	add.s32 	%r25, %r25, 64;\n"
    "	add.u64 	%rd12, %rd12, 1024;\n"
    "	mov.u32 	%r91, 256;\n"
    "	setp.ne.s32 	%p194, %r25, %r91;\n"
    "	@%p194 bra 	$Lt_8_16386;\n"
    "	add.s32 	%r21, %r21, 256;\n"
    "	setp.gt.s32 	%p195, %r13, %r21;\n"
    "	@%p195 bra 	$Lt_8_15618;\n"
    "$Lt_8_15106:\n"
    "	.loc	3	1180	0\n"
    "	mov.s32 	%r21, %r13;\n"
    "	setp.ge.s32 	%p196, %r13, %r7;\n"
    "	@%p196 bra 	$Lt_8_49922;\n"
    "	sub.s32 	%r92, %r7, %r13;\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_shared_xmax];\n"
    "	rcp.approx.f32 	%f14, %f13;\n"
    "	cvt.s64.s32 	%rd208, %r13;\n"
    "	mul.wide.s32 	%rd209, %r13, 16;\n"
    "	add.u64 	%rd210, %rd1, %rd209;\n"
    "	mov.s32 	%r93, %r92;\n"
    "$Lt_8_50434:\n"
    " //<loop> Loop body line 1180, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	1181	0\n"
    "	ld.global.s32 	%r94, [%rd210+12];\n"
    "	add.s32 	%r95, %r94, %r6;\n"
    "	ld.global.f32 	%f4902, [%rd210+0];\n"
    "	mov.f32 	%f4903, %f8;\n"
    "	sub.f32 	%f4904, %f4903, %f4902;\n"
    "	mov.f32 	%f4905, %f4904;\n"
    "	mul.f32 	%f4906, %f14, %f4905;\n"
    "	cvt.rni.f32.f32 	%f4907, %f4906;\n"
    "	.loc	3	1180	0\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_shared_xmax];\n"
    "	.loc	3	1181	0\n"
    "	mul.f32 	%f4908, %f13, %f4907;\n"
    "	sub.f32 	%f4909, %f4904, %f4908;\n"
    "	mov.f32 	%f4910, %f4909;\n"
    "	mov.f32 	%f4911, 0f00000000;  	// 0\n"
    "	mad.f32 	%f4912, %f4909, %f4909, %f4911;\n"
    "	ld.global.f32 	%f4913, [%rd210+4];\n"
    "	mov.f32 	%f4914, %f10;\n"
    "	sub.f32 	%f4915, %f4914, %f4913;\n"
    "	mov.f32 	%f4916, %f4915;\n"
    "	mov.f32 	%f4917, %f4916;\n"
    "	mul.f32 	%f4918, %f14, %f4916;\n"
    "	cvt.rni.f32.f32 	%f4919, %f4918;\n"
    "	mul.f32 	%f4920, %f13, %f4919;\n"
    "	sub.f32 	%f4921, %f4915, %f4920;\n"
    "	mov.f32 	%f4922, %f4921;\n"
    "	mad.f32 	%f4923, %f4921, %f4921, %f4912;\n"
    "	ld.global.f32 	%f4924, [%rd210+8];\n"
    "	mov.f32 	%f4925, %f12;\n"
    "	sub.f32 	%f4926, %f4925, %f4924;\n"
    "	mov.f32 	%f4927, %f4926;\n"
    "	mul.f32 	%f4928, %f4926, %f14;\n"
    "	cvt.rni.f32.f32 	%f4929, %f4928;\n"
    "	mul.f32 	%f4930, %f13, %f4929;\n"
    "	sub.f32 	%f4931, %f4926, %f4930;\n"
    "	mov.f32 	%f4932, %f4931;\n"
    "	mad.f32 	%f4933, %f4931, %f4931, %f4923;\n"
    "	mov.f32 	%f4934, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p197, %f4933, %f4934;\n"
    "	@!%p197 bra 	$Lt_8_50690;\n"
    "	sqrt.approx.f32 	%f4935, %f4933;\n"
    "	ld.param.u64 	%rd211, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd212, %r95;\n"
    "	mul.wide.s32 	%rd213, %r95, 24;\n"
    "	add.u64 	%rd214, %rd211, %rd213;\n"
    "	ld.global.f32 	%f4936, [%rd214+8];\n"
    "	ld.global.f32 	%f4937, [%rd214+4];\n"
    "	sub.f32 	%f4938, %f4937, %f4935;\n"
    "	mul.f32 	%f4939, %f4936, %f4938;\n"
    "	.loc	16	3138	0\n"
    "	mov.f32 	%f4940, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4941, %f4939, %f4940;\n"
    "	cvt.rzi.f32.f32 	%f4942, %f4941;\n"
    "	mov.f32 	%f4943, %f4942;\n"
    "	mov.f32 	%f4944, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f4945, %f4944;\n"
    "	mov.f32 	%f4946, %f4939;\n"
    "	mad.f32 %f4947, %f4943, %f4945, %f4946;\n"
    "	mov.f32 	%f64, %f4947;\n"
    "	mov.f32 	%f4948, %f4942;\n"
    "	mov.f32 	%f4949, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f4950, %f4949;\n"
    "	mov.f32 	%f4951, %f64;\n"
    "	mad.f32 %f4952, %f4948, %f4950, %f4951;\n"
    "	mov.f32 	%f64, %f4952;\n"
    "	.loc	3	1181	0\n"
    "	rcp.approx.f32 	%f4953, %f4935;\n"
    "	mul.f32 	%f4954, %f4953, %f4953;\n"
    "	mul.f32 	%f4955, %f4954, %f4954;\n"
    "	mul.f32 	%f4956, %f4955, %f4955;\n"
    "	ld.global.f32 	%f4957, [%rd214+12];\n"
    "	mov.f32 	%f4958, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4959, %f4957, %f4958;\n"
    "	mul.f32 	%f4960, %f4956, %f4959;\n"
    "	mov.f32 	%f4961, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f4962, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f4963, %f4942;\n"
    "	mov.f32 	%f4964, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4965, %f64, %f4964;\n"
    "	ex2.approx.f32 	%f4966, %f4965;\n"
    "	mul.f32 	%f4967, %f4963, %f4966;\n"
    "	mov.f32 	%f4968, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p198, %f4939, %f4968;\n"
    "	selp.f32 	%f4969, %f4962, %f4967, %p198;\n"
    "	mov.f32 	%f4970, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p199, %f4939, %f4970;\n"
    "	selp.f32 	%f4971, %f4961, %f4969, %p199;\n"
    "	ld.global.f32 	%f4972, [%rd214+0];\n"
    "	mov.f32 	%f4973, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4974, %f4972, %f4973;\n"
    "	mul.f32 	%f4975, %f4971, %f4974;\n"
    "	mul.f32 	%f4976, %f4936, %f4975;\n"
    "	mul.f32 	%f4977, %f4953, %f4976;\n"
    "	sub.f32 	%f4978, %f4977, %f4960;\n"
    "	ld.global.f32 	%f4979, [%rd214+16];\n"
    "	mov.f32 	%f4980, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4981, %f4979, %f4980;\n"
    "	mul.f32 	%f4982, %f4956, %f4981;\n"
    "	mul.f32 	%f4983, %f4954, %f4982;\n"
    "	sub.f32 	%f4984, %f4978, %f4983;\n"
    "	ld.global.f32 	%f4985, [%rd214+20];\n"
    "	mul.f32 	%f4986, %f4953, %f4954;\n"
    "	mad.f32 	%f4987, %f4985, %f4986, %f4984;\n"
    "	mov.f32 	%f4988, %f2;\n"
    "	mov.f32 	%f4989, %f4910;\n"
    "	mad.f32 	%f4990, %f4989, %f4987, %f4988;\n"
    "	mov.f32 	%f2, %f4990;\n"
    "	mov.f32 	%f4991, %f4;\n"
    "	mov.f32 	%f4992, %f4922;\n"
    "	mad.f32 	%f4993, %f4992, %f4987, %f4991;\n"
    "	mov.f32 	%f4, %f4993;\n"
    "	mov.f32 	%f4994, %f6;\n"
    "	mov.f32 	%f4995, %f4932;\n"
    "	mad.f32 	%f4996, %f4995, %f4987, %f4994;\n"
    "	mov.f32 	%f6, %f4996;\n"
    "$Lt_8_50690:\n"
    "	add.s32 	%r21, %r21, 1;\n"
    "	add.u64 	%rd210, %rd210, 16;\n"
    "	setp.ne.s32 	%p200, %r7, %r21;\n"
    "	@%p200 bra 	$Lt_8_50434;\n"
    "$Lt_8_49922:\n"
    "	.loc	3	1183	0\n"
    "	ld.param.u64 	%rd215, [__cudaparm_nacl_kernel_shared_fvec];\n"
    "	mul.lo.s32 	%r96, %r3, 3;\n"
    "	cvt.s64.s32 	%rd216, %r96;\n"
    "	mul.wide.s32 	%rd217, %r96, 4;\n"
    "	add.u64 	%rd218, %rd215, %rd217;\n"
    "	mov.f32 	%f4997, %f2;\n"
    "	st.global.f32 	[%rd218+0], %f4997;\n"
    "	mov.f32 	%f4998, %f4;\n"
    "	st.global.f32 	[%rd218+4], %f4998;\n"
    "	mov.f32 	%f4999, %f6;\n"
    "	st.global.f32 	[%rd218+8], %f4999;\n"
    "	.loc	3	1184	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel_shared:\n"
    "	} // nacl_kernel_shared\n"
    "\n"
    "	.entry nacl_kernel_constant (\n"
    "		.param .u64 __cudaparm_nacl_kernel_constant_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_constant_n,\n"
    "		.param .s32 __cudaparm_nacl_kernel_constant_nat,\n"
    "		.param .f32 __cudaparm_nacl_kernel_constant_xmax,\n"
    "		.param .u64 __cudaparm_nacl_kernel_constant_fvec)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<98>;\n"
    "	.reg .u64 %rd<156>;\n"
    "	.reg .f32 %f<3929>;\n"
    "	.reg .pred %p<202>;\n"
    "	.shared .align 4 .b8 __cuda___cuda_local_var_16766_35_non_const_s_xj42312[4096];\n"
    "	.loc	3	1319	0\n"
    "$LDWbegin_nacl_kernel_constant:\n"
    "	.loc	3	1329	0\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	mov.f32 	%f2, %f1;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	mov.f32 	%f4, %f3;\n"
    "	mov.f32 	%f5, 0f00000000;     	// 0\n"
    "	mov.f32 	%f6, %f5;\n"
    "	.loc	3	1330	0\n"
    "	cvt.s32.u16 	%r1, %tid.x;\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	mul.wide.u16 	%r2, %rh1, 256;\n"
    "	add.u32 	%r3, %r1, %r2;\n"
    "	ld.param.u64 	%rd1, [__cudaparm_nacl_kernel_constant_x];\n"
    "	cvt.s64.s32 	%rd2, %r3;\n"
    "	mul.wide.s32 	%rd3, %r3, 16;\n"
    "	add.u64 	%rd4, %rd1, %rd3;\n"
    "	ld.global.f32 	%f7, [%rd4+0];\n"
    "	mov.f32 	%f8, %f7;\n"
    "	ld.global.f32 	%f9, [%rd4+4];\n"
    "	mov.f32 	%f10, %f9;\n"
    "	ld.global.f32 	%f11, [%rd4+8];\n"
    "	mov.f32 	%f12, %f11;\n"
    "	.loc	3	1331	0\n"
    "	ld.global.s32 	%r4, [%rd4+12];\n"
    "	ld.param.s32 	%r5, [__cudaparm_nacl_kernel_constant_nat];\n"
    "	mul.lo.s32 	%r6, %r4, %r5;\n"
    "	ld.param.s32 	%r7, [__cudaparm_nacl_kernel_constant_n];\n"
    "	shr.s32 	%r8, %r7, 31;\n"
    "	mov.s32 	%r9, 255;\n"
    "	and.b32 	%r10, %r8, %r9;\n"
    "	add.s32 	%r11, %r10, %r7;\n"
    "	shr.s32 	%r12, %r11, 8;\n"
    "	mul.lo.s32 	%r13, %r12, 256;\n"
    "	mov.u32 	%r14, 0;\n"
    "	setp.le.s32 	%p1, %r13, %r14;\n"
    "	@%p1 bra 	$Lt_9_15106;\n"
    "	mov.u64 	%rd5, __cuda___cuda_local_var_16766_35_non_const_s_xj42312;\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_constant_xmax];\n"
    "	rcp.approx.f32 	%f14, %f13;\n"
    "	add.s32 	%r15, %r13, 255;\n"
    "	shr.s32 	%r16, %r15, 31;\n"
    "	mov.s32 	%r17, 255;\n"
    "	and.b32 	%r18, %r16, %r17;\n"
    "	add.s32 	%r19, %r18, %r15;\n"
    "	shr.s32 	%r20, %r19, 8;\n"
    "	cvt.s64.s32 	%rd6, %r1;\n"
    "	mul.wide.s32 	%rd7, %r1, 16;\n"
    "	add.u64 	%rd8, %rd5, %rd7;\n"
    "	mov.s32 	%r21, 0;\n"
    "	mov.u64 	%rd9, c_matrix;\n"
    "	mov.s32 	%r22, %r20;\n"
    "$Lt_9_15618:\n"
    " //<loop> Loop body line 1331, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	1336	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	1337	0\n"
    "	add.s32 	%r23, %r21, %r1;\n"
    "	cvt.s64.s32 	%rd10, %r23;\n"
    "	mul.wide.s32 	%rd11, %r23, 16;\n"
    "	add.u64 	%rd12, %rd1, %rd11;\n"
    "	ld.global.f32 	%f15, [%rd12+0];\n"
    "	st.shared.f32 	[%rd8+0], %f15;\n"
    "	ld.global.f32 	%f16, [%rd12+4];\n"
    "	st.shared.f32 	[%rd8+4], %f16;\n"
    "	ld.global.f32 	%f17, [%rd12+8];\n"
    "	st.shared.f32 	[%rd8+8], %f17;\n"
    "	ld.global.s32 	%r24, [%rd12+12];\n"
    "	st.shared.s32 	[%rd8+12], %r24;\n"
    "	.loc	3	1338	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	24	0\n"
    "	mov.s64 	%rd13, 0;\n"
    "	mov.s32 	%r25, 0;\n"
    "$Lt_9_16386:\n"
    " //<loop> Loop body line 24, nesting depth: 2, iterations: 4\n"
    "	.loc	3	1341	0\n"
    "	add.u64 	%rd14, %rd13, %rd5;\n"
    "	ld.shared.s32 	%r26, [%rd14+12];\n"
    "	add.s32 	%r27, %r26, %r6;\n"
    "	add.u64 	%rd15, %rd13, %rd5;\n"
    "	ld.shared.f32 	%f18, [%rd15+0];\n"
    "	mov.f32 	%f19, %f8;\n"
    "	sub.f32 	%f20, %f19, %f18;\n"
    "	mov.f32 	%f21, %f20;\n"
    "	mul.f32 	%f22, %f14, %f21;\n"
    "	cvt.rni.f32.f32 	%f23, %f22;\n"
    "	mul.f32 	%f24, %f13, %f23;\n"
    "	sub.f32 	%f25, %f20, %f24;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f27, 0f00000000;    	// 0\n"
    "	mad.f32 	%f28, %f25, %f25, %f27;\n"
    "	ld.shared.f32 	%f29, [%rd15+4];\n"
    "	mov.f32 	%f30, %f10;\n"
    "	sub.f32 	%f31, %f30, %f29;\n"
    "	mov.f32 	%f32, %f31;\n"
    "	mov.f32 	%f33, %f32;\n"
    "	mul.f32 	%f34, %f14, %f32;\n"
    "	cvt.rni.f32.f32 	%f35, %f34;\n"
    "	mul.f32 	%f36, %f13, %f35;\n"
    "	sub.f32 	%f37, %f31, %f36;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f39, %f37, %f37, %f28;\n"
    "	ld.shared.f32 	%f40, [%rd15+8];\n"
    "	mov.f32 	%f41, %f12;\n"
    "	sub.f32 	%f42, %f41, %f40;\n"
    "	mov.f32 	%f43, %f42;\n"
    "	mul.f32 	%f44, %f42, %f14;\n"
    "	cvt.rni.f32.f32 	%f45, %f44;\n"
    "	mul.f32 	%f46, %f13, %f45;\n"
    "	sub.f32 	%f47, %f42, %f46;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f39;\n"
    "	mov.f32 	%f50, 0f00000000;    	// 0\n"
    "	setp.neu.f32 	%p2, %f49, %f50;\n"
    "	@!%p2 bra 	$Lt_9_16642;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd16, %r27;\n"
    "	mul.wide.s32 	%rd17, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd17;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f56, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f57, %f55, %f56;\n"
    "	cvt.rzi.f32.f32 	%f58, %f57;\n"
    "	mov.f32 	%f59, %f58;\n"
    "	mov.f32 	%f60, 0fbf317200;    	// -0.693146\n"
    "	mov.f32 	%f61, %f60;\n"
    "	mov.f32 	%f62, %f55;\n"
    "	mad.f32 %f63, %f59, %f61, %f62;\n"
    "	mov.f32 	%f64, %f63;\n"
    "	mov.f32 	%f65, %f58;\n"
    "	mov.f32 	%f66, 0fb5bfbe8e;    	// -1.42861e-06\n"
    "	mov.f32 	%f67, %f66;\n"
    "	mov.f32 	%f68, %f64;\n"
    "	mad.f32 %f69, %f65, %f67, %f68;\n"
    "	mov.f32 	%f64, %f69;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f70, 0f00000000;    	// 0\n"
    "	ex2.approx.f32 	%f71, %f58;\n"
    "	mov.f32 	%f72, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f73, %f64, %f72;\n"
    "	ex2.approx.f32 	%f74, %f73;\n"
    "	mul.f32 	%f75, %f71, %f74;\n"
    "	mov.f32 	%f76, 0fc2d20000;    	// -105\n"
    "	setp.lt.f32 	%p3, %f55, %f76;\n"
    "	selp.f32 	%f77, %f70, %f75, %p3;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f78, 0f7f800000;    	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f79, 0f42d20000;    	// 105\n"
    "	setp.gt.f32 	%p4, %f55, %f79;\n"
    "	selp.f32 	%f80, %f78, %f77, %p4;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f89, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f90, %f83, %f89;\n"
    "	mov.f32 	%f91, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f91;\n"
    "	mov.f32 	%f93, 0f41000000;    	// 8\n"
    "	mul.f32 	%f94, %f85, %f93;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f100, %f81, %f99;\n"
    "	sub.f32 	%f101, %f100, %f97;\n"
    "	mul.f32 	%f102, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f102;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f105, %f2;\n"
    "	mov.f32 	%f106, %f26;\n"
    "	mad.f32 	%f107, %f106, %f104, %f105;\n"
    "	mov.f32 	%f2, %f107;\n"
    "	mov.f32 	%f108, %f4;\n"
    "	mov.f32 	%f109, %f38;\n"
    "	mad.f32 	%f110, %f109, %f104, %f108;\n"
    "	mov.f32 	%f4, %f110;\n"
    "	mov.f32 	%f111, %f6;\n"
    "	mov.f32 	%f112, %f48;\n"
    "	mad.f32 	%f113, %f112, %f104, %f111;\n"
    "	mov.f32 	%f6, %f113;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_16642:\n"
    "	ld.shared.s32 	%r28, [%rd14+28];\n"
    "	add.s32 	%r27, %r28, %r6;\n"
    "	ld.shared.f32 	%f114, [%rd15+16];\n"
    "	sub.f32 	%f115, %f19, %f114;\n"
    "	mov.f32 	%f116, %f115;\n"
    "	mul.f32 	%f117, %f14, %f116;\n"
    "	cvt.rni.f32.f32 	%f118, %f117;\n"
    "	mul.f32 	%f119, %f13, %f118;\n"
    "	sub.f32 	%f25, %f115, %f119;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f120, 0f00000000;   	// 0\n"
    "	mad.f32 	%f121, %f25, %f25, %f120;\n"
    "	ld.shared.f32 	%f122, [%rd15+20];\n"
    "	sub.f32 	%f123, %f30, %f122;\n"
    "	mov.f32 	%f124, %f123;\n"
    "	mov.f32 	%f125, %f124;\n"
    "	mul.f32 	%f126, %f14, %f124;\n"
    "	cvt.rni.f32.f32 	%f127, %f126;\n"
    "	mul.f32 	%f128, %f13, %f127;\n"
    "	sub.f32 	%f37, %f123, %f128;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f129, %f37, %f37, %f121;\n"
    "	ld.shared.f32 	%f130, [%rd15+24];\n"
    "	sub.f32 	%f131, %f41, %f130;\n"
    "	mov.f32 	%f132, %f131;\n"
    "	mul.f32 	%f133, %f131, %f14;\n"
    "	cvt.rni.f32.f32 	%f134, %f133;\n"
    "	mul.f32 	%f135, %f13, %f134;\n"
    "	sub.f32 	%f47, %f131, %f135;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f129;\n"
    "	mov.f32 	%f136, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p5, %f49, %f136;\n"
    "	@!%p5 bra 	$Lt_9_17154;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd19, %r27;\n"
    "	mul.wide.s32 	%rd20, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd20;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f137, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f138, %f55, %f137;\n"
    "	cvt.rzi.f32.f32 	%f58, %f138;\n"
    "	mov.f32 	%f139, %f58;\n"
    "	mov.f32 	%f140, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f141, %f140;\n"
    "	mov.f32 	%f142, %f55;\n"
    "	mad.f32 %f143, %f139, %f141, %f142;\n"
    "	mov.f32 	%f64, %f143;\n"
    "	mov.f32 	%f144, %f58;\n"
    "	mov.f32 	%f145, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f146, %f145;\n"
    "	mov.f32 	%f147, %f64;\n"
    "	mad.f32 %f148, %f144, %f146, %f147;\n"
    "	mov.f32 	%f64, %f148;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f149, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f150, %f58;\n"
    "	mov.f32 	%f151, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f152, %f64, %f151;\n"
    "	ex2.approx.f32 	%f153, %f152;\n"
    "	mul.f32 	%f154, %f150, %f153;\n"
    "	mov.f32 	%f155, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p6, %f55, %f155;\n"
    "	selp.f32 	%f156, %f149, %f154, %p6;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f157, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f158, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p7, %f55, %f158;\n"
    "	selp.f32 	%f80, %f157, %f156, %p7;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f159, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f90, %f83, %f159;\n"
    "	mov.f32 	%f160, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f160;\n"
    "	mov.f32 	%f161, 0f41000000;   	// 8\n"
    "	mul.f32 	%f94, %f85, %f161;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f162, %f81, %f99;\n"
    "	sub.f32 	%f101, %f162, %f97;\n"
    "	mul.f32 	%f163, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f163;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f164, %f2;\n"
    "	mov.f32 	%f165, %f26;\n"
    "	mad.f32 	%f166, %f165, %f104, %f164;\n"
    "	mov.f32 	%f2, %f166;\n"
    "	mov.f32 	%f167, %f4;\n"
    "	mov.f32 	%f168, %f38;\n"
    "	mad.f32 	%f169, %f168, %f104, %f167;\n"
    "	mov.f32 	%f4, %f169;\n"
    "	mov.f32 	%f170, %f6;\n"
    "	mov.f32 	%f171, %f48;\n"
    "	mad.f32 	%f172, %f171, %f104, %f170;\n"
    "	mov.f32 	%f6, %f172;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_17154:\n"
    "	ld.shared.s32 	%r29, [%rd14+44];\n"
    "	add.s32 	%r27, %r29, %r6;\n"
    "	ld.shared.f32 	%f173, [%rd15+32];\n"
    "	sub.f32 	%f174, %f19, %f173;\n"
    "	mov.f32 	%f175, %f174;\n"
    "	mul.f32 	%f176, %f14, %f175;\n"
    "	cvt.rni.f32.f32 	%f177, %f176;\n"
    "	mul.f32 	%f178, %f13, %f177;\n"
    "	sub.f32 	%f25, %f174, %f178;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f179, 0f00000000;   	// 0\n"
    "	mad.f32 	%f180, %f25, %f25, %f179;\n"
    "	ld.shared.f32 	%f181, [%rd15+36];\n"
    "	sub.f32 	%f182, %f30, %f181;\n"
    "	mov.f32 	%f183, %f182;\n"
    "	mov.f32 	%f184, %f183;\n"
    "	mul.f32 	%f185, %f14, %f183;\n"
    "	cvt.rni.f32.f32 	%f186, %f185;\n"
    "	mul.f32 	%f187, %f13, %f186;\n"
    "	sub.f32 	%f37, %f182, %f187;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f188, %f37, %f37, %f180;\n"
    "	ld.shared.f32 	%f189, [%rd15+40];\n"
    "	sub.f32 	%f190, %f41, %f189;\n"
    "	mov.f32 	%f191, %f190;\n"
    "	mul.f32 	%f192, %f190, %f14;\n"
    "	cvt.rni.f32.f32 	%f193, %f192;\n"
    "	mul.f32 	%f194, %f13, %f193;\n"
    "	sub.f32 	%f47, %f190, %f194;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f188;\n"
    "	mov.f32 	%f195, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p8, %f49, %f195;\n"
    "	@!%p8 bra 	$Lt_9_17666;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd21, %r27;\n"
    "	mul.wide.s32 	%rd22, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd22;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f196, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f197, %f55, %f196;\n"
    "	cvt.rzi.f32.f32 	%f58, %f197;\n"
    "	mov.f32 	%f198, %f58;\n"
    "	mov.f32 	%f199, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f200, %f199;\n"
    "	mov.f32 	%f201, %f55;\n"
    "	mad.f32 %f202, %f198, %f200, %f201;\n"
    "	mov.f32 	%f64, %f202;\n"
    "	mov.f32 	%f203, %f58;\n"
    "	mov.f32 	%f204, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f205, %f204;\n"
    "	mov.f32 	%f206, %f64;\n"
    "	mad.f32 %f207, %f203, %f205, %f206;\n"
    "	mov.f32 	%f64, %f207;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f208, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f209, %f58;\n"
    "	mov.f32 	%f210, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f211, %f64, %f210;\n"
    "	ex2.approx.f32 	%f212, %f211;\n"
    "	mul.f32 	%f213, %f209, %f212;\n"
    "	mov.f32 	%f214, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p9, %f55, %f214;\n"
    "	selp.f32 	%f215, %f208, %f213, %p9;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f216, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f217, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p10, %f55, %f217;\n"
    "	selp.f32 	%f80, %f216, %f215, %p10;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f218, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f90, %f83, %f218;\n"
    "	mov.f32 	%f219, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f219;\n"
    "	mov.f32 	%f220, 0f41000000;   	// 8\n"
    "	mul.f32 	%f94, %f85, %f220;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f221, %f81, %f99;\n"
    "	sub.f32 	%f101, %f221, %f97;\n"
    "	mul.f32 	%f222, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f222;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f223, %f2;\n"
    "	mov.f32 	%f224, %f26;\n"
    "	mad.f32 	%f225, %f224, %f104, %f223;\n"
    "	mov.f32 	%f2, %f225;\n"
    "	mov.f32 	%f226, %f4;\n"
    "	mov.f32 	%f227, %f38;\n"
    "	mad.f32 	%f228, %f227, %f104, %f226;\n"
    "	mov.f32 	%f4, %f228;\n"
    "	mov.f32 	%f229, %f6;\n"
    "	mov.f32 	%f230, %f48;\n"
    "	mad.f32 	%f231, %f230, %f104, %f229;\n"
    "	mov.f32 	%f6, %f231;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_17666:\n"
    "	ld.shared.s32 	%r30, [%rd14+60];\n"
    "	add.s32 	%r27, %r30, %r6;\n"
    "	ld.shared.f32 	%f232, [%rd15+48];\n"
    "	sub.f32 	%f233, %f19, %f232;\n"
    "	mov.f32 	%f234, %f233;\n"
    "	mul.f32 	%f235, %f14, %f234;\n"
    "	cvt.rni.f32.f32 	%f236, %f235;\n"
    "	mul.f32 	%f237, %f13, %f236;\n"
    "	sub.f32 	%f25, %f233, %f237;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f238, 0f00000000;   	// 0\n"
    "	mad.f32 	%f239, %f25, %f25, %f238;\n"
    "	ld.shared.f32 	%f240, [%rd15+52];\n"
    "	sub.f32 	%f241, %f30, %f240;\n"
    "	mov.f32 	%f242, %f241;\n"
    "	mov.f32 	%f243, %f242;\n"
    "	mul.f32 	%f244, %f14, %f242;\n"
    "	cvt.rni.f32.f32 	%f245, %f244;\n"
    "	mul.f32 	%f246, %f13, %f245;\n"
    "	sub.f32 	%f37, %f241, %f246;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f247, %f37, %f37, %f239;\n"
    "	ld.shared.f32 	%f248, [%rd15+56];\n"
    "	sub.f32 	%f249, %f41, %f248;\n"
    "	mov.f32 	%f250, %f249;\n"
    "	mul.f32 	%f251, %f249, %f14;\n"
    "	cvt.rni.f32.f32 	%f252, %f251;\n"
    "	mul.f32 	%f253, %f13, %f252;\n"
    "	sub.f32 	%f47, %f249, %f253;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f247;\n"
    "	mov.f32 	%f254, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p11, %f49, %f254;\n"
    "	@!%p11 bra 	$Lt_9_18178;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd23, %r27;\n"
    "	mul.wide.s32 	%rd24, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd24;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f255, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f256, %f55, %f255;\n"
    "	cvt.rzi.f32.f32 	%f58, %f256;\n"
    "	mov.f32 	%f257, %f58;\n"
    "	mov.f32 	%f258, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f259, %f258;\n"
    "	mov.f32 	%f260, %f55;\n"
    "	mad.f32 %f261, %f257, %f259, %f260;\n"
    "	mov.f32 	%f64, %f261;\n"
    "	mov.f32 	%f262, %f58;\n"
    "	mov.f32 	%f263, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f264, %f263;\n"
    "	mov.f32 	%f265, %f64;\n"
    "	mad.f32 %f266, %f262, %f264, %f265;\n"
    "	mov.f32 	%f64, %f266;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f267, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f268, %f58;\n"
    "	mov.f32 	%f269, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f270, %f64, %f269;\n"
    "	ex2.approx.f32 	%f271, %f270;\n"
    "	mul.f32 	%f272, %f268, %f271;\n"
    "	mov.f32 	%f273, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p12, %f55, %f273;\n"
    "	selp.f32 	%f274, %f267, %f272, %p12;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f275, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f276, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p13, %f55, %f276;\n"
    "	selp.f32 	%f80, %f275, %f274, %p13;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f277, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f90, %f83, %f277;\n"
    "	mov.f32 	%f278, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f278;\n"
    "	mov.f32 	%f279, 0f41000000;   	// 8\n"
    "	mul.f32 	%f94, %f85, %f279;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f280, %f81, %f99;\n"
    "	sub.f32 	%f101, %f280, %f97;\n"
    "	mul.f32 	%f281, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f281;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f282, %f2;\n"
    "	mov.f32 	%f283, %f26;\n"
    "	mad.f32 	%f284, %f283, %f104, %f282;\n"
    "	mov.f32 	%f2, %f284;\n"
    "	mov.f32 	%f285, %f4;\n"
    "	mov.f32 	%f286, %f38;\n"
    "	mad.f32 	%f287, %f286, %f104, %f285;\n"
    "	mov.f32 	%f4, %f287;\n"
    "	mov.f32 	%f288, %f6;\n"
    "	mov.f32 	%f289, %f48;\n"
    "	mad.f32 	%f290, %f289, %f104, %f288;\n"
    "	mov.f32 	%f6, %f290;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_18178:\n"
    "	ld.shared.s32 	%r31, [%rd14+76];\n"
    "	add.s32 	%r27, %r31, %r6;\n"
    "	ld.shared.f32 	%f291, [%rd15+64];\n"
    "	sub.f32 	%f292, %f19, %f291;\n"
    "	mov.f32 	%f293, %f292;\n"
    "	mul.f32 	%f294, %f14, %f293;\n"
    "	cvt.rni.f32.f32 	%f295, %f294;\n"
    "	mul.f32 	%f296, %f13, %f295;\n"
    "	sub.f32 	%f25, %f292, %f296;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f297, 0f00000000;   	// 0\n"
    "	mad.f32 	%f298, %f25, %f25, %f297;\n"
    "	ld.shared.f32 	%f299, [%rd15+68];\n"
    "	sub.f32 	%f300, %f30, %f299;\n"
    "	mov.f32 	%f301, %f300;\n"
    "	mov.f32 	%f302, %f301;\n"
    "	mul.f32 	%f303, %f14, %f301;\n"
    "	cvt.rni.f32.f32 	%f304, %f303;\n"
    "	mul.f32 	%f305, %f13, %f304;\n"
    "	sub.f32 	%f37, %f300, %f305;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f306, %f37, %f37, %f298;\n"
    "	ld.shared.f32 	%f307, [%rd15+72];\n"
    "	sub.f32 	%f308, %f41, %f307;\n"
    "	mov.f32 	%f309, %f308;\n"
    "	mul.f32 	%f310, %f308, %f14;\n"
    "	cvt.rni.f32.f32 	%f311, %f310;\n"
    "	mul.f32 	%f312, %f13, %f311;\n"
    "	sub.f32 	%f47, %f308, %f312;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f306;\n"
    "	mov.f32 	%f313, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p14, %f49, %f313;\n"
    "	@!%p14 bra 	$Lt_9_18690;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd25, %r27;\n"
    "	mul.wide.s32 	%rd26, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd26;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f314, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f315, %f55, %f314;\n"
    "	cvt.rzi.f32.f32 	%f58, %f315;\n"
    "	mov.f32 	%f316, %f58;\n"
    "	mov.f32 	%f317, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f318, %f317;\n"
    "	mov.f32 	%f319, %f55;\n"
    "	mad.f32 %f320, %f316, %f318, %f319;\n"
    "	mov.f32 	%f64, %f320;\n"
    "	mov.f32 	%f321, %f58;\n"
    "	mov.f32 	%f322, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f323, %f322;\n"
    "	mov.f32 	%f324, %f64;\n"
    "	mad.f32 %f325, %f321, %f323, %f324;\n"
    "	mov.f32 	%f64, %f325;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f326, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f327, %f58;\n"
    "	mov.f32 	%f328, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f329, %f64, %f328;\n"
    "	ex2.approx.f32 	%f330, %f329;\n"
    "	mul.f32 	%f331, %f327, %f330;\n"
    "	mov.f32 	%f332, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p15, %f55, %f332;\n"
    "	selp.f32 	%f333, %f326, %f331, %p15;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f334, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f335, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p16, %f55, %f335;\n"
    "	selp.f32 	%f80, %f334, %f333, %p16;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f336, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f90, %f83, %f336;\n"
    "	mov.f32 	%f337, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f337;\n"
    "	mov.f32 	%f338, 0f41000000;   	// 8\n"
    "	mul.f32 	%f94, %f85, %f338;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f339, %f81, %f99;\n"
    "	sub.f32 	%f101, %f339, %f97;\n"
    "	mul.f32 	%f340, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f340;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f341, %f2;\n"
    "	mov.f32 	%f342, %f26;\n"
    "	mad.f32 	%f343, %f342, %f104, %f341;\n"
    "	mov.f32 	%f2, %f343;\n"
    "	mov.f32 	%f344, %f4;\n"
    "	mov.f32 	%f345, %f38;\n"
    "	mad.f32 	%f346, %f345, %f104, %f344;\n"
    "	mov.f32 	%f4, %f346;\n"
    "	mov.f32 	%f347, %f6;\n"
    "	mov.f32 	%f348, %f48;\n"
    "	mad.f32 	%f349, %f348, %f104, %f347;\n"
    "	mov.f32 	%f6, %f349;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_18690:\n"
    "	ld.shared.s32 	%r32, [%rd14+92];\n"
    "	add.s32 	%r27, %r32, %r6;\n"
    "	ld.shared.f32 	%f350, [%rd15+80];\n"
    "	sub.f32 	%f351, %f19, %f350;\n"
    "	mov.f32 	%f352, %f351;\n"
    "	mul.f32 	%f353, %f14, %f352;\n"
    "	cvt.rni.f32.f32 	%f354, %f353;\n"
    "	mul.f32 	%f355, %f13, %f354;\n"
    "	sub.f32 	%f25, %f351, %f355;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f356, 0f00000000;   	// 0\n"
    "	mad.f32 	%f357, %f25, %f25, %f356;\n"
    "	ld.shared.f32 	%f358, [%rd15+84];\n"
    "	sub.f32 	%f359, %f30, %f358;\n"
    "	mov.f32 	%f360, %f359;\n"
    "	mov.f32 	%f361, %f360;\n"
    "	mul.f32 	%f362, %f14, %f360;\n"
    "	cvt.rni.f32.f32 	%f363, %f362;\n"
    "	mul.f32 	%f364, %f13, %f363;\n"
    "	sub.f32 	%f37, %f359, %f364;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f365, %f37, %f37, %f357;\n"
    "	ld.shared.f32 	%f366, [%rd15+88];\n"
    "	sub.f32 	%f367, %f41, %f366;\n"
    "	mov.f32 	%f368, %f367;\n"
    "	mul.f32 	%f369, %f367, %f14;\n"
    "	cvt.rni.f32.f32 	%f370, %f369;\n"
    "	mul.f32 	%f371, %f13, %f370;\n"
    "	sub.f32 	%f47, %f367, %f371;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f365;\n"
    "	mov.f32 	%f372, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p17, %f49, %f372;\n"
    "	@!%p17 bra 	$Lt_9_19202;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd27, %r27;\n"
    "	mul.wide.s32 	%rd28, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd28;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f373, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f374, %f55, %f373;\n"
    "	cvt.rzi.f32.f32 	%f58, %f374;\n"
    "	mov.f32 	%f375, %f58;\n"
    "	mov.f32 	%f376, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f377, %f376;\n"
    "	mov.f32 	%f378, %f55;\n"
    "	mad.f32 %f379, %f375, %f377, %f378;\n"
    "	mov.f32 	%f64, %f379;\n"
    "	mov.f32 	%f380, %f58;\n"
    "	mov.f32 	%f381, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f382, %f381;\n"
    "	mov.f32 	%f383, %f64;\n"
    "	mad.f32 %f384, %f380, %f382, %f383;\n"
    "	mov.f32 	%f64, %f384;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f385, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f386, %f58;\n"
    "	mov.f32 	%f387, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f388, %f64, %f387;\n"
    "	ex2.approx.f32 	%f389, %f388;\n"
    "	mul.f32 	%f390, %f386, %f389;\n"
    "	mov.f32 	%f391, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p18, %f55, %f391;\n"
    "	selp.f32 	%f392, %f385, %f390, %p18;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f393, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f394, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p19, %f55, %f394;\n"
    "	selp.f32 	%f80, %f393, %f392, %p19;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f395, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f90, %f83, %f395;\n"
    "	mov.f32 	%f396, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f396;\n"
    "	mov.f32 	%f397, 0f41000000;   	// 8\n"
    "	mul.f32 	%f94, %f85, %f397;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f398, %f81, %f99;\n"
    "	sub.f32 	%f101, %f398, %f97;\n"
    "	mul.f32 	%f399, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f399;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f400, %f2;\n"
    "	mov.f32 	%f401, %f26;\n"
    "	mad.f32 	%f402, %f401, %f104, %f400;\n"
    "	mov.f32 	%f2, %f402;\n"
    "	mov.f32 	%f403, %f4;\n"
    "	mov.f32 	%f404, %f38;\n"
    "	mad.f32 	%f405, %f404, %f104, %f403;\n"
    "	mov.f32 	%f4, %f405;\n"
    "	mov.f32 	%f406, %f6;\n"
    "	mov.f32 	%f407, %f48;\n"
    "	mad.f32 	%f408, %f407, %f104, %f406;\n"
    "	mov.f32 	%f6, %f408;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_19202:\n"
    "	ld.shared.s32 	%r33, [%rd14+108];\n"
    "	add.s32 	%r27, %r33, %r6;\n"
    "	ld.shared.f32 	%f409, [%rd15+96];\n"
    "	sub.f32 	%f410, %f19, %f409;\n"
    "	mov.f32 	%f411, %f410;\n"
    "	mul.f32 	%f412, %f14, %f411;\n"
    "	cvt.rni.f32.f32 	%f413, %f412;\n"
    "	mul.f32 	%f414, %f13, %f413;\n"
    "	sub.f32 	%f25, %f410, %f414;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f415, 0f00000000;   	// 0\n"
    "	mad.f32 	%f416, %f25, %f25, %f415;\n"
    "	ld.shared.f32 	%f417, [%rd15+100];\n"
    "	sub.f32 	%f418, %f30, %f417;\n"
    "	mov.f32 	%f419, %f418;\n"
    "	mov.f32 	%f420, %f419;\n"
    "	mul.f32 	%f421, %f14, %f419;\n"
    "	cvt.rni.f32.f32 	%f422, %f421;\n"
    "	mul.f32 	%f423, %f13, %f422;\n"
    "	sub.f32 	%f37, %f418, %f423;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f424, %f37, %f37, %f416;\n"
    "	ld.shared.f32 	%f425, [%rd15+104];\n"
    "	sub.f32 	%f426, %f41, %f425;\n"
    "	mov.f32 	%f427, %f426;\n"
    "	mul.f32 	%f428, %f426, %f14;\n"
    "	cvt.rni.f32.f32 	%f429, %f428;\n"
    "	mul.f32 	%f430, %f13, %f429;\n"
    "	sub.f32 	%f47, %f426, %f430;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f424;\n"
    "	mov.f32 	%f431, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p20, %f49, %f431;\n"
    "	@!%p20 bra 	$Lt_9_19714;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd29, %r27;\n"
    "	mul.wide.s32 	%rd30, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd30;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f432, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f433, %f55, %f432;\n"
    "	cvt.rzi.f32.f32 	%f58, %f433;\n"
    "	mov.f32 	%f434, %f58;\n"
    "	mov.f32 	%f435, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f436, %f435;\n"
    "	mov.f32 	%f437, %f55;\n"
    "	mad.f32 %f438, %f434, %f436, %f437;\n"
    "	mov.f32 	%f64, %f438;\n"
    "	mov.f32 	%f439, %f58;\n"
    "	mov.f32 	%f440, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f441, %f440;\n"
    "	mov.f32 	%f442, %f64;\n"
    "	mad.f32 %f443, %f439, %f441, %f442;\n"
    "	mov.f32 	%f64, %f443;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f444, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f445, %f58;\n"
    "	mov.f32 	%f446, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f447, %f64, %f446;\n"
    "	ex2.approx.f32 	%f448, %f447;\n"
    "	mul.f32 	%f449, %f445, %f448;\n"
    "	mov.f32 	%f450, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p21, %f55, %f450;\n"
    "	selp.f32 	%f451, %f444, %f449, %p21;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f452, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f453, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p22, %f55, %f453;\n"
    "	selp.f32 	%f80, %f452, %f451, %p22;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f454, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f90, %f83, %f454;\n"
    "	mov.f32 	%f455, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f455;\n"
    "	mov.f32 	%f456, 0f41000000;   	// 8\n"
    "	mul.f32 	%f94, %f85, %f456;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f457, %f81, %f99;\n"
    "	sub.f32 	%f101, %f457, %f97;\n"
    "	mul.f32 	%f458, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f458;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f459, %f2;\n"
    "	mov.f32 	%f460, %f26;\n"
    "	mad.f32 	%f461, %f460, %f104, %f459;\n"
    "	mov.f32 	%f2, %f461;\n"
    "	mov.f32 	%f462, %f4;\n"
    "	mov.f32 	%f463, %f38;\n"
    "	mad.f32 	%f464, %f463, %f104, %f462;\n"
    "	mov.f32 	%f4, %f464;\n"
    "	mov.f32 	%f465, %f6;\n"
    "	mov.f32 	%f466, %f48;\n"
    "	mad.f32 	%f467, %f466, %f104, %f465;\n"
    "	mov.f32 	%f6, %f467;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_19714:\n"
    "	ld.shared.s32 	%r34, [%rd14+124];\n"
    "	add.s32 	%r27, %r34, %r6;\n"
    "	ld.shared.f32 	%f468, [%rd15+112];\n"
    "	sub.f32 	%f469, %f19, %f468;\n"
    "	mov.f32 	%f470, %f469;\n"
    "	mul.f32 	%f471, %f14, %f470;\n"
    "	cvt.rni.f32.f32 	%f472, %f471;\n"
    "	mul.f32 	%f473, %f13, %f472;\n"
    "	sub.f32 	%f25, %f469, %f473;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f474, 0f00000000;   	// 0\n"
    "	mad.f32 	%f475, %f25, %f25, %f474;\n"
    "	ld.shared.f32 	%f476, [%rd15+116];\n"
    "	sub.f32 	%f477, %f30, %f476;\n"
    "	mov.f32 	%f478, %f477;\n"
    "	mov.f32 	%f479, %f478;\n"
    "	mul.f32 	%f480, %f14, %f478;\n"
    "	cvt.rni.f32.f32 	%f481, %f480;\n"
    "	mul.f32 	%f482, %f13, %f481;\n"
    "	sub.f32 	%f37, %f477, %f482;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f483, %f37, %f37, %f475;\n"
    "	ld.shared.f32 	%f484, [%rd15+120];\n"
    "	sub.f32 	%f485, %f41, %f484;\n"
    "	mov.f32 	%f486, %f485;\n"
    "	mul.f32 	%f487, %f485, %f14;\n"
    "	cvt.rni.f32.f32 	%f488, %f487;\n"
    "	mul.f32 	%f489, %f13, %f488;\n"
    "	sub.f32 	%f47, %f485, %f489;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f483;\n"
    "	mov.f32 	%f490, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p23, %f49, %f490;\n"
    "	@!%p23 bra 	$Lt_9_20226;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd31, %r27;\n"
    "	mul.wide.s32 	%rd32, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd32;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f491, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f492, %f55, %f491;\n"
    "	cvt.rzi.f32.f32 	%f58, %f492;\n"
    "	mov.f32 	%f493, %f58;\n"
    "	mov.f32 	%f494, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f495, %f494;\n"
    "	mov.f32 	%f496, %f55;\n"
    "	mad.f32 %f497, %f493, %f495, %f496;\n"
    "	mov.f32 	%f64, %f497;\n"
    "	mov.f32 	%f498, %f58;\n"
    "	mov.f32 	%f499, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f500, %f499;\n"
    "	mov.f32 	%f501, %f64;\n"
    "	mad.f32 %f502, %f498, %f500, %f501;\n"
    "	mov.f32 	%f64, %f502;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f503, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f504, %f58;\n"
    "	mov.f32 	%f505, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f506, %f64, %f505;\n"
    "	ex2.approx.f32 	%f507, %f506;\n"
    "	mul.f32 	%f508, %f504, %f507;\n"
    "	mov.f32 	%f509, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p24, %f55, %f509;\n"
    "	selp.f32 	%f510, %f503, %f508, %p24;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f511, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f512, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p25, %f55, %f512;\n"
    "	selp.f32 	%f80, %f511, %f510, %p25;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f513, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f90, %f83, %f513;\n"
    "	mov.f32 	%f514, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f514;\n"
    "	mov.f32 	%f515, 0f41000000;   	// 8\n"
    "	mul.f32 	%f94, %f85, %f515;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f516, %f81, %f99;\n"
    "	sub.f32 	%f101, %f516, %f97;\n"
    "	mul.f32 	%f517, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f517;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f518, %f2;\n"
    "	mov.f32 	%f519, %f26;\n"
    "	mad.f32 	%f520, %f519, %f104, %f518;\n"
    "	mov.f32 	%f2, %f520;\n"
    "	mov.f32 	%f521, %f4;\n"
    "	mov.f32 	%f522, %f38;\n"
    "	mad.f32 	%f523, %f522, %f104, %f521;\n"
    "	mov.f32 	%f4, %f523;\n"
    "	mov.f32 	%f524, %f6;\n"
    "	mov.f32 	%f525, %f48;\n"
    "	mad.f32 	%f526, %f525, %f104, %f524;\n"
    "	mov.f32 	%f6, %f526;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_20226:\n"
    "	ld.shared.s32 	%r35, [%rd14+140];\n"
    "	add.s32 	%r27, %r35, %r6;\n"
    "	ld.shared.f32 	%f527, [%rd15+128];\n"
    "	sub.f32 	%f528, %f19, %f527;\n"
    "	mov.f32 	%f529, %f528;\n"
    "	mul.f32 	%f530, %f14, %f529;\n"
    "	cvt.rni.f32.f32 	%f531, %f530;\n"
    "	mul.f32 	%f532, %f13, %f531;\n"
    "	sub.f32 	%f25, %f528, %f532;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f533, 0f00000000;   	// 0\n"
    "	mad.f32 	%f534, %f25, %f25, %f533;\n"
    "	ld.shared.f32 	%f535, [%rd15+132];\n"
    "	sub.f32 	%f536, %f30, %f535;\n"
    "	mov.f32 	%f537, %f536;\n"
    "	mov.f32 	%f538, %f537;\n"
    "	mul.f32 	%f539, %f14, %f537;\n"
    "	cvt.rni.f32.f32 	%f540, %f539;\n"
    "	mul.f32 	%f541, %f13, %f540;\n"
    "	sub.f32 	%f37, %f536, %f541;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f542, %f37, %f37, %f534;\n"
    "	ld.shared.f32 	%f543, [%rd15+136];\n"
    "	sub.f32 	%f544, %f41, %f543;\n"
    "	mov.f32 	%f545, %f544;\n"
    "	mul.f32 	%f546, %f544, %f14;\n"
    "	cvt.rni.f32.f32 	%f547, %f546;\n"
    "	mul.f32 	%f548, %f13, %f547;\n"
    "	sub.f32 	%f47, %f544, %f548;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f542;\n"
    "	mov.f32 	%f549, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p26, %f49, %f549;\n"
    "	@!%p26 bra 	$Lt_9_20738;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd33, %r27;\n"
    "	mul.wide.s32 	%rd34, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd34;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f550, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f551, %f55, %f550;\n"
    "	cvt.rzi.f32.f32 	%f58, %f551;\n"
    "	mov.f32 	%f552, %f58;\n"
    "	mov.f32 	%f553, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f554, %f553;\n"
    "	mov.f32 	%f555, %f55;\n"
    "	mad.f32 %f556, %f552, %f554, %f555;\n"
    "	mov.f32 	%f64, %f556;\n"
    "	mov.f32 	%f557, %f58;\n"
    "	mov.f32 	%f558, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f559, %f558;\n"
    "	mov.f32 	%f560, %f64;\n"
    "	mad.f32 %f561, %f557, %f559, %f560;\n"
    "	mov.f32 	%f64, %f561;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f562, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f563, %f58;\n"
    "	mov.f32 	%f564, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f565, %f64, %f564;\n"
    "	ex2.approx.f32 	%f566, %f565;\n"
    "	mul.f32 	%f567, %f563, %f566;\n"
    "	mov.f32 	%f568, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p27, %f55, %f568;\n"
    "	selp.f32 	%f569, %f562, %f567, %p27;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f570, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f571, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p28, %f55, %f571;\n"
    "	selp.f32 	%f80, %f570, %f569, %p28;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f572, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f90, %f83, %f572;\n"
    "	mov.f32 	%f573, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f573;\n"
    "	mov.f32 	%f574, 0f41000000;   	// 8\n"
    "	mul.f32 	%f94, %f85, %f574;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f575, %f81, %f99;\n"
    "	sub.f32 	%f101, %f575, %f97;\n"
    "	mul.f32 	%f576, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f576;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f577, %f2;\n"
    "	mov.f32 	%f578, %f26;\n"
    "	mad.f32 	%f579, %f578, %f104, %f577;\n"
    "	mov.f32 	%f2, %f579;\n"
    "	mov.f32 	%f580, %f4;\n"
    "	mov.f32 	%f581, %f38;\n"
    "	mad.f32 	%f582, %f581, %f104, %f580;\n"
    "	mov.f32 	%f4, %f582;\n"
    "	mov.f32 	%f583, %f6;\n"
    "	mov.f32 	%f584, %f48;\n"
    "	mad.f32 	%f585, %f584, %f104, %f583;\n"
    "	mov.f32 	%f6, %f585;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_20738:\n"
    "	ld.shared.s32 	%r36, [%rd14+156];\n"
    "	add.s32 	%r27, %r36, %r6;\n"
    "	ld.shared.f32 	%f586, [%rd15+144];\n"
    "	sub.f32 	%f587, %f19, %f586;\n"
    "	mov.f32 	%f588, %f587;\n"
    "	mul.f32 	%f589, %f14, %f588;\n"
    "	cvt.rni.f32.f32 	%f590, %f589;\n"
    "	mul.f32 	%f591, %f13, %f590;\n"
    "	sub.f32 	%f25, %f587, %f591;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f592, 0f00000000;   	// 0\n"
    "	mad.f32 	%f593, %f25, %f25, %f592;\n"
    "	ld.shared.f32 	%f594, [%rd15+148];\n"
    "	sub.f32 	%f595, %f30, %f594;\n"
    "	mov.f32 	%f596, %f595;\n"
    "	mov.f32 	%f597, %f596;\n"
    "	mul.f32 	%f598, %f14, %f596;\n"
    "	cvt.rni.f32.f32 	%f599, %f598;\n"
    "	mul.f32 	%f600, %f13, %f599;\n"
    "	sub.f32 	%f37, %f595, %f600;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f601, %f37, %f37, %f593;\n"
    "	ld.shared.f32 	%f602, [%rd15+152];\n"
    "	sub.f32 	%f603, %f41, %f602;\n"
    "	mov.f32 	%f604, %f603;\n"
    "	mul.f32 	%f605, %f603, %f14;\n"
    "	cvt.rni.f32.f32 	%f606, %f605;\n"
    "	mul.f32 	%f607, %f13, %f606;\n"
    "	sub.f32 	%f47, %f603, %f607;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f601;\n"
    "	mov.f32 	%f608, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p29, %f49, %f608;\n"
    "	@!%p29 bra 	$Lt_9_21250;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd35, %r27;\n"
    "	mul.wide.s32 	%rd36, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd36;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f609, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f610, %f55, %f609;\n"
    "	cvt.rzi.f32.f32 	%f58, %f610;\n"
    "	mov.f32 	%f611, %f58;\n"
    "	mov.f32 	%f612, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f613, %f612;\n"
    "	mov.f32 	%f614, %f55;\n"
    "	mad.f32 %f615, %f611, %f613, %f614;\n"
    "	mov.f32 	%f64, %f615;\n"
    "	mov.f32 	%f616, %f58;\n"
    "	mov.f32 	%f617, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f618, %f617;\n"
    "	mov.f32 	%f619, %f64;\n"
    "	mad.f32 %f620, %f616, %f618, %f619;\n"
    "	mov.f32 	%f64, %f620;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f621, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f622, %f58;\n"
    "	mov.f32 	%f623, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f624, %f64, %f623;\n"
    "	ex2.approx.f32 	%f625, %f624;\n"
    "	mul.f32 	%f626, %f622, %f625;\n"
    "	mov.f32 	%f627, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p30, %f55, %f627;\n"
    "	selp.f32 	%f628, %f621, %f626, %p30;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f629, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f630, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p31, %f55, %f630;\n"
    "	selp.f32 	%f80, %f629, %f628, %p31;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f631, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f90, %f83, %f631;\n"
    "	mov.f32 	%f632, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f632;\n"
    "	mov.f32 	%f633, 0f41000000;   	// 8\n"
    "	mul.f32 	%f94, %f85, %f633;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f634, %f81, %f99;\n"
    "	sub.f32 	%f101, %f634, %f97;\n"
    "	mul.f32 	%f635, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f635;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f636, %f2;\n"
    "	mov.f32 	%f637, %f26;\n"
    "	mad.f32 	%f638, %f637, %f104, %f636;\n"
    "	mov.f32 	%f2, %f638;\n"
    "	mov.f32 	%f639, %f4;\n"
    "	mov.f32 	%f640, %f38;\n"
    "	mad.f32 	%f641, %f640, %f104, %f639;\n"
    "	mov.f32 	%f4, %f641;\n"
    "	mov.f32 	%f642, %f6;\n"
    "	mov.f32 	%f643, %f48;\n"
    "	mad.f32 	%f644, %f643, %f104, %f642;\n"
    "	mov.f32 	%f6, %f644;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_21250:\n"
    "	ld.shared.s32 	%r37, [%rd14+172];\n"
    "	add.s32 	%r27, %r37, %r6;\n"
    "	ld.shared.f32 	%f645, [%rd15+160];\n"
    "	sub.f32 	%f646, %f19, %f645;\n"
    "	mov.f32 	%f647, %f646;\n"
    "	mul.f32 	%f648, %f14, %f647;\n"
    "	cvt.rni.f32.f32 	%f649, %f648;\n"
    "	mul.f32 	%f650, %f13, %f649;\n"
    "	sub.f32 	%f25, %f646, %f650;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f651, 0f00000000;   	// 0\n"
    "	mad.f32 	%f652, %f25, %f25, %f651;\n"
    "	ld.shared.f32 	%f653, [%rd15+164];\n"
    "	sub.f32 	%f654, %f30, %f653;\n"
    "	mov.f32 	%f655, %f654;\n"
    "	mov.f32 	%f656, %f655;\n"
    "	mul.f32 	%f657, %f14, %f655;\n"
    "	cvt.rni.f32.f32 	%f658, %f657;\n"
    "	mul.f32 	%f659, %f13, %f658;\n"
    "	sub.f32 	%f37, %f654, %f659;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f660, %f37, %f37, %f652;\n"
    "	ld.shared.f32 	%f661, [%rd15+168];\n"
    "	sub.f32 	%f662, %f41, %f661;\n"
    "	mov.f32 	%f663, %f662;\n"
    "	mul.f32 	%f664, %f662, %f14;\n"
    "	cvt.rni.f32.f32 	%f665, %f664;\n"
    "	mul.f32 	%f666, %f13, %f665;\n"
    "	sub.f32 	%f47, %f662, %f666;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f660;\n"
    "	mov.f32 	%f667, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p32, %f49, %f667;\n"
    "	@!%p32 bra 	$Lt_9_21762;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd37, %r27;\n"
    "	mul.wide.s32 	%rd38, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd38;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f668, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f669, %f55, %f668;\n"
    "	cvt.rzi.f32.f32 	%f58, %f669;\n"
    "	mov.f32 	%f670, %f58;\n"
    "	mov.f32 	%f671, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f672, %f671;\n"
    "	mov.f32 	%f673, %f55;\n"
    "	mad.f32 %f674, %f670, %f672, %f673;\n"
    "	mov.f32 	%f64, %f674;\n"
    "	mov.f32 	%f675, %f58;\n"
    "	mov.f32 	%f676, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f677, %f676;\n"
    "	mov.f32 	%f678, %f64;\n"
    "	mad.f32 %f679, %f675, %f677, %f678;\n"
    "	mov.f32 	%f64, %f679;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f680, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f681, %f58;\n"
    "	mov.f32 	%f682, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f683, %f64, %f682;\n"
    "	ex2.approx.f32 	%f684, %f683;\n"
    "	mul.f32 	%f685, %f681, %f684;\n"
    "	mov.f32 	%f686, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p33, %f55, %f686;\n"
    "	selp.f32 	%f687, %f680, %f685, %p33;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f688, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f689, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p34, %f55, %f689;\n"
    "	selp.f32 	%f80, %f688, %f687, %p34;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f690, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f90, %f83, %f690;\n"
    "	mov.f32 	%f691, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f691;\n"
    "	mov.f32 	%f692, 0f41000000;   	// 8\n"
    "	mul.f32 	%f94, %f85, %f692;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f693, %f81, %f99;\n"
    "	sub.f32 	%f101, %f693, %f97;\n"
    "	mul.f32 	%f694, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f694;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f695, %f2;\n"
    "	mov.f32 	%f696, %f26;\n"
    "	mad.f32 	%f697, %f696, %f104, %f695;\n"
    "	mov.f32 	%f2, %f697;\n"
    "	mov.f32 	%f698, %f4;\n"
    "	mov.f32 	%f699, %f38;\n"
    "	mad.f32 	%f700, %f699, %f104, %f698;\n"
    "	mov.f32 	%f4, %f700;\n"
    "	mov.f32 	%f701, %f6;\n"
    "	mov.f32 	%f702, %f48;\n"
    "	mad.f32 	%f703, %f702, %f104, %f701;\n"
    "	mov.f32 	%f6, %f703;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_21762:\n"
    "	ld.shared.s32 	%r38, [%rd14+188];\n"
    "	add.s32 	%r27, %r38, %r6;\n"
    "	ld.shared.f32 	%f704, [%rd15+176];\n"
    "	sub.f32 	%f705, %f19, %f704;\n"
    "	mov.f32 	%f706, %f705;\n"
    "	mul.f32 	%f707, %f14, %f706;\n"
    "	cvt.rni.f32.f32 	%f708, %f707;\n"
    "	mul.f32 	%f709, %f13, %f708;\n"
    "	sub.f32 	%f25, %f705, %f709;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f710, 0f00000000;   	// 0\n"
    "	mad.f32 	%f711, %f25, %f25, %f710;\n"
    "	ld.shared.f32 	%f712, [%rd15+180];\n"
    "	sub.f32 	%f713, %f30, %f712;\n"
    "	mov.f32 	%f714, %f713;\n"
    "	mov.f32 	%f715, %f714;\n"
    "	mul.f32 	%f716, %f14, %f714;\n"
    "	cvt.rni.f32.f32 	%f717, %f716;\n"
    "	mul.f32 	%f718, %f13, %f717;\n"
    "	sub.f32 	%f37, %f713, %f718;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f719, %f37, %f37, %f711;\n"
    "	ld.shared.f32 	%f720, [%rd15+184];\n"
    "	sub.f32 	%f721, %f41, %f720;\n"
    "	mov.f32 	%f722, %f721;\n"
    "	mul.f32 	%f723, %f721, %f14;\n"
    "	cvt.rni.f32.f32 	%f724, %f723;\n"
    "	mul.f32 	%f725, %f13, %f724;\n"
    "	sub.f32 	%f47, %f721, %f725;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f719;\n"
    "	mov.f32 	%f726, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p35, %f49, %f726;\n"
    "	@!%p35 bra 	$Lt_9_22274;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd39, %r27;\n"
    "	mul.wide.s32 	%rd40, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd40;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f727, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f728, %f55, %f727;\n"
    "	cvt.rzi.f32.f32 	%f58, %f728;\n"
    "	mov.f32 	%f729, %f58;\n"
    "	mov.f32 	%f730, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f731, %f730;\n"
    "	mov.f32 	%f732, %f55;\n"
    "	mad.f32 %f733, %f729, %f731, %f732;\n"
    "	mov.f32 	%f64, %f733;\n"
    "	mov.f32 	%f734, %f58;\n"
    "	mov.f32 	%f735, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f736, %f735;\n"
    "	mov.f32 	%f737, %f64;\n"
    "	mad.f32 %f738, %f734, %f736, %f737;\n"
    "	mov.f32 	%f64, %f738;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f739, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f740, %f58;\n"
    "	mov.f32 	%f741, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f742, %f64, %f741;\n"
    "	ex2.approx.f32 	%f743, %f742;\n"
    "	mul.f32 	%f744, %f740, %f743;\n"
    "	mov.f32 	%f745, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p36, %f55, %f745;\n"
    "	selp.f32 	%f746, %f739, %f744, %p36;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f747, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f748, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p37, %f55, %f748;\n"
    "	selp.f32 	%f80, %f747, %f746, %p37;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f749, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f90, %f83, %f749;\n"
    "	mov.f32 	%f750, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f750;\n"
    "	mov.f32 	%f751, 0f41000000;   	// 8\n"
    "	mul.f32 	%f94, %f85, %f751;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f752, %f81, %f99;\n"
    "	sub.f32 	%f101, %f752, %f97;\n"
    "	mul.f32 	%f753, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f753;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f754, %f2;\n"
    "	mov.f32 	%f755, %f26;\n"
    "	mad.f32 	%f756, %f755, %f104, %f754;\n"
    "	mov.f32 	%f2, %f756;\n"
    "	mov.f32 	%f757, %f4;\n"
    "	mov.f32 	%f758, %f38;\n"
    "	mad.f32 	%f759, %f758, %f104, %f757;\n"
    "	mov.f32 	%f4, %f759;\n"
    "	mov.f32 	%f760, %f6;\n"
    "	mov.f32 	%f761, %f48;\n"
    "	mad.f32 	%f762, %f761, %f104, %f760;\n"
    "	mov.f32 	%f6, %f762;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_22274:\n"
    "	ld.shared.s32 	%r39, [%rd14+204];\n"
    "	add.s32 	%r27, %r39, %r6;\n"
    "	ld.shared.f32 	%f763, [%rd15+192];\n"
    "	sub.f32 	%f764, %f19, %f763;\n"
    "	mov.f32 	%f765, %f764;\n"
    "	mul.f32 	%f766, %f14, %f765;\n"
    "	cvt.rni.f32.f32 	%f767, %f766;\n"
    "	mul.f32 	%f768, %f13, %f767;\n"
    "	sub.f32 	%f25, %f764, %f768;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f769, 0f00000000;   	// 0\n"
    "	mad.f32 	%f770, %f25, %f25, %f769;\n"
    "	ld.shared.f32 	%f771, [%rd15+196];\n"
    "	sub.f32 	%f772, %f30, %f771;\n"
    "	mov.f32 	%f773, %f772;\n"
    "	mov.f32 	%f774, %f773;\n"
    "	mul.f32 	%f775, %f14, %f773;\n"
    "	cvt.rni.f32.f32 	%f776, %f775;\n"
    "	mul.f32 	%f777, %f13, %f776;\n"
    "	sub.f32 	%f37, %f772, %f777;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f778, %f37, %f37, %f770;\n"
    "	ld.shared.f32 	%f779, [%rd15+200];\n"
    "	sub.f32 	%f780, %f41, %f779;\n"
    "	mov.f32 	%f781, %f780;\n"
    "	mul.f32 	%f782, %f780, %f14;\n"
    "	cvt.rni.f32.f32 	%f783, %f782;\n"
    "	mul.f32 	%f784, %f13, %f783;\n"
    "	sub.f32 	%f47, %f780, %f784;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f778;\n"
    "	mov.f32 	%f785, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p38, %f49, %f785;\n"
    "	@!%p38 bra 	$Lt_9_22786;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd41, %r27;\n"
    "	mul.wide.s32 	%rd42, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd42;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f786, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f787, %f55, %f786;\n"
    "	cvt.rzi.f32.f32 	%f58, %f787;\n"
    "	mov.f32 	%f788, %f58;\n"
    "	mov.f32 	%f789, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f790, %f789;\n"
    "	mov.f32 	%f791, %f55;\n"
    "	mad.f32 %f792, %f788, %f790, %f791;\n"
    "	mov.f32 	%f64, %f792;\n"
    "	mov.f32 	%f793, %f58;\n"
    "	mov.f32 	%f794, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f795, %f794;\n"
    "	mov.f32 	%f796, %f64;\n"
    "	mad.f32 %f797, %f793, %f795, %f796;\n"
    "	mov.f32 	%f64, %f797;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f798, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f799, %f58;\n"
    "	mov.f32 	%f800, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f801, %f64, %f800;\n"
    "	ex2.approx.f32 	%f802, %f801;\n"
    "	mul.f32 	%f803, %f799, %f802;\n"
    "	mov.f32 	%f804, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p39, %f55, %f804;\n"
    "	selp.f32 	%f805, %f798, %f803, %p39;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f806, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f807, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p40, %f55, %f807;\n"
    "	selp.f32 	%f80, %f806, %f805, %p40;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f808, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f90, %f83, %f808;\n"
    "	mov.f32 	%f809, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f809;\n"
    "	mov.f32 	%f810, 0f41000000;   	// 8\n"
    "	mul.f32 	%f94, %f85, %f810;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f811, %f81, %f99;\n"
    "	sub.f32 	%f101, %f811, %f97;\n"
    "	mul.f32 	%f812, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f812;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f813, %f2;\n"
    "	mov.f32 	%f814, %f26;\n"
    "	mad.f32 	%f815, %f814, %f104, %f813;\n"
    "	mov.f32 	%f2, %f815;\n"
    "	mov.f32 	%f816, %f4;\n"
    "	mov.f32 	%f817, %f38;\n"
    "	mad.f32 	%f818, %f817, %f104, %f816;\n"
    "	mov.f32 	%f4, %f818;\n"
    "	mov.f32 	%f819, %f6;\n"
    "	mov.f32 	%f820, %f48;\n"
    "	mad.f32 	%f821, %f820, %f104, %f819;\n"
    "	mov.f32 	%f6, %f821;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_22786:\n"
    "	ld.shared.s32 	%r40, [%rd14+220];\n"
    "	add.s32 	%r27, %r40, %r6;\n"
    "	ld.shared.f32 	%f822, [%rd15+208];\n"
    "	sub.f32 	%f823, %f19, %f822;\n"
    "	mov.f32 	%f824, %f823;\n"
    "	mul.f32 	%f825, %f14, %f824;\n"
    "	cvt.rni.f32.f32 	%f826, %f825;\n"
    "	mul.f32 	%f827, %f13, %f826;\n"
    "	sub.f32 	%f25, %f823, %f827;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f828, 0f00000000;   	// 0\n"
    "	mad.f32 	%f829, %f25, %f25, %f828;\n"
    "	ld.shared.f32 	%f830, [%rd15+212];\n"
    "	sub.f32 	%f831, %f30, %f830;\n"
    "	mov.f32 	%f832, %f831;\n"
    "	mov.f32 	%f833, %f832;\n"
    "	mul.f32 	%f834, %f14, %f832;\n"
    "	cvt.rni.f32.f32 	%f835, %f834;\n"
    "	mul.f32 	%f836, %f13, %f835;\n"
    "	sub.f32 	%f37, %f831, %f836;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f837, %f37, %f37, %f829;\n"
    "	ld.shared.f32 	%f838, [%rd15+216];\n"
    "	sub.f32 	%f839, %f41, %f838;\n"
    "	mov.f32 	%f840, %f839;\n"
    "	mul.f32 	%f841, %f839, %f14;\n"
    "	cvt.rni.f32.f32 	%f842, %f841;\n"
    "	mul.f32 	%f843, %f13, %f842;\n"
    "	sub.f32 	%f47, %f839, %f843;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f837;\n"
    "	mov.f32 	%f844, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p41, %f49, %f844;\n"
    "	@!%p41 bra 	$Lt_9_23298;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd43, %r27;\n"
    "	mul.wide.s32 	%rd44, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd44;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f845, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f846, %f55, %f845;\n"
    "	cvt.rzi.f32.f32 	%f58, %f846;\n"
    "	mov.f32 	%f847, %f58;\n"
    "	mov.f32 	%f848, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f849, %f848;\n"
    "	mov.f32 	%f850, %f55;\n"
    "	mad.f32 %f851, %f847, %f849, %f850;\n"
    "	mov.f32 	%f64, %f851;\n"
    "	mov.f32 	%f852, %f58;\n"
    "	mov.f32 	%f853, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f854, %f853;\n"
    "	mov.f32 	%f855, %f64;\n"
    "	mad.f32 %f856, %f852, %f854, %f855;\n"
    "	mov.f32 	%f64, %f856;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f857, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f858, %f58;\n"
    "	mov.f32 	%f859, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f860, %f64, %f859;\n"
    "	ex2.approx.f32 	%f861, %f860;\n"
    "	mul.f32 	%f862, %f858, %f861;\n"
    "	mov.f32 	%f863, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p42, %f55, %f863;\n"
    "	selp.f32 	%f864, %f857, %f862, %p42;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f865, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f866, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p43, %f55, %f866;\n"
    "	selp.f32 	%f80, %f865, %f864, %p43;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f867, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f90, %f83, %f867;\n"
    "	mov.f32 	%f868, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f868;\n"
    "	mov.f32 	%f869, 0f41000000;   	// 8\n"
    "	mul.f32 	%f94, %f85, %f869;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f870, %f81, %f99;\n"
    "	sub.f32 	%f101, %f870, %f97;\n"
    "	mul.f32 	%f871, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f871;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f872, %f2;\n"
    "	mov.f32 	%f873, %f26;\n"
    "	mad.f32 	%f874, %f873, %f104, %f872;\n"
    "	mov.f32 	%f2, %f874;\n"
    "	mov.f32 	%f875, %f4;\n"
    "	mov.f32 	%f876, %f38;\n"
    "	mad.f32 	%f877, %f876, %f104, %f875;\n"
    "	mov.f32 	%f4, %f877;\n"
    "	mov.f32 	%f878, %f6;\n"
    "	mov.f32 	%f879, %f48;\n"
    "	mad.f32 	%f880, %f879, %f104, %f878;\n"
    "	mov.f32 	%f6, %f880;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_23298:\n"
    "	ld.shared.s32 	%r41, [%rd14+236];\n"
    "	add.s32 	%r27, %r41, %r6;\n"
    "	ld.shared.f32 	%f881, [%rd15+224];\n"
    "	sub.f32 	%f882, %f19, %f881;\n"
    "	mov.f32 	%f883, %f882;\n"
    "	mul.f32 	%f884, %f14, %f883;\n"
    "	cvt.rni.f32.f32 	%f885, %f884;\n"
    "	mul.f32 	%f886, %f13, %f885;\n"
    "	sub.f32 	%f25, %f882, %f886;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f887, 0f00000000;   	// 0\n"
    "	mad.f32 	%f888, %f25, %f25, %f887;\n"
    "	ld.shared.f32 	%f889, [%rd15+228];\n"
    "	sub.f32 	%f890, %f30, %f889;\n"
    "	mov.f32 	%f891, %f890;\n"
    "	mov.f32 	%f892, %f891;\n"
    "	mul.f32 	%f893, %f14, %f891;\n"
    "	cvt.rni.f32.f32 	%f894, %f893;\n"
    "	mul.f32 	%f895, %f13, %f894;\n"
    "	sub.f32 	%f37, %f890, %f895;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f896, %f37, %f37, %f888;\n"
    "	ld.shared.f32 	%f897, [%rd15+232];\n"
    "	sub.f32 	%f898, %f41, %f897;\n"
    "	mov.f32 	%f899, %f898;\n"
    "	mul.f32 	%f900, %f898, %f14;\n"
    "	cvt.rni.f32.f32 	%f901, %f900;\n"
    "	mul.f32 	%f902, %f13, %f901;\n"
    "	sub.f32 	%f47, %f898, %f902;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f896;\n"
    "	mov.f32 	%f903, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p44, %f49, %f903;\n"
    "	@!%p44 bra 	$Lt_9_23810;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd45, %r27;\n"
    "	mul.wide.s32 	%rd46, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd46;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f904, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f905, %f55, %f904;\n"
    "	cvt.rzi.f32.f32 	%f58, %f905;\n"
    "	mov.f32 	%f906, %f58;\n"
    "	mov.f32 	%f907, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f908, %f907;\n"
    "	mov.f32 	%f909, %f55;\n"
    "	mad.f32 %f910, %f906, %f908, %f909;\n"
    "	mov.f32 	%f64, %f910;\n"
    "	mov.f32 	%f911, %f58;\n"
    "	mov.f32 	%f912, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f913, %f912;\n"
    "	mov.f32 	%f914, %f64;\n"
    "	mad.f32 %f915, %f911, %f913, %f914;\n"
    "	mov.f32 	%f64, %f915;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f916, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f917, %f58;\n"
    "	mov.f32 	%f918, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f919, %f64, %f918;\n"
    "	ex2.approx.f32 	%f920, %f919;\n"
    "	mul.f32 	%f921, %f917, %f920;\n"
    "	mov.f32 	%f922, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p45, %f55, %f922;\n"
    "	selp.f32 	%f923, %f916, %f921, %p45;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f924, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f925, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p46, %f55, %f925;\n"
    "	selp.f32 	%f80, %f924, %f923, %p46;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f926, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f90, %f83, %f926;\n"
    "	mov.f32 	%f927, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f927;\n"
    "	mov.f32 	%f928, 0f41000000;   	// 8\n"
    "	mul.f32 	%f94, %f85, %f928;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f929, %f81, %f99;\n"
    "	sub.f32 	%f101, %f929, %f97;\n"
    "	mul.f32 	%f930, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f930;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f931, %f2;\n"
    "	mov.f32 	%f932, %f26;\n"
    "	mad.f32 	%f933, %f932, %f104, %f931;\n"
    "	mov.f32 	%f2, %f933;\n"
    "	mov.f32 	%f934, %f4;\n"
    "	mov.f32 	%f935, %f38;\n"
    "	mad.f32 	%f936, %f935, %f104, %f934;\n"
    "	mov.f32 	%f4, %f936;\n"
    "	mov.f32 	%f937, %f6;\n"
    "	mov.f32 	%f938, %f48;\n"
    "	mad.f32 	%f939, %f938, %f104, %f937;\n"
    "	mov.f32 	%f6, %f939;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_23810:\n"
    "	ld.shared.s32 	%r42, [%rd14+252];\n"
    "	add.s32 	%r27, %r42, %r6;\n"
    "	ld.shared.f32 	%f940, [%rd15+240];\n"
    "	sub.f32 	%f941, %f19, %f940;\n"
    "	mov.f32 	%f942, %f941;\n"
    "	mul.f32 	%f943, %f14, %f942;\n"
    "	cvt.rni.f32.f32 	%f944, %f943;\n"
    "	mul.f32 	%f945, %f13, %f944;\n"
    "	sub.f32 	%f25, %f941, %f945;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f946, 0f00000000;   	// 0\n"
    "	mad.f32 	%f947, %f25, %f25, %f946;\n"
    "	ld.shared.f32 	%f948, [%rd15+244];\n"
    "	sub.f32 	%f949, %f30, %f948;\n"
    "	mov.f32 	%f950, %f949;\n"
    "	mov.f32 	%f951, %f950;\n"
    "	mul.f32 	%f952, %f14, %f950;\n"
    "	cvt.rni.f32.f32 	%f953, %f952;\n"
    "	mul.f32 	%f954, %f13, %f953;\n"
    "	sub.f32 	%f37, %f949, %f954;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f955, %f37, %f37, %f947;\n"
    "	ld.shared.f32 	%f956, [%rd15+248];\n"
    "	sub.f32 	%f957, %f41, %f956;\n"
    "	mov.f32 	%f958, %f957;\n"
    "	mul.f32 	%f959, %f957, %f14;\n"
    "	cvt.rni.f32.f32 	%f960, %f959;\n"
    "	mul.f32 	%f961, %f13, %f960;\n"
    "	sub.f32 	%f47, %f957, %f961;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f955;\n"
    "	mov.f32 	%f962, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p47, %f49, %f962;\n"
    "	@!%p47 bra 	$Lt_9_24322;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd47, %r27;\n"
    "	mul.wide.s32 	%rd48, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd48;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f963, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f964, %f55, %f963;\n"
    "	cvt.rzi.f32.f32 	%f58, %f964;\n"
    "	mov.f32 	%f965, %f58;\n"
    "	mov.f32 	%f966, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f967, %f966;\n"
    "	mov.f32 	%f968, %f55;\n"
    "	mad.f32 %f969, %f965, %f967, %f968;\n"
    "	mov.f32 	%f64, %f969;\n"
    "	mov.f32 	%f970, %f58;\n"
    "	mov.f32 	%f971, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f972, %f971;\n"
    "	mov.f32 	%f973, %f64;\n"
    "	mad.f32 %f974, %f970, %f972, %f973;\n"
    "	mov.f32 	%f64, %f974;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f975, 0f00000000;   	// 0\n"
    "	ex2.approx.f32 	%f976, %f58;\n"
    "	mov.f32 	%f977, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f978, %f64, %f977;\n"
    "	ex2.approx.f32 	%f979, %f978;\n"
    "	mul.f32 	%f980, %f976, %f979;\n"
    "	mov.f32 	%f981, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p48, %f55, %f981;\n"
    "	selp.f32 	%f982, %f975, %f980, %p48;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f983, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f984, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p49, %f55, %f984;\n"
    "	selp.f32 	%f80, %f983, %f982, %p49;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f985, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f90, %f83, %f985;\n"
    "	mov.f32 	%f986, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f986;\n"
    "	mov.f32 	%f987, 0f41000000;   	// 8\n"
    "	mul.f32 	%f94, %f85, %f987;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f988, %f81, %f99;\n"
    "	sub.f32 	%f101, %f988, %f97;\n"
    "	mul.f32 	%f989, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f989;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f990, %f2;\n"
    "	mov.f32 	%f991, %f26;\n"
    "	mad.f32 	%f992, %f991, %f104, %f990;\n"
    "	mov.f32 	%f2, %f992;\n"
    "	mov.f32 	%f993, %f4;\n"
    "	mov.f32 	%f994, %f38;\n"
    "	mad.f32 	%f995, %f994, %f104, %f993;\n"
    "	mov.f32 	%f4, %f995;\n"
    "	mov.f32 	%f996, %f6;\n"
    "	mov.f32 	%f997, %f48;\n"
    "	mad.f32 	%f998, %f997, %f104, %f996;\n"
    "	mov.f32 	%f6, %f998;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_24322:\n"
    "	ld.shared.s32 	%r43, [%rd14+268];\n"
    "	add.s32 	%r27, %r43, %r6;\n"
    "	ld.shared.f32 	%f999, [%rd15+256];\n"
    "	sub.f32 	%f1000, %f19, %f999;\n"
    "	mov.f32 	%f1001, %f1000;\n"
    "	mul.f32 	%f1002, %f14, %f1001;\n"
    "	cvt.rni.f32.f32 	%f1003, %f1002;\n"
    "	mul.f32 	%f1004, %f13, %f1003;\n"
    "	sub.f32 	%f25, %f1000, %f1004;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1005, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1006, %f25, %f25, %f1005;\n"
    "	ld.shared.f32 	%f1007, [%rd15+260];\n"
    "	sub.f32 	%f1008, %f30, %f1007;\n"
    "	mov.f32 	%f1009, %f1008;\n"
    "	mov.f32 	%f1010, %f1009;\n"
    "	mul.f32 	%f1011, %f14, %f1009;\n"
    "	cvt.rni.f32.f32 	%f1012, %f1011;\n"
    "	mul.f32 	%f1013, %f13, %f1012;\n"
    "	sub.f32 	%f37, %f1008, %f1013;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1014, %f37, %f37, %f1006;\n"
    "	ld.shared.f32 	%f1015, [%rd15+264];\n"
    "	sub.f32 	%f1016, %f41, %f1015;\n"
    "	mov.f32 	%f1017, %f1016;\n"
    "	mul.f32 	%f1018, %f1016, %f14;\n"
    "	cvt.rni.f32.f32 	%f1019, %f1018;\n"
    "	mul.f32 	%f1020, %f13, %f1019;\n"
    "	sub.f32 	%f47, %f1016, %f1020;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1014;\n"
    "	mov.f32 	%f1021, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p50, %f49, %f1021;\n"
    "	@!%p50 bra 	$Lt_9_24834;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd49, %r27;\n"
    "	mul.wide.s32 	%rd50, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd50;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f1022, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1023, %f55, %f1022;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1023;\n"
    "	mov.f32 	%f1024, %f58;\n"
    "	mov.f32 	%f1025, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1026, %f1025;\n"
    "	mov.f32 	%f1027, %f55;\n"
    "	mad.f32 %f1028, %f1024, %f1026, %f1027;\n"
    "	mov.f32 	%f64, %f1028;\n"
    "	mov.f32 	%f1029, %f58;\n"
    "	mov.f32 	%f1030, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1031, %f1030;\n"
    "	mov.f32 	%f1032, %f64;\n"
    "	mad.f32 %f1033, %f1029, %f1031, %f1032;\n"
    "	mov.f32 	%f64, %f1033;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f1034, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1035, %f58;\n"
    "	mov.f32 	%f1036, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1037, %f64, %f1036;\n"
    "	ex2.approx.f32 	%f1038, %f1037;\n"
    "	mul.f32 	%f1039, %f1035, %f1038;\n"
    "	mov.f32 	%f1040, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p51, %f55, %f1040;\n"
    "	selp.f32 	%f1041, %f1034, %f1039, %p51;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f1042, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1043, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p52, %f55, %f1043;\n"
    "	selp.f32 	%f80, %f1042, %f1041, %p52;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f1044, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f1044;\n"
    "	mov.f32 	%f1045, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f1045;\n"
    "	mov.f32 	%f1046, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f1046;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f1047, %f81, %f99;\n"
    "	sub.f32 	%f101, %f1047, %f97;\n"
    "	mul.f32 	%f1048, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f1048;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f1049, %f2;\n"
    "	mov.f32 	%f1050, %f26;\n"
    "	mad.f32 	%f1051, %f1050, %f104, %f1049;\n"
    "	mov.f32 	%f2, %f1051;\n"
    "	mov.f32 	%f1052, %f4;\n"
    "	mov.f32 	%f1053, %f38;\n"
    "	mad.f32 	%f1054, %f1053, %f104, %f1052;\n"
    "	mov.f32 	%f4, %f1054;\n"
    "	mov.f32 	%f1055, %f6;\n"
    "	mov.f32 	%f1056, %f48;\n"
    "	mad.f32 	%f1057, %f1056, %f104, %f1055;\n"
    "	mov.f32 	%f6, %f1057;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_24834:\n"
    "	ld.shared.s32 	%r44, [%rd14+284];\n"
    "	add.s32 	%r27, %r44, %r6;\n"
    "	ld.shared.f32 	%f1058, [%rd15+272];\n"
    "	sub.f32 	%f1059, %f19, %f1058;\n"
    "	mov.f32 	%f1060, %f1059;\n"
    "	mul.f32 	%f1061, %f14, %f1060;\n"
    "	cvt.rni.f32.f32 	%f1062, %f1061;\n"
    "	mul.f32 	%f1063, %f13, %f1062;\n"
    "	sub.f32 	%f25, %f1059, %f1063;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1064, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1065, %f25, %f25, %f1064;\n"
    "	ld.shared.f32 	%f1066, [%rd15+276];\n"
    "	sub.f32 	%f1067, %f30, %f1066;\n"
    "	mov.f32 	%f1068, %f1067;\n"
    "	mov.f32 	%f1069, %f1068;\n"
    "	mul.f32 	%f1070, %f14, %f1068;\n"
    "	cvt.rni.f32.f32 	%f1071, %f1070;\n"
    "	mul.f32 	%f1072, %f13, %f1071;\n"
    "	sub.f32 	%f37, %f1067, %f1072;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1073, %f37, %f37, %f1065;\n"
    "	ld.shared.f32 	%f1074, [%rd15+280];\n"
    "	sub.f32 	%f1075, %f41, %f1074;\n"
    "	mov.f32 	%f1076, %f1075;\n"
    "	mul.f32 	%f1077, %f1075, %f14;\n"
    "	cvt.rni.f32.f32 	%f1078, %f1077;\n"
    "	mul.f32 	%f1079, %f13, %f1078;\n"
    "	sub.f32 	%f47, %f1075, %f1079;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1073;\n"
    "	mov.f32 	%f1080, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p53, %f49, %f1080;\n"
    "	@!%p53 bra 	$Lt_9_25346;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd51, %r27;\n"
    "	mul.wide.s32 	%rd52, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd52;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f1081, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1082, %f55, %f1081;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1082;\n"
    "	mov.f32 	%f1083, %f58;\n"
    "	mov.f32 	%f1084, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1085, %f1084;\n"
    "	mov.f32 	%f1086, %f55;\n"
    "	mad.f32 %f1087, %f1083, %f1085, %f1086;\n"
    "	mov.f32 	%f64, %f1087;\n"
    "	mov.f32 	%f1088, %f58;\n"
    "	mov.f32 	%f1089, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1090, %f1089;\n"
    "	mov.f32 	%f1091, %f64;\n"
    "	mad.f32 %f1092, %f1088, %f1090, %f1091;\n"
    "	mov.f32 	%f64, %f1092;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f1093, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1094, %f58;\n"
    "	mov.f32 	%f1095, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1096, %f64, %f1095;\n"
    "	ex2.approx.f32 	%f1097, %f1096;\n"
    "	mul.f32 	%f1098, %f1094, %f1097;\n"
    "	mov.f32 	%f1099, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p54, %f55, %f1099;\n"
    "	selp.f32 	%f1100, %f1093, %f1098, %p54;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f1101, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1102, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p55, %f55, %f1102;\n"
    "	selp.f32 	%f80, %f1101, %f1100, %p55;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f1103, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f1103;\n"
    "	mov.f32 	%f1104, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f1104;\n"
    "	mov.f32 	%f1105, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f1105;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f1106, %f81, %f99;\n"
    "	sub.f32 	%f101, %f1106, %f97;\n"
    "	mul.f32 	%f1107, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f1107;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f1108, %f2;\n"
    "	mov.f32 	%f1109, %f26;\n"
    "	mad.f32 	%f1110, %f1109, %f104, %f1108;\n"
    "	mov.f32 	%f2, %f1110;\n"
    "	mov.f32 	%f1111, %f4;\n"
    "	mov.f32 	%f1112, %f38;\n"
    "	mad.f32 	%f1113, %f1112, %f104, %f1111;\n"
    "	mov.f32 	%f4, %f1113;\n"
    "	mov.f32 	%f1114, %f6;\n"
    "	mov.f32 	%f1115, %f48;\n"
    "	mad.f32 	%f1116, %f1115, %f104, %f1114;\n"
    "	mov.f32 	%f6, %f1116;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_25346:\n"
    "	ld.shared.s32 	%r45, [%rd14+300];\n"
    "	add.s32 	%r27, %r45, %r6;\n"
    "	ld.shared.f32 	%f1117, [%rd15+288];\n"
    "	sub.f32 	%f1118, %f19, %f1117;\n"
    "	mov.f32 	%f1119, %f1118;\n"
    "	mul.f32 	%f1120, %f14, %f1119;\n"
    "	cvt.rni.f32.f32 	%f1121, %f1120;\n"
    "	mul.f32 	%f1122, %f13, %f1121;\n"
    "	sub.f32 	%f25, %f1118, %f1122;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1123, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1124, %f25, %f25, %f1123;\n"
    "	ld.shared.f32 	%f1125, [%rd15+292];\n"
    "	sub.f32 	%f1126, %f30, %f1125;\n"
    "	mov.f32 	%f1127, %f1126;\n"
    "	mov.f32 	%f1128, %f1127;\n"
    "	mul.f32 	%f1129, %f14, %f1127;\n"
    "	cvt.rni.f32.f32 	%f1130, %f1129;\n"
    "	mul.f32 	%f1131, %f13, %f1130;\n"
    "	sub.f32 	%f37, %f1126, %f1131;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1132, %f37, %f37, %f1124;\n"
    "	ld.shared.f32 	%f1133, [%rd15+296];\n"
    "	sub.f32 	%f1134, %f41, %f1133;\n"
    "	mov.f32 	%f1135, %f1134;\n"
    "	mul.f32 	%f1136, %f1134, %f14;\n"
    "	cvt.rni.f32.f32 	%f1137, %f1136;\n"
    "	mul.f32 	%f1138, %f13, %f1137;\n"
    "	sub.f32 	%f47, %f1134, %f1138;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1132;\n"
    "	mov.f32 	%f1139, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p56, %f49, %f1139;\n"
    "	@!%p56 bra 	$Lt_9_25858;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd53, %r27;\n"
    "	mul.wide.s32 	%rd54, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd54;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f1140, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1141, %f55, %f1140;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1141;\n"
    "	mov.f32 	%f1142, %f58;\n"
    "	mov.f32 	%f1143, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1144, %f1143;\n"
    "	mov.f32 	%f1145, %f55;\n"
    "	mad.f32 %f1146, %f1142, %f1144, %f1145;\n"
    "	mov.f32 	%f64, %f1146;\n"
    "	mov.f32 	%f1147, %f58;\n"
    "	mov.f32 	%f1148, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1149, %f1148;\n"
    "	mov.f32 	%f1150, %f64;\n"
    "	mad.f32 %f1151, %f1147, %f1149, %f1150;\n"
    "	mov.f32 	%f64, %f1151;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f1152, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1153, %f58;\n"
    "	mov.f32 	%f1154, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1155, %f64, %f1154;\n"
    "	ex2.approx.f32 	%f1156, %f1155;\n"
    "	mul.f32 	%f1157, %f1153, %f1156;\n"
    "	mov.f32 	%f1158, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p57, %f55, %f1158;\n"
    "	selp.f32 	%f1159, %f1152, %f1157, %p57;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f1160, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1161, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p58, %f55, %f1161;\n"
    "	selp.f32 	%f80, %f1160, %f1159, %p58;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f1162, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f1162;\n"
    "	mov.f32 	%f1163, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f1163;\n"
    "	mov.f32 	%f1164, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f1164;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f1165, %f81, %f99;\n"
    "	sub.f32 	%f101, %f1165, %f97;\n"
    "	mul.f32 	%f1166, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f1166;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f1167, %f2;\n"
    "	mov.f32 	%f1168, %f26;\n"
    "	mad.f32 	%f1169, %f1168, %f104, %f1167;\n"
    "	mov.f32 	%f2, %f1169;\n"
    "	mov.f32 	%f1170, %f4;\n"
    "	mov.f32 	%f1171, %f38;\n"
    "	mad.f32 	%f1172, %f1171, %f104, %f1170;\n"
    "	mov.f32 	%f4, %f1172;\n"
    "	mov.f32 	%f1173, %f6;\n"
    "	mov.f32 	%f1174, %f48;\n"
    "	mad.f32 	%f1175, %f1174, %f104, %f1173;\n"
    "	mov.f32 	%f6, %f1175;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_25858:\n"
    "	ld.shared.s32 	%r46, [%rd14+316];\n"
    "	add.s32 	%r27, %r46, %r6;\n"
    "	ld.shared.f32 	%f1176, [%rd15+304];\n"
    "	sub.f32 	%f1177, %f19, %f1176;\n"
    "	mov.f32 	%f1178, %f1177;\n"
    "	mul.f32 	%f1179, %f14, %f1178;\n"
    "	cvt.rni.f32.f32 	%f1180, %f1179;\n"
    "	mul.f32 	%f1181, %f13, %f1180;\n"
    "	sub.f32 	%f25, %f1177, %f1181;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1182, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1183, %f25, %f25, %f1182;\n"
    "	ld.shared.f32 	%f1184, [%rd15+308];\n"
    "	sub.f32 	%f1185, %f30, %f1184;\n"
    "	mov.f32 	%f1186, %f1185;\n"
    "	mov.f32 	%f1187, %f1186;\n"
    "	mul.f32 	%f1188, %f14, %f1186;\n"
    "	cvt.rni.f32.f32 	%f1189, %f1188;\n"
    "	mul.f32 	%f1190, %f13, %f1189;\n"
    "	sub.f32 	%f37, %f1185, %f1190;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1191, %f37, %f37, %f1183;\n"
    "	ld.shared.f32 	%f1192, [%rd15+312];\n"
    "	sub.f32 	%f1193, %f41, %f1192;\n"
    "	mov.f32 	%f1194, %f1193;\n"
    "	mul.f32 	%f1195, %f1193, %f14;\n"
    "	cvt.rni.f32.f32 	%f1196, %f1195;\n"
    "	mul.f32 	%f1197, %f13, %f1196;\n"
    "	sub.f32 	%f47, %f1193, %f1197;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1191;\n"
    "	mov.f32 	%f1198, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p59, %f49, %f1198;\n"
    "	@!%p59 bra 	$Lt_9_26370;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd55, %r27;\n"
    "	mul.wide.s32 	%rd56, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd56;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f1199, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1200, %f55, %f1199;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1200;\n"
    "	mov.f32 	%f1201, %f58;\n"
    "	mov.f32 	%f1202, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1203, %f1202;\n"
    "	mov.f32 	%f1204, %f55;\n"
    "	mad.f32 %f1205, %f1201, %f1203, %f1204;\n"
    "	mov.f32 	%f64, %f1205;\n"
    "	mov.f32 	%f1206, %f58;\n"
    "	mov.f32 	%f1207, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1208, %f1207;\n"
    "	mov.f32 	%f1209, %f64;\n"
    "	mad.f32 %f1210, %f1206, %f1208, %f1209;\n"
    "	mov.f32 	%f64, %f1210;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f1211, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1212, %f58;\n"
    "	mov.f32 	%f1213, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1214, %f64, %f1213;\n"
    "	ex2.approx.f32 	%f1215, %f1214;\n"
    "	mul.f32 	%f1216, %f1212, %f1215;\n"
    "	mov.f32 	%f1217, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p60, %f55, %f1217;\n"
    "	selp.f32 	%f1218, %f1211, %f1216, %p60;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f1219, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1220, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p61, %f55, %f1220;\n"
    "	selp.f32 	%f80, %f1219, %f1218, %p61;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f1221, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f1221;\n"
    "	mov.f32 	%f1222, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f1222;\n"
    "	mov.f32 	%f1223, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f1223;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f1224, %f81, %f99;\n"
    "	sub.f32 	%f101, %f1224, %f97;\n"
    "	mul.f32 	%f1225, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f1225;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f1226, %f2;\n"
    "	mov.f32 	%f1227, %f26;\n"
    "	mad.f32 	%f1228, %f1227, %f104, %f1226;\n"
    "	mov.f32 	%f2, %f1228;\n"
    "	mov.f32 	%f1229, %f4;\n"
    "	mov.f32 	%f1230, %f38;\n"
    "	mad.f32 	%f1231, %f1230, %f104, %f1229;\n"
    "	mov.f32 	%f4, %f1231;\n"
    "	mov.f32 	%f1232, %f6;\n"
    "	mov.f32 	%f1233, %f48;\n"
    "	mad.f32 	%f1234, %f1233, %f104, %f1232;\n"
    "	mov.f32 	%f6, %f1234;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_26370:\n"
    "	ld.shared.s32 	%r47, [%rd14+332];\n"
    "	add.s32 	%r27, %r47, %r6;\n"
    "	ld.shared.f32 	%f1235, [%rd15+320];\n"
    "	sub.f32 	%f1236, %f19, %f1235;\n"
    "	mov.f32 	%f1237, %f1236;\n"
    "	mul.f32 	%f1238, %f14, %f1237;\n"
    "	cvt.rni.f32.f32 	%f1239, %f1238;\n"
    "	mul.f32 	%f1240, %f13, %f1239;\n"
    "	sub.f32 	%f25, %f1236, %f1240;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1241, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1242, %f25, %f25, %f1241;\n"
    "	ld.shared.f32 	%f1243, [%rd15+324];\n"
    "	sub.f32 	%f1244, %f30, %f1243;\n"
    "	mov.f32 	%f1245, %f1244;\n"
    "	mov.f32 	%f1246, %f1245;\n"
    "	mul.f32 	%f1247, %f14, %f1245;\n"
    "	cvt.rni.f32.f32 	%f1248, %f1247;\n"
    "	mul.f32 	%f1249, %f13, %f1248;\n"
    "	sub.f32 	%f37, %f1244, %f1249;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1250, %f37, %f37, %f1242;\n"
    "	ld.shared.f32 	%f1251, [%rd15+328];\n"
    "	sub.f32 	%f1252, %f41, %f1251;\n"
    "	mov.f32 	%f1253, %f1252;\n"
    "	mul.f32 	%f1254, %f1252, %f14;\n"
    "	cvt.rni.f32.f32 	%f1255, %f1254;\n"
    "	mul.f32 	%f1256, %f13, %f1255;\n"
    "	sub.f32 	%f47, %f1252, %f1256;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1250;\n"
    "	mov.f32 	%f1257, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p62, %f49, %f1257;\n"
    "	@!%p62 bra 	$Lt_9_26882;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd57, %r27;\n"
    "	mul.wide.s32 	%rd58, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd58;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f1258, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1259, %f55, %f1258;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1259;\n"
    "	mov.f32 	%f1260, %f58;\n"
    "	mov.f32 	%f1261, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1262, %f1261;\n"
    "	mov.f32 	%f1263, %f55;\n"
    "	mad.f32 %f1264, %f1260, %f1262, %f1263;\n"
    "	mov.f32 	%f64, %f1264;\n"
    "	mov.f32 	%f1265, %f58;\n"
    "	mov.f32 	%f1266, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1267, %f1266;\n"
    "	mov.f32 	%f1268, %f64;\n"
    "	mad.f32 %f1269, %f1265, %f1267, %f1268;\n"
    "	mov.f32 	%f64, %f1269;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f1270, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1271, %f58;\n"
    "	mov.f32 	%f1272, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1273, %f64, %f1272;\n"
    "	ex2.approx.f32 	%f1274, %f1273;\n"
    "	mul.f32 	%f1275, %f1271, %f1274;\n"
    "	mov.f32 	%f1276, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p63, %f55, %f1276;\n"
    "	selp.f32 	%f1277, %f1270, %f1275, %p63;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f1278, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1279, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p64, %f55, %f1279;\n"
    "	selp.f32 	%f80, %f1278, %f1277, %p64;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f1280, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f1280;\n"
    "	mov.f32 	%f1281, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f1281;\n"
    "	mov.f32 	%f1282, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f1282;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f1283, %f81, %f99;\n"
    "	sub.f32 	%f101, %f1283, %f97;\n"
    "	mul.f32 	%f1284, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f1284;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f1285, %f2;\n"
    "	mov.f32 	%f1286, %f26;\n"
    "	mad.f32 	%f1287, %f1286, %f104, %f1285;\n"
    "	mov.f32 	%f2, %f1287;\n"
    "	mov.f32 	%f1288, %f4;\n"
    "	mov.f32 	%f1289, %f38;\n"
    "	mad.f32 	%f1290, %f1289, %f104, %f1288;\n"
    "	mov.f32 	%f4, %f1290;\n"
    "	mov.f32 	%f1291, %f6;\n"
    "	mov.f32 	%f1292, %f48;\n"
    "	mad.f32 	%f1293, %f1292, %f104, %f1291;\n"
    "	mov.f32 	%f6, %f1293;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_26882:\n"
    "	ld.shared.s32 	%r48, [%rd14+348];\n"
    "	add.s32 	%r27, %r48, %r6;\n"
    "	ld.shared.f32 	%f1294, [%rd15+336];\n"
    "	sub.f32 	%f1295, %f19, %f1294;\n"
    "	mov.f32 	%f1296, %f1295;\n"
    "	mul.f32 	%f1297, %f14, %f1296;\n"
    "	cvt.rni.f32.f32 	%f1298, %f1297;\n"
    "	mul.f32 	%f1299, %f13, %f1298;\n"
    "	sub.f32 	%f25, %f1295, %f1299;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1300, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1301, %f25, %f25, %f1300;\n"
    "	ld.shared.f32 	%f1302, [%rd15+340];\n"
    "	sub.f32 	%f1303, %f30, %f1302;\n"
    "	mov.f32 	%f1304, %f1303;\n"
    "	mov.f32 	%f1305, %f1304;\n"
    "	mul.f32 	%f1306, %f14, %f1304;\n"
    "	cvt.rni.f32.f32 	%f1307, %f1306;\n"
    "	mul.f32 	%f1308, %f13, %f1307;\n"
    "	sub.f32 	%f37, %f1303, %f1308;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1309, %f37, %f37, %f1301;\n"
    "	ld.shared.f32 	%f1310, [%rd15+344];\n"
    "	sub.f32 	%f1311, %f41, %f1310;\n"
    "	mov.f32 	%f1312, %f1311;\n"
    "	mul.f32 	%f1313, %f1311, %f14;\n"
    "	cvt.rni.f32.f32 	%f1314, %f1313;\n"
    "	mul.f32 	%f1315, %f13, %f1314;\n"
    "	sub.f32 	%f47, %f1311, %f1315;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1309;\n"
    "	mov.f32 	%f1316, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p65, %f49, %f1316;\n"
    "	@!%p65 bra 	$Lt_9_27394;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd59, %r27;\n"
    "	mul.wide.s32 	%rd60, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd60;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f1317, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1318, %f55, %f1317;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1318;\n"
    "	mov.f32 	%f1319, %f58;\n"
    "	mov.f32 	%f1320, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1321, %f1320;\n"
    "	mov.f32 	%f1322, %f55;\n"
    "	mad.f32 %f1323, %f1319, %f1321, %f1322;\n"
    "	mov.f32 	%f64, %f1323;\n"
    "	mov.f32 	%f1324, %f58;\n"
    "	mov.f32 	%f1325, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1326, %f1325;\n"
    "	mov.f32 	%f1327, %f64;\n"
    "	mad.f32 %f1328, %f1324, %f1326, %f1327;\n"
    "	mov.f32 	%f64, %f1328;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f1329, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1330, %f58;\n"
    "	mov.f32 	%f1331, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1332, %f64, %f1331;\n"
    "	ex2.approx.f32 	%f1333, %f1332;\n"
    "	mul.f32 	%f1334, %f1330, %f1333;\n"
    "	mov.f32 	%f1335, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p66, %f55, %f1335;\n"
    "	selp.f32 	%f1336, %f1329, %f1334, %p66;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f1337, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1338, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p67, %f55, %f1338;\n"
    "	selp.f32 	%f80, %f1337, %f1336, %p67;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f1339, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f1339;\n"
    "	mov.f32 	%f1340, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f1340;\n"
    "	mov.f32 	%f1341, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f1341;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f1342, %f81, %f99;\n"
    "	sub.f32 	%f101, %f1342, %f97;\n"
    "	mul.f32 	%f1343, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f1343;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f1344, %f2;\n"
    "	mov.f32 	%f1345, %f26;\n"
    "	mad.f32 	%f1346, %f1345, %f104, %f1344;\n"
    "	mov.f32 	%f2, %f1346;\n"
    "	mov.f32 	%f1347, %f4;\n"
    "	mov.f32 	%f1348, %f38;\n"
    "	mad.f32 	%f1349, %f1348, %f104, %f1347;\n"
    "	mov.f32 	%f4, %f1349;\n"
    "	mov.f32 	%f1350, %f6;\n"
    "	mov.f32 	%f1351, %f48;\n"
    "	mad.f32 	%f1352, %f1351, %f104, %f1350;\n"
    "	mov.f32 	%f6, %f1352;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_27394:\n"
    "	ld.shared.s32 	%r49, [%rd14+364];\n"
    "	add.s32 	%r27, %r49, %r6;\n"
    "	ld.shared.f32 	%f1353, [%rd15+352];\n"
    "	sub.f32 	%f1354, %f19, %f1353;\n"
    "	mov.f32 	%f1355, %f1354;\n"
    "	mul.f32 	%f1356, %f14, %f1355;\n"
    "	cvt.rni.f32.f32 	%f1357, %f1356;\n"
    "	mul.f32 	%f1358, %f13, %f1357;\n"
    "	sub.f32 	%f25, %f1354, %f1358;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1359, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1360, %f25, %f25, %f1359;\n"
    "	ld.shared.f32 	%f1361, [%rd15+356];\n"
    "	sub.f32 	%f1362, %f30, %f1361;\n"
    "	mov.f32 	%f1363, %f1362;\n"
    "	mov.f32 	%f1364, %f1363;\n"
    "	mul.f32 	%f1365, %f14, %f1363;\n"
    "	cvt.rni.f32.f32 	%f1366, %f1365;\n"
    "	mul.f32 	%f1367, %f13, %f1366;\n"
    "	sub.f32 	%f37, %f1362, %f1367;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1368, %f37, %f37, %f1360;\n"
    "	ld.shared.f32 	%f1369, [%rd15+360];\n"
    "	sub.f32 	%f1370, %f41, %f1369;\n"
    "	mov.f32 	%f1371, %f1370;\n"
    "	mul.f32 	%f1372, %f1370, %f14;\n"
    "	cvt.rni.f32.f32 	%f1373, %f1372;\n"
    "	mul.f32 	%f1374, %f13, %f1373;\n"
    "	sub.f32 	%f47, %f1370, %f1374;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1368;\n"
    "	mov.f32 	%f1375, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p68, %f49, %f1375;\n"
    "	@!%p68 bra 	$Lt_9_27906;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd61, %r27;\n"
    "	mul.wide.s32 	%rd62, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd62;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f1376, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1377, %f55, %f1376;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1377;\n"
    "	mov.f32 	%f1378, %f58;\n"
    "	mov.f32 	%f1379, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1380, %f1379;\n"
    "	mov.f32 	%f1381, %f55;\n"
    "	mad.f32 %f1382, %f1378, %f1380, %f1381;\n"
    "	mov.f32 	%f64, %f1382;\n"
    "	mov.f32 	%f1383, %f58;\n"
    "	mov.f32 	%f1384, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1385, %f1384;\n"
    "	mov.f32 	%f1386, %f64;\n"
    "	mad.f32 %f1387, %f1383, %f1385, %f1386;\n"
    "	mov.f32 	%f64, %f1387;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f1388, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1389, %f58;\n"
    "	mov.f32 	%f1390, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1391, %f64, %f1390;\n"
    "	ex2.approx.f32 	%f1392, %f1391;\n"
    "	mul.f32 	%f1393, %f1389, %f1392;\n"
    "	mov.f32 	%f1394, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p69, %f55, %f1394;\n"
    "	selp.f32 	%f1395, %f1388, %f1393, %p69;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f1396, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1397, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p70, %f55, %f1397;\n"
    "	selp.f32 	%f80, %f1396, %f1395, %p70;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f1398, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f1398;\n"
    "	mov.f32 	%f1399, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f1399;\n"
    "	mov.f32 	%f1400, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f1400;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f1401, %f81, %f99;\n"
    "	sub.f32 	%f101, %f1401, %f97;\n"
    "	mul.f32 	%f1402, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f1402;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f1403, %f2;\n"
    "	mov.f32 	%f1404, %f26;\n"
    "	mad.f32 	%f1405, %f1404, %f104, %f1403;\n"
    "	mov.f32 	%f2, %f1405;\n"
    "	mov.f32 	%f1406, %f4;\n"
    "	mov.f32 	%f1407, %f38;\n"
    "	mad.f32 	%f1408, %f1407, %f104, %f1406;\n"
    "	mov.f32 	%f4, %f1408;\n"
    "	mov.f32 	%f1409, %f6;\n"
    "	mov.f32 	%f1410, %f48;\n"
    "	mad.f32 	%f1411, %f1410, %f104, %f1409;\n"
    "	mov.f32 	%f6, %f1411;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_27906:\n"
    "	ld.shared.s32 	%r50, [%rd14+380];\n"
    "	add.s32 	%r27, %r50, %r6;\n"
    "	ld.shared.f32 	%f1412, [%rd15+368];\n"
    "	sub.f32 	%f1413, %f19, %f1412;\n"
    "	mov.f32 	%f1414, %f1413;\n"
    "	mul.f32 	%f1415, %f14, %f1414;\n"
    "	cvt.rni.f32.f32 	%f1416, %f1415;\n"
    "	mul.f32 	%f1417, %f13, %f1416;\n"
    "	sub.f32 	%f25, %f1413, %f1417;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1418, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1419, %f25, %f25, %f1418;\n"
    "	ld.shared.f32 	%f1420, [%rd15+372];\n"
    "	sub.f32 	%f1421, %f30, %f1420;\n"
    "	mov.f32 	%f1422, %f1421;\n"
    "	mov.f32 	%f1423, %f1422;\n"
    "	mul.f32 	%f1424, %f14, %f1422;\n"
    "	cvt.rni.f32.f32 	%f1425, %f1424;\n"
    "	mul.f32 	%f1426, %f13, %f1425;\n"
    "	sub.f32 	%f37, %f1421, %f1426;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1427, %f37, %f37, %f1419;\n"
    "	ld.shared.f32 	%f1428, [%rd15+376];\n"
    "	sub.f32 	%f1429, %f41, %f1428;\n"
    "	mov.f32 	%f1430, %f1429;\n"
    "	mul.f32 	%f1431, %f1429, %f14;\n"
    "	cvt.rni.f32.f32 	%f1432, %f1431;\n"
    "	mul.f32 	%f1433, %f13, %f1432;\n"
    "	sub.f32 	%f47, %f1429, %f1433;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1427;\n"
    "	mov.f32 	%f1434, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p71, %f49, %f1434;\n"
    "	@!%p71 bra 	$Lt_9_28418;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd63, %r27;\n"
    "	mul.wide.s32 	%rd64, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd64;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f1435, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1436, %f55, %f1435;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1436;\n"
    "	mov.f32 	%f1437, %f58;\n"
    "	mov.f32 	%f1438, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1439, %f1438;\n"
    "	mov.f32 	%f1440, %f55;\n"
    "	mad.f32 %f1441, %f1437, %f1439, %f1440;\n"
    "	mov.f32 	%f64, %f1441;\n"
    "	mov.f32 	%f1442, %f58;\n"
    "	mov.f32 	%f1443, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1444, %f1443;\n"
    "	mov.f32 	%f1445, %f64;\n"
    "	mad.f32 %f1446, %f1442, %f1444, %f1445;\n"
    "	mov.f32 	%f64, %f1446;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f1447, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1448, %f58;\n"
    "	mov.f32 	%f1449, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1450, %f64, %f1449;\n"
    "	ex2.approx.f32 	%f1451, %f1450;\n"
    "	mul.f32 	%f1452, %f1448, %f1451;\n"
    "	mov.f32 	%f1453, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p72, %f55, %f1453;\n"
    "	selp.f32 	%f1454, %f1447, %f1452, %p72;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f1455, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1456, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p73, %f55, %f1456;\n"
    "	selp.f32 	%f80, %f1455, %f1454, %p73;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f1457, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f1457;\n"
    "	mov.f32 	%f1458, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f1458;\n"
    "	mov.f32 	%f1459, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f1459;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f1460, %f81, %f99;\n"
    "	sub.f32 	%f101, %f1460, %f97;\n"
    "	mul.f32 	%f1461, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f1461;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f1462, %f2;\n"
    "	mov.f32 	%f1463, %f26;\n"
    "	mad.f32 	%f1464, %f1463, %f104, %f1462;\n"
    "	mov.f32 	%f2, %f1464;\n"
    "	mov.f32 	%f1465, %f4;\n"
    "	mov.f32 	%f1466, %f38;\n"
    "	mad.f32 	%f1467, %f1466, %f104, %f1465;\n"
    "	mov.f32 	%f4, %f1467;\n"
    "	mov.f32 	%f1468, %f6;\n"
    "	mov.f32 	%f1469, %f48;\n"
    "	mad.f32 	%f1470, %f1469, %f104, %f1468;\n"
    "	mov.f32 	%f6, %f1470;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_28418:\n"
    "	ld.shared.s32 	%r51, [%rd14+396];\n"
    "	add.s32 	%r27, %r51, %r6;\n"
    "	ld.shared.f32 	%f1471, [%rd15+384];\n"
    "	sub.f32 	%f1472, %f19, %f1471;\n"
    "	mov.f32 	%f1473, %f1472;\n"
    "	mul.f32 	%f1474, %f14, %f1473;\n"
    "	cvt.rni.f32.f32 	%f1475, %f1474;\n"
    "	mul.f32 	%f1476, %f13, %f1475;\n"
    "	sub.f32 	%f25, %f1472, %f1476;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1477, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1478, %f25, %f25, %f1477;\n"
    "	ld.shared.f32 	%f1479, [%rd15+388];\n"
    "	sub.f32 	%f1480, %f30, %f1479;\n"
    "	mov.f32 	%f1481, %f1480;\n"
    "	mov.f32 	%f1482, %f1481;\n"
    "	mul.f32 	%f1483, %f14, %f1481;\n"
    "	cvt.rni.f32.f32 	%f1484, %f1483;\n"
    "	mul.f32 	%f1485, %f13, %f1484;\n"
    "	sub.f32 	%f37, %f1480, %f1485;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1486, %f37, %f37, %f1478;\n"
    "	ld.shared.f32 	%f1487, [%rd15+392];\n"
    "	sub.f32 	%f1488, %f41, %f1487;\n"
    "	mov.f32 	%f1489, %f1488;\n"
    "	mul.f32 	%f1490, %f1488, %f14;\n"
    "	cvt.rni.f32.f32 	%f1491, %f1490;\n"
    "	mul.f32 	%f1492, %f13, %f1491;\n"
    "	sub.f32 	%f47, %f1488, %f1492;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1486;\n"
    "	mov.f32 	%f1493, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p74, %f49, %f1493;\n"
    "	@!%p74 bra 	$Lt_9_28930;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd65, %r27;\n"
    "	mul.wide.s32 	%rd66, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd66;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f1494, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1495, %f55, %f1494;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1495;\n"
    "	mov.f32 	%f1496, %f58;\n"
    "	mov.f32 	%f1497, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1498, %f1497;\n"
    "	mov.f32 	%f1499, %f55;\n"
    "	mad.f32 %f1500, %f1496, %f1498, %f1499;\n"
    "	mov.f32 	%f64, %f1500;\n"
    "	mov.f32 	%f1501, %f58;\n"
    "	mov.f32 	%f1502, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1503, %f1502;\n"
    "	mov.f32 	%f1504, %f64;\n"
    "	mad.f32 %f1505, %f1501, %f1503, %f1504;\n"
    "	mov.f32 	%f64, %f1505;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f1506, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1507, %f58;\n"
    "	mov.f32 	%f1508, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1509, %f64, %f1508;\n"
    "	ex2.approx.f32 	%f1510, %f1509;\n"
    "	mul.f32 	%f1511, %f1507, %f1510;\n"
    "	mov.f32 	%f1512, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p75, %f55, %f1512;\n"
    "	selp.f32 	%f1513, %f1506, %f1511, %p75;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f1514, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1515, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p76, %f55, %f1515;\n"
    "	selp.f32 	%f80, %f1514, %f1513, %p76;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f1516, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f1516;\n"
    "	mov.f32 	%f1517, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f1517;\n"
    "	mov.f32 	%f1518, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f1518;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f1519, %f81, %f99;\n"
    "	sub.f32 	%f101, %f1519, %f97;\n"
    "	mul.f32 	%f1520, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f1520;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f1521, %f2;\n"
    "	mov.f32 	%f1522, %f26;\n"
    "	mad.f32 	%f1523, %f1522, %f104, %f1521;\n"
    "	mov.f32 	%f2, %f1523;\n"
    "	mov.f32 	%f1524, %f4;\n"
    "	mov.f32 	%f1525, %f38;\n"
    "	mad.f32 	%f1526, %f1525, %f104, %f1524;\n"
    "	mov.f32 	%f4, %f1526;\n"
    "	mov.f32 	%f1527, %f6;\n"
    "	mov.f32 	%f1528, %f48;\n"
    "	mad.f32 	%f1529, %f1528, %f104, %f1527;\n"
    "	mov.f32 	%f6, %f1529;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_28930:\n"
    "	ld.shared.s32 	%r52, [%rd14+412];\n"
    "	add.s32 	%r27, %r52, %r6;\n"
    "	ld.shared.f32 	%f1530, [%rd15+400];\n"
    "	sub.f32 	%f1531, %f19, %f1530;\n"
    "	mov.f32 	%f1532, %f1531;\n"
    "	mul.f32 	%f1533, %f14, %f1532;\n"
    "	cvt.rni.f32.f32 	%f1534, %f1533;\n"
    "	mul.f32 	%f1535, %f13, %f1534;\n"
    "	sub.f32 	%f25, %f1531, %f1535;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1536, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1537, %f25, %f25, %f1536;\n"
    "	ld.shared.f32 	%f1538, [%rd15+404];\n"
    "	sub.f32 	%f1539, %f30, %f1538;\n"
    "	mov.f32 	%f1540, %f1539;\n"
    "	mov.f32 	%f1541, %f1540;\n"
    "	mul.f32 	%f1542, %f14, %f1540;\n"
    "	cvt.rni.f32.f32 	%f1543, %f1542;\n"
    "	mul.f32 	%f1544, %f13, %f1543;\n"
    "	sub.f32 	%f37, %f1539, %f1544;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1545, %f37, %f37, %f1537;\n"
    "	ld.shared.f32 	%f1546, [%rd15+408];\n"
    "	sub.f32 	%f1547, %f41, %f1546;\n"
    "	mov.f32 	%f1548, %f1547;\n"
    "	mul.f32 	%f1549, %f1547, %f14;\n"
    "	cvt.rni.f32.f32 	%f1550, %f1549;\n"
    "	mul.f32 	%f1551, %f13, %f1550;\n"
    "	sub.f32 	%f47, %f1547, %f1551;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1545;\n"
    "	mov.f32 	%f1552, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p77, %f49, %f1552;\n"
    "	@!%p77 bra 	$Lt_9_29442;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd67, %r27;\n"
    "	mul.wide.s32 	%rd68, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd68;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f1553, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1554, %f55, %f1553;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1554;\n"
    "	mov.f32 	%f1555, %f58;\n"
    "	mov.f32 	%f1556, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1557, %f1556;\n"
    "	mov.f32 	%f1558, %f55;\n"
    "	mad.f32 %f1559, %f1555, %f1557, %f1558;\n"
    "	mov.f32 	%f64, %f1559;\n"
    "	mov.f32 	%f1560, %f58;\n"
    "	mov.f32 	%f1561, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1562, %f1561;\n"
    "	mov.f32 	%f1563, %f64;\n"
    "	mad.f32 %f1564, %f1560, %f1562, %f1563;\n"
    "	mov.f32 	%f64, %f1564;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f1565, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1566, %f58;\n"
    "	mov.f32 	%f1567, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1568, %f64, %f1567;\n"
    "	ex2.approx.f32 	%f1569, %f1568;\n"
    "	mul.f32 	%f1570, %f1566, %f1569;\n"
    "	mov.f32 	%f1571, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p78, %f55, %f1571;\n"
    "	selp.f32 	%f1572, %f1565, %f1570, %p78;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f1573, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1574, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p79, %f55, %f1574;\n"
    "	selp.f32 	%f80, %f1573, %f1572, %p79;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f1575, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f1575;\n"
    "	mov.f32 	%f1576, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f1576;\n"
    "	mov.f32 	%f1577, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f1577;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f1578, %f81, %f99;\n"
    "	sub.f32 	%f101, %f1578, %f97;\n"
    "	mul.f32 	%f1579, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f1579;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f1580, %f2;\n"
    "	mov.f32 	%f1581, %f26;\n"
    "	mad.f32 	%f1582, %f1581, %f104, %f1580;\n"
    "	mov.f32 	%f2, %f1582;\n"
    "	mov.f32 	%f1583, %f4;\n"
    "	mov.f32 	%f1584, %f38;\n"
    "	mad.f32 	%f1585, %f1584, %f104, %f1583;\n"
    "	mov.f32 	%f4, %f1585;\n"
    "	mov.f32 	%f1586, %f6;\n"
    "	mov.f32 	%f1587, %f48;\n"
    "	mad.f32 	%f1588, %f1587, %f104, %f1586;\n"
    "	mov.f32 	%f6, %f1588;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_29442:\n"
    "	ld.shared.s32 	%r53, [%rd14+428];\n"
    "	add.s32 	%r27, %r53, %r6;\n"
    "	ld.shared.f32 	%f1589, [%rd15+416];\n"
    "	sub.f32 	%f1590, %f19, %f1589;\n"
    "	mov.f32 	%f1591, %f1590;\n"
    "	mul.f32 	%f1592, %f14, %f1591;\n"
    "	cvt.rni.f32.f32 	%f1593, %f1592;\n"
    "	mul.f32 	%f1594, %f13, %f1593;\n"
    "	sub.f32 	%f25, %f1590, %f1594;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1595, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1596, %f25, %f25, %f1595;\n"
    "	ld.shared.f32 	%f1597, [%rd15+420];\n"
    "	sub.f32 	%f1598, %f30, %f1597;\n"
    "	mov.f32 	%f1599, %f1598;\n"
    "	mov.f32 	%f1600, %f1599;\n"
    "	mul.f32 	%f1601, %f14, %f1599;\n"
    "	cvt.rni.f32.f32 	%f1602, %f1601;\n"
    "	mul.f32 	%f1603, %f13, %f1602;\n"
    "	sub.f32 	%f37, %f1598, %f1603;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1604, %f37, %f37, %f1596;\n"
    "	ld.shared.f32 	%f1605, [%rd15+424];\n"
    "	sub.f32 	%f1606, %f41, %f1605;\n"
    "	mov.f32 	%f1607, %f1606;\n"
    "	mul.f32 	%f1608, %f1606, %f14;\n"
    "	cvt.rni.f32.f32 	%f1609, %f1608;\n"
    "	mul.f32 	%f1610, %f13, %f1609;\n"
    "	sub.f32 	%f47, %f1606, %f1610;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1604;\n"
    "	mov.f32 	%f1611, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p80, %f49, %f1611;\n"
    "	@!%p80 bra 	$Lt_9_29954;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd69, %r27;\n"
    "	mul.wide.s32 	%rd70, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd70;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f1612, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1613, %f55, %f1612;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1613;\n"
    "	mov.f32 	%f1614, %f58;\n"
    "	mov.f32 	%f1615, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1616, %f1615;\n"
    "	mov.f32 	%f1617, %f55;\n"
    "	mad.f32 %f1618, %f1614, %f1616, %f1617;\n"
    "	mov.f32 	%f64, %f1618;\n"
    "	mov.f32 	%f1619, %f58;\n"
    "	mov.f32 	%f1620, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1621, %f1620;\n"
    "	mov.f32 	%f1622, %f64;\n"
    "	mad.f32 %f1623, %f1619, %f1621, %f1622;\n"
    "	mov.f32 	%f64, %f1623;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f1624, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1625, %f58;\n"
    "	mov.f32 	%f1626, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1627, %f64, %f1626;\n"
    "	ex2.approx.f32 	%f1628, %f1627;\n"
    "	mul.f32 	%f1629, %f1625, %f1628;\n"
    "	mov.f32 	%f1630, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p81, %f55, %f1630;\n"
    "	selp.f32 	%f1631, %f1624, %f1629, %p81;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f1632, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1633, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p82, %f55, %f1633;\n"
    "	selp.f32 	%f80, %f1632, %f1631, %p82;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f1634, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f1634;\n"
    "	mov.f32 	%f1635, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f1635;\n"
    "	mov.f32 	%f1636, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f1636;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f1637, %f81, %f99;\n"
    "	sub.f32 	%f101, %f1637, %f97;\n"
    "	mul.f32 	%f1638, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f1638;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f1639, %f2;\n"
    "	mov.f32 	%f1640, %f26;\n"
    "	mad.f32 	%f1641, %f1640, %f104, %f1639;\n"
    "	mov.f32 	%f2, %f1641;\n"
    "	mov.f32 	%f1642, %f4;\n"
    "	mov.f32 	%f1643, %f38;\n"
    "	mad.f32 	%f1644, %f1643, %f104, %f1642;\n"
    "	mov.f32 	%f4, %f1644;\n"
    "	mov.f32 	%f1645, %f6;\n"
    "	mov.f32 	%f1646, %f48;\n"
    "	mad.f32 	%f1647, %f1646, %f104, %f1645;\n"
    "	mov.f32 	%f6, %f1647;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_29954:\n"
    "	ld.shared.s32 	%r54, [%rd14+444];\n"
    "	add.s32 	%r27, %r54, %r6;\n"
    "	ld.shared.f32 	%f1648, [%rd15+432];\n"
    "	sub.f32 	%f1649, %f19, %f1648;\n"
    "	mov.f32 	%f1650, %f1649;\n"
    "	mul.f32 	%f1651, %f14, %f1650;\n"
    "	cvt.rni.f32.f32 	%f1652, %f1651;\n"
    "	mul.f32 	%f1653, %f13, %f1652;\n"
    "	sub.f32 	%f25, %f1649, %f1653;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1654, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1655, %f25, %f25, %f1654;\n"
    "	ld.shared.f32 	%f1656, [%rd15+436];\n"
    "	sub.f32 	%f1657, %f30, %f1656;\n"
    "	mov.f32 	%f1658, %f1657;\n"
    "	mov.f32 	%f1659, %f1658;\n"
    "	mul.f32 	%f1660, %f14, %f1658;\n"
    "	cvt.rni.f32.f32 	%f1661, %f1660;\n"
    "	mul.f32 	%f1662, %f13, %f1661;\n"
    "	sub.f32 	%f37, %f1657, %f1662;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1663, %f37, %f37, %f1655;\n"
    "	ld.shared.f32 	%f1664, [%rd15+440];\n"
    "	sub.f32 	%f1665, %f41, %f1664;\n"
    "	mov.f32 	%f1666, %f1665;\n"
    "	mul.f32 	%f1667, %f1665, %f14;\n"
    "	cvt.rni.f32.f32 	%f1668, %f1667;\n"
    "	mul.f32 	%f1669, %f13, %f1668;\n"
    "	sub.f32 	%f47, %f1665, %f1669;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1663;\n"
    "	mov.f32 	%f1670, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p83, %f49, %f1670;\n"
    "	@!%p83 bra 	$Lt_9_30466;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd71, %r27;\n"
    "	mul.wide.s32 	%rd72, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd72;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f1671, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1672, %f55, %f1671;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1672;\n"
    "	mov.f32 	%f1673, %f58;\n"
    "	mov.f32 	%f1674, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1675, %f1674;\n"
    "	mov.f32 	%f1676, %f55;\n"
    "	mad.f32 %f1677, %f1673, %f1675, %f1676;\n"
    "	mov.f32 	%f64, %f1677;\n"
    "	mov.f32 	%f1678, %f58;\n"
    "	mov.f32 	%f1679, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1680, %f1679;\n"
    "	mov.f32 	%f1681, %f64;\n"
    "	mad.f32 %f1682, %f1678, %f1680, %f1681;\n"
    "	mov.f32 	%f64, %f1682;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f1683, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1684, %f58;\n"
    "	mov.f32 	%f1685, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1686, %f64, %f1685;\n"
    "	ex2.approx.f32 	%f1687, %f1686;\n"
    "	mul.f32 	%f1688, %f1684, %f1687;\n"
    "	mov.f32 	%f1689, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p84, %f55, %f1689;\n"
    "	selp.f32 	%f1690, %f1683, %f1688, %p84;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f1691, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1692, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p85, %f55, %f1692;\n"
    "	selp.f32 	%f80, %f1691, %f1690, %p85;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f1693, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f1693;\n"
    "	mov.f32 	%f1694, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f1694;\n"
    "	mov.f32 	%f1695, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f1695;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f1696, %f81, %f99;\n"
    "	sub.f32 	%f101, %f1696, %f97;\n"
    "	mul.f32 	%f1697, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f1697;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f1698, %f2;\n"
    "	mov.f32 	%f1699, %f26;\n"
    "	mad.f32 	%f1700, %f1699, %f104, %f1698;\n"
    "	mov.f32 	%f2, %f1700;\n"
    "	mov.f32 	%f1701, %f4;\n"
    "	mov.f32 	%f1702, %f38;\n"
    "	mad.f32 	%f1703, %f1702, %f104, %f1701;\n"
    "	mov.f32 	%f4, %f1703;\n"
    "	mov.f32 	%f1704, %f6;\n"
    "	mov.f32 	%f1705, %f48;\n"
    "	mad.f32 	%f1706, %f1705, %f104, %f1704;\n"
    "	mov.f32 	%f6, %f1706;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_30466:\n"
    "	ld.shared.s32 	%r55, [%rd14+460];\n"
    "	add.s32 	%r27, %r55, %r6;\n"
    "	ld.shared.f32 	%f1707, [%rd15+448];\n"
    "	sub.f32 	%f1708, %f19, %f1707;\n"
    "	mov.f32 	%f1709, %f1708;\n"
    "	mul.f32 	%f1710, %f14, %f1709;\n"
    "	cvt.rni.f32.f32 	%f1711, %f1710;\n"
    "	mul.f32 	%f1712, %f13, %f1711;\n"
    "	sub.f32 	%f25, %f1708, %f1712;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1713, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1714, %f25, %f25, %f1713;\n"
    "	ld.shared.f32 	%f1715, [%rd15+452];\n"
    "	sub.f32 	%f1716, %f30, %f1715;\n"
    "	mov.f32 	%f1717, %f1716;\n"
    "	mov.f32 	%f1718, %f1717;\n"
    "	mul.f32 	%f1719, %f14, %f1717;\n"
    "	cvt.rni.f32.f32 	%f1720, %f1719;\n"
    "	mul.f32 	%f1721, %f13, %f1720;\n"
    "	sub.f32 	%f37, %f1716, %f1721;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1722, %f37, %f37, %f1714;\n"
    "	ld.shared.f32 	%f1723, [%rd15+456];\n"
    "	sub.f32 	%f1724, %f41, %f1723;\n"
    "	mov.f32 	%f1725, %f1724;\n"
    "	mul.f32 	%f1726, %f1724, %f14;\n"
    "	cvt.rni.f32.f32 	%f1727, %f1726;\n"
    "	mul.f32 	%f1728, %f13, %f1727;\n"
    "	sub.f32 	%f47, %f1724, %f1728;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1722;\n"
    "	mov.f32 	%f1729, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p86, %f49, %f1729;\n"
    "	@!%p86 bra 	$Lt_9_30978;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd73, %r27;\n"
    "	mul.wide.s32 	%rd74, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd74;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f1730, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1731, %f55, %f1730;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1731;\n"
    "	mov.f32 	%f1732, %f58;\n"
    "	mov.f32 	%f1733, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1734, %f1733;\n"
    "	mov.f32 	%f1735, %f55;\n"
    "	mad.f32 %f1736, %f1732, %f1734, %f1735;\n"
    "	mov.f32 	%f64, %f1736;\n"
    "	mov.f32 	%f1737, %f58;\n"
    "	mov.f32 	%f1738, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1739, %f1738;\n"
    "	mov.f32 	%f1740, %f64;\n"
    "	mad.f32 %f1741, %f1737, %f1739, %f1740;\n"
    "	mov.f32 	%f64, %f1741;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f1742, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1743, %f58;\n"
    "	mov.f32 	%f1744, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1745, %f64, %f1744;\n"
    "	ex2.approx.f32 	%f1746, %f1745;\n"
    "	mul.f32 	%f1747, %f1743, %f1746;\n"
    "	mov.f32 	%f1748, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p87, %f55, %f1748;\n"
    "	selp.f32 	%f1749, %f1742, %f1747, %p87;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f1750, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1751, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p88, %f55, %f1751;\n"
    "	selp.f32 	%f80, %f1750, %f1749, %p88;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f1752, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f1752;\n"
    "	mov.f32 	%f1753, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f1753;\n"
    "	mov.f32 	%f1754, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f1754;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f1755, %f81, %f99;\n"
    "	sub.f32 	%f101, %f1755, %f97;\n"
    "	mul.f32 	%f1756, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f1756;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f1757, %f2;\n"
    "	mov.f32 	%f1758, %f26;\n"
    "	mad.f32 	%f1759, %f1758, %f104, %f1757;\n"
    "	mov.f32 	%f2, %f1759;\n"
    "	mov.f32 	%f1760, %f4;\n"
    "	mov.f32 	%f1761, %f38;\n"
    "	mad.f32 	%f1762, %f1761, %f104, %f1760;\n"
    "	mov.f32 	%f4, %f1762;\n"
    "	mov.f32 	%f1763, %f6;\n"
    "	mov.f32 	%f1764, %f48;\n"
    "	mad.f32 	%f1765, %f1764, %f104, %f1763;\n"
    "	mov.f32 	%f6, %f1765;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_30978:\n"
    "	ld.shared.s32 	%r56, [%rd14+476];\n"
    "	add.s32 	%r27, %r56, %r6;\n"
    "	ld.shared.f32 	%f1766, [%rd15+464];\n"
    "	sub.f32 	%f1767, %f19, %f1766;\n"
    "	mov.f32 	%f1768, %f1767;\n"
    "	mul.f32 	%f1769, %f14, %f1768;\n"
    "	cvt.rni.f32.f32 	%f1770, %f1769;\n"
    "	mul.f32 	%f1771, %f13, %f1770;\n"
    "	sub.f32 	%f25, %f1767, %f1771;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1772, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1773, %f25, %f25, %f1772;\n"
    "	ld.shared.f32 	%f1774, [%rd15+468];\n"
    "	sub.f32 	%f1775, %f30, %f1774;\n"
    "	mov.f32 	%f1776, %f1775;\n"
    "	mov.f32 	%f1777, %f1776;\n"
    "	mul.f32 	%f1778, %f14, %f1776;\n"
    "	cvt.rni.f32.f32 	%f1779, %f1778;\n"
    "	mul.f32 	%f1780, %f13, %f1779;\n"
    "	sub.f32 	%f37, %f1775, %f1780;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1781, %f37, %f37, %f1773;\n"
    "	ld.shared.f32 	%f1782, [%rd15+472];\n"
    "	sub.f32 	%f1783, %f41, %f1782;\n"
    "	mov.f32 	%f1784, %f1783;\n"
    "	mul.f32 	%f1785, %f1783, %f14;\n"
    "	cvt.rni.f32.f32 	%f1786, %f1785;\n"
    "	mul.f32 	%f1787, %f13, %f1786;\n"
    "	sub.f32 	%f47, %f1783, %f1787;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1781;\n"
    "	mov.f32 	%f1788, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p89, %f49, %f1788;\n"
    "	@!%p89 bra 	$Lt_9_31490;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd75, %r27;\n"
    "	mul.wide.s32 	%rd76, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd76;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f1789, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1790, %f55, %f1789;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1790;\n"
    "	mov.f32 	%f1791, %f58;\n"
    "	mov.f32 	%f1792, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1793, %f1792;\n"
    "	mov.f32 	%f1794, %f55;\n"
    "	mad.f32 %f1795, %f1791, %f1793, %f1794;\n"
    "	mov.f32 	%f64, %f1795;\n"
    "	mov.f32 	%f1796, %f58;\n"
    "	mov.f32 	%f1797, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1798, %f1797;\n"
    "	mov.f32 	%f1799, %f64;\n"
    "	mad.f32 %f1800, %f1796, %f1798, %f1799;\n"
    "	mov.f32 	%f64, %f1800;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f1801, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1802, %f58;\n"
    "	mov.f32 	%f1803, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1804, %f64, %f1803;\n"
    "	ex2.approx.f32 	%f1805, %f1804;\n"
    "	mul.f32 	%f1806, %f1802, %f1805;\n"
    "	mov.f32 	%f1807, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p90, %f55, %f1807;\n"
    "	selp.f32 	%f1808, %f1801, %f1806, %p90;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f1809, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1810, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p91, %f55, %f1810;\n"
    "	selp.f32 	%f80, %f1809, %f1808, %p91;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f1811, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f1811;\n"
    "	mov.f32 	%f1812, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f1812;\n"
    "	mov.f32 	%f1813, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f1813;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f1814, %f81, %f99;\n"
    "	sub.f32 	%f101, %f1814, %f97;\n"
    "	mul.f32 	%f1815, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f1815;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f1816, %f2;\n"
    "	mov.f32 	%f1817, %f26;\n"
    "	mad.f32 	%f1818, %f1817, %f104, %f1816;\n"
    "	mov.f32 	%f2, %f1818;\n"
    "	mov.f32 	%f1819, %f4;\n"
    "	mov.f32 	%f1820, %f38;\n"
    "	mad.f32 	%f1821, %f1820, %f104, %f1819;\n"
    "	mov.f32 	%f4, %f1821;\n"
    "	mov.f32 	%f1822, %f6;\n"
    "	mov.f32 	%f1823, %f48;\n"
    "	mad.f32 	%f1824, %f1823, %f104, %f1822;\n"
    "	mov.f32 	%f6, %f1824;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_31490:\n"
    "	ld.shared.s32 	%r57, [%rd14+492];\n"
    "	add.s32 	%r27, %r57, %r6;\n"
    "	ld.shared.f32 	%f1825, [%rd15+480];\n"
    "	sub.f32 	%f1826, %f19, %f1825;\n"
    "	mov.f32 	%f1827, %f1826;\n"
    "	mul.f32 	%f1828, %f14, %f1827;\n"
    "	cvt.rni.f32.f32 	%f1829, %f1828;\n"
    "	mul.f32 	%f1830, %f13, %f1829;\n"
    "	sub.f32 	%f25, %f1826, %f1830;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1831, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1832, %f25, %f25, %f1831;\n"
    "	ld.shared.f32 	%f1833, [%rd15+484];\n"
    "	sub.f32 	%f1834, %f30, %f1833;\n"
    "	mov.f32 	%f1835, %f1834;\n"
    "	mov.f32 	%f1836, %f1835;\n"
    "	mul.f32 	%f1837, %f14, %f1835;\n"
    "	cvt.rni.f32.f32 	%f1838, %f1837;\n"
    "	mul.f32 	%f1839, %f13, %f1838;\n"
    "	sub.f32 	%f37, %f1834, %f1839;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1840, %f37, %f37, %f1832;\n"
    "	ld.shared.f32 	%f1841, [%rd15+488];\n"
    "	sub.f32 	%f1842, %f41, %f1841;\n"
    "	mov.f32 	%f1843, %f1842;\n"
    "	mul.f32 	%f1844, %f1842, %f14;\n"
    "	cvt.rni.f32.f32 	%f1845, %f1844;\n"
    "	mul.f32 	%f1846, %f13, %f1845;\n"
    "	sub.f32 	%f47, %f1842, %f1846;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1840;\n"
    "	mov.f32 	%f1847, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p92, %f49, %f1847;\n"
    "	@!%p92 bra 	$Lt_9_32002;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd77, %r27;\n"
    "	mul.wide.s32 	%rd78, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd78;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f1848, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1849, %f55, %f1848;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1849;\n"
    "	mov.f32 	%f1850, %f58;\n"
    "	mov.f32 	%f1851, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1852, %f1851;\n"
    "	mov.f32 	%f1853, %f55;\n"
    "	mad.f32 %f1854, %f1850, %f1852, %f1853;\n"
    "	mov.f32 	%f64, %f1854;\n"
    "	mov.f32 	%f1855, %f58;\n"
    "	mov.f32 	%f1856, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1857, %f1856;\n"
    "	mov.f32 	%f1858, %f64;\n"
    "	mad.f32 %f1859, %f1855, %f1857, %f1858;\n"
    "	mov.f32 	%f64, %f1859;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f1860, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1861, %f58;\n"
    "	mov.f32 	%f1862, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1863, %f64, %f1862;\n"
    "	ex2.approx.f32 	%f1864, %f1863;\n"
    "	mul.f32 	%f1865, %f1861, %f1864;\n"
    "	mov.f32 	%f1866, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p93, %f55, %f1866;\n"
    "	selp.f32 	%f1867, %f1860, %f1865, %p93;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f1868, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1869, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p94, %f55, %f1869;\n"
    "	selp.f32 	%f80, %f1868, %f1867, %p94;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f1870, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f1870;\n"
    "	mov.f32 	%f1871, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f1871;\n"
    "	mov.f32 	%f1872, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f1872;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f1873, %f81, %f99;\n"
    "	sub.f32 	%f101, %f1873, %f97;\n"
    "	mul.f32 	%f1874, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f1874;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f1875, %f2;\n"
    "	mov.f32 	%f1876, %f26;\n"
    "	mad.f32 	%f1877, %f1876, %f104, %f1875;\n"
    "	mov.f32 	%f2, %f1877;\n"
    "	mov.f32 	%f1878, %f4;\n"
    "	mov.f32 	%f1879, %f38;\n"
    "	mad.f32 	%f1880, %f1879, %f104, %f1878;\n"
    "	mov.f32 	%f4, %f1880;\n"
    "	mov.f32 	%f1881, %f6;\n"
    "	mov.f32 	%f1882, %f48;\n"
    "	mad.f32 	%f1883, %f1882, %f104, %f1881;\n"
    "	mov.f32 	%f6, %f1883;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_32002:\n"
    "	ld.shared.s32 	%r58, [%rd14+508];\n"
    "	add.s32 	%r27, %r58, %r6;\n"
    "	ld.shared.f32 	%f1884, [%rd15+496];\n"
    "	sub.f32 	%f1885, %f19, %f1884;\n"
    "	mov.f32 	%f1886, %f1885;\n"
    "	mul.f32 	%f1887, %f14, %f1886;\n"
    "	cvt.rni.f32.f32 	%f1888, %f1887;\n"
    "	mul.f32 	%f1889, %f13, %f1888;\n"
    "	sub.f32 	%f25, %f1885, %f1889;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1890, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1891, %f25, %f25, %f1890;\n"
    "	ld.shared.f32 	%f1892, [%rd15+500];\n"
    "	sub.f32 	%f1893, %f30, %f1892;\n"
    "	mov.f32 	%f1894, %f1893;\n"
    "	mov.f32 	%f1895, %f1894;\n"
    "	mul.f32 	%f1896, %f14, %f1894;\n"
    "	cvt.rni.f32.f32 	%f1897, %f1896;\n"
    "	mul.f32 	%f1898, %f13, %f1897;\n"
    "	sub.f32 	%f37, %f1893, %f1898;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1899, %f37, %f37, %f1891;\n"
    "	ld.shared.f32 	%f1900, [%rd15+504];\n"
    "	sub.f32 	%f1901, %f41, %f1900;\n"
    "	mov.f32 	%f1902, %f1901;\n"
    "	mul.f32 	%f1903, %f1901, %f14;\n"
    "	cvt.rni.f32.f32 	%f1904, %f1903;\n"
    "	mul.f32 	%f1905, %f13, %f1904;\n"
    "	sub.f32 	%f47, %f1901, %f1905;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1899;\n"
    "	mov.f32 	%f1906, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p95, %f49, %f1906;\n"
    "	@!%p95 bra 	$Lt_9_32514;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd79, %r27;\n"
    "	mul.wide.s32 	%rd80, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd80;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f1907, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1908, %f55, %f1907;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1908;\n"
    "	mov.f32 	%f1909, %f58;\n"
    "	mov.f32 	%f1910, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1911, %f1910;\n"
    "	mov.f32 	%f1912, %f55;\n"
    "	mad.f32 %f1913, %f1909, %f1911, %f1912;\n"
    "	mov.f32 	%f64, %f1913;\n"
    "	mov.f32 	%f1914, %f58;\n"
    "	mov.f32 	%f1915, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1916, %f1915;\n"
    "	mov.f32 	%f1917, %f64;\n"
    "	mad.f32 %f1918, %f1914, %f1916, %f1917;\n"
    "	mov.f32 	%f64, %f1918;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f1919, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1920, %f58;\n"
    "	mov.f32 	%f1921, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1922, %f64, %f1921;\n"
    "	ex2.approx.f32 	%f1923, %f1922;\n"
    "	mul.f32 	%f1924, %f1920, %f1923;\n"
    "	mov.f32 	%f1925, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p96, %f55, %f1925;\n"
    "	selp.f32 	%f1926, %f1919, %f1924, %p96;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f1927, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1928, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p97, %f55, %f1928;\n"
    "	selp.f32 	%f80, %f1927, %f1926, %p97;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f1929, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f1929;\n"
    "	mov.f32 	%f1930, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f1930;\n"
    "	mov.f32 	%f1931, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f1931;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f1932, %f81, %f99;\n"
    "	sub.f32 	%f101, %f1932, %f97;\n"
    "	mul.f32 	%f1933, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f1933;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f1934, %f2;\n"
    "	mov.f32 	%f1935, %f26;\n"
    "	mad.f32 	%f1936, %f1935, %f104, %f1934;\n"
    "	mov.f32 	%f2, %f1936;\n"
    "	mov.f32 	%f1937, %f4;\n"
    "	mov.f32 	%f1938, %f38;\n"
    "	mad.f32 	%f1939, %f1938, %f104, %f1937;\n"
    "	mov.f32 	%f4, %f1939;\n"
    "	mov.f32 	%f1940, %f6;\n"
    "	mov.f32 	%f1941, %f48;\n"
    "	mad.f32 	%f1942, %f1941, %f104, %f1940;\n"
    "	mov.f32 	%f6, %f1942;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_32514:\n"
    "	ld.shared.s32 	%r59, [%rd14+524];\n"
    "	add.s32 	%r27, %r59, %r6;\n"
    "	ld.shared.f32 	%f1943, [%rd15+512];\n"
    "	sub.f32 	%f1944, %f19, %f1943;\n"
    "	mov.f32 	%f1945, %f1944;\n"
    "	mul.f32 	%f1946, %f14, %f1945;\n"
    "	cvt.rni.f32.f32 	%f1947, %f1946;\n"
    "	mul.f32 	%f1948, %f13, %f1947;\n"
    "	sub.f32 	%f25, %f1944, %f1948;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1949, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1950, %f25, %f25, %f1949;\n"
    "	ld.shared.f32 	%f1951, [%rd15+516];\n"
    "	sub.f32 	%f1952, %f30, %f1951;\n"
    "	mov.f32 	%f1953, %f1952;\n"
    "	mov.f32 	%f1954, %f1953;\n"
    "	mul.f32 	%f1955, %f14, %f1953;\n"
    "	cvt.rni.f32.f32 	%f1956, %f1955;\n"
    "	mul.f32 	%f1957, %f13, %f1956;\n"
    "	sub.f32 	%f37, %f1952, %f1957;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1958, %f37, %f37, %f1950;\n"
    "	ld.shared.f32 	%f1959, [%rd15+520];\n"
    "	sub.f32 	%f1960, %f41, %f1959;\n"
    "	mov.f32 	%f1961, %f1960;\n"
    "	mul.f32 	%f1962, %f1960, %f14;\n"
    "	cvt.rni.f32.f32 	%f1963, %f1962;\n"
    "	mul.f32 	%f1964, %f13, %f1963;\n"
    "	sub.f32 	%f47, %f1960, %f1964;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1958;\n"
    "	mov.f32 	%f1965, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p98, %f49, %f1965;\n"
    "	@!%p98 bra 	$Lt_9_33026;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd81, %r27;\n"
    "	mul.wide.s32 	%rd82, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd82;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f1966, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1967, %f55, %f1966;\n"
    "	cvt.rzi.f32.f32 	%f58, %f1967;\n"
    "	mov.f32 	%f1968, %f58;\n"
    "	mov.f32 	%f1969, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1970, %f1969;\n"
    "	mov.f32 	%f1971, %f55;\n"
    "	mad.f32 %f1972, %f1968, %f1970, %f1971;\n"
    "	mov.f32 	%f64, %f1972;\n"
    "	mov.f32 	%f1973, %f58;\n"
    "	mov.f32 	%f1974, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1975, %f1974;\n"
    "	mov.f32 	%f1976, %f64;\n"
    "	mad.f32 %f1977, %f1973, %f1975, %f1976;\n"
    "	mov.f32 	%f64, %f1977;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f1978, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f1979, %f58;\n"
    "	mov.f32 	%f1980, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1981, %f64, %f1980;\n"
    "	ex2.approx.f32 	%f1982, %f1981;\n"
    "	mul.f32 	%f1983, %f1979, %f1982;\n"
    "	mov.f32 	%f1984, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p99, %f55, %f1984;\n"
    "	selp.f32 	%f1985, %f1978, %f1983, %p99;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f1986, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f1987, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p100, %f55, %f1987;\n"
    "	selp.f32 	%f80, %f1986, %f1985, %p100;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f1988, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f1988;\n"
    "	mov.f32 	%f1989, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f1989;\n"
    "	mov.f32 	%f1990, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f1990;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f1991, %f81, %f99;\n"
    "	sub.f32 	%f101, %f1991, %f97;\n"
    "	mul.f32 	%f1992, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f1992;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f1993, %f2;\n"
    "	mov.f32 	%f1994, %f26;\n"
    "	mad.f32 	%f1995, %f1994, %f104, %f1993;\n"
    "	mov.f32 	%f2, %f1995;\n"
    "	mov.f32 	%f1996, %f4;\n"
    "	mov.f32 	%f1997, %f38;\n"
    "	mad.f32 	%f1998, %f1997, %f104, %f1996;\n"
    "	mov.f32 	%f4, %f1998;\n"
    "	mov.f32 	%f1999, %f6;\n"
    "	mov.f32 	%f2000, %f48;\n"
    "	mad.f32 	%f2001, %f2000, %f104, %f1999;\n"
    "	mov.f32 	%f6, %f2001;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_33026:\n"
    "	ld.shared.s32 	%r60, [%rd14+540];\n"
    "	add.s32 	%r27, %r60, %r6;\n"
    "	ld.shared.f32 	%f2002, [%rd15+528];\n"
    "	sub.f32 	%f2003, %f19, %f2002;\n"
    "	mov.f32 	%f2004, %f2003;\n"
    "	mul.f32 	%f2005, %f14, %f2004;\n"
    "	cvt.rni.f32.f32 	%f2006, %f2005;\n"
    "	mul.f32 	%f2007, %f13, %f2006;\n"
    "	sub.f32 	%f25, %f2003, %f2007;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2008, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2009, %f25, %f25, %f2008;\n"
    "	ld.shared.f32 	%f2010, [%rd15+532];\n"
    "	sub.f32 	%f2011, %f30, %f2010;\n"
    "	mov.f32 	%f2012, %f2011;\n"
    "	mov.f32 	%f2013, %f2012;\n"
    "	mul.f32 	%f2014, %f14, %f2012;\n"
    "	cvt.rni.f32.f32 	%f2015, %f2014;\n"
    "	mul.f32 	%f2016, %f13, %f2015;\n"
    "	sub.f32 	%f37, %f2011, %f2016;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2017, %f37, %f37, %f2009;\n"
    "	ld.shared.f32 	%f2018, [%rd15+536];\n"
    "	sub.f32 	%f2019, %f41, %f2018;\n"
    "	mov.f32 	%f2020, %f2019;\n"
    "	mul.f32 	%f2021, %f2019, %f14;\n"
    "	cvt.rni.f32.f32 	%f2022, %f2021;\n"
    "	mul.f32 	%f2023, %f13, %f2022;\n"
    "	sub.f32 	%f47, %f2019, %f2023;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2017;\n"
    "	mov.f32 	%f2024, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p101, %f49, %f2024;\n"
    "	@!%p101 bra 	$Lt_9_33538;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd83, %r27;\n"
    "	mul.wide.s32 	%rd84, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd84;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f2025, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2026, %f55, %f2025;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2026;\n"
    "	mov.f32 	%f2027, %f58;\n"
    "	mov.f32 	%f2028, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2029, %f2028;\n"
    "	mov.f32 	%f2030, %f55;\n"
    "	mad.f32 %f2031, %f2027, %f2029, %f2030;\n"
    "	mov.f32 	%f64, %f2031;\n"
    "	mov.f32 	%f2032, %f58;\n"
    "	mov.f32 	%f2033, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2034, %f2033;\n"
    "	mov.f32 	%f2035, %f64;\n"
    "	mad.f32 %f2036, %f2032, %f2034, %f2035;\n"
    "	mov.f32 	%f64, %f2036;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f2037, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2038, %f58;\n"
    "	mov.f32 	%f2039, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2040, %f64, %f2039;\n"
    "	ex2.approx.f32 	%f2041, %f2040;\n"
    "	mul.f32 	%f2042, %f2038, %f2041;\n"
    "	mov.f32 	%f2043, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p102, %f55, %f2043;\n"
    "	selp.f32 	%f2044, %f2037, %f2042, %p102;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f2045, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2046, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p103, %f55, %f2046;\n"
    "	selp.f32 	%f80, %f2045, %f2044, %p103;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f2047, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f2047;\n"
    "	mov.f32 	%f2048, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f2048;\n"
    "	mov.f32 	%f2049, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f2049;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f2050, %f81, %f99;\n"
    "	sub.f32 	%f101, %f2050, %f97;\n"
    "	mul.f32 	%f2051, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f2051;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f2052, %f2;\n"
    "	mov.f32 	%f2053, %f26;\n"
    "	mad.f32 	%f2054, %f2053, %f104, %f2052;\n"
    "	mov.f32 	%f2, %f2054;\n"
    "	mov.f32 	%f2055, %f4;\n"
    "	mov.f32 	%f2056, %f38;\n"
    "	mad.f32 	%f2057, %f2056, %f104, %f2055;\n"
    "	mov.f32 	%f4, %f2057;\n"
    "	mov.f32 	%f2058, %f6;\n"
    "	mov.f32 	%f2059, %f48;\n"
    "	mad.f32 	%f2060, %f2059, %f104, %f2058;\n"
    "	mov.f32 	%f6, %f2060;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_33538:\n"
    "	ld.shared.s32 	%r61, [%rd14+556];\n"
    "	add.s32 	%r27, %r61, %r6;\n"
    "	ld.shared.f32 	%f2061, [%rd15+544];\n"
    "	sub.f32 	%f2062, %f19, %f2061;\n"
    "	mov.f32 	%f2063, %f2062;\n"
    "	mul.f32 	%f2064, %f14, %f2063;\n"
    "	cvt.rni.f32.f32 	%f2065, %f2064;\n"
    "	mul.f32 	%f2066, %f13, %f2065;\n"
    "	sub.f32 	%f25, %f2062, %f2066;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2067, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2068, %f25, %f25, %f2067;\n"
    "	ld.shared.f32 	%f2069, [%rd15+548];\n"
    "	sub.f32 	%f2070, %f30, %f2069;\n"
    "	mov.f32 	%f2071, %f2070;\n"
    "	mov.f32 	%f2072, %f2071;\n"
    "	mul.f32 	%f2073, %f14, %f2071;\n"
    "	cvt.rni.f32.f32 	%f2074, %f2073;\n"
    "	mul.f32 	%f2075, %f13, %f2074;\n"
    "	sub.f32 	%f37, %f2070, %f2075;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2076, %f37, %f37, %f2068;\n"
    "	ld.shared.f32 	%f2077, [%rd15+552];\n"
    "	sub.f32 	%f2078, %f41, %f2077;\n"
    "	mov.f32 	%f2079, %f2078;\n"
    "	mul.f32 	%f2080, %f2078, %f14;\n"
    "	cvt.rni.f32.f32 	%f2081, %f2080;\n"
    "	mul.f32 	%f2082, %f13, %f2081;\n"
    "	sub.f32 	%f47, %f2078, %f2082;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2076;\n"
    "	mov.f32 	%f2083, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p104, %f49, %f2083;\n"
    "	@!%p104 bra 	$Lt_9_34050;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd85, %r27;\n"
    "	mul.wide.s32 	%rd86, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd86;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f2084, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2085, %f55, %f2084;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2085;\n"
    "	mov.f32 	%f2086, %f58;\n"
    "	mov.f32 	%f2087, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2088, %f2087;\n"
    "	mov.f32 	%f2089, %f55;\n"
    "	mad.f32 %f2090, %f2086, %f2088, %f2089;\n"
    "	mov.f32 	%f64, %f2090;\n"
    "	mov.f32 	%f2091, %f58;\n"
    "	mov.f32 	%f2092, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2093, %f2092;\n"
    "	mov.f32 	%f2094, %f64;\n"
    "	mad.f32 %f2095, %f2091, %f2093, %f2094;\n"
    "	mov.f32 	%f64, %f2095;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f2096, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2097, %f58;\n"
    "	mov.f32 	%f2098, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2099, %f64, %f2098;\n"
    "	ex2.approx.f32 	%f2100, %f2099;\n"
    "	mul.f32 	%f2101, %f2097, %f2100;\n"
    "	mov.f32 	%f2102, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p105, %f55, %f2102;\n"
    "	selp.f32 	%f2103, %f2096, %f2101, %p105;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f2104, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2105, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p106, %f55, %f2105;\n"
    "	selp.f32 	%f80, %f2104, %f2103, %p106;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f2106, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f2106;\n"
    "	mov.f32 	%f2107, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f2107;\n"
    "	mov.f32 	%f2108, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f2108;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f2109, %f81, %f99;\n"
    "	sub.f32 	%f101, %f2109, %f97;\n"
    "	mul.f32 	%f2110, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f2110;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f2111, %f2;\n"
    "	mov.f32 	%f2112, %f26;\n"
    "	mad.f32 	%f2113, %f2112, %f104, %f2111;\n"
    "	mov.f32 	%f2, %f2113;\n"
    "	mov.f32 	%f2114, %f4;\n"
    "	mov.f32 	%f2115, %f38;\n"
    "	mad.f32 	%f2116, %f2115, %f104, %f2114;\n"
    "	mov.f32 	%f4, %f2116;\n"
    "	mov.f32 	%f2117, %f6;\n"
    "	mov.f32 	%f2118, %f48;\n"
    "	mad.f32 	%f2119, %f2118, %f104, %f2117;\n"
    "	mov.f32 	%f6, %f2119;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_34050:\n"
    "	ld.shared.s32 	%r62, [%rd14+572];\n"
    "	add.s32 	%r27, %r62, %r6;\n"
    "	ld.shared.f32 	%f2120, [%rd15+560];\n"
    "	sub.f32 	%f2121, %f19, %f2120;\n"
    "	mov.f32 	%f2122, %f2121;\n"
    "	mul.f32 	%f2123, %f14, %f2122;\n"
    "	cvt.rni.f32.f32 	%f2124, %f2123;\n"
    "	mul.f32 	%f2125, %f13, %f2124;\n"
    "	sub.f32 	%f25, %f2121, %f2125;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2126, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2127, %f25, %f25, %f2126;\n"
    "	ld.shared.f32 	%f2128, [%rd15+564];\n"
    "	sub.f32 	%f2129, %f30, %f2128;\n"
    "	mov.f32 	%f2130, %f2129;\n"
    "	mov.f32 	%f2131, %f2130;\n"
    "	mul.f32 	%f2132, %f14, %f2130;\n"
    "	cvt.rni.f32.f32 	%f2133, %f2132;\n"
    "	mul.f32 	%f2134, %f13, %f2133;\n"
    "	sub.f32 	%f37, %f2129, %f2134;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2135, %f37, %f37, %f2127;\n"
    "	ld.shared.f32 	%f2136, [%rd15+568];\n"
    "	sub.f32 	%f2137, %f41, %f2136;\n"
    "	mov.f32 	%f2138, %f2137;\n"
    "	mul.f32 	%f2139, %f2137, %f14;\n"
    "	cvt.rni.f32.f32 	%f2140, %f2139;\n"
    "	mul.f32 	%f2141, %f13, %f2140;\n"
    "	sub.f32 	%f47, %f2137, %f2141;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2135;\n"
    "	mov.f32 	%f2142, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p107, %f49, %f2142;\n"
    "	@!%p107 bra 	$Lt_9_34562;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd87, %r27;\n"
    "	mul.wide.s32 	%rd88, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd88;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f2143, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2144, %f55, %f2143;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2144;\n"
    "	mov.f32 	%f2145, %f58;\n"
    "	mov.f32 	%f2146, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2147, %f2146;\n"
    "	mov.f32 	%f2148, %f55;\n"
    "	mad.f32 %f2149, %f2145, %f2147, %f2148;\n"
    "	mov.f32 	%f64, %f2149;\n"
    "	mov.f32 	%f2150, %f58;\n"
    "	mov.f32 	%f2151, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2152, %f2151;\n"
    "	mov.f32 	%f2153, %f64;\n"
    "	mad.f32 %f2154, %f2150, %f2152, %f2153;\n"
    "	mov.f32 	%f64, %f2154;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f2155, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2156, %f58;\n"
    "	mov.f32 	%f2157, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2158, %f64, %f2157;\n"
    "	ex2.approx.f32 	%f2159, %f2158;\n"
    "	mul.f32 	%f2160, %f2156, %f2159;\n"
    "	mov.f32 	%f2161, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p108, %f55, %f2161;\n"
    "	selp.f32 	%f2162, %f2155, %f2160, %p108;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f2163, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2164, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p109, %f55, %f2164;\n"
    "	selp.f32 	%f80, %f2163, %f2162, %p109;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f2165, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f2165;\n"
    "	mov.f32 	%f2166, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f2166;\n"
    "	mov.f32 	%f2167, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f2167;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f2168, %f81, %f99;\n"
    "	sub.f32 	%f101, %f2168, %f97;\n"
    "	mul.f32 	%f2169, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f2169;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f2170, %f2;\n"
    "	mov.f32 	%f2171, %f26;\n"
    "	mad.f32 	%f2172, %f2171, %f104, %f2170;\n"
    "	mov.f32 	%f2, %f2172;\n"
    "	mov.f32 	%f2173, %f4;\n"
    "	mov.f32 	%f2174, %f38;\n"
    "	mad.f32 	%f2175, %f2174, %f104, %f2173;\n"
    "	mov.f32 	%f4, %f2175;\n"
    "	mov.f32 	%f2176, %f6;\n"
    "	mov.f32 	%f2177, %f48;\n"
    "	mad.f32 	%f2178, %f2177, %f104, %f2176;\n"
    "	mov.f32 	%f6, %f2178;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_34562:\n"
    "	ld.shared.s32 	%r63, [%rd14+588];\n"
    "	add.s32 	%r27, %r63, %r6;\n"
    "	ld.shared.f32 	%f2179, [%rd15+576];\n"
    "	sub.f32 	%f2180, %f19, %f2179;\n"
    "	mov.f32 	%f2181, %f2180;\n"
    "	mul.f32 	%f2182, %f14, %f2181;\n"
    "	cvt.rni.f32.f32 	%f2183, %f2182;\n"
    "	mul.f32 	%f2184, %f13, %f2183;\n"
    "	sub.f32 	%f25, %f2180, %f2184;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2185, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2186, %f25, %f25, %f2185;\n"
    "	ld.shared.f32 	%f2187, [%rd15+580];\n"
    "	sub.f32 	%f2188, %f30, %f2187;\n"
    "	mov.f32 	%f2189, %f2188;\n"
    "	mov.f32 	%f2190, %f2189;\n"
    "	mul.f32 	%f2191, %f14, %f2189;\n"
    "	cvt.rni.f32.f32 	%f2192, %f2191;\n"
    "	mul.f32 	%f2193, %f13, %f2192;\n"
    "	sub.f32 	%f37, %f2188, %f2193;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2194, %f37, %f37, %f2186;\n"
    "	ld.shared.f32 	%f2195, [%rd15+584];\n"
    "	sub.f32 	%f2196, %f41, %f2195;\n"
    "	mov.f32 	%f2197, %f2196;\n"
    "	mul.f32 	%f2198, %f2196, %f14;\n"
    "	cvt.rni.f32.f32 	%f2199, %f2198;\n"
    "	mul.f32 	%f2200, %f13, %f2199;\n"
    "	sub.f32 	%f47, %f2196, %f2200;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2194;\n"
    "	mov.f32 	%f2201, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p110, %f49, %f2201;\n"
    "	@!%p110 bra 	$Lt_9_35074;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd89, %r27;\n"
    "	mul.wide.s32 	%rd90, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd90;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f2202, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2203, %f55, %f2202;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2203;\n"
    "	mov.f32 	%f2204, %f58;\n"
    "	mov.f32 	%f2205, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2206, %f2205;\n"
    "	mov.f32 	%f2207, %f55;\n"
    "	mad.f32 %f2208, %f2204, %f2206, %f2207;\n"
    "	mov.f32 	%f64, %f2208;\n"
    "	mov.f32 	%f2209, %f58;\n"
    "	mov.f32 	%f2210, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2211, %f2210;\n"
    "	mov.f32 	%f2212, %f64;\n"
    "	mad.f32 %f2213, %f2209, %f2211, %f2212;\n"
    "	mov.f32 	%f64, %f2213;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f2214, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2215, %f58;\n"
    "	mov.f32 	%f2216, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2217, %f64, %f2216;\n"
    "	ex2.approx.f32 	%f2218, %f2217;\n"
    "	mul.f32 	%f2219, %f2215, %f2218;\n"
    "	mov.f32 	%f2220, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p111, %f55, %f2220;\n"
    "	selp.f32 	%f2221, %f2214, %f2219, %p111;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f2222, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2223, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p112, %f55, %f2223;\n"
    "	selp.f32 	%f80, %f2222, %f2221, %p112;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f2224, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f2224;\n"
    "	mov.f32 	%f2225, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f2225;\n"
    "	mov.f32 	%f2226, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f2226;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f2227, %f81, %f99;\n"
    "	sub.f32 	%f101, %f2227, %f97;\n"
    "	mul.f32 	%f2228, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f2228;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f2229, %f2;\n"
    "	mov.f32 	%f2230, %f26;\n"
    "	mad.f32 	%f2231, %f2230, %f104, %f2229;\n"
    "	mov.f32 	%f2, %f2231;\n"
    "	mov.f32 	%f2232, %f4;\n"
    "	mov.f32 	%f2233, %f38;\n"
    "	mad.f32 	%f2234, %f2233, %f104, %f2232;\n"
    "	mov.f32 	%f4, %f2234;\n"
    "	mov.f32 	%f2235, %f6;\n"
    "	mov.f32 	%f2236, %f48;\n"
    "	mad.f32 	%f2237, %f2236, %f104, %f2235;\n"
    "	mov.f32 	%f6, %f2237;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_35074:\n"
    "	ld.shared.s32 	%r64, [%rd14+604];\n"
    "	add.s32 	%r27, %r64, %r6;\n"
    "	ld.shared.f32 	%f2238, [%rd15+592];\n"
    "	sub.f32 	%f2239, %f19, %f2238;\n"
    "	mov.f32 	%f2240, %f2239;\n"
    "	mul.f32 	%f2241, %f14, %f2240;\n"
    "	cvt.rni.f32.f32 	%f2242, %f2241;\n"
    "	mul.f32 	%f2243, %f13, %f2242;\n"
    "	sub.f32 	%f25, %f2239, %f2243;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2244, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2245, %f25, %f25, %f2244;\n"
    "	ld.shared.f32 	%f2246, [%rd15+596];\n"
    "	sub.f32 	%f2247, %f30, %f2246;\n"
    "	mov.f32 	%f2248, %f2247;\n"
    "	mov.f32 	%f2249, %f2248;\n"
    "	mul.f32 	%f2250, %f14, %f2248;\n"
    "	cvt.rni.f32.f32 	%f2251, %f2250;\n"
    "	mul.f32 	%f2252, %f13, %f2251;\n"
    "	sub.f32 	%f37, %f2247, %f2252;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2253, %f37, %f37, %f2245;\n"
    "	ld.shared.f32 	%f2254, [%rd15+600];\n"
    "	sub.f32 	%f2255, %f41, %f2254;\n"
    "	mov.f32 	%f2256, %f2255;\n"
    "	mul.f32 	%f2257, %f2255, %f14;\n"
    "	cvt.rni.f32.f32 	%f2258, %f2257;\n"
    "	mul.f32 	%f2259, %f13, %f2258;\n"
    "	sub.f32 	%f47, %f2255, %f2259;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2253;\n"
    "	mov.f32 	%f2260, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p113, %f49, %f2260;\n"
    "	@!%p113 bra 	$Lt_9_35586;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd91, %r27;\n"
    "	mul.wide.s32 	%rd92, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd92;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f2261, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2262, %f55, %f2261;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2262;\n"
    "	mov.f32 	%f2263, %f58;\n"
    "	mov.f32 	%f2264, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2265, %f2264;\n"
    "	mov.f32 	%f2266, %f55;\n"
    "	mad.f32 %f2267, %f2263, %f2265, %f2266;\n"
    "	mov.f32 	%f64, %f2267;\n"
    "	mov.f32 	%f2268, %f58;\n"
    "	mov.f32 	%f2269, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2270, %f2269;\n"
    "	mov.f32 	%f2271, %f64;\n"
    "	mad.f32 %f2272, %f2268, %f2270, %f2271;\n"
    "	mov.f32 	%f64, %f2272;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f2273, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2274, %f58;\n"
    "	mov.f32 	%f2275, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2276, %f64, %f2275;\n"
    "	ex2.approx.f32 	%f2277, %f2276;\n"
    "	mul.f32 	%f2278, %f2274, %f2277;\n"
    "	mov.f32 	%f2279, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p114, %f55, %f2279;\n"
    "	selp.f32 	%f2280, %f2273, %f2278, %p114;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f2281, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2282, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p115, %f55, %f2282;\n"
    "	selp.f32 	%f80, %f2281, %f2280, %p115;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f2283, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f2283;\n"
    "	mov.f32 	%f2284, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f2284;\n"
    "	mov.f32 	%f2285, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f2285;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f2286, %f81, %f99;\n"
    "	sub.f32 	%f101, %f2286, %f97;\n"
    "	mul.f32 	%f2287, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f2287;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f2288, %f2;\n"
    "	mov.f32 	%f2289, %f26;\n"
    "	mad.f32 	%f2290, %f2289, %f104, %f2288;\n"
    "	mov.f32 	%f2, %f2290;\n"
    "	mov.f32 	%f2291, %f4;\n"
    "	mov.f32 	%f2292, %f38;\n"
    "	mad.f32 	%f2293, %f2292, %f104, %f2291;\n"
    "	mov.f32 	%f4, %f2293;\n"
    "	mov.f32 	%f2294, %f6;\n"
    "	mov.f32 	%f2295, %f48;\n"
    "	mad.f32 	%f2296, %f2295, %f104, %f2294;\n"
    "	mov.f32 	%f6, %f2296;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_35586:\n"
    "	ld.shared.s32 	%r65, [%rd14+620];\n"
    "	add.s32 	%r27, %r65, %r6;\n"
    "	ld.shared.f32 	%f2297, [%rd15+608];\n"
    "	sub.f32 	%f2298, %f19, %f2297;\n"
    "	mov.f32 	%f2299, %f2298;\n"
    "	mul.f32 	%f2300, %f14, %f2299;\n"
    "	cvt.rni.f32.f32 	%f2301, %f2300;\n"
    "	mul.f32 	%f2302, %f13, %f2301;\n"
    "	sub.f32 	%f25, %f2298, %f2302;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2303, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2304, %f25, %f25, %f2303;\n"
    "	ld.shared.f32 	%f2305, [%rd15+612];\n"
    "	sub.f32 	%f2306, %f30, %f2305;\n"
    "	mov.f32 	%f2307, %f2306;\n"
    "	mov.f32 	%f2308, %f2307;\n"
    "	mul.f32 	%f2309, %f14, %f2307;\n"
    "	cvt.rni.f32.f32 	%f2310, %f2309;\n"
    "	mul.f32 	%f2311, %f13, %f2310;\n"
    "	sub.f32 	%f37, %f2306, %f2311;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2312, %f37, %f37, %f2304;\n"
    "	ld.shared.f32 	%f2313, [%rd15+616];\n"
    "	sub.f32 	%f2314, %f41, %f2313;\n"
    "	mov.f32 	%f2315, %f2314;\n"
    "	mul.f32 	%f2316, %f2314, %f14;\n"
    "	cvt.rni.f32.f32 	%f2317, %f2316;\n"
    "	mul.f32 	%f2318, %f13, %f2317;\n"
    "	sub.f32 	%f47, %f2314, %f2318;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2312;\n"
    "	mov.f32 	%f2319, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p116, %f49, %f2319;\n"
    "	@!%p116 bra 	$Lt_9_36098;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd93, %r27;\n"
    "	mul.wide.s32 	%rd94, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd94;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f2320, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2321, %f55, %f2320;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2321;\n"
    "	mov.f32 	%f2322, %f58;\n"
    "	mov.f32 	%f2323, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2324, %f2323;\n"
    "	mov.f32 	%f2325, %f55;\n"
    "	mad.f32 %f2326, %f2322, %f2324, %f2325;\n"
    "	mov.f32 	%f64, %f2326;\n"
    "	mov.f32 	%f2327, %f58;\n"
    "	mov.f32 	%f2328, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2329, %f2328;\n"
    "	mov.f32 	%f2330, %f64;\n"
    "	mad.f32 %f2331, %f2327, %f2329, %f2330;\n"
    "	mov.f32 	%f64, %f2331;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f2332, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2333, %f58;\n"
    "	mov.f32 	%f2334, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2335, %f64, %f2334;\n"
    "	ex2.approx.f32 	%f2336, %f2335;\n"
    "	mul.f32 	%f2337, %f2333, %f2336;\n"
    "	mov.f32 	%f2338, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p117, %f55, %f2338;\n"
    "	selp.f32 	%f2339, %f2332, %f2337, %p117;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f2340, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2341, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p118, %f55, %f2341;\n"
    "	selp.f32 	%f80, %f2340, %f2339, %p118;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f2342, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f2342;\n"
    "	mov.f32 	%f2343, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f2343;\n"
    "	mov.f32 	%f2344, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f2344;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f2345, %f81, %f99;\n"
    "	sub.f32 	%f101, %f2345, %f97;\n"
    "	mul.f32 	%f2346, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f2346;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f2347, %f2;\n"
    "	mov.f32 	%f2348, %f26;\n"
    "	mad.f32 	%f2349, %f2348, %f104, %f2347;\n"
    "	mov.f32 	%f2, %f2349;\n"
    "	mov.f32 	%f2350, %f4;\n"
    "	mov.f32 	%f2351, %f38;\n"
    "	mad.f32 	%f2352, %f2351, %f104, %f2350;\n"
    "	mov.f32 	%f4, %f2352;\n"
    "	mov.f32 	%f2353, %f6;\n"
    "	mov.f32 	%f2354, %f48;\n"
    "	mad.f32 	%f2355, %f2354, %f104, %f2353;\n"
    "	mov.f32 	%f6, %f2355;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_36098:\n"
    "	ld.shared.s32 	%r66, [%rd14+636];\n"
    "	add.s32 	%r27, %r66, %r6;\n"
    "	ld.shared.f32 	%f2356, [%rd15+624];\n"
    "	sub.f32 	%f2357, %f19, %f2356;\n"
    "	mov.f32 	%f2358, %f2357;\n"
    "	mul.f32 	%f2359, %f14, %f2358;\n"
    "	cvt.rni.f32.f32 	%f2360, %f2359;\n"
    "	mul.f32 	%f2361, %f13, %f2360;\n"
    "	sub.f32 	%f25, %f2357, %f2361;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2362, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2363, %f25, %f25, %f2362;\n"
    "	ld.shared.f32 	%f2364, [%rd15+628];\n"
    "	sub.f32 	%f2365, %f30, %f2364;\n"
    "	mov.f32 	%f2366, %f2365;\n"
    "	mov.f32 	%f2367, %f2366;\n"
    "	mul.f32 	%f2368, %f14, %f2366;\n"
    "	cvt.rni.f32.f32 	%f2369, %f2368;\n"
    "	mul.f32 	%f2370, %f13, %f2369;\n"
    "	sub.f32 	%f37, %f2365, %f2370;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2371, %f37, %f37, %f2363;\n"
    "	ld.shared.f32 	%f2372, [%rd15+632];\n"
    "	sub.f32 	%f2373, %f41, %f2372;\n"
    "	mov.f32 	%f2374, %f2373;\n"
    "	mul.f32 	%f2375, %f2373, %f14;\n"
    "	cvt.rni.f32.f32 	%f2376, %f2375;\n"
    "	mul.f32 	%f2377, %f13, %f2376;\n"
    "	sub.f32 	%f47, %f2373, %f2377;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2371;\n"
    "	mov.f32 	%f2378, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p119, %f49, %f2378;\n"
    "	@!%p119 bra 	$Lt_9_36610;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd95, %r27;\n"
    "	mul.wide.s32 	%rd96, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd96;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f2379, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2380, %f55, %f2379;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2380;\n"
    "	mov.f32 	%f2381, %f58;\n"
    "	mov.f32 	%f2382, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2383, %f2382;\n"
    "	mov.f32 	%f2384, %f55;\n"
    "	mad.f32 %f2385, %f2381, %f2383, %f2384;\n"
    "	mov.f32 	%f64, %f2385;\n"
    "	mov.f32 	%f2386, %f58;\n"
    "	mov.f32 	%f2387, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2388, %f2387;\n"
    "	mov.f32 	%f2389, %f64;\n"
    "	mad.f32 %f2390, %f2386, %f2388, %f2389;\n"
    "	mov.f32 	%f64, %f2390;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f2391, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2392, %f58;\n"
    "	mov.f32 	%f2393, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2394, %f64, %f2393;\n"
    "	ex2.approx.f32 	%f2395, %f2394;\n"
    "	mul.f32 	%f2396, %f2392, %f2395;\n"
    "	mov.f32 	%f2397, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p120, %f55, %f2397;\n"
    "	selp.f32 	%f2398, %f2391, %f2396, %p120;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f2399, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2400, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p121, %f55, %f2400;\n"
    "	selp.f32 	%f80, %f2399, %f2398, %p121;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f2401, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f2401;\n"
    "	mov.f32 	%f2402, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f2402;\n"
    "	mov.f32 	%f2403, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f2403;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f2404, %f81, %f99;\n"
    "	sub.f32 	%f101, %f2404, %f97;\n"
    "	mul.f32 	%f2405, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f2405;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f2406, %f2;\n"
    "	mov.f32 	%f2407, %f26;\n"
    "	mad.f32 	%f2408, %f2407, %f104, %f2406;\n"
    "	mov.f32 	%f2, %f2408;\n"
    "	mov.f32 	%f2409, %f4;\n"
    "	mov.f32 	%f2410, %f38;\n"
    "	mad.f32 	%f2411, %f2410, %f104, %f2409;\n"
    "	mov.f32 	%f4, %f2411;\n"
    "	mov.f32 	%f2412, %f6;\n"
    "	mov.f32 	%f2413, %f48;\n"
    "	mad.f32 	%f2414, %f2413, %f104, %f2412;\n"
    "	mov.f32 	%f6, %f2414;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_36610:\n"
    "	ld.shared.s32 	%r67, [%rd14+652];\n"
    "	add.s32 	%r27, %r67, %r6;\n"
    "	ld.shared.f32 	%f2415, [%rd15+640];\n"
    "	sub.f32 	%f2416, %f19, %f2415;\n"
    "	mov.f32 	%f2417, %f2416;\n"
    "	mul.f32 	%f2418, %f14, %f2417;\n"
    "	cvt.rni.f32.f32 	%f2419, %f2418;\n"
    "	mul.f32 	%f2420, %f13, %f2419;\n"
    "	sub.f32 	%f25, %f2416, %f2420;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2421, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2422, %f25, %f25, %f2421;\n"
    "	ld.shared.f32 	%f2423, [%rd15+644];\n"
    "	sub.f32 	%f2424, %f30, %f2423;\n"
    "	mov.f32 	%f2425, %f2424;\n"
    "	mov.f32 	%f2426, %f2425;\n"
    "	mul.f32 	%f2427, %f14, %f2425;\n"
    "	cvt.rni.f32.f32 	%f2428, %f2427;\n"
    "	mul.f32 	%f2429, %f13, %f2428;\n"
    "	sub.f32 	%f37, %f2424, %f2429;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2430, %f37, %f37, %f2422;\n"
    "	ld.shared.f32 	%f2431, [%rd15+648];\n"
    "	sub.f32 	%f2432, %f41, %f2431;\n"
    "	mov.f32 	%f2433, %f2432;\n"
    "	mul.f32 	%f2434, %f2432, %f14;\n"
    "	cvt.rni.f32.f32 	%f2435, %f2434;\n"
    "	mul.f32 	%f2436, %f13, %f2435;\n"
    "	sub.f32 	%f47, %f2432, %f2436;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2430;\n"
    "	mov.f32 	%f2437, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p122, %f49, %f2437;\n"
    "	@!%p122 bra 	$Lt_9_37122;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd97, %r27;\n"
    "	mul.wide.s32 	%rd98, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd98;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f2438, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2439, %f55, %f2438;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2439;\n"
    "	mov.f32 	%f2440, %f58;\n"
    "	mov.f32 	%f2441, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2442, %f2441;\n"
    "	mov.f32 	%f2443, %f55;\n"
    "	mad.f32 %f2444, %f2440, %f2442, %f2443;\n"
    "	mov.f32 	%f64, %f2444;\n"
    "	mov.f32 	%f2445, %f58;\n"
    "	mov.f32 	%f2446, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2447, %f2446;\n"
    "	mov.f32 	%f2448, %f64;\n"
    "	mad.f32 %f2449, %f2445, %f2447, %f2448;\n"
    "	mov.f32 	%f64, %f2449;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f2450, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2451, %f58;\n"
    "	mov.f32 	%f2452, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2453, %f64, %f2452;\n"
    "	ex2.approx.f32 	%f2454, %f2453;\n"
    "	mul.f32 	%f2455, %f2451, %f2454;\n"
    "	mov.f32 	%f2456, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p123, %f55, %f2456;\n"
    "	selp.f32 	%f2457, %f2450, %f2455, %p123;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f2458, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2459, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p124, %f55, %f2459;\n"
    "	selp.f32 	%f80, %f2458, %f2457, %p124;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f2460, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f2460;\n"
    "	mov.f32 	%f2461, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f2461;\n"
    "	mov.f32 	%f2462, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f2462;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f2463, %f81, %f99;\n"
    "	sub.f32 	%f101, %f2463, %f97;\n"
    "	mul.f32 	%f2464, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f2464;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f2465, %f2;\n"
    "	mov.f32 	%f2466, %f26;\n"
    "	mad.f32 	%f2467, %f2466, %f104, %f2465;\n"
    "	mov.f32 	%f2, %f2467;\n"
    "	mov.f32 	%f2468, %f4;\n"
    "	mov.f32 	%f2469, %f38;\n"
    "	mad.f32 	%f2470, %f2469, %f104, %f2468;\n"
    "	mov.f32 	%f4, %f2470;\n"
    "	mov.f32 	%f2471, %f6;\n"
    "	mov.f32 	%f2472, %f48;\n"
    "	mad.f32 	%f2473, %f2472, %f104, %f2471;\n"
    "	mov.f32 	%f6, %f2473;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_37122:\n"
    "	ld.shared.s32 	%r68, [%rd14+668];\n"
    "	add.s32 	%r27, %r68, %r6;\n"
    "	ld.shared.f32 	%f2474, [%rd15+656];\n"
    "	sub.f32 	%f2475, %f19, %f2474;\n"
    "	mov.f32 	%f2476, %f2475;\n"
    "	mul.f32 	%f2477, %f14, %f2476;\n"
    "	cvt.rni.f32.f32 	%f2478, %f2477;\n"
    "	mul.f32 	%f2479, %f13, %f2478;\n"
    "	sub.f32 	%f25, %f2475, %f2479;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2480, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2481, %f25, %f25, %f2480;\n"
    "	ld.shared.f32 	%f2482, [%rd15+660];\n"
    "	sub.f32 	%f2483, %f30, %f2482;\n"
    "	mov.f32 	%f2484, %f2483;\n"
    "	mov.f32 	%f2485, %f2484;\n"
    "	mul.f32 	%f2486, %f14, %f2484;\n"
    "	cvt.rni.f32.f32 	%f2487, %f2486;\n"
    "	mul.f32 	%f2488, %f13, %f2487;\n"
    "	sub.f32 	%f37, %f2483, %f2488;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2489, %f37, %f37, %f2481;\n"
    "	ld.shared.f32 	%f2490, [%rd15+664];\n"
    "	sub.f32 	%f2491, %f41, %f2490;\n"
    "	mov.f32 	%f2492, %f2491;\n"
    "	mul.f32 	%f2493, %f2491, %f14;\n"
    "	cvt.rni.f32.f32 	%f2494, %f2493;\n"
    "	mul.f32 	%f2495, %f13, %f2494;\n"
    "	sub.f32 	%f47, %f2491, %f2495;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2489;\n"
    "	mov.f32 	%f2496, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p125, %f49, %f2496;\n"
    "	@!%p125 bra 	$Lt_9_37634;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd99, %r27;\n"
    "	mul.wide.s32 	%rd100, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd100;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f2497, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2498, %f55, %f2497;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2498;\n"
    "	mov.f32 	%f2499, %f58;\n"
    "	mov.f32 	%f2500, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2501, %f2500;\n"
    "	mov.f32 	%f2502, %f55;\n"
    "	mad.f32 %f2503, %f2499, %f2501, %f2502;\n"
    "	mov.f32 	%f64, %f2503;\n"
    "	mov.f32 	%f2504, %f58;\n"
    "	mov.f32 	%f2505, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2506, %f2505;\n"
    "	mov.f32 	%f2507, %f64;\n"
    "	mad.f32 %f2508, %f2504, %f2506, %f2507;\n"
    "	mov.f32 	%f64, %f2508;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f2509, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2510, %f58;\n"
    "	mov.f32 	%f2511, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2512, %f64, %f2511;\n"
    "	ex2.approx.f32 	%f2513, %f2512;\n"
    "	mul.f32 	%f2514, %f2510, %f2513;\n"
    "	mov.f32 	%f2515, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p126, %f55, %f2515;\n"
    "	selp.f32 	%f2516, %f2509, %f2514, %p126;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f2517, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2518, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p127, %f55, %f2518;\n"
    "	selp.f32 	%f80, %f2517, %f2516, %p127;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f2519, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f2519;\n"
    "	mov.f32 	%f2520, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f2520;\n"
    "	mov.f32 	%f2521, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f2521;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f2522, %f81, %f99;\n"
    "	sub.f32 	%f101, %f2522, %f97;\n"
    "	mul.f32 	%f2523, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f2523;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f2524, %f2;\n"
    "	mov.f32 	%f2525, %f26;\n"
    "	mad.f32 	%f2526, %f2525, %f104, %f2524;\n"
    "	mov.f32 	%f2, %f2526;\n"
    "	mov.f32 	%f2527, %f4;\n"
    "	mov.f32 	%f2528, %f38;\n"
    "	mad.f32 	%f2529, %f2528, %f104, %f2527;\n"
    "	mov.f32 	%f4, %f2529;\n"
    "	mov.f32 	%f2530, %f6;\n"
    "	mov.f32 	%f2531, %f48;\n"
    "	mad.f32 	%f2532, %f2531, %f104, %f2530;\n"
    "	mov.f32 	%f6, %f2532;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_37634:\n"
    "	ld.shared.s32 	%r69, [%rd14+684];\n"
    "	add.s32 	%r27, %r69, %r6;\n"
    "	ld.shared.f32 	%f2533, [%rd15+672];\n"
    "	sub.f32 	%f2534, %f19, %f2533;\n"
    "	mov.f32 	%f2535, %f2534;\n"
    "	mul.f32 	%f2536, %f14, %f2535;\n"
    "	cvt.rni.f32.f32 	%f2537, %f2536;\n"
    "	mul.f32 	%f2538, %f13, %f2537;\n"
    "	sub.f32 	%f25, %f2534, %f2538;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2539, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2540, %f25, %f25, %f2539;\n"
    "	ld.shared.f32 	%f2541, [%rd15+676];\n"
    "	sub.f32 	%f2542, %f30, %f2541;\n"
    "	mov.f32 	%f2543, %f2542;\n"
    "	mov.f32 	%f2544, %f2543;\n"
    "	mul.f32 	%f2545, %f14, %f2543;\n"
    "	cvt.rni.f32.f32 	%f2546, %f2545;\n"
    "	mul.f32 	%f2547, %f13, %f2546;\n"
    "	sub.f32 	%f37, %f2542, %f2547;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2548, %f37, %f37, %f2540;\n"
    "	ld.shared.f32 	%f2549, [%rd15+680];\n"
    "	sub.f32 	%f2550, %f41, %f2549;\n"
    "	mov.f32 	%f2551, %f2550;\n"
    "	mul.f32 	%f2552, %f2550, %f14;\n"
    "	cvt.rni.f32.f32 	%f2553, %f2552;\n"
    "	mul.f32 	%f2554, %f13, %f2553;\n"
    "	sub.f32 	%f47, %f2550, %f2554;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2548;\n"
    "	mov.f32 	%f2555, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p128, %f49, %f2555;\n"
    "	@!%p128 bra 	$Lt_9_38146;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd101, %r27;\n"
    "	mul.wide.s32 	%rd102, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd102;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f2556, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2557, %f55, %f2556;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2557;\n"
    "	mov.f32 	%f2558, %f58;\n"
    "	mov.f32 	%f2559, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2560, %f2559;\n"
    "	mov.f32 	%f2561, %f55;\n"
    "	mad.f32 %f2562, %f2558, %f2560, %f2561;\n"
    "	mov.f32 	%f64, %f2562;\n"
    "	mov.f32 	%f2563, %f58;\n"
    "	mov.f32 	%f2564, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2565, %f2564;\n"
    "	mov.f32 	%f2566, %f64;\n"
    "	mad.f32 %f2567, %f2563, %f2565, %f2566;\n"
    "	mov.f32 	%f64, %f2567;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f2568, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2569, %f58;\n"
    "	mov.f32 	%f2570, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2571, %f64, %f2570;\n"
    "	ex2.approx.f32 	%f2572, %f2571;\n"
    "	mul.f32 	%f2573, %f2569, %f2572;\n"
    "	mov.f32 	%f2574, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p129, %f55, %f2574;\n"
    "	selp.f32 	%f2575, %f2568, %f2573, %p129;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f2576, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2577, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p130, %f55, %f2577;\n"
    "	selp.f32 	%f80, %f2576, %f2575, %p130;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f2578, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f2578;\n"
    "	mov.f32 	%f2579, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f2579;\n"
    "	mov.f32 	%f2580, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f2580;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f2581, %f81, %f99;\n"
    "	sub.f32 	%f101, %f2581, %f97;\n"
    "	mul.f32 	%f2582, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f2582;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f2583, %f2;\n"
    "	mov.f32 	%f2584, %f26;\n"
    "	mad.f32 	%f2585, %f2584, %f104, %f2583;\n"
    "	mov.f32 	%f2, %f2585;\n"
    "	mov.f32 	%f2586, %f4;\n"
    "	mov.f32 	%f2587, %f38;\n"
    "	mad.f32 	%f2588, %f2587, %f104, %f2586;\n"
    "	mov.f32 	%f4, %f2588;\n"
    "	mov.f32 	%f2589, %f6;\n"
    "	mov.f32 	%f2590, %f48;\n"
    "	mad.f32 	%f2591, %f2590, %f104, %f2589;\n"
    "	mov.f32 	%f6, %f2591;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_38146:\n"
    "	ld.shared.s32 	%r70, [%rd14+700];\n"
    "	add.s32 	%r27, %r70, %r6;\n"
    "	ld.shared.f32 	%f2592, [%rd15+688];\n"
    "	sub.f32 	%f2593, %f19, %f2592;\n"
    "	mov.f32 	%f2594, %f2593;\n"
    "	mul.f32 	%f2595, %f14, %f2594;\n"
    "	cvt.rni.f32.f32 	%f2596, %f2595;\n"
    "	mul.f32 	%f2597, %f13, %f2596;\n"
    "	sub.f32 	%f25, %f2593, %f2597;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2598, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2599, %f25, %f25, %f2598;\n"
    "	ld.shared.f32 	%f2600, [%rd15+692];\n"
    "	sub.f32 	%f2601, %f30, %f2600;\n"
    "	mov.f32 	%f2602, %f2601;\n"
    "	mov.f32 	%f2603, %f2602;\n"
    "	mul.f32 	%f2604, %f14, %f2602;\n"
    "	cvt.rni.f32.f32 	%f2605, %f2604;\n"
    "	mul.f32 	%f2606, %f13, %f2605;\n"
    "	sub.f32 	%f37, %f2601, %f2606;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2607, %f37, %f37, %f2599;\n"
    "	ld.shared.f32 	%f2608, [%rd15+696];\n"
    "	sub.f32 	%f2609, %f41, %f2608;\n"
    "	mov.f32 	%f2610, %f2609;\n"
    "	mul.f32 	%f2611, %f2609, %f14;\n"
    "	cvt.rni.f32.f32 	%f2612, %f2611;\n"
    "	mul.f32 	%f2613, %f13, %f2612;\n"
    "	sub.f32 	%f47, %f2609, %f2613;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2607;\n"
    "	mov.f32 	%f2614, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p131, %f49, %f2614;\n"
    "	@!%p131 bra 	$Lt_9_38658;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd103, %r27;\n"
    "	mul.wide.s32 	%rd104, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd104;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f2615, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2616, %f55, %f2615;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2616;\n"
    "	mov.f32 	%f2617, %f58;\n"
    "	mov.f32 	%f2618, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2619, %f2618;\n"
    "	mov.f32 	%f2620, %f55;\n"
    "	mad.f32 %f2621, %f2617, %f2619, %f2620;\n"
    "	mov.f32 	%f64, %f2621;\n"
    "	mov.f32 	%f2622, %f58;\n"
    "	mov.f32 	%f2623, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2624, %f2623;\n"
    "	mov.f32 	%f2625, %f64;\n"
    "	mad.f32 %f2626, %f2622, %f2624, %f2625;\n"
    "	mov.f32 	%f64, %f2626;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f2627, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2628, %f58;\n"
    "	mov.f32 	%f2629, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2630, %f64, %f2629;\n"
    "	ex2.approx.f32 	%f2631, %f2630;\n"
    "	mul.f32 	%f2632, %f2628, %f2631;\n"
    "	mov.f32 	%f2633, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p132, %f55, %f2633;\n"
    "	selp.f32 	%f2634, %f2627, %f2632, %p132;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f2635, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2636, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p133, %f55, %f2636;\n"
    "	selp.f32 	%f80, %f2635, %f2634, %p133;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f2637, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f2637;\n"
    "	mov.f32 	%f2638, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f2638;\n"
    "	mov.f32 	%f2639, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f2639;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f2640, %f81, %f99;\n"
    "	sub.f32 	%f101, %f2640, %f97;\n"
    "	mul.f32 	%f2641, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f2641;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f2642, %f2;\n"
    "	mov.f32 	%f2643, %f26;\n"
    "	mad.f32 	%f2644, %f2643, %f104, %f2642;\n"
    "	mov.f32 	%f2, %f2644;\n"
    "	mov.f32 	%f2645, %f4;\n"
    "	mov.f32 	%f2646, %f38;\n"
    "	mad.f32 	%f2647, %f2646, %f104, %f2645;\n"
    "	mov.f32 	%f4, %f2647;\n"
    "	mov.f32 	%f2648, %f6;\n"
    "	mov.f32 	%f2649, %f48;\n"
    "	mad.f32 	%f2650, %f2649, %f104, %f2648;\n"
    "	mov.f32 	%f6, %f2650;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_38658:\n"
    "	ld.shared.s32 	%r71, [%rd14+716];\n"
    "	add.s32 	%r27, %r71, %r6;\n"
    "	ld.shared.f32 	%f2651, [%rd15+704];\n"
    "	sub.f32 	%f2652, %f19, %f2651;\n"
    "	mov.f32 	%f2653, %f2652;\n"
    "	mul.f32 	%f2654, %f14, %f2653;\n"
    "	cvt.rni.f32.f32 	%f2655, %f2654;\n"
    "	mul.f32 	%f2656, %f13, %f2655;\n"
    "	sub.f32 	%f25, %f2652, %f2656;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2657, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2658, %f25, %f25, %f2657;\n"
    "	ld.shared.f32 	%f2659, [%rd15+708];\n"
    "	sub.f32 	%f2660, %f30, %f2659;\n"
    "	mov.f32 	%f2661, %f2660;\n"
    "	mov.f32 	%f2662, %f2661;\n"
    "	mul.f32 	%f2663, %f14, %f2661;\n"
    "	cvt.rni.f32.f32 	%f2664, %f2663;\n"
    "	mul.f32 	%f2665, %f13, %f2664;\n"
    "	sub.f32 	%f37, %f2660, %f2665;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2666, %f37, %f37, %f2658;\n"
    "	ld.shared.f32 	%f2667, [%rd15+712];\n"
    "	sub.f32 	%f2668, %f41, %f2667;\n"
    "	mov.f32 	%f2669, %f2668;\n"
    "	mul.f32 	%f2670, %f2668, %f14;\n"
    "	cvt.rni.f32.f32 	%f2671, %f2670;\n"
    "	mul.f32 	%f2672, %f13, %f2671;\n"
    "	sub.f32 	%f47, %f2668, %f2672;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2666;\n"
    "	mov.f32 	%f2673, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p134, %f49, %f2673;\n"
    "	@!%p134 bra 	$Lt_9_39170;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd105, %r27;\n"
    "	mul.wide.s32 	%rd106, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd106;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f2674, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2675, %f55, %f2674;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2675;\n"
    "	mov.f32 	%f2676, %f58;\n"
    "	mov.f32 	%f2677, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2678, %f2677;\n"
    "	mov.f32 	%f2679, %f55;\n"
    "	mad.f32 %f2680, %f2676, %f2678, %f2679;\n"
    "	mov.f32 	%f64, %f2680;\n"
    "	mov.f32 	%f2681, %f58;\n"
    "	mov.f32 	%f2682, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2683, %f2682;\n"
    "	mov.f32 	%f2684, %f64;\n"
    "	mad.f32 %f2685, %f2681, %f2683, %f2684;\n"
    "	mov.f32 	%f64, %f2685;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f2686, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2687, %f58;\n"
    "	mov.f32 	%f2688, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2689, %f64, %f2688;\n"
    "	ex2.approx.f32 	%f2690, %f2689;\n"
    "	mul.f32 	%f2691, %f2687, %f2690;\n"
    "	mov.f32 	%f2692, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p135, %f55, %f2692;\n"
    "	selp.f32 	%f2693, %f2686, %f2691, %p135;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f2694, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2695, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p136, %f55, %f2695;\n"
    "	selp.f32 	%f80, %f2694, %f2693, %p136;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f2696, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f2696;\n"
    "	mov.f32 	%f2697, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f2697;\n"
    "	mov.f32 	%f2698, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f2698;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f2699, %f81, %f99;\n"
    "	sub.f32 	%f101, %f2699, %f97;\n"
    "	mul.f32 	%f2700, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f2700;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f2701, %f2;\n"
    "	mov.f32 	%f2702, %f26;\n"
    "	mad.f32 	%f2703, %f2702, %f104, %f2701;\n"
    "	mov.f32 	%f2, %f2703;\n"
    "	mov.f32 	%f2704, %f4;\n"
    "	mov.f32 	%f2705, %f38;\n"
    "	mad.f32 	%f2706, %f2705, %f104, %f2704;\n"
    "	mov.f32 	%f4, %f2706;\n"
    "	mov.f32 	%f2707, %f6;\n"
    "	mov.f32 	%f2708, %f48;\n"
    "	mad.f32 	%f2709, %f2708, %f104, %f2707;\n"
    "	mov.f32 	%f6, %f2709;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_39170:\n"
    "	ld.shared.s32 	%r72, [%rd14+732];\n"
    "	add.s32 	%r27, %r72, %r6;\n"
    "	ld.shared.f32 	%f2710, [%rd15+720];\n"
    "	sub.f32 	%f2711, %f19, %f2710;\n"
    "	mov.f32 	%f2712, %f2711;\n"
    "	mul.f32 	%f2713, %f14, %f2712;\n"
    "	cvt.rni.f32.f32 	%f2714, %f2713;\n"
    "	mul.f32 	%f2715, %f13, %f2714;\n"
    "	sub.f32 	%f25, %f2711, %f2715;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2716, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2717, %f25, %f25, %f2716;\n"
    "	ld.shared.f32 	%f2718, [%rd15+724];\n"
    "	sub.f32 	%f2719, %f30, %f2718;\n"
    "	mov.f32 	%f2720, %f2719;\n"
    "	mov.f32 	%f2721, %f2720;\n"
    "	mul.f32 	%f2722, %f14, %f2720;\n"
    "	cvt.rni.f32.f32 	%f2723, %f2722;\n"
    "	mul.f32 	%f2724, %f13, %f2723;\n"
    "	sub.f32 	%f37, %f2719, %f2724;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2725, %f37, %f37, %f2717;\n"
    "	ld.shared.f32 	%f2726, [%rd15+728];\n"
    "	sub.f32 	%f2727, %f41, %f2726;\n"
    "	mov.f32 	%f2728, %f2727;\n"
    "	mul.f32 	%f2729, %f2727, %f14;\n"
    "	cvt.rni.f32.f32 	%f2730, %f2729;\n"
    "	mul.f32 	%f2731, %f13, %f2730;\n"
    "	sub.f32 	%f47, %f2727, %f2731;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2725;\n"
    "	mov.f32 	%f2732, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p137, %f49, %f2732;\n"
    "	@!%p137 bra 	$Lt_9_39682;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd107, %r27;\n"
    "	mul.wide.s32 	%rd108, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd108;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f2733, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2734, %f55, %f2733;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2734;\n"
    "	mov.f32 	%f2735, %f58;\n"
    "	mov.f32 	%f2736, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2737, %f2736;\n"
    "	mov.f32 	%f2738, %f55;\n"
    "	mad.f32 %f2739, %f2735, %f2737, %f2738;\n"
    "	mov.f32 	%f64, %f2739;\n"
    "	mov.f32 	%f2740, %f58;\n"
    "	mov.f32 	%f2741, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2742, %f2741;\n"
    "	mov.f32 	%f2743, %f64;\n"
    "	mad.f32 %f2744, %f2740, %f2742, %f2743;\n"
    "	mov.f32 	%f64, %f2744;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f2745, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2746, %f58;\n"
    "	mov.f32 	%f2747, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2748, %f64, %f2747;\n"
    "	ex2.approx.f32 	%f2749, %f2748;\n"
    "	mul.f32 	%f2750, %f2746, %f2749;\n"
    "	mov.f32 	%f2751, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p138, %f55, %f2751;\n"
    "	selp.f32 	%f2752, %f2745, %f2750, %p138;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f2753, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2754, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p139, %f55, %f2754;\n"
    "	selp.f32 	%f80, %f2753, %f2752, %p139;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f2755, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f2755;\n"
    "	mov.f32 	%f2756, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f2756;\n"
    "	mov.f32 	%f2757, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f2757;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f2758, %f81, %f99;\n"
    "	sub.f32 	%f101, %f2758, %f97;\n"
    "	mul.f32 	%f2759, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f2759;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f2760, %f2;\n"
    "	mov.f32 	%f2761, %f26;\n"
    "	mad.f32 	%f2762, %f2761, %f104, %f2760;\n"
    "	mov.f32 	%f2, %f2762;\n"
    "	mov.f32 	%f2763, %f4;\n"
    "	mov.f32 	%f2764, %f38;\n"
    "	mad.f32 	%f2765, %f2764, %f104, %f2763;\n"
    "	mov.f32 	%f4, %f2765;\n"
    "	mov.f32 	%f2766, %f6;\n"
    "	mov.f32 	%f2767, %f48;\n"
    "	mad.f32 	%f2768, %f2767, %f104, %f2766;\n"
    "	mov.f32 	%f6, %f2768;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_39682:\n"
    "	ld.shared.s32 	%r73, [%rd14+748];\n"
    "	add.s32 	%r27, %r73, %r6;\n"
    "	ld.shared.f32 	%f2769, [%rd15+736];\n"
    "	sub.f32 	%f2770, %f19, %f2769;\n"
    "	mov.f32 	%f2771, %f2770;\n"
    "	mul.f32 	%f2772, %f14, %f2771;\n"
    "	cvt.rni.f32.f32 	%f2773, %f2772;\n"
    "	mul.f32 	%f2774, %f13, %f2773;\n"
    "	sub.f32 	%f25, %f2770, %f2774;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2775, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2776, %f25, %f25, %f2775;\n"
    "	ld.shared.f32 	%f2777, [%rd15+740];\n"
    "	sub.f32 	%f2778, %f30, %f2777;\n"
    "	mov.f32 	%f2779, %f2778;\n"
    "	mov.f32 	%f2780, %f2779;\n"
    "	mul.f32 	%f2781, %f14, %f2779;\n"
    "	cvt.rni.f32.f32 	%f2782, %f2781;\n"
    "	mul.f32 	%f2783, %f13, %f2782;\n"
    "	sub.f32 	%f37, %f2778, %f2783;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2784, %f37, %f37, %f2776;\n"
    "	ld.shared.f32 	%f2785, [%rd15+744];\n"
    "	sub.f32 	%f2786, %f41, %f2785;\n"
    "	mov.f32 	%f2787, %f2786;\n"
    "	mul.f32 	%f2788, %f2786, %f14;\n"
    "	cvt.rni.f32.f32 	%f2789, %f2788;\n"
    "	mul.f32 	%f2790, %f13, %f2789;\n"
    "	sub.f32 	%f47, %f2786, %f2790;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2784;\n"
    "	mov.f32 	%f2791, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p140, %f49, %f2791;\n"
    "	@!%p140 bra 	$Lt_9_40194;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd109, %r27;\n"
    "	mul.wide.s32 	%rd110, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd110;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f2792, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2793, %f55, %f2792;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2793;\n"
    "	mov.f32 	%f2794, %f58;\n"
    "	mov.f32 	%f2795, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2796, %f2795;\n"
    "	mov.f32 	%f2797, %f55;\n"
    "	mad.f32 %f2798, %f2794, %f2796, %f2797;\n"
    "	mov.f32 	%f64, %f2798;\n"
    "	mov.f32 	%f2799, %f58;\n"
    "	mov.f32 	%f2800, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2801, %f2800;\n"
    "	mov.f32 	%f2802, %f64;\n"
    "	mad.f32 %f2803, %f2799, %f2801, %f2802;\n"
    "	mov.f32 	%f64, %f2803;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f2804, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2805, %f58;\n"
    "	mov.f32 	%f2806, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2807, %f64, %f2806;\n"
    "	ex2.approx.f32 	%f2808, %f2807;\n"
    "	mul.f32 	%f2809, %f2805, %f2808;\n"
    "	mov.f32 	%f2810, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p141, %f55, %f2810;\n"
    "	selp.f32 	%f2811, %f2804, %f2809, %p141;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f2812, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2813, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p142, %f55, %f2813;\n"
    "	selp.f32 	%f80, %f2812, %f2811, %p142;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f2814, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f2814;\n"
    "	mov.f32 	%f2815, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f2815;\n"
    "	mov.f32 	%f2816, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f2816;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f2817, %f81, %f99;\n"
    "	sub.f32 	%f101, %f2817, %f97;\n"
    "	mul.f32 	%f2818, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f2818;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f2819, %f2;\n"
    "	mov.f32 	%f2820, %f26;\n"
    "	mad.f32 	%f2821, %f2820, %f104, %f2819;\n"
    "	mov.f32 	%f2, %f2821;\n"
    "	mov.f32 	%f2822, %f4;\n"
    "	mov.f32 	%f2823, %f38;\n"
    "	mad.f32 	%f2824, %f2823, %f104, %f2822;\n"
    "	mov.f32 	%f4, %f2824;\n"
    "	mov.f32 	%f2825, %f6;\n"
    "	mov.f32 	%f2826, %f48;\n"
    "	mad.f32 	%f2827, %f2826, %f104, %f2825;\n"
    "	mov.f32 	%f6, %f2827;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_40194:\n"
    "	ld.shared.s32 	%r74, [%rd14+764];\n"
    "	add.s32 	%r27, %r74, %r6;\n"
    "	ld.shared.f32 	%f2828, [%rd15+752];\n"
    "	sub.f32 	%f2829, %f19, %f2828;\n"
    "	mov.f32 	%f2830, %f2829;\n"
    "	mul.f32 	%f2831, %f14, %f2830;\n"
    "	cvt.rni.f32.f32 	%f2832, %f2831;\n"
    "	mul.f32 	%f2833, %f13, %f2832;\n"
    "	sub.f32 	%f25, %f2829, %f2833;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2834, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2835, %f25, %f25, %f2834;\n"
    "	ld.shared.f32 	%f2836, [%rd15+756];\n"
    "	sub.f32 	%f2837, %f30, %f2836;\n"
    "	mov.f32 	%f2838, %f2837;\n"
    "	mov.f32 	%f2839, %f2838;\n"
    "	mul.f32 	%f2840, %f14, %f2838;\n"
    "	cvt.rni.f32.f32 	%f2841, %f2840;\n"
    "	mul.f32 	%f2842, %f13, %f2841;\n"
    "	sub.f32 	%f37, %f2837, %f2842;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2843, %f37, %f37, %f2835;\n"
    "	ld.shared.f32 	%f2844, [%rd15+760];\n"
    "	sub.f32 	%f2845, %f41, %f2844;\n"
    "	mov.f32 	%f2846, %f2845;\n"
    "	mul.f32 	%f2847, %f2845, %f14;\n"
    "	cvt.rni.f32.f32 	%f2848, %f2847;\n"
    "	mul.f32 	%f2849, %f13, %f2848;\n"
    "	sub.f32 	%f47, %f2845, %f2849;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2843;\n"
    "	mov.f32 	%f2850, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p143, %f49, %f2850;\n"
    "	@!%p143 bra 	$Lt_9_40706;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd111, %r27;\n"
    "	mul.wide.s32 	%rd112, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd112;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f2851, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2852, %f55, %f2851;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2852;\n"
    "	mov.f32 	%f2853, %f58;\n"
    "	mov.f32 	%f2854, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2855, %f2854;\n"
    "	mov.f32 	%f2856, %f55;\n"
    "	mad.f32 %f2857, %f2853, %f2855, %f2856;\n"
    "	mov.f32 	%f64, %f2857;\n"
    "	mov.f32 	%f2858, %f58;\n"
    "	mov.f32 	%f2859, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2860, %f2859;\n"
    "	mov.f32 	%f2861, %f64;\n"
    "	mad.f32 %f2862, %f2858, %f2860, %f2861;\n"
    "	mov.f32 	%f64, %f2862;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f2863, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2864, %f58;\n"
    "	mov.f32 	%f2865, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2866, %f64, %f2865;\n"
    "	ex2.approx.f32 	%f2867, %f2866;\n"
    "	mul.f32 	%f2868, %f2864, %f2867;\n"
    "	mov.f32 	%f2869, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p144, %f55, %f2869;\n"
    "	selp.f32 	%f2870, %f2863, %f2868, %p144;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f2871, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2872, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p145, %f55, %f2872;\n"
    "	selp.f32 	%f80, %f2871, %f2870, %p145;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f2873, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f2873;\n"
    "	mov.f32 	%f2874, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f2874;\n"
    "	mov.f32 	%f2875, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f2875;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f2876, %f81, %f99;\n"
    "	sub.f32 	%f101, %f2876, %f97;\n"
    "	mul.f32 	%f2877, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f2877;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f2878, %f2;\n"
    "	mov.f32 	%f2879, %f26;\n"
    "	mad.f32 	%f2880, %f2879, %f104, %f2878;\n"
    "	mov.f32 	%f2, %f2880;\n"
    "	mov.f32 	%f2881, %f4;\n"
    "	mov.f32 	%f2882, %f38;\n"
    "	mad.f32 	%f2883, %f2882, %f104, %f2881;\n"
    "	mov.f32 	%f4, %f2883;\n"
    "	mov.f32 	%f2884, %f6;\n"
    "	mov.f32 	%f2885, %f48;\n"
    "	mad.f32 	%f2886, %f2885, %f104, %f2884;\n"
    "	mov.f32 	%f6, %f2886;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_40706:\n"
    "	ld.shared.s32 	%r75, [%rd14+780];\n"
    "	add.s32 	%r27, %r75, %r6;\n"
    "	ld.shared.f32 	%f2887, [%rd15+768];\n"
    "	sub.f32 	%f2888, %f19, %f2887;\n"
    "	mov.f32 	%f2889, %f2888;\n"
    "	mul.f32 	%f2890, %f14, %f2889;\n"
    "	cvt.rni.f32.f32 	%f2891, %f2890;\n"
    "	mul.f32 	%f2892, %f13, %f2891;\n"
    "	sub.f32 	%f25, %f2888, %f2892;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2893, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2894, %f25, %f25, %f2893;\n"
    "	ld.shared.f32 	%f2895, [%rd15+772];\n"
    "	sub.f32 	%f2896, %f30, %f2895;\n"
    "	mov.f32 	%f2897, %f2896;\n"
    "	mov.f32 	%f2898, %f2897;\n"
    "	mul.f32 	%f2899, %f14, %f2897;\n"
    "	cvt.rni.f32.f32 	%f2900, %f2899;\n"
    "	mul.f32 	%f2901, %f13, %f2900;\n"
    "	sub.f32 	%f37, %f2896, %f2901;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2902, %f37, %f37, %f2894;\n"
    "	ld.shared.f32 	%f2903, [%rd15+776];\n"
    "	sub.f32 	%f2904, %f41, %f2903;\n"
    "	mov.f32 	%f2905, %f2904;\n"
    "	mul.f32 	%f2906, %f2904, %f14;\n"
    "	cvt.rni.f32.f32 	%f2907, %f2906;\n"
    "	mul.f32 	%f2908, %f13, %f2907;\n"
    "	sub.f32 	%f47, %f2904, %f2908;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2902;\n"
    "	mov.f32 	%f2909, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p146, %f49, %f2909;\n"
    "	@!%p146 bra 	$Lt_9_41218;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd113, %r27;\n"
    "	mul.wide.s32 	%rd114, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd114;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f2910, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2911, %f55, %f2910;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2911;\n"
    "	mov.f32 	%f2912, %f58;\n"
    "	mov.f32 	%f2913, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2914, %f2913;\n"
    "	mov.f32 	%f2915, %f55;\n"
    "	mad.f32 %f2916, %f2912, %f2914, %f2915;\n"
    "	mov.f32 	%f64, %f2916;\n"
    "	mov.f32 	%f2917, %f58;\n"
    "	mov.f32 	%f2918, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2919, %f2918;\n"
    "	mov.f32 	%f2920, %f64;\n"
    "	mad.f32 %f2921, %f2917, %f2919, %f2920;\n"
    "	mov.f32 	%f64, %f2921;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f2922, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2923, %f58;\n"
    "	mov.f32 	%f2924, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2925, %f64, %f2924;\n"
    "	ex2.approx.f32 	%f2926, %f2925;\n"
    "	mul.f32 	%f2927, %f2923, %f2926;\n"
    "	mov.f32 	%f2928, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p147, %f55, %f2928;\n"
    "	selp.f32 	%f2929, %f2922, %f2927, %p147;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f2930, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2931, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p148, %f55, %f2931;\n"
    "	selp.f32 	%f80, %f2930, %f2929, %p148;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f2932, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f2932;\n"
    "	mov.f32 	%f2933, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f2933;\n"
    "	mov.f32 	%f2934, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f2934;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f2935, %f81, %f99;\n"
    "	sub.f32 	%f101, %f2935, %f97;\n"
    "	mul.f32 	%f2936, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f2936;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f2937, %f2;\n"
    "	mov.f32 	%f2938, %f26;\n"
    "	mad.f32 	%f2939, %f2938, %f104, %f2937;\n"
    "	mov.f32 	%f2, %f2939;\n"
    "	mov.f32 	%f2940, %f4;\n"
    "	mov.f32 	%f2941, %f38;\n"
    "	mad.f32 	%f2942, %f2941, %f104, %f2940;\n"
    "	mov.f32 	%f4, %f2942;\n"
    "	mov.f32 	%f2943, %f6;\n"
    "	mov.f32 	%f2944, %f48;\n"
    "	mad.f32 	%f2945, %f2944, %f104, %f2943;\n"
    "	mov.f32 	%f6, %f2945;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_41218:\n"
    "	ld.shared.s32 	%r76, [%rd14+796];\n"
    "	add.s32 	%r27, %r76, %r6;\n"
    "	ld.shared.f32 	%f2946, [%rd15+784];\n"
    "	sub.f32 	%f2947, %f19, %f2946;\n"
    "	mov.f32 	%f2948, %f2947;\n"
    "	mul.f32 	%f2949, %f14, %f2948;\n"
    "	cvt.rni.f32.f32 	%f2950, %f2949;\n"
    "	mul.f32 	%f2951, %f13, %f2950;\n"
    "	sub.f32 	%f25, %f2947, %f2951;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2952, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2953, %f25, %f25, %f2952;\n"
    "	ld.shared.f32 	%f2954, [%rd15+788];\n"
    "	sub.f32 	%f2955, %f30, %f2954;\n"
    "	mov.f32 	%f2956, %f2955;\n"
    "	mov.f32 	%f2957, %f2956;\n"
    "	mul.f32 	%f2958, %f14, %f2956;\n"
    "	cvt.rni.f32.f32 	%f2959, %f2958;\n"
    "	mul.f32 	%f2960, %f13, %f2959;\n"
    "	sub.f32 	%f37, %f2955, %f2960;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2961, %f37, %f37, %f2953;\n"
    "	ld.shared.f32 	%f2962, [%rd15+792];\n"
    "	sub.f32 	%f2963, %f41, %f2962;\n"
    "	mov.f32 	%f2964, %f2963;\n"
    "	mul.f32 	%f2965, %f2963, %f14;\n"
    "	cvt.rni.f32.f32 	%f2966, %f2965;\n"
    "	mul.f32 	%f2967, %f13, %f2966;\n"
    "	sub.f32 	%f47, %f2963, %f2967;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2961;\n"
    "	mov.f32 	%f2968, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p149, %f49, %f2968;\n"
    "	@!%p149 bra 	$Lt_9_41730;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd115, %r27;\n"
    "	mul.wide.s32 	%rd116, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd116;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f2969, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2970, %f55, %f2969;\n"
    "	cvt.rzi.f32.f32 	%f58, %f2970;\n"
    "	mov.f32 	%f2971, %f58;\n"
    "	mov.f32 	%f2972, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2973, %f2972;\n"
    "	mov.f32 	%f2974, %f55;\n"
    "	mad.f32 %f2975, %f2971, %f2973, %f2974;\n"
    "	mov.f32 	%f64, %f2975;\n"
    "	mov.f32 	%f2976, %f58;\n"
    "	mov.f32 	%f2977, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2978, %f2977;\n"
    "	mov.f32 	%f2979, %f64;\n"
    "	mad.f32 %f2980, %f2976, %f2978, %f2979;\n"
    "	mov.f32 	%f64, %f2980;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f2981, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f2982, %f58;\n"
    "	mov.f32 	%f2983, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2984, %f64, %f2983;\n"
    "	ex2.approx.f32 	%f2985, %f2984;\n"
    "	mul.f32 	%f2986, %f2982, %f2985;\n"
    "	mov.f32 	%f2987, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p150, %f55, %f2987;\n"
    "	selp.f32 	%f2988, %f2981, %f2986, %p150;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f2989, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f2990, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p151, %f55, %f2990;\n"
    "	selp.f32 	%f80, %f2989, %f2988, %p151;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f2991, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f2991;\n"
    "	mov.f32 	%f2992, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f2992;\n"
    "	mov.f32 	%f2993, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f2993;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f2994, %f81, %f99;\n"
    "	sub.f32 	%f101, %f2994, %f97;\n"
    "	mul.f32 	%f2995, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f2995;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f2996, %f2;\n"
    "	mov.f32 	%f2997, %f26;\n"
    "	mad.f32 	%f2998, %f2997, %f104, %f2996;\n"
    "	mov.f32 	%f2, %f2998;\n"
    "	mov.f32 	%f2999, %f4;\n"
    "	mov.f32 	%f3000, %f38;\n"
    "	mad.f32 	%f3001, %f3000, %f104, %f2999;\n"
    "	mov.f32 	%f4, %f3001;\n"
    "	mov.f32 	%f3002, %f6;\n"
    "	mov.f32 	%f3003, %f48;\n"
    "	mad.f32 	%f3004, %f3003, %f104, %f3002;\n"
    "	mov.f32 	%f6, %f3004;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_41730:\n"
    "	ld.shared.s32 	%r77, [%rd14+812];\n"
    "	add.s32 	%r27, %r77, %r6;\n"
    "	ld.shared.f32 	%f3005, [%rd15+800];\n"
    "	sub.f32 	%f3006, %f19, %f3005;\n"
    "	mov.f32 	%f3007, %f3006;\n"
    "	mul.f32 	%f3008, %f14, %f3007;\n"
    "	cvt.rni.f32.f32 	%f3009, %f3008;\n"
    "	mul.f32 	%f3010, %f13, %f3009;\n"
    "	sub.f32 	%f25, %f3006, %f3010;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3011, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3012, %f25, %f25, %f3011;\n"
    "	ld.shared.f32 	%f3013, [%rd15+804];\n"
    "	sub.f32 	%f3014, %f30, %f3013;\n"
    "	mov.f32 	%f3015, %f3014;\n"
    "	mov.f32 	%f3016, %f3015;\n"
    "	mul.f32 	%f3017, %f14, %f3015;\n"
    "	cvt.rni.f32.f32 	%f3018, %f3017;\n"
    "	mul.f32 	%f3019, %f13, %f3018;\n"
    "	sub.f32 	%f37, %f3014, %f3019;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3020, %f37, %f37, %f3012;\n"
    "	ld.shared.f32 	%f3021, [%rd15+808];\n"
    "	sub.f32 	%f3022, %f41, %f3021;\n"
    "	mov.f32 	%f3023, %f3022;\n"
    "	mul.f32 	%f3024, %f3022, %f14;\n"
    "	cvt.rni.f32.f32 	%f3025, %f3024;\n"
    "	mul.f32 	%f3026, %f13, %f3025;\n"
    "	sub.f32 	%f47, %f3022, %f3026;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3020;\n"
    "	mov.f32 	%f3027, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p152, %f49, %f3027;\n"
    "	@!%p152 bra 	$Lt_9_42242;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd117, %r27;\n"
    "	mul.wide.s32 	%rd118, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd118;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f3028, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3029, %f55, %f3028;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3029;\n"
    "	mov.f32 	%f3030, %f58;\n"
    "	mov.f32 	%f3031, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3032, %f3031;\n"
    "	mov.f32 	%f3033, %f55;\n"
    "	mad.f32 %f3034, %f3030, %f3032, %f3033;\n"
    "	mov.f32 	%f64, %f3034;\n"
    "	mov.f32 	%f3035, %f58;\n"
    "	mov.f32 	%f3036, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3037, %f3036;\n"
    "	mov.f32 	%f3038, %f64;\n"
    "	mad.f32 %f3039, %f3035, %f3037, %f3038;\n"
    "	mov.f32 	%f64, %f3039;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f3040, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3041, %f58;\n"
    "	mov.f32 	%f3042, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3043, %f64, %f3042;\n"
    "	ex2.approx.f32 	%f3044, %f3043;\n"
    "	mul.f32 	%f3045, %f3041, %f3044;\n"
    "	mov.f32 	%f3046, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p153, %f55, %f3046;\n"
    "	selp.f32 	%f3047, %f3040, %f3045, %p153;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f3048, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3049, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p154, %f55, %f3049;\n"
    "	selp.f32 	%f80, %f3048, %f3047, %p154;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f3050, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f3050;\n"
    "	mov.f32 	%f3051, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f3051;\n"
    "	mov.f32 	%f3052, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f3052;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f3053, %f81, %f99;\n"
    "	sub.f32 	%f101, %f3053, %f97;\n"
    "	mul.f32 	%f3054, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f3054;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f3055, %f2;\n"
    "	mov.f32 	%f3056, %f26;\n"
    "	mad.f32 	%f3057, %f3056, %f104, %f3055;\n"
    "	mov.f32 	%f2, %f3057;\n"
    "	mov.f32 	%f3058, %f4;\n"
    "	mov.f32 	%f3059, %f38;\n"
    "	mad.f32 	%f3060, %f3059, %f104, %f3058;\n"
    "	mov.f32 	%f4, %f3060;\n"
    "	mov.f32 	%f3061, %f6;\n"
    "	mov.f32 	%f3062, %f48;\n"
    "	mad.f32 	%f3063, %f3062, %f104, %f3061;\n"
    "	mov.f32 	%f6, %f3063;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_42242:\n"
    "	ld.shared.s32 	%r78, [%rd14+828];\n"
    "	add.s32 	%r27, %r78, %r6;\n"
    "	ld.shared.f32 	%f3064, [%rd15+816];\n"
    "	sub.f32 	%f3065, %f19, %f3064;\n"
    "	mov.f32 	%f3066, %f3065;\n"
    "	mul.f32 	%f3067, %f14, %f3066;\n"
    "	cvt.rni.f32.f32 	%f3068, %f3067;\n"
    "	mul.f32 	%f3069, %f13, %f3068;\n"
    "	sub.f32 	%f25, %f3065, %f3069;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3070, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3071, %f25, %f25, %f3070;\n"
    "	ld.shared.f32 	%f3072, [%rd15+820];\n"
    "	sub.f32 	%f3073, %f30, %f3072;\n"
    "	mov.f32 	%f3074, %f3073;\n"
    "	mov.f32 	%f3075, %f3074;\n"
    "	mul.f32 	%f3076, %f14, %f3074;\n"
    "	cvt.rni.f32.f32 	%f3077, %f3076;\n"
    "	mul.f32 	%f3078, %f13, %f3077;\n"
    "	sub.f32 	%f37, %f3073, %f3078;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3079, %f37, %f37, %f3071;\n"
    "	ld.shared.f32 	%f3080, [%rd15+824];\n"
    "	sub.f32 	%f3081, %f41, %f3080;\n"
    "	mov.f32 	%f3082, %f3081;\n"
    "	mul.f32 	%f3083, %f3081, %f14;\n"
    "	cvt.rni.f32.f32 	%f3084, %f3083;\n"
    "	mul.f32 	%f3085, %f13, %f3084;\n"
    "	sub.f32 	%f47, %f3081, %f3085;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3079;\n"
    "	mov.f32 	%f3086, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p155, %f49, %f3086;\n"
    "	@!%p155 bra 	$Lt_9_42754;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd119, %r27;\n"
    "	mul.wide.s32 	%rd120, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd120;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f3087, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3088, %f55, %f3087;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3088;\n"
    "	mov.f32 	%f3089, %f58;\n"
    "	mov.f32 	%f3090, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3091, %f3090;\n"
    "	mov.f32 	%f3092, %f55;\n"
    "	mad.f32 %f3093, %f3089, %f3091, %f3092;\n"
    "	mov.f32 	%f64, %f3093;\n"
    "	mov.f32 	%f3094, %f58;\n"
    "	mov.f32 	%f3095, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3096, %f3095;\n"
    "	mov.f32 	%f3097, %f64;\n"
    "	mad.f32 %f3098, %f3094, %f3096, %f3097;\n"
    "	mov.f32 	%f64, %f3098;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f3099, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3100, %f58;\n"
    "	mov.f32 	%f3101, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3102, %f64, %f3101;\n"
    "	ex2.approx.f32 	%f3103, %f3102;\n"
    "	mul.f32 	%f3104, %f3100, %f3103;\n"
    "	mov.f32 	%f3105, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p156, %f55, %f3105;\n"
    "	selp.f32 	%f3106, %f3099, %f3104, %p156;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f3107, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3108, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p157, %f55, %f3108;\n"
    "	selp.f32 	%f80, %f3107, %f3106, %p157;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f3109, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f3109;\n"
    "	mov.f32 	%f3110, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f3110;\n"
    "	mov.f32 	%f3111, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f3111;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f3112, %f81, %f99;\n"
    "	sub.f32 	%f101, %f3112, %f97;\n"
    "	mul.f32 	%f3113, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f3113;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f3114, %f2;\n"
    "	mov.f32 	%f3115, %f26;\n"
    "	mad.f32 	%f3116, %f3115, %f104, %f3114;\n"
    "	mov.f32 	%f2, %f3116;\n"
    "	mov.f32 	%f3117, %f4;\n"
    "	mov.f32 	%f3118, %f38;\n"
    "	mad.f32 	%f3119, %f3118, %f104, %f3117;\n"
    "	mov.f32 	%f4, %f3119;\n"
    "	mov.f32 	%f3120, %f6;\n"
    "	mov.f32 	%f3121, %f48;\n"
    "	mad.f32 	%f3122, %f3121, %f104, %f3120;\n"
    "	mov.f32 	%f6, %f3122;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_42754:\n"
    "	ld.shared.s32 	%r79, [%rd14+844];\n"
    "	add.s32 	%r27, %r79, %r6;\n"
    "	ld.shared.f32 	%f3123, [%rd15+832];\n"
    "	sub.f32 	%f3124, %f19, %f3123;\n"
    "	mov.f32 	%f3125, %f3124;\n"
    "	mul.f32 	%f3126, %f14, %f3125;\n"
    "	cvt.rni.f32.f32 	%f3127, %f3126;\n"
    "	mul.f32 	%f3128, %f13, %f3127;\n"
    "	sub.f32 	%f25, %f3124, %f3128;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3129, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3130, %f25, %f25, %f3129;\n"
    "	ld.shared.f32 	%f3131, [%rd15+836];\n"
    "	sub.f32 	%f3132, %f30, %f3131;\n"
    "	mov.f32 	%f3133, %f3132;\n"
    "	mov.f32 	%f3134, %f3133;\n"
    "	mul.f32 	%f3135, %f14, %f3133;\n"
    "	cvt.rni.f32.f32 	%f3136, %f3135;\n"
    "	mul.f32 	%f3137, %f13, %f3136;\n"
    "	sub.f32 	%f37, %f3132, %f3137;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3138, %f37, %f37, %f3130;\n"
    "	ld.shared.f32 	%f3139, [%rd15+840];\n"
    "	sub.f32 	%f3140, %f41, %f3139;\n"
    "	mov.f32 	%f3141, %f3140;\n"
    "	mul.f32 	%f3142, %f3140, %f14;\n"
    "	cvt.rni.f32.f32 	%f3143, %f3142;\n"
    "	mul.f32 	%f3144, %f13, %f3143;\n"
    "	sub.f32 	%f47, %f3140, %f3144;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3138;\n"
    "	mov.f32 	%f3145, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p158, %f49, %f3145;\n"
    "	@!%p158 bra 	$Lt_9_43266;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd121, %r27;\n"
    "	mul.wide.s32 	%rd122, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd122;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f3146, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3147, %f55, %f3146;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3147;\n"
    "	mov.f32 	%f3148, %f58;\n"
    "	mov.f32 	%f3149, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3150, %f3149;\n"
    "	mov.f32 	%f3151, %f55;\n"
    "	mad.f32 %f3152, %f3148, %f3150, %f3151;\n"
    "	mov.f32 	%f64, %f3152;\n"
    "	mov.f32 	%f3153, %f58;\n"
    "	mov.f32 	%f3154, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3155, %f3154;\n"
    "	mov.f32 	%f3156, %f64;\n"
    "	mad.f32 %f3157, %f3153, %f3155, %f3156;\n"
    "	mov.f32 	%f64, %f3157;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f3158, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3159, %f58;\n"
    "	mov.f32 	%f3160, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3161, %f64, %f3160;\n"
    "	ex2.approx.f32 	%f3162, %f3161;\n"
    "	mul.f32 	%f3163, %f3159, %f3162;\n"
    "	mov.f32 	%f3164, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p159, %f55, %f3164;\n"
    "	selp.f32 	%f3165, %f3158, %f3163, %p159;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f3166, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3167, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p160, %f55, %f3167;\n"
    "	selp.f32 	%f80, %f3166, %f3165, %p160;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f3168, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f3168;\n"
    "	mov.f32 	%f3169, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f3169;\n"
    "	mov.f32 	%f3170, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f3170;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f3171, %f81, %f99;\n"
    "	sub.f32 	%f101, %f3171, %f97;\n"
    "	mul.f32 	%f3172, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f3172;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f3173, %f2;\n"
    "	mov.f32 	%f3174, %f26;\n"
    "	mad.f32 	%f3175, %f3174, %f104, %f3173;\n"
    "	mov.f32 	%f2, %f3175;\n"
    "	mov.f32 	%f3176, %f4;\n"
    "	mov.f32 	%f3177, %f38;\n"
    "	mad.f32 	%f3178, %f3177, %f104, %f3176;\n"
    "	mov.f32 	%f4, %f3178;\n"
    "	mov.f32 	%f3179, %f6;\n"
    "	mov.f32 	%f3180, %f48;\n"
    "	mad.f32 	%f3181, %f3180, %f104, %f3179;\n"
    "	mov.f32 	%f6, %f3181;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_43266:\n"
    "	ld.shared.s32 	%r80, [%rd14+860];\n"
    "	add.s32 	%r27, %r80, %r6;\n"
    "	ld.shared.f32 	%f3182, [%rd15+848];\n"
    "	sub.f32 	%f3183, %f19, %f3182;\n"
    "	mov.f32 	%f3184, %f3183;\n"
    "	mul.f32 	%f3185, %f14, %f3184;\n"
    "	cvt.rni.f32.f32 	%f3186, %f3185;\n"
    "	mul.f32 	%f3187, %f13, %f3186;\n"
    "	sub.f32 	%f25, %f3183, %f3187;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3188, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3189, %f25, %f25, %f3188;\n"
    "	ld.shared.f32 	%f3190, [%rd15+852];\n"
    "	sub.f32 	%f3191, %f30, %f3190;\n"
    "	mov.f32 	%f3192, %f3191;\n"
    "	mov.f32 	%f3193, %f3192;\n"
    "	mul.f32 	%f3194, %f14, %f3192;\n"
    "	cvt.rni.f32.f32 	%f3195, %f3194;\n"
    "	mul.f32 	%f3196, %f13, %f3195;\n"
    "	sub.f32 	%f37, %f3191, %f3196;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3197, %f37, %f37, %f3189;\n"
    "	ld.shared.f32 	%f3198, [%rd15+856];\n"
    "	sub.f32 	%f3199, %f41, %f3198;\n"
    "	mov.f32 	%f3200, %f3199;\n"
    "	mul.f32 	%f3201, %f3199, %f14;\n"
    "	cvt.rni.f32.f32 	%f3202, %f3201;\n"
    "	mul.f32 	%f3203, %f13, %f3202;\n"
    "	sub.f32 	%f47, %f3199, %f3203;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3197;\n"
    "	mov.f32 	%f3204, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p161, %f49, %f3204;\n"
    "	@!%p161 bra 	$Lt_9_43778;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd123, %r27;\n"
    "	mul.wide.s32 	%rd124, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd124;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f3205, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3206, %f55, %f3205;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3206;\n"
    "	mov.f32 	%f3207, %f58;\n"
    "	mov.f32 	%f3208, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3209, %f3208;\n"
    "	mov.f32 	%f3210, %f55;\n"
    "	mad.f32 %f3211, %f3207, %f3209, %f3210;\n"
    "	mov.f32 	%f64, %f3211;\n"
    "	mov.f32 	%f3212, %f58;\n"
    "	mov.f32 	%f3213, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3214, %f3213;\n"
    "	mov.f32 	%f3215, %f64;\n"
    "	mad.f32 %f3216, %f3212, %f3214, %f3215;\n"
    "	mov.f32 	%f64, %f3216;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f3217, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3218, %f58;\n"
    "	mov.f32 	%f3219, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3220, %f64, %f3219;\n"
    "	ex2.approx.f32 	%f3221, %f3220;\n"
    "	mul.f32 	%f3222, %f3218, %f3221;\n"
    "	mov.f32 	%f3223, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p162, %f55, %f3223;\n"
    "	selp.f32 	%f3224, %f3217, %f3222, %p162;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f3225, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3226, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p163, %f55, %f3226;\n"
    "	selp.f32 	%f80, %f3225, %f3224, %p163;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f3227, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f3227;\n"
    "	mov.f32 	%f3228, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f3228;\n"
    "	mov.f32 	%f3229, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f3229;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f3230, %f81, %f99;\n"
    "	sub.f32 	%f101, %f3230, %f97;\n"
    "	mul.f32 	%f3231, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f3231;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f3232, %f2;\n"
    "	mov.f32 	%f3233, %f26;\n"
    "	mad.f32 	%f3234, %f3233, %f104, %f3232;\n"
    "	mov.f32 	%f2, %f3234;\n"
    "	mov.f32 	%f3235, %f4;\n"
    "	mov.f32 	%f3236, %f38;\n"
    "	mad.f32 	%f3237, %f3236, %f104, %f3235;\n"
    "	mov.f32 	%f4, %f3237;\n"
    "	mov.f32 	%f3238, %f6;\n"
    "	mov.f32 	%f3239, %f48;\n"
    "	mad.f32 	%f3240, %f3239, %f104, %f3238;\n"
    "	mov.f32 	%f6, %f3240;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_43778:\n"
    "	ld.shared.s32 	%r81, [%rd14+876];\n"
    "	add.s32 	%r27, %r81, %r6;\n"
    "	ld.shared.f32 	%f3241, [%rd15+864];\n"
    "	sub.f32 	%f3242, %f19, %f3241;\n"
    "	mov.f32 	%f3243, %f3242;\n"
    "	mul.f32 	%f3244, %f14, %f3243;\n"
    "	cvt.rni.f32.f32 	%f3245, %f3244;\n"
    "	mul.f32 	%f3246, %f13, %f3245;\n"
    "	sub.f32 	%f25, %f3242, %f3246;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3247, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3248, %f25, %f25, %f3247;\n"
    "	ld.shared.f32 	%f3249, [%rd15+868];\n"
    "	sub.f32 	%f3250, %f30, %f3249;\n"
    "	mov.f32 	%f3251, %f3250;\n"
    "	mov.f32 	%f3252, %f3251;\n"
    "	mul.f32 	%f3253, %f14, %f3251;\n"
    "	cvt.rni.f32.f32 	%f3254, %f3253;\n"
    "	mul.f32 	%f3255, %f13, %f3254;\n"
    "	sub.f32 	%f37, %f3250, %f3255;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3256, %f37, %f37, %f3248;\n"
    "	ld.shared.f32 	%f3257, [%rd15+872];\n"
    "	sub.f32 	%f3258, %f41, %f3257;\n"
    "	mov.f32 	%f3259, %f3258;\n"
    "	mul.f32 	%f3260, %f3258, %f14;\n"
    "	cvt.rni.f32.f32 	%f3261, %f3260;\n"
    "	mul.f32 	%f3262, %f13, %f3261;\n"
    "	sub.f32 	%f47, %f3258, %f3262;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3256;\n"
    "	mov.f32 	%f3263, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p164, %f49, %f3263;\n"
    "	@!%p164 bra 	$Lt_9_44290;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd125, %r27;\n"
    "	mul.wide.s32 	%rd126, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd126;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f3264, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3265, %f55, %f3264;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3265;\n"
    "	mov.f32 	%f3266, %f58;\n"
    "	mov.f32 	%f3267, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3268, %f3267;\n"
    "	mov.f32 	%f3269, %f55;\n"
    "	mad.f32 %f3270, %f3266, %f3268, %f3269;\n"
    "	mov.f32 	%f64, %f3270;\n"
    "	mov.f32 	%f3271, %f58;\n"
    "	mov.f32 	%f3272, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3273, %f3272;\n"
    "	mov.f32 	%f3274, %f64;\n"
    "	mad.f32 %f3275, %f3271, %f3273, %f3274;\n"
    "	mov.f32 	%f64, %f3275;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f3276, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3277, %f58;\n"
    "	mov.f32 	%f3278, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3279, %f64, %f3278;\n"
    "	ex2.approx.f32 	%f3280, %f3279;\n"
    "	mul.f32 	%f3281, %f3277, %f3280;\n"
    "	mov.f32 	%f3282, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p165, %f55, %f3282;\n"
    "	selp.f32 	%f3283, %f3276, %f3281, %p165;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f3284, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3285, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p166, %f55, %f3285;\n"
    "	selp.f32 	%f80, %f3284, %f3283, %p166;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f3286, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f3286;\n"
    "	mov.f32 	%f3287, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f3287;\n"
    "	mov.f32 	%f3288, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f3288;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f3289, %f81, %f99;\n"
    "	sub.f32 	%f101, %f3289, %f97;\n"
    "	mul.f32 	%f3290, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f3290;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f3291, %f2;\n"
    "	mov.f32 	%f3292, %f26;\n"
    "	mad.f32 	%f3293, %f3292, %f104, %f3291;\n"
    "	mov.f32 	%f2, %f3293;\n"
    "	mov.f32 	%f3294, %f4;\n"
    "	mov.f32 	%f3295, %f38;\n"
    "	mad.f32 	%f3296, %f3295, %f104, %f3294;\n"
    "	mov.f32 	%f4, %f3296;\n"
    "	mov.f32 	%f3297, %f6;\n"
    "	mov.f32 	%f3298, %f48;\n"
    "	mad.f32 	%f3299, %f3298, %f104, %f3297;\n"
    "	mov.f32 	%f6, %f3299;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_44290:\n"
    "	ld.shared.s32 	%r82, [%rd14+892];\n"
    "	add.s32 	%r27, %r82, %r6;\n"
    "	ld.shared.f32 	%f3300, [%rd15+880];\n"
    "	sub.f32 	%f3301, %f19, %f3300;\n"
    "	mov.f32 	%f3302, %f3301;\n"
    "	mul.f32 	%f3303, %f14, %f3302;\n"
    "	cvt.rni.f32.f32 	%f3304, %f3303;\n"
    "	mul.f32 	%f3305, %f13, %f3304;\n"
    "	sub.f32 	%f25, %f3301, %f3305;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3306, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3307, %f25, %f25, %f3306;\n"
    "	ld.shared.f32 	%f3308, [%rd15+884];\n"
    "	sub.f32 	%f3309, %f30, %f3308;\n"
    "	mov.f32 	%f3310, %f3309;\n"
    "	mov.f32 	%f3311, %f3310;\n"
    "	mul.f32 	%f3312, %f14, %f3310;\n"
    "	cvt.rni.f32.f32 	%f3313, %f3312;\n"
    "	mul.f32 	%f3314, %f13, %f3313;\n"
    "	sub.f32 	%f37, %f3309, %f3314;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3315, %f37, %f37, %f3307;\n"
    "	ld.shared.f32 	%f3316, [%rd15+888];\n"
    "	sub.f32 	%f3317, %f41, %f3316;\n"
    "	mov.f32 	%f3318, %f3317;\n"
    "	mul.f32 	%f3319, %f3317, %f14;\n"
    "	cvt.rni.f32.f32 	%f3320, %f3319;\n"
    "	mul.f32 	%f3321, %f13, %f3320;\n"
    "	sub.f32 	%f47, %f3317, %f3321;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3315;\n"
    "	mov.f32 	%f3322, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p167, %f49, %f3322;\n"
    "	@!%p167 bra 	$Lt_9_44802;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd127, %r27;\n"
    "	mul.wide.s32 	%rd128, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd128;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f3323, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3324, %f55, %f3323;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3324;\n"
    "	mov.f32 	%f3325, %f58;\n"
    "	mov.f32 	%f3326, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3327, %f3326;\n"
    "	mov.f32 	%f3328, %f55;\n"
    "	mad.f32 %f3329, %f3325, %f3327, %f3328;\n"
    "	mov.f32 	%f64, %f3329;\n"
    "	mov.f32 	%f3330, %f58;\n"
    "	mov.f32 	%f3331, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3332, %f3331;\n"
    "	mov.f32 	%f3333, %f64;\n"
    "	mad.f32 %f3334, %f3330, %f3332, %f3333;\n"
    "	mov.f32 	%f64, %f3334;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f3335, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3336, %f58;\n"
    "	mov.f32 	%f3337, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3338, %f64, %f3337;\n"
    "	ex2.approx.f32 	%f3339, %f3338;\n"
    "	mul.f32 	%f3340, %f3336, %f3339;\n"
    "	mov.f32 	%f3341, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p168, %f55, %f3341;\n"
    "	selp.f32 	%f3342, %f3335, %f3340, %p168;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f3343, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3344, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p169, %f55, %f3344;\n"
    "	selp.f32 	%f80, %f3343, %f3342, %p169;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f3345, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f3345;\n"
    "	mov.f32 	%f3346, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f3346;\n"
    "	mov.f32 	%f3347, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f3347;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f3348, %f81, %f99;\n"
    "	sub.f32 	%f101, %f3348, %f97;\n"
    "	mul.f32 	%f3349, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f3349;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f3350, %f2;\n"
    "	mov.f32 	%f3351, %f26;\n"
    "	mad.f32 	%f3352, %f3351, %f104, %f3350;\n"
    "	mov.f32 	%f2, %f3352;\n"
    "	mov.f32 	%f3353, %f4;\n"
    "	mov.f32 	%f3354, %f38;\n"
    "	mad.f32 	%f3355, %f3354, %f104, %f3353;\n"
    "	mov.f32 	%f4, %f3355;\n"
    "	mov.f32 	%f3356, %f6;\n"
    "	mov.f32 	%f3357, %f48;\n"
    "	mad.f32 	%f3358, %f3357, %f104, %f3356;\n"
    "	mov.f32 	%f6, %f3358;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_44802:\n"
    "	ld.shared.s32 	%r83, [%rd14+908];\n"
    "	add.s32 	%r27, %r83, %r6;\n"
    "	ld.shared.f32 	%f3359, [%rd15+896];\n"
    "	sub.f32 	%f3360, %f19, %f3359;\n"
    "	mov.f32 	%f3361, %f3360;\n"
    "	mul.f32 	%f3362, %f14, %f3361;\n"
    "	cvt.rni.f32.f32 	%f3363, %f3362;\n"
    "	mul.f32 	%f3364, %f13, %f3363;\n"
    "	sub.f32 	%f25, %f3360, %f3364;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3365, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3366, %f25, %f25, %f3365;\n"
    "	ld.shared.f32 	%f3367, [%rd15+900];\n"
    "	sub.f32 	%f3368, %f30, %f3367;\n"
    "	mov.f32 	%f3369, %f3368;\n"
    "	mov.f32 	%f3370, %f3369;\n"
    "	mul.f32 	%f3371, %f14, %f3369;\n"
    "	cvt.rni.f32.f32 	%f3372, %f3371;\n"
    "	mul.f32 	%f3373, %f13, %f3372;\n"
    "	sub.f32 	%f37, %f3368, %f3373;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3374, %f37, %f37, %f3366;\n"
    "	ld.shared.f32 	%f3375, [%rd15+904];\n"
    "	sub.f32 	%f3376, %f41, %f3375;\n"
    "	mov.f32 	%f3377, %f3376;\n"
    "	mul.f32 	%f3378, %f3376, %f14;\n"
    "	cvt.rni.f32.f32 	%f3379, %f3378;\n"
    "	mul.f32 	%f3380, %f13, %f3379;\n"
    "	sub.f32 	%f47, %f3376, %f3380;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3374;\n"
    "	mov.f32 	%f3381, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p170, %f49, %f3381;\n"
    "	@!%p170 bra 	$Lt_9_45314;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd129, %r27;\n"
    "	mul.wide.s32 	%rd130, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd130;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f3382, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3383, %f55, %f3382;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3383;\n"
    "	mov.f32 	%f3384, %f58;\n"
    "	mov.f32 	%f3385, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3386, %f3385;\n"
    "	mov.f32 	%f3387, %f55;\n"
    "	mad.f32 %f3388, %f3384, %f3386, %f3387;\n"
    "	mov.f32 	%f64, %f3388;\n"
    "	mov.f32 	%f3389, %f58;\n"
    "	mov.f32 	%f3390, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3391, %f3390;\n"
    "	mov.f32 	%f3392, %f64;\n"
    "	mad.f32 %f3393, %f3389, %f3391, %f3392;\n"
    "	mov.f32 	%f64, %f3393;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f3394, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3395, %f58;\n"
    "	mov.f32 	%f3396, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3397, %f64, %f3396;\n"
    "	ex2.approx.f32 	%f3398, %f3397;\n"
    "	mul.f32 	%f3399, %f3395, %f3398;\n"
    "	mov.f32 	%f3400, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p171, %f55, %f3400;\n"
    "	selp.f32 	%f3401, %f3394, %f3399, %p171;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f3402, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3403, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p172, %f55, %f3403;\n"
    "	selp.f32 	%f80, %f3402, %f3401, %p172;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f3404, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f3404;\n"
    "	mov.f32 	%f3405, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f3405;\n"
    "	mov.f32 	%f3406, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f3406;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f3407, %f81, %f99;\n"
    "	sub.f32 	%f101, %f3407, %f97;\n"
    "	mul.f32 	%f3408, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f3408;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f3409, %f2;\n"
    "	mov.f32 	%f3410, %f26;\n"
    "	mad.f32 	%f3411, %f3410, %f104, %f3409;\n"
    "	mov.f32 	%f2, %f3411;\n"
    "	mov.f32 	%f3412, %f4;\n"
    "	mov.f32 	%f3413, %f38;\n"
    "	mad.f32 	%f3414, %f3413, %f104, %f3412;\n"
    "	mov.f32 	%f4, %f3414;\n"
    "	mov.f32 	%f3415, %f6;\n"
    "	mov.f32 	%f3416, %f48;\n"
    "	mad.f32 	%f3417, %f3416, %f104, %f3415;\n"
    "	mov.f32 	%f6, %f3417;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_45314:\n"
    "	ld.shared.s32 	%r84, [%rd14+924];\n"
    "	add.s32 	%r27, %r84, %r6;\n"
    "	ld.shared.f32 	%f3418, [%rd15+912];\n"
    "	sub.f32 	%f3419, %f19, %f3418;\n"
    "	mov.f32 	%f3420, %f3419;\n"
    "	mul.f32 	%f3421, %f14, %f3420;\n"
    "	cvt.rni.f32.f32 	%f3422, %f3421;\n"
    "	mul.f32 	%f3423, %f13, %f3422;\n"
    "	sub.f32 	%f25, %f3419, %f3423;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3424, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3425, %f25, %f25, %f3424;\n"
    "	ld.shared.f32 	%f3426, [%rd15+916];\n"
    "	sub.f32 	%f3427, %f30, %f3426;\n"
    "	mov.f32 	%f3428, %f3427;\n"
    "	mov.f32 	%f3429, %f3428;\n"
    "	mul.f32 	%f3430, %f14, %f3428;\n"
    "	cvt.rni.f32.f32 	%f3431, %f3430;\n"
    "	mul.f32 	%f3432, %f13, %f3431;\n"
    "	sub.f32 	%f37, %f3427, %f3432;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3433, %f37, %f37, %f3425;\n"
    "	ld.shared.f32 	%f3434, [%rd15+920];\n"
    "	sub.f32 	%f3435, %f41, %f3434;\n"
    "	mov.f32 	%f3436, %f3435;\n"
    "	mul.f32 	%f3437, %f3435, %f14;\n"
    "	cvt.rni.f32.f32 	%f3438, %f3437;\n"
    "	mul.f32 	%f3439, %f13, %f3438;\n"
    "	sub.f32 	%f47, %f3435, %f3439;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3433;\n"
    "	mov.f32 	%f3440, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p173, %f49, %f3440;\n"
    "	@!%p173 bra 	$Lt_9_45826;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd131, %r27;\n"
    "	mul.wide.s32 	%rd132, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd132;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f3441, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3442, %f55, %f3441;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3442;\n"
    "	mov.f32 	%f3443, %f58;\n"
    "	mov.f32 	%f3444, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3445, %f3444;\n"
    "	mov.f32 	%f3446, %f55;\n"
    "	mad.f32 %f3447, %f3443, %f3445, %f3446;\n"
    "	mov.f32 	%f64, %f3447;\n"
    "	mov.f32 	%f3448, %f58;\n"
    "	mov.f32 	%f3449, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3450, %f3449;\n"
    "	mov.f32 	%f3451, %f64;\n"
    "	mad.f32 %f3452, %f3448, %f3450, %f3451;\n"
    "	mov.f32 	%f64, %f3452;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f3453, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3454, %f58;\n"
    "	mov.f32 	%f3455, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3456, %f64, %f3455;\n"
    "	ex2.approx.f32 	%f3457, %f3456;\n"
    "	mul.f32 	%f3458, %f3454, %f3457;\n"
    "	mov.f32 	%f3459, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p174, %f55, %f3459;\n"
    "	selp.f32 	%f3460, %f3453, %f3458, %p174;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f3461, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3462, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p175, %f55, %f3462;\n"
    "	selp.f32 	%f80, %f3461, %f3460, %p175;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f3463, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f3463;\n"
    "	mov.f32 	%f3464, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f3464;\n"
    "	mov.f32 	%f3465, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f3465;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f3466, %f81, %f99;\n"
    "	sub.f32 	%f101, %f3466, %f97;\n"
    "	mul.f32 	%f3467, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f3467;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f3468, %f2;\n"
    "	mov.f32 	%f3469, %f26;\n"
    "	mad.f32 	%f3470, %f3469, %f104, %f3468;\n"
    "	mov.f32 	%f2, %f3470;\n"
    "	mov.f32 	%f3471, %f4;\n"
    "	mov.f32 	%f3472, %f38;\n"
    "	mad.f32 	%f3473, %f3472, %f104, %f3471;\n"
    "	mov.f32 	%f4, %f3473;\n"
    "	mov.f32 	%f3474, %f6;\n"
    "	mov.f32 	%f3475, %f48;\n"
    "	mad.f32 	%f3476, %f3475, %f104, %f3474;\n"
    "	mov.f32 	%f6, %f3476;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_45826:\n"
    "	ld.shared.s32 	%r85, [%rd14+940];\n"
    "	add.s32 	%r27, %r85, %r6;\n"
    "	ld.shared.f32 	%f3477, [%rd15+928];\n"
    "	sub.f32 	%f3478, %f19, %f3477;\n"
    "	mov.f32 	%f3479, %f3478;\n"
    "	mul.f32 	%f3480, %f14, %f3479;\n"
    "	cvt.rni.f32.f32 	%f3481, %f3480;\n"
    "	mul.f32 	%f3482, %f13, %f3481;\n"
    "	sub.f32 	%f25, %f3478, %f3482;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3483, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3484, %f25, %f25, %f3483;\n"
    "	ld.shared.f32 	%f3485, [%rd15+932];\n"
    "	sub.f32 	%f3486, %f30, %f3485;\n"
    "	mov.f32 	%f3487, %f3486;\n"
    "	mov.f32 	%f3488, %f3487;\n"
    "	mul.f32 	%f3489, %f14, %f3487;\n"
    "	cvt.rni.f32.f32 	%f3490, %f3489;\n"
    "	mul.f32 	%f3491, %f13, %f3490;\n"
    "	sub.f32 	%f37, %f3486, %f3491;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3492, %f37, %f37, %f3484;\n"
    "	ld.shared.f32 	%f3493, [%rd15+936];\n"
    "	sub.f32 	%f3494, %f41, %f3493;\n"
    "	mov.f32 	%f3495, %f3494;\n"
    "	mul.f32 	%f3496, %f3494, %f14;\n"
    "	cvt.rni.f32.f32 	%f3497, %f3496;\n"
    "	mul.f32 	%f3498, %f13, %f3497;\n"
    "	sub.f32 	%f47, %f3494, %f3498;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3492;\n"
    "	mov.f32 	%f3499, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p176, %f49, %f3499;\n"
    "	@!%p176 bra 	$Lt_9_46338;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd133, %r27;\n"
    "	mul.wide.s32 	%rd134, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd134;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f3500, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3501, %f55, %f3500;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3501;\n"
    "	mov.f32 	%f3502, %f58;\n"
    "	mov.f32 	%f3503, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3504, %f3503;\n"
    "	mov.f32 	%f3505, %f55;\n"
    "	mad.f32 %f3506, %f3502, %f3504, %f3505;\n"
    "	mov.f32 	%f64, %f3506;\n"
    "	mov.f32 	%f3507, %f58;\n"
    "	mov.f32 	%f3508, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3509, %f3508;\n"
    "	mov.f32 	%f3510, %f64;\n"
    "	mad.f32 %f3511, %f3507, %f3509, %f3510;\n"
    "	mov.f32 	%f64, %f3511;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f3512, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3513, %f58;\n"
    "	mov.f32 	%f3514, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3515, %f64, %f3514;\n"
    "	ex2.approx.f32 	%f3516, %f3515;\n"
    "	mul.f32 	%f3517, %f3513, %f3516;\n"
    "	mov.f32 	%f3518, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p177, %f55, %f3518;\n"
    "	selp.f32 	%f3519, %f3512, %f3517, %p177;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f3520, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3521, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p178, %f55, %f3521;\n"
    "	selp.f32 	%f80, %f3520, %f3519, %p178;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f3522, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f3522;\n"
    "	mov.f32 	%f3523, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f3523;\n"
    "	mov.f32 	%f3524, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f3524;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f3525, %f81, %f99;\n"
    "	sub.f32 	%f101, %f3525, %f97;\n"
    "	mul.f32 	%f3526, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f3526;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f3527, %f2;\n"
    "	mov.f32 	%f3528, %f26;\n"
    "	mad.f32 	%f3529, %f3528, %f104, %f3527;\n"
    "	mov.f32 	%f2, %f3529;\n"
    "	mov.f32 	%f3530, %f4;\n"
    "	mov.f32 	%f3531, %f38;\n"
    "	mad.f32 	%f3532, %f3531, %f104, %f3530;\n"
    "	mov.f32 	%f4, %f3532;\n"
    "	mov.f32 	%f3533, %f6;\n"
    "	mov.f32 	%f3534, %f48;\n"
    "	mad.f32 	%f3535, %f3534, %f104, %f3533;\n"
    "	mov.f32 	%f6, %f3535;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_46338:\n"
    "	ld.shared.s32 	%r86, [%rd14+956];\n"
    "	add.s32 	%r27, %r86, %r6;\n"
    "	ld.shared.f32 	%f3536, [%rd15+944];\n"
    "	sub.f32 	%f3537, %f19, %f3536;\n"
    "	mov.f32 	%f3538, %f3537;\n"
    "	mul.f32 	%f3539, %f14, %f3538;\n"
    "	cvt.rni.f32.f32 	%f3540, %f3539;\n"
    "	mul.f32 	%f3541, %f13, %f3540;\n"
    "	sub.f32 	%f25, %f3537, %f3541;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3542, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3543, %f25, %f25, %f3542;\n"
    "	ld.shared.f32 	%f3544, [%rd15+948];\n"
    "	sub.f32 	%f3545, %f30, %f3544;\n"
    "	mov.f32 	%f3546, %f3545;\n"
    "	mov.f32 	%f3547, %f3546;\n"
    "	mul.f32 	%f3548, %f14, %f3546;\n"
    "	cvt.rni.f32.f32 	%f3549, %f3548;\n"
    "	mul.f32 	%f3550, %f13, %f3549;\n"
    "	sub.f32 	%f37, %f3545, %f3550;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3551, %f37, %f37, %f3543;\n"
    "	ld.shared.f32 	%f3552, [%rd15+952];\n"
    "	sub.f32 	%f3553, %f41, %f3552;\n"
    "	mov.f32 	%f3554, %f3553;\n"
    "	mul.f32 	%f3555, %f3553, %f14;\n"
    "	cvt.rni.f32.f32 	%f3556, %f3555;\n"
    "	mul.f32 	%f3557, %f13, %f3556;\n"
    "	sub.f32 	%f47, %f3553, %f3557;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3551;\n"
    "	mov.f32 	%f3558, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p179, %f49, %f3558;\n"
    "	@!%p179 bra 	$Lt_9_46850;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd135, %r27;\n"
    "	mul.wide.s32 	%rd136, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd136;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f3559, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3560, %f55, %f3559;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3560;\n"
    "	mov.f32 	%f3561, %f58;\n"
    "	mov.f32 	%f3562, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3563, %f3562;\n"
    "	mov.f32 	%f3564, %f55;\n"
    "	mad.f32 %f3565, %f3561, %f3563, %f3564;\n"
    "	mov.f32 	%f64, %f3565;\n"
    "	mov.f32 	%f3566, %f58;\n"
    "	mov.f32 	%f3567, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3568, %f3567;\n"
    "	mov.f32 	%f3569, %f64;\n"
    "	mad.f32 %f3570, %f3566, %f3568, %f3569;\n"
    "	mov.f32 	%f64, %f3570;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f3571, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3572, %f58;\n"
    "	mov.f32 	%f3573, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3574, %f64, %f3573;\n"
    "	ex2.approx.f32 	%f3575, %f3574;\n"
    "	mul.f32 	%f3576, %f3572, %f3575;\n"
    "	mov.f32 	%f3577, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p180, %f55, %f3577;\n"
    "	selp.f32 	%f3578, %f3571, %f3576, %p180;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f3579, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3580, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p181, %f55, %f3580;\n"
    "	selp.f32 	%f80, %f3579, %f3578, %p181;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f3581, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f3581;\n"
    "	mov.f32 	%f3582, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f3582;\n"
    "	mov.f32 	%f3583, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f3583;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f3584, %f81, %f99;\n"
    "	sub.f32 	%f101, %f3584, %f97;\n"
    "	mul.f32 	%f3585, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f3585;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f3586, %f2;\n"
    "	mov.f32 	%f3587, %f26;\n"
    "	mad.f32 	%f3588, %f3587, %f104, %f3586;\n"
    "	mov.f32 	%f2, %f3588;\n"
    "	mov.f32 	%f3589, %f4;\n"
    "	mov.f32 	%f3590, %f38;\n"
    "	mad.f32 	%f3591, %f3590, %f104, %f3589;\n"
    "	mov.f32 	%f4, %f3591;\n"
    "	mov.f32 	%f3592, %f6;\n"
    "	mov.f32 	%f3593, %f48;\n"
    "	mad.f32 	%f3594, %f3593, %f104, %f3592;\n"
    "	mov.f32 	%f6, %f3594;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_46850:\n"
    "	ld.shared.s32 	%r87, [%rd14+972];\n"
    "	add.s32 	%r27, %r87, %r6;\n"
    "	ld.shared.f32 	%f3595, [%rd15+960];\n"
    "	sub.f32 	%f3596, %f19, %f3595;\n"
    "	mov.f32 	%f3597, %f3596;\n"
    "	mul.f32 	%f3598, %f14, %f3597;\n"
    "	cvt.rni.f32.f32 	%f3599, %f3598;\n"
    "	mul.f32 	%f3600, %f13, %f3599;\n"
    "	sub.f32 	%f25, %f3596, %f3600;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3601, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3602, %f25, %f25, %f3601;\n"
    "	ld.shared.f32 	%f3603, [%rd15+964];\n"
    "	sub.f32 	%f3604, %f30, %f3603;\n"
    "	mov.f32 	%f3605, %f3604;\n"
    "	mov.f32 	%f3606, %f3605;\n"
    "	mul.f32 	%f3607, %f14, %f3605;\n"
    "	cvt.rni.f32.f32 	%f3608, %f3607;\n"
    "	mul.f32 	%f3609, %f13, %f3608;\n"
    "	sub.f32 	%f37, %f3604, %f3609;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3610, %f37, %f37, %f3602;\n"
    "	ld.shared.f32 	%f3611, [%rd15+968];\n"
    "	sub.f32 	%f3612, %f41, %f3611;\n"
    "	mov.f32 	%f3613, %f3612;\n"
    "	mul.f32 	%f3614, %f3612, %f14;\n"
    "	cvt.rni.f32.f32 	%f3615, %f3614;\n"
    "	mul.f32 	%f3616, %f13, %f3615;\n"
    "	sub.f32 	%f47, %f3612, %f3616;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3610;\n"
    "	mov.f32 	%f3617, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p182, %f49, %f3617;\n"
    "	@!%p182 bra 	$Lt_9_47362;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd137, %r27;\n"
    "	mul.wide.s32 	%rd138, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd138;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f3618, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3619, %f55, %f3618;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3619;\n"
    "	mov.f32 	%f3620, %f58;\n"
    "	mov.f32 	%f3621, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3622, %f3621;\n"
    "	mov.f32 	%f3623, %f55;\n"
    "	mad.f32 %f3624, %f3620, %f3622, %f3623;\n"
    "	mov.f32 	%f64, %f3624;\n"
    "	mov.f32 	%f3625, %f58;\n"
    "	mov.f32 	%f3626, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3627, %f3626;\n"
    "	mov.f32 	%f3628, %f64;\n"
    "	mad.f32 %f3629, %f3625, %f3627, %f3628;\n"
    "	mov.f32 	%f64, %f3629;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f3630, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3631, %f58;\n"
    "	mov.f32 	%f3632, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3633, %f64, %f3632;\n"
    "	ex2.approx.f32 	%f3634, %f3633;\n"
    "	mul.f32 	%f3635, %f3631, %f3634;\n"
    "	mov.f32 	%f3636, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p183, %f55, %f3636;\n"
    "	selp.f32 	%f3637, %f3630, %f3635, %p183;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f3638, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3639, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p184, %f55, %f3639;\n"
    "	selp.f32 	%f80, %f3638, %f3637, %p184;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f3640, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f3640;\n"
    "	mov.f32 	%f3641, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f3641;\n"
    "	mov.f32 	%f3642, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f3642;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f3643, %f81, %f99;\n"
    "	sub.f32 	%f101, %f3643, %f97;\n"
    "	mul.f32 	%f3644, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f3644;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f3645, %f2;\n"
    "	mov.f32 	%f3646, %f26;\n"
    "	mad.f32 	%f3647, %f3646, %f104, %f3645;\n"
    "	mov.f32 	%f2, %f3647;\n"
    "	mov.f32 	%f3648, %f4;\n"
    "	mov.f32 	%f3649, %f38;\n"
    "	mad.f32 	%f3650, %f3649, %f104, %f3648;\n"
    "	mov.f32 	%f4, %f3650;\n"
    "	mov.f32 	%f3651, %f6;\n"
    "	mov.f32 	%f3652, %f48;\n"
    "	mad.f32 	%f3653, %f3652, %f104, %f3651;\n"
    "	mov.f32 	%f6, %f3653;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_47362:\n"
    "	ld.shared.s32 	%r88, [%rd14+988];\n"
    "	add.s32 	%r27, %r88, %r6;\n"
    "	ld.shared.f32 	%f3654, [%rd15+976];\n"
    "	sub.f32 	%f3655, %f19, %f3654;\n"
    "	mov.f32 	%f3656, %f3655;\n"
    "	mul.f32 	%f3657, %f14, %f3656;\n"
    "	cvt.rni.f32.f32 	%f3658, %f3657;\n"
    "	mul.f32 	%f3659, %f13, %f3658;\n"
    "	sub.f32 	%f25, %f3655, %f3659;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3660, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3661, %f25, %f25, %f3660;\n"
    "	ld.shared.f32 	%f3662, [%rd15+980];\n"
    "	sub.f32 	%f3663, %f30, %f3662;\n"
    "	mov.f32 	%f3664, %f3663;\n"
    "	mov.f32 	%f3665, %f3664;\n"
    "	mul.f32 	%f3666, %f14, %f3664;\n"
    "	cvt.rni.f32.f32 	%f3667, %f3666;\n"
    "	mul.f32 	%f3668, %f13, %f3667;\n"
    "	sub.f32 	%f37, %f3663, %f3668;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3669, %f37, %f37, %f3661;\n"
    "	ld.shared.f32 	%f3670, [%rd15+984];\n"
    "	sub.f32 	%f3671, %f41, %f3670;\n"
    "	mov.f32 	%f3672, %f3671;\n"
    "	mul.f32 	%f3673, %f3671, %f14;\n"
    "	cvt.rni.f32.f32 	%f3674, %f3673;\n"
    "	mul.f32 	%f3675, %f13, %f3674;\n"
    "	sub.f32 	%f47, %f3671, %f3675;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3669;\n"
    "	mov.f32 	%f3676, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p185, %f49, %f3676;\n"
    "	@!%p185 bra 	$Lt_9_47874;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd139, %r27;\n"
    "	mul.wide.s32 	%rd140, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd140;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f3677, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3678, %f55, %f3677;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3678;\n"
    "	mov.f32 	%f3679, %f58;\n"
    "	mov.f32 	%f3680, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3681, %f3680;\n"
    "	mov.f32 	%f3682, %f55;\n"
    "	mad.f32 %f3683, %f3679, %f3681, %f3682;\n"
    "	mov.f32 	%f64, %f3683;\n"
    "	mov.f32 	%f3684, %f58;\n"
    "	mov.f32 	%f3685, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3686, %f3685;\n"
    "	mov.f32 	%f3687, %f64;\n"
    "	mad.f32 %f3688, %f3684, %f3686, %f3687;\n"
    "	mov.f32 	%f64, %f3688;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f3689, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3690, %f58;\n"
    "	mov.f32 	%f3691, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3692, %f64, %f3691;\n"
    "	ex2.approx.f32 	%f3693, %f3692;\n"
    "	mul.f32 	%f3694, %f3690, %f3693;\n"
    "	mov.f32 	%f3695, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p186, %f55, %f3695;\n"
    "	selp.f32 	%f3696, %f3689, %f3694, %p186;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f3697, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3698, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p187, %f55, %f3698;\n"
    "	selp.f32 	%f80, %f3697, %f3696, %p187;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f3699, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f3699;\n"
    "	mov.f32 	%f3700, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f3700;\n"
    "	mov.f32 	%f3701, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f3701;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f3702, %f81, %f99;\n"
    "	sub.f32 	%f101, %f3702, %f97;\n"
    "	mul.f32 	%f3703, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f3703;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f3704, %f2;\n"
    "	mov.f32 	%f3705, %f26;\n"
    "	mad.f32 	%f3706, %f3705, %f104, %f3704;\n"
    "	mov.f32 	%f2, %f3706;\n"
    "	mov.f32 	%f3707, %f4;\n"
    "	mov.f32 	%f3708, %f38;\n"
    "	mad.f32 	%f3709, %f3708, %f104, %f3707;\n"
    "	mov.f32 	%f4, %f3709;\n"
    "	mov.f32 	%f3710, %f6;\n"
    "	mov.f32 	%f3711, %f48;\n"
    "	mad.f32 	%f3712, %f3711, %f104, %f3710;\n"
    "	mov.f32 	%f6, %f3712;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_47874:\n"
    "	ld.shared.s32 	%r89, [%rd14+1004];\n"
    "	add.s32 	%r27, %r89, %r6;\n"
    "	ld.shared.f32 	%f3713, [%rd15+992];\n"
    "	sub.f32 	%f3714, %f19, %f3713;\n"
    "	mov.f32 	%f3715, %f3714;\n"
    "	mul.f32 	%f3716, %f14, %f3715;\n"
    "	cvt.rni.f32.f32 	%f3717, %f3716;\n"
    "	mul.f32 	%f3718, %f13, %f3717;\n"
    "	sub.f32 	%f25, %f3714, %f3718;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3719, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3720, %f25, %f25, %f3719;\n"
    "	ld.shared.f32 	%f3721, [%rd15+996];\n"
    "	sub.f32 	%f3722, %f30, %f3721;\n"
    "	mov.f32 	%f3723, %f3722;\n"
    "	mov.f32 	%f3724, %f3723;\n"
    "	mul.f32 	%f3725, %f14, %f3723;\n"
    "	cvt.rni.f32.f32 	%f3726, %f3725;\n"
    "	mul.f32 	%f3727, %f13, %f3726;\n"
    "	sub.f32 	%f37, %f3722, %f3727;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3728, %f37, %f37, %f3720;\n"
    "	ld.shared.f32 	%f3729, [%rd15+1000];\n"
    "	sub.f32 	%f3730, %f41, %f3729;\n"
    "	mov.f32 	%f3731, %f3730;\n"
    "	mul.f32 	%f3732, %f3730, %f14;\n"
    "	cvt.rni.f32.f32 	%f3733, %f3732;\n"
    "	mul.f32 	%f3734, %f13, %f3733;\n"
    "	sub.f32 	%f47, %f3730, %f3734;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3728;\n"
    "	mov.f32 	%f3735, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p188, %f49, %f3735;\n"
    "	@!%p188 bra 	$Lt_9_48386;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd141, %r27;\n"
    "	mul.wide.s32 	%rd142, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd142;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f3736, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3737, %f55, %f3736;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3737;\n"
    "	mov.f32 	%f3738, %f58;\n"
    "	mov.f32 	%f3739, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3740, %f3739;\n"
    "	mov.f32 	%f3741, %f55;\n"
    "	mad.f32 %f3742, %f3738, %f3740, %f3741;\n"
    "	mov.f32 	%f64, %f3742;\n"
    "	mov.f32 	%f3743, %f58;\n"
    "	mov.f32 	%f3744, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3745, %f3744;\n"
    "	mov.f32 	%f3746, %f64;\n"
    "	mad.f32 %f3747, %f3743, %f3745, %f3746;\n"
    "	mov.f32 	%f64, %f3747;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f3748, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3749, %f58;\n"
    "	mov.f32 	%f3750, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3751, %f64, %f3750;\n"
    "	ex2.approx.f32 	%f3752, %f3751;\n"
    "	mul.f32 	%f3753, %f3749, %f3752;\n"
    "	mov.f32 	%f3754, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p189, %f55, %f3754;\n"
    "	selp.f32 	%f3755, %f3748, %f3753, %p189;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f3756, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3757, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p190, %f55, %f3757;\n"
    "	selp.f32 	%f80, %f3756, %f3755, %p190;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f3758, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f3758;\n"
    "	mov.f32 	%f3759, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f3759;\n"
    "	mov.f32 	%f3760, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f3760;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f3761, %f81, %f99;\n"
    "	sub.f32 	%f101, %f3761, %f97;\n"
    "	mul.f32 	%f3762, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f3762;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f3763, %f2;\n"
    "	mov.f32 	%f3764, %f26;\n"
    "	mad.f32 	%f3765, %f3764, %f104, %f3763;\n"
    "	mov.f32 	%f2, %f3765;\n"
    "	mov.f32 	%f3766, %f4;\n"
    "	mov.f32 	%f3767, %f38;\n"
    "	mad.f32 	%f3768, %f3767, %f104, %f3766;\n"
    "	mov.f32 	%f4, %f3768;\n"
    "	mov.f32 	%f3769, %f6;\n"
    "	mov.f32 	%f3770, %f48;\n"
    "	mad.f32 	%f3771, %f3770, %f104, %f3769;\n"
    "	mov.f32 	%f6, %f3771;\n"
    "	mov.f32 	%f41, %f12;\n"
    "	mov.f32 	%f30, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_48386:\n"
    "	ld.shared.s32 	%r90, [%rd14+1020];\n"
    "	add.s32 	%r27, %r90, %r6;\n"
    "	ld.shared.f32 	%f3772, [%rd15+1008];\n"
    "	sub.f32 	%f3773, %f19, %f3772;\n"
    "	mov.f32 	%f3774, %f3773;\n"
    "	mul.f32 	%f3775, %f14, %f3774;\n"
    "	cvt.rni.f32.f32 	%f3776, %f3775;\n"
    "	mul.f32 	%f3777, %f13, %f3776;\n"
    "	sub.f32 	%f25, %f3773, %f3777;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3778, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3779, %f25, %f25, %f3778;\n"
    "	ld.shared.f32 	%f3780, [%rd15+1012];\n"
    "	sub.f32 	%f3781, %f30, %f3780;\n"
    "	mov.f32 	%f3782, %f3781;\n"
    "	mov.f32 	%f3783, %f3782;\n"
    "	mul.f32 	%f3784, %f14, %f3782;\n"
    "	cvt.rni.f32.f32 	%f3785, %f3784;\n"
    "	mul.f32 	%f3786, %f13, %f3785;\n"
    "	sub.f32 	%f37, %f3781, %f3786;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3787, %f37, %f37, %f3779;\n"
    "	ld.shared.f32 	%f3788, [%rd15+1016];\n"
    "	sub.f32 	%f3789, %f41, %f3788;\n"
    "	mov.f32 	%f3790, %f3789;\n"
    "	mul.f32 	%f3791, %f3789, %f14;\n"
    "	cvt.rni.f32.f32 	%f3792, %f3791;\n"
    "	mul.f32 	%f3793, %f13, %f3792;\n"
    "	sub.f32 	%f47, %f3789, %f3793;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3787;\n"
    "	mov.f32 	%f3794, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p191, %f49, %f3794;\n"
    "	@!%p191 bra 	$Lt_9_48898;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	cvt.s64.s32 	%rd143, %r27;\n"
    "	mul.wide.s32 	%rd144, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd144;\n"
    "	ld.const.f32 	%f52, [%rd18+8];\n"
    "	ld.const.f32 	%f53, [%rd18+4];\n"
    "	sub.f32 	%f54, %f53, %f51;\n"
    "	mul.f32 	%f55, %f52, %f54;\n"
    "	mov.f32 	%f3795, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3796, %f55, %f3795;\n"
    "	cvt.rzi.f32.f32 	%f58, %f3796;\n"
    "	mov.f32 	%f3797, %f58;\n"
    "	mov.f32 	%f3798, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3799, %f3798;\n"
    "	mov.f32 	%f3800, %f55;\n"
    "	mad.f32 %f3801, %f3797, %f3799, %f3800;\n"
    "	mov.f32 	%f64, %f3801;\n"
    "	mov.f32 	%f3802, %f58;\n"
    "	mov.f32 	%f3803, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3804, %f3803;\n"
    "	mov.f32 	%f3805, %f64;\n"
    "	mad.f32 %f3806, %f3802, %f3804, %f3805;\n"
    "	mov.f32 	%f64, %f3806;\n"
    "	.loc	3	1341	0\n"
    "	mov.f32 	%f3807, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3808, %f58;\n"
    "	mov.f32 	%f3809, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3810, %f64, %f3809;\n"
    "	ex2.approx.f32 	%f3811, %f3810;\n"
    "	mul.f32 	%f3812, %f3808, %f3811;\n"
    "	mov.f32 	%f3813, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p192, %f55, %f3813;\n"
    "	selp.f32 	%f3814, %f3807, %f3812, %p192;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f3815, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3816, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p193, %f55, %f3816;\n"
    "	selp.f32 	%f80, %f3815, %f3814, %p193;\n"
    "	.loc	3	1341	0\n"
    "	rcp.approx.f32 	%f81, %f51;\n"
    "	mul.f32 	%f82, %f81, %f81;\n"
    "	ld.const.f32 	%f83, [%rd18+12];\n"
    "	ld.const.f32 	%f84, [%rd18+0];\n"
    "	ld.const.f32 	%f85, [%rd18+16];\n"
    "	ld.const.f32 	%f86, [%rd18+20];\n"
    "	mul.f32 	%f87, %f82, %f82;\n"
    "	mul.f32 	%f88, %f81, %f82;\n"
    "	mov.f32 	%f3817, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f90, %f83, %f3817;\n"
    "	mov.f32 	%f3818, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f92, %f84, %f3818;\n"
    "	mov.f32 	%f3819, 0f41000000;  	// 8\n"
    "	mul.f32 	%f94, %f85, %f3819;\n"
    "	mul.f32 	%f95, %f87, %f87;\n"
    "	mul.f32 	%f96, %f92, %f80;\n"
    "	mul.f32 	%f97, %f90, %f95;\n"
    "	mul.f32 	%f98, %f94, %f95;\n"
    "	mul.f32 	%f99, %f52, %f96;\n"
    "	mul.f32 	%f3820, %f81, %f99;\n"
    "	sub.f32 	%f101, %f3820, %f97;\n"
    "	mul.f32 	%f3821, %f82, %f98;\n"
    "	sub.f32 	%f103, %f101, %f3821;\n"
    "	mad.f32 	%f104, %f86, %f88, %f103;\n"
    "	mov.f32 	%f3822, %f2;\n"
    "	mov.f32 	%f3823, %f26;\n"
    "	mad.f32 	%f3824, %f3823, %f104, %f3822;\n"
    "	mov.f32 	%f2, %f3824;\n"
    "	mov.f32 	%f3825, %f4;\n"
    "	mov.f32 	%f3826, %f38;\n"
    "	mad.f32 	%f3827, %f3826, %f104, %f3825;\n"
    "	mov.f32 	%f4, %f3827;\n"
    "	mov.f32 	%f3828, %f6;\n"
    "	mov.f32 	%f3829, %f48;\n"
    "	mad.f32 	%f3830, %f3829, %f104, %f3828;\n"
    "	mov.f32 	%f6, %f3830;\n"
    "$Lt_9_48898:\n"
    "	add.s32 	%r25, %r25, 64;\n"
    "	add.u64 	%rd13, %rd13, 1024;\n"
    "	mov.u32 	%r91, 256;\n"
    "	setp.ne.s32 	%p194, %r25, %r91;\n"
    "	@%p194 bra 	$Lt_9_16386;\n"
    "	add.s32 	%r21, %r21, 256;\n"
    "	setp.gt.s32 	%p195, %r13, %r21;\n"
    "	@%p195 bra 	$Lt_9_15618;\n"
    "$Lt_9_15106:\n"
    "	mov.u64 	%rd9, c_matrix;\n"
    "	.loc	3	1343	0\n"
    "	mov.s32 	%r21, %r13;\n"
    "	setp.ge.s32 	%p196, %r13, %r7;\n"
    "	@%p196 bra 	$Lt_9_49922;\n"
    "	sub.s32 	%r92, %r7, %r13;\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_constant_xmax];\n"
    "	rcp.approx.f32 	%f14, %f13;\n"
    "	cvt.s64.s32 	%rd145, %r13;\n"
    "	mul.wide.s32 	%rd146, %r13, 16;\n"
    "	add.u64 	%rd147, %rd1, %rd146;\n"
    "	mov.s32 	%r93, %r92;\n"
    "$Lt_9_50434:\n"
    " //<loop> Loop body line 1343, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	1344	0\n"
    "	ld.global.s32 	%r94, [%rd147+12];\n"
    "	add.s32 	%r95, %r94, %r6;\n"
    "	ld.global.f32 	%f3831, [%rd147+0];\n"
    "	mov.f32 	%f3832, %f8;\n"
    "	sub.f32 	%f3833, %f3832, %f3831;\n"
    "	mov.f32 	%f3834, %f3833;\n"
    "	mul.f32 	%f3835, %f14, %f3834;\n"
    "	cvt.rni.f32.f32 	%f3836, %f3835;\n"
    "	.loc	3	1343	0\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_constant_xmax];\n"
    "	.loc	3	1344	0\n"
    "	mul.f32 	%f3837, %f13, %f3836;\n"
    "	sub.f32 	%f3838, %f3833, %f3837;\n"
    "	mov.f32 	%f3839, %f3838;\n"
    "	mov.f32 	%f3840, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3841, %f3838, %f3838, %f3840;\n"
    "	ld.global.f32 	%f3842, [%rd147+4];\n"
    "	mov.f32 	%f3843, %f10;\n"
    "	sub.f32 	%f3844, %f3843, %f3842;\n"
    "	mov.f32 	%f3845, %f3844;\n"
    "	mov.f32 	%f3846, %f3845;\n"
    "	mul.f32 	%f3847, %f14, %f3845;\n"
    "	cvt.rni.f32.f32 	%f3848, %f3847;\n"
    "	mul.f32 	%f3849, %f13, %f3848;\n"
    "	sub.f32 	%f3850, %f3844, %f3849;\n"
    "	mov.f32 	%f3851, %f3850;\n"
    "	mad.f32 	%f3852, %f3850, %f3850, %f3841;\n"
    "	ld.global.f32 	%f3853, [%rd147+8];\n"
    "	mov.f32 	%f3854, %f12;\n"
    "	sub.f32 	%f3855, %f3854, %f3853;\n"
    "	mov.f32 	%f3856, %f3855;\n"
    "	mul.f32 	%f3857, %f3855, %f14;\n"
    "	cvt.rni.f32.f32 	%f3858, %f3857;\n"
    "	mul.f32 	%f3859, %f13, %f3858;\n"
    "	sub.f32 	%f3860, %f3855, %f3859;\n"
    "	mov.f32 	%f3861, %f3860;\n"
    "	mad.f32 	%f3862, %f3860, %f3860, %f3852;\n"
    "	mov.f32 	%f3863, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p197, %f3862, %f3863;\n"
    "	@!%p197 bra 	$Lt_9_50690;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f3864, %f3862;\n"
    "	cvt.s64.s32 	%rd148, %r95;\n"
    "	mul.wide.s32 	%rd149, %r95, 24;\n"
    "	add.u64 	%rd150, %rd9, %rd149;\n"
    "	ld.const.f32 	%f3865, [%rd150+8];\n"
    "	ld.const.f32 	%f3866, [%rd150+4];\n"
    "	sub.f32 	%f3867, %f3866, %f3864;\n"
    "	mul.f32 	%f3868, %f3865, %f3867;\n"
    "	mov.f32 	%f3869, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3870, %f3868, %f3869;\n"
    "	cvt.rzi.f32.f32 	%f3871, %f3870;\n"
    "	mov.f32 	%f3872, %f3871;\n"
    "	mov.f32 	%f3873, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3874, %f3873;\n"
    "	mov.f32 	%f3875, %f3868;\n"
    "	mad.f32 %f3876, %f3872, %f3874, %f3875;\n"
    "	mov.f32 	%f64, %f3876;\n"
    "	mov.f32 	%f3877, %f3871;\n"
    "	mov.f32 	%f3878, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3879, %f3878;\n"
    "	mov.f32 	%f3880, %f64;\n"
    "	mad.f32 %f3881, %f3877, %f3879, %f3880;\n"
    "	mov.f32 	%f64, %f3881;\n"
    "	.loc	3	1344	0\n"
    "	mov.f32 	%f3882, 0f00000000;  	// 0\n"
    "	ex2.approx.f32 	%f3883, %f3871;\n"
    "	mov.f32 	%f3884, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3885, %f64, %f3884;\n"
    "	ex2.approx.f32 	%f3886, %f3885;\n"
    "	mul.f32 	%f3887, %f3883, %f3886;\n"
    "	mov.f32 	%f3888, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p198, %f3868, %f3888;\n"
    "	selp.f32 	%f3889, %f3882, %f3887, %p198;\n"
    "	.loc	16	3490	0\n"
    "	mov.f32 	%f3890, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	mov.f32 	%f3891, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p199, %f3868, %f3891;\n"
    "	selp.f32 	%f80, %f3890, %f3889, %p199;\n"
    "	.loc	3	1344	0\n"
    "	rcp.approx.f32 	%f3892, %f3864;\n"
    "	mul.f32 	%f3893, %f3892, %f3892;\n"
    "	ld.const.f32 	%f3894, [%rd150+12];\n"
    "	ld.const.f32 	%f3895, [%rd150+0];\n"
    "	ld.const.f32 	%f3896, [%rd150+16];\n"
    "	ld.const.f32 	%f3897, [%rd150+20];\n"
    "	mul.f32 	%f3898, %f3893, %f3893;\n"
    "	mul.f32 	%f3899, %f3892, %f3893;\n"
    "	mov.f32 	%f3900, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3901, %f3894, %f3900;\n"
    "	mov.f32 	%f3902, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3903, %f3895, %f3902;\n"
    "	mov.f32 	%f3904, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3905, %f3896, %f3904;\n"
    "	mul.f32 	%f3906, %f3898, %f3898;\n"
    "	mul.f32 	%f3907, %f3903, %f80;\n"
    "	mul.f32 	%f3908, %f3901, %f3906;\n"
    "	mul.f32 	%f3909, %f3905, %f3906;\n"
    "	mul.f32 	%f3910, %f3865, %f3907;\n"
    "	mul.f32 	%f3911, %f3892, %f3910;\n"
    "	sub.f32 	%f3912, %f3911, %f3908;\n"
    "	mul.f32 	%f3913, %f3893, %f3909;\n"
    "	sub.f32 	%f3914, %f3912, %f3913;\n"
    "	mad.f32 	%f3915, %f3897, %f3899, %f3914;\n"
    "	mov.f32 	%f3916, %f2;\n"
    "	mov.f32 	%f3917, %f3839;\n"
    "	mad.f32 	%f3918, %f3917, %f3915, %f3916;\n"
    "	mov.f32 	%f2, %f3918;\n"
    "	mov.f32 	%f3919, %f4;\n"
    "	mov.f32 	%f3920, %f3851;\n"
    "	mad.f32 	%f3921, %f3920, %f3915, %f3919;\n"
    "	mov.f32 	%f4, %f3921;\n"
    "	mov.f32 	%f3922, %f6;\n"
    "	mov.f32 	%f3923, %f3861;\n"
    "	mad.f32 	%f3924, %f3923, %f3915, %f3922;\n"
    "	mov.f32 	%f6, %f3924;\n"
    "$Lt_9_50690:\n"
    "	add.s32 	%r21, %r21, 1;\n"
    "	add.u64 	%rd147, %rd147, 16;\n"
    "	setp.ne.s32 	%p200, %r7, %r21;\n"
    "	@%p200 bra 	$Lt_9_50434;\n"
    "$Lt_9_49922:\n"
    "	.loc	3	1346	0\n"
    "	ld.param.u64 	%rd151, [__cudaparm_nacl_kernel_constant_fvec];\n"
    "	mul.lo.s32 	%r96, %r3, 3;\n"
    "	cvt.s64.s32 	%rd152, %r96;\n"
    "	mul.wide.s32 	%rd153, %r96, 4;\n"
    "	add.u64 	%rd154, %rd151, %rd153;\n"
    "	mov.f32 	%f3925, %f2;\n"
    "	st.global.f32 	[%rd154+0], %f3925;\n"
    "	mov.f32 	%f3926, %f4;\n"
    "	st.global.f32 	[%rd154+4], %f3926;\n"
    "	mov.f32 	%f3927, %f6;\n"
    "	st.global.f32 	[%rd154+8], %f3927;\n"
    "	.loc	3	1347	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel_constant:\n"
    "	} // nacl_kernel_constant\n"
    "\n"
    "	.entry nacl_kernel_if (\n"
    "		.param .u64 __cudaparm_nacl_kernel_if_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_if_n,\n"
    "		.param .s32 __cudaparm_nacl_kernel_if_nat,\n"
    "		.param .f32 __cudaparm_nacl_kernel_if_xmax,\n"
    "		.param .u64 __cudaparm_nacl_kernel_if_fvec)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<98>;\n"
    "	.reg .u64 %rd<156>;\n"
    "	.reg .f32 %f<3869>;\n"
    "	.reg .pred %p<13>;\n"
    "	.shared .align 4 .b8 __cuda___cuda_local_var_16929_35_non_const_s_xj46440[4096];\n"
    "	.loc	3	1491	0\n"
    "$LDWbegin_nacl_kernel_if:\n"
    "	.loc	3	1501	0\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	mov.f32 	%f2, %f1;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	mov.f32 	%f4, %f3;\n"
    "	mov.f32 	%f5, 0f00000000;     	// 0\n"
    "	mov.f32 	%f6, %f5;\n"
    "	.loc	3	1502	0\n"
    "	cvt.s32.u16 	%r1, %tid.x;\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	mul.wide.u16 	%r2, %rh1, 256;\n"
    "	add.u32 	%r3, %r1, %r2;\n"
    "	ld.param.u64 	%rd1, [__cudaparm_nacl_kernel_if_x];\n"
    "	cvt.s64.s32 	%rd2, %r3;\n"
    "	mul.wide.s32 	%rd3, %r3, 16;\n"
    "	add.u64 	%rd4, %rd1, %rd3;\n"
    "	ld.global.f32 	%f7, [%rd4+0];\n"
    "	mov.f32 	%f8, %f7;\n"
    "	ld.global.f32 	%f9, [%rd4+4];\n"
    "	mov.f32 	%f10, %f9;\n"
    "	ld.global.f32 	%f11, [%rd4+8];\n"
    "	mov.f32 	%f12, %f11;\n"
    "	.loc	3	1503	0\n"
    "	ld.global.s32 	%r4, [%rd4+12];\n"
    "	ld.param.s32 	%r5, [__cudaparm_nacl_kernel_if_nat];\n"
    "	mul.lo.s32 	%r6, %r4, %r5;\n"
    "	ld.param.s32 	%r7, [__cudaparm_nacl_kernel_if_n];\n"
    "	shr.s32 	%r8, %r7, 31;\n"
    "	mov.s32 	%r9, 255;\n"
    "	and.b32 	%r10, %r8, %r9;\n"
    "	add.s32 	%r11, %r10, %r7;\n"
    "	shr.s32 	%r12, %r11, 8;\n"
    "	mul.lo.s32 	%r13, %r12, 256;\n"
    "	mov.u32 	%r14, 0;\n"
    "	setp.le.s32 	%p1, %r13, %r14;\n"
    "	@%p1 bra 	$Lt_10_15106;\n"
    "	mov.u64 	%rd5, __cuda___cuda_local_var_16929_35_non_const_s_xj46440;\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_if_xmax];\n"
    "	rcp.approx.f32 	%f14, %f13;\n"
    "	add.s32 	%r15, %r13, 255;\n"
    "	shr.s32 	%r16, %r15, 31;\n"
    "	mov.s32 	%r17, 255;\n"
    "	and.b32 	%r18, %r16, %r17;\n"
    "	add.s32 	%r19, %r18, %r15;\n"
    "	shr.s32 	%r20, %r19, 8;\n"
    "	cvt.s64.s32 	%rd6, %r1;\n"
    "	mul.wide.s32 	%rd7, %r1, 16;\n"
    "	add.u64 	%rd8, %rd5, %rd7;\n"
    "	mov.s32 	%r21, 0;\n"
    "	mov.u64 	%rd9, c_matrix;\n"
    "	mov.s32 	%r22, %r20;\n"
    "$Lt_10_15618:\n"
    " //<loop> Loop body line 1503, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	1508	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	1509	0\n"
    "	add.s32 	%r23, %r21, %r1;\n"
    "	cvt.s64.s32 	%rd10, %r23;\n"
    "	mul.wide.s32 	%rd11, %r23, 16;\n"
    "	add.u64 	%rd12, %rd1, %rd11;\n"
    "	ld.global.f32 	%f15, [%rd12+0];\n"
    "	st.shared.f32 	[%rd8+0], %f15;\n"
    "	ld.global.f32 	%f16, [%rd12+4];\n"
    "	st.shared.f32 	[%rd8+4], %f16;\n"
    "	ld.global.f32 	%f17, [%rd12+8];\n"
    "	st.shared.f32 	[%rd8+8], %f17;\n"
    "	ld.global.s32 	%r24, [%rd12+12];\n"
    "	st.shared.s32 	[%rd8+12], %r24;\n"
    "	.loc	3	1510	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	24	0\n"
    "	mov.s64 	%rd13, 0;\n"
    "	mov.s32 	%r25, 0;\n"
    "$Lt_10_16386:\n"
    " //<loop> Loop body line 24, nesting depth: 2, iterations: 4\n"
    "	.loc	3	1513	0\n"
    "	add.u64 	%rd14, %rd13, %rd5;\n"
    "	ld.shared.s32 	%r26, [%rd14+12];\n"
    "	add.s32 	%r27, %r26, %r6;\n"
    "	add.u64 	%rd15, %rd13, %rd5;\n"
    "	ld.shared.f32 	%f18, [%rd15+0];\n"
    "	mov.f32 	%f19, %f8;\n"
    "	sub.f32 	%f20, %f19, %f18;\n"
    "	mov.f32 	%f21, %f20;\n"
    "	mul.f32 	%f22, %f14, %f21;\n"
    "	cvt.rni.f32.f32 	%f23, %f22;\n"
    "	mul.f32 	%f24, %f13, %f23;\n"
    "	sub.f32 	%f25, %f20, %f24;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f27, 0f00000000;    	// 0\n"
    "	mad.f32 	%f28, %f25, %f25, %f27;\n"
    "	ld.shared.f32 	%f29, [%rd15+4];\n"
    "	mov.f32 	%f30, %f10;\n"
    "	sub.f32 	%f31, %f30, %f29;\n"
    "	mov.f32 	%f32, %f31;\n"
    "	mov.f32 	%f33, %f32;\n"
    "	mul.f32 	%f34, %f14, %f32;\n"
    "	cvt.rni.f32.f32 	%f35, %f34;\n"
    "	mul.f32 	%f36, %f13, %f35;\n"
    "	sub.f32 	%f37, %f31, %f36;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f39, %f37, %f37, %f28;\n"
    "	ld.shared.f32 	%f40, [%rd15+8];\n"
    "	mov.f32 	%f41, %f12;\n"
    "	sub.f32 	%f42, %f41, %f40;\n"
    "	mov.f32 	%f43, %f42;\n"
    "	mul.f32 	%f44, %f42, %f14;\n"
    "	cvt.rni.f32.f32 	%f45, %f44;\n"
    "	mul.f32 	%f46, %f13, %f45;\n"
    "	sub.f32 	%f47, %f42, %f46;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f39;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd16, %r27;\n"
    "	mul.wide.s32 	%rd17, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd17;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f55, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f56, %f54, %f55;\n"
    "	cvt.rzi.f32.f32 	%f57, %f56;\n"
    "	mov.f32 	%f58, %f57;\n"
    "	mov.f32 	%f59, 0fbf317200;    	// -0.693146\n"
    "	mov.f32 	%f60, %f59;\n"
    "	mov.f32 	%f61, %f54;\n"
    "	mad.f32 %f62, %f58, %f60, %f61;\n"
    "	mov.f32 	%f63, %f62;\n"
    "	mov.f32 	%f64, %f57;\n"
    "	mov.f32 	%f65, 0fb5bfbe8e;    	// -1.42861e-06\n"
    "	mov.f32 	%f66, %f65;\n"
    "	mov.f32 	%f67, %f63;\n"
    "	mad.f32 %f68, %f64, %f66, %f67;\n"
    "	mov.f32 	%f63, %f68;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f69, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f69;\n"
    "	mov.f32 	%f71, 0f00000000;    	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f71;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f81, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f82, %f75, %f81;\n"
    "	mov.f32 	%f83, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f83;\n"
    "	mov.f32 	%f85, 0f41000000;    	// 8\n"
    "	mul.f32 	%f86, %f77, %f85;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f90, 0f42d20000;    	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f90;\n"
    "	mov.f32 	%f91, 0fc2d20000;    	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f91;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f94, 0f00000000;    	// 0\n"
    "	selp.f32 	%f95, %f94, %f93, %p4;\n"
    "	mov.f32 	%f96, 0f7f800000;    	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f96, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f100, %f73, %f99;\n"
    "	sub.f32 	%f101, %f100, %f88;\n"
    "	mul.f32 	%f102, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f102;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f105, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f105, %f104, %p2;\n"
    "	mov.f32 	%f107, %f2;\n"
    "	mov.f32 	%f108, %f26;\n"
    "	mad.f32 	%f109, %f108, %f106, %f107;\n"
    "	mov.f32 	%f2, %f109;\n"
    "	mov.f32 	%f110, %f4;\n"
    "	mov.f32 	%f111, %f38;\n"
    "	mad.f32 	%f112, %f111, %f106, %f110;\n"
    "	mov.f32 	%f4, %f112;\n"
    "	mov.f32 	%f113, %f6;\n"
    "	mov.f32 	%f114, %f48;\n"
    "	mad.f32 	%f115, %f114, %f106, %f113;\n"
    "	mov.f32 	%f6, %f115;\n"
    "	ld.shared.s32 	%r28, [%rd14+28];\n"
    "	add.s32 	%r27, %r28, %r6;\n"
    "	ld.shared.f32 	%f116, [%rd15+16];\n"
    "	mov.f32 	%f117, %f8;\n"
    "	sub.f32 	%f118, %f117, %f116;\n"
    "	mov.f32 	%f119, %f118;\n"
    "	mul.f32 	%f120, %f14, %f119;\n"
    "	cvt.rni.f32.f32 	%f121, %f120;\n"
    "	mul.f32 	%f122, %f13, %f121;\n"
    "	sub.f32 	%f25, %f118, %f122;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f123, 0f00000000;   	// 0\n"
    "	mad.f32 	%f124, %f25, %f25, %f123;\n"
    "	ld.shared.f32 	%f125, [%rd15+20];\n"
    "	mov.f32 	%f126, %f10;\n"
    "	sub.f32 	%f127, %f126, %f125;\n"
    "	mov.f32 	%f128, %f127;\n"
    "	mov.f32 	%f129, %f128;\n"
    "	mul.f32 	%f130, %f14, %f128;\n"
    "	cvt.rni.f32.f32 	%f131, %f130;\n"
    "	mul.f32 	%f132, %f13, %f131;\n"
    "	sub.f32 	%f37, %f127, %f132;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f133, %f37, %f37, %f124;\n"
    "	ld.shared.f32 	%f134, [%rd15+24];\n"
    "	mov.f32 	%f135, %f12;\n"
    "	sub.f32 	%f136, %f135, %f134;\n"
    "	mov.f32 	%f137, %f136;\n"
    "	mul.f32 	%f138, %f136, %f14;\n"
    "	cvt.rni.f32.f32 	%f139, %f138;\n"
    "	mul.f32 	%f140, %f13, %f139;\n"
    "	sub.f32 	%f47, %f136, %f140;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f133;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd19, %r27;\n"
    "	mul.wide.s32 	%rd20, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd20;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f141, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f142, %f54, %f141;\n"
    "	cvt.rzi.f32.f32 	%f57, %f142;\n"
    "	mov.f32 	%f143, %f57;\n"
    "	mov.f32 	%f144, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f145, %f144;\n"
    "	mov.f32 	%f146, %f54;\n"
    "	mad.f32 %f147, %f143, %f145, %f146;\n"
    "	mov.f32 	%f63, %f147;\n"
    "	mov.f32 	%f148, %f57;\n"
    "	mov.f32 	%f149, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f150, %f149;\n"
    "	mov.f32 	%f151, %f63;\n"
    "	mad.f32 %f152, %f148, %f150, %f151;\n"
    "	mov.f32 	%f63, %f152;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f153, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f153;\n"
    "	mov.f32 	%f154, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f154;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f155, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f155;\n"
    "	mov.f32 	%f156, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f156;\n"
    "	mov.f32 	%f157, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f157;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f158, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f158;\n"
    "	mov.f32 	%f159, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f159;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f160, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f160, %f93, %p4;\n"
    "	mov.f32 	%f161, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f161, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f162, %f73, %f99;\n"
    "	sub.f32 	%f101, %f162, %f88;\n"
    "	mul.f32 	%f163, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f163;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f164, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f164, %f104, %p2;\n"
    "	mov.f32 	%f165, %f2;\n"
    "	mov.f32 	%f166, %f26;\n"
    "	mad.f32 	%f167, %f166, %f106, %f165;\n"
    "	mov.f32 	%f2, %f167;\n"
    "	mov.f32 	%f168, %f4;\n"
    "	mov.f32 	%f169, %f38;\n"
    "	mad.f32 	%f170, %f169, %f106, %f168;\n"
    "	mov.f32 	%f4, %f170;\n"
    "	mov.f32 	%f171, %f6;\n"
    "	mov.f32 	%f172, %f48;\n"
    "	mad.f32 	%f173, %f172, %f106, %f171;\n"
    "	mov.f32 	%f6, %f173;\n"
    "	ld.shared.s32 	%r29, [%rd14+44];\n"
    "	add.s32 	%r27, %r29, %r6;\n"
    "	ld.shared.f32 	%f174, [%rd15+32];\n"
    "	mov.f32 	%f175, %f8;\n"
    "	sub.f32 	%f176, %f175, %f174;\n"
    "	mov.f32 	%f177, %f176;\n"
    "	mul.f32 	%f178, %f14, %f177;\n"
    "	cvt.rni.f32.f32 	%f179, %f178;\n"
    "	mul.f32 	%f180, %f13, %f179;\n"
    "	sub.f32 	%f25, %f176, %f180;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f181, 0f00000000;   	// 0\n"
    "	mad.f32 	%f182, %f25, %f25, %f181;\n"
    "	ld.shared.f32 	%f183, [%rd15+36];\n"
    "	mov.f32 	%f184, %f10;\n"
    "	sub.f32 	%f185, %f184, %f183;\n"
    "	mov.f32 	%f186, %f185;\n"
    "	mov.f32 	%f187, %f186;\n"
    "	mul.f32 	%f188, %f14, %f186;\n"
    "	cvt.rni.f32.f32 	%f189, %f188;\n"
    "	mul.f32 	%f190, %f13, %f189;\n"
    "	sub.f32 	%f37, %f185, %f190;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f191, %f37, %f37, %f182;\n"
    "	ld.shared.f32 	%f192, [%rd15+40];\n"
    "	mov.f32 	%f193, %f12;\n"
    "	sub.f32 	%f194, %f193, %f192;\n"
    "	mov.f32 	%f195, %f194;\n"
    "	mul.f32 	%f196, %f194, %f14;\n"
    "	cvt.rni.f32.f32 	%f197, %f196;\n"
    "	mul.f32 	%f198, %f13, %f197;\n"
    "	sub.f32 	%f47, %f194, %f198;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f191;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd21, %r27;\n"
    "	mul.wide.s32 	%rd22, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd22;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f199, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f200, %f54, %f199;\n"
    "	cvt.rzi.f32.f32 	%f57, %f200;\n"
    "	mov.f32 	%f201, %f57;\n"
    "	mov.f32 	%f202, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f203, %f202;\n"
    "	mov.f32 	%f204, %f54;\n"
    "	mad.f32 %f205, %f201, %f203, %f204;\n"
    "	mov.f32 	%f63, %f205;\n"
    "	mov.f32 	%f206, %f57;\n"
    "	mov.f32 	%f207, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f208, %f207;\n"
    "	mov.f32 	%f209, %f63;\n"
    "	mad.f32 %f210, %f206, %f208, %f209;\n"
    "	mov.f32 	%f63, %f210;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f211, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f211;\n"
    "	mov.f32 	%f212, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f212;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f213, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f213;\n"
    "	mov.f32 	%f214, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f214;\n"
    "	mov.f32 	%f215, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f215;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f216, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f216;\n"
    "	mov.f32 	%f217, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f217;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f218, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f218, %f93, %p4;\n"
    "	mov.f32 	%f219, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f219, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f220, %f73, %f99;\n"
    "	sub.f32 	%f101, %f220, %f88;\n"
    "	mul.f32 	%f221, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f221;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f222, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f222, %f104, %p2;\n"
    "	mov.f32 	%f223, %f2;\n"
    "	mov.f32 	%f224, %f26;\n"
    "	mad.f32 	%f225, %f224, %f106, %f223;\n"
    "	mov.f32 	%f2, %f225;\n"
    "	mov.f32 	%f226, %f4;\n"
    "	mov.f32 	%f227, %f38;\n"
    "	mad.f32 	%f228, %f227, %f106, %f226;\n"
    "	mov.f32 	%f4, %f228;\n"
    "	mov.f32 	%f229, %f6;\n"
    "	mov.f32 	%f230, %f48;\n"
    "	mad.f32 	%f231, %f230, %f106, %f229;\n"
    "	mov.f32 	%f6, %f231;\n"
    "	ld.shared.s32 	%r30, [%rd14+60];\n"
    "	add.s32 	%r27, %r30, %r6;\n"
    "	ld.shared.f32 	%f232, [%rd15+48];\n"
    "	mov.f32 	%f233, %f8;\n"
    "	sub.f32 	%f234, %f233, %f232;\n"
    "	mov.f32 	%f235, %f234;\n"
    "	mul.f32 	%f236, %f14, %f235;\n"
    "	cvt.rni.f32.f32 	%f237, %f236;\n"
    "	mul.f32 	%f238, %f13, %f237;\n"
    "	sub.f32 	%f25, %f234, %f238;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f239, 0f00000000;   	// 0\n"
    "	mad.f32 	%f240, %f25, %f25, %f239;\n"
    "	ld.shared.f32 	%f241, [%rd15+52];\n"
    "	mov.f32 	%f242, %f10;\n"
    "	sub.f32 	%f243, %f242, %f241;\n"
    "	mov.f32 	%f244, %f243;\n"
    "	mov.f32 	%f245, %f244;\n"
    "	mul.f32 	%f246, %f14, %f244;\n"
    "	cvt.rni.f32.f32 	%f247, %f246;\n"
    "	mul.f32 	%f248, %f13, %f247;\n"
    "	sub.f32 	%f37, %f243, %f248;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f249, %f37, %f37, %f240;\n"
    "	ld.shared.f32 	%f250, [%rd15+56];\n"
    "	mov.f32 	%f251, %f12;\n"
    "	sub.f32 	%f252, %f251, %f250;\n"
    "	mov.f32 	%f253, %f252;\n"
    "	mul.f32 	%f254, %f252, %f14;\n"
    "	cvt.rni.f32.f32 	%f255, %f254;\n"
    "	mul.f32 	%f256, %f13, %f255;\n"
    "	sub.f32 	%f47, %f252, %f256;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f249;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd23, %r27;\n"
    "	mul.wide.s32 	%rd24, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd24;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f257, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f258, %f54, %f257;\n"
    "	cvt.rzi.f32.f32 	%f57, %f258;\n"
    "	mov.f32 	%f259, %f57;\n"
    "	mov.f32 	%f260, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f261, %f260;\n"
    "	mov.f32 	%f262, %f54;\n"
    "	mad.f32 %f263, %f259, %f261, %f262;\n"
    "	mov.f32 	%f63, %f263;\n"
    "	mov.f32 	%f264, %f57;\n"
    "	mov.f32 	%f265, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f266, %f265;\n"
    "	mov.f32 	%f267, %f63;\n"
    "	mad.f32 %f268, %f264, %f266, %f267;\n"
    "	mov.f32 	%f63, %f268;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f269, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f269;\n"
    "	mov.f32 	%f270, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f270;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f271, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f271;\n"
    "	mov.f32 	%f272, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f272;\n"
    "	mov.f32 	%f273, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f273;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f274, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f274;\n"
    "	mov.f32 	%f275, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f275;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f276, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f276, %f93, %p4;\n"
    "	mov.f32 	%f277, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f277, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f278, %f73, %f99;\n"
    "	sub.f32 	%f101, %f278, %f88;\n"
    "	mul.f32 	%f279, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f279;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f280, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f280, %f104, %p2;\n"
    "	mov.f32 	%f281, %f2;\n"
    "	mov.f32 	%f282, %f26;\n"
    "	mad.f32 	%f283, %f282, %f106, %f281;\n"
    "	mov.f32 	%f2, %f283;\n"
    "	mov.f32 	%f284, %f4;\n"
    "	mov.f32 	%f285, %f38;\n"
    "	mad.f32 	%f286, %f285, %f106, %f284;\n"
    "	mov.f32 	%f4, %f286;\n"
    "	mov.f32 	%f287, %f6;\n"
    "	mov.f32 	%f288, %f48;\n"
    "	mad.f32 	%f289, %f288, %f106, %f287;\n"
    "	mov.f32 	%f6, %f289;\n"
    "	ld.shared.s32 	%r31, [%rd14+76];\n"
    "	add.s32 	%r27, %r31, %r6;\n"
    "	ld.shared.f32 	%f290, [%rd15+64];\n"
    "	mov.f32 	%f291, %f8;\n"
    "	sub.f32 	%f292, %f291, %f290;\n"
    "	mov.f32 	%f293, %f292;\n"
    "	mul.f32 	%f294, %f14, %f293;\n"
    "	cvt.rni.f32.f32 	%f295, %f294;\n"
    "	mul.f32 	%f296, %f13, %f295;\n"
    "	sub.f32 	%f25, %f292, %f296;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f297, 0f00000000;   	// 0\n"
    "	mad.f32 	%f298, %f25, %f25, %f297;\n"
    "	ld.shared.f32 	%f299, [%rd15+68];\n"
    "	mov.f32 	%f300, %f10;\n"
    "	sub.f32 	%f301, %f300, %f299;\n"
    "	mov.f32 	%f302, %f301;\n"
    "	mov.f32 	%f303, %f302;\n"
    "	mul.f32 	%f304, %f14, %f302;\n"
    "	cvt.rni.f32.f32 	%f305, %f304;\n"
    "	mul.f32 	%f306, %f13, %f305;\n"
    "	sub.f32 	%f37, %f301, %f306;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f307, %f37, %f37, %f298;\n"
    "	ld.shared.f32 	%f308, [%rd15+72];\n"
    "	mov.f32 	%f309, %f12;\n"
    "	sub.f32 	%f310, %f309, %f308;\n"
    "	mov.f32 	%f311, %f310;\n"
    "	mul.f32 	%f312, %f310, %f14;\n"
    "	cvt.rni.f32.f32 	%f313, %f312;\n"
    "	mul.f32 	%f314, %f13, %f313;\n"
    "	sub.f32 	%f47, %f310, %f314;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f307;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd25, %r27;\n"
    "	mul.wide.s32 	%rd26, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd26;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f315, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f316, %f54, %f315;\n"
    "	cvt.rzi.f32.f32 	%f57, %f316;\n"
    "	mov.f32 	%f317, %f57;\n"
    "	mov.f32 	%f318, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f319, %f318;\n"
    "	mov.f32 	%f320, %f54;\n"
    "	mad.f32 %f321, %f317, %f319, %f320;\n"
    "	mov.f32 	%f63, %f321;\n"
    "	mov.f32 	%f322, %f57;\n"
    "	mov.f32 	%f323, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f324, %f323;\n"
    "	mov.f32 	%f325, %f63;\n"
    "	mad.f32 %f326, %f322, %f324, %f325;\n"
    "	mov.f32 	%f63, %f326;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f327, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f327;\n"
    "	mov.f32 	%f328, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f328;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f329, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f329;\n"
    "	mov.f32 	%f330, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f330;\n"
    "	mov.f32 	%f331, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f331;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f332, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f332;\n"
    "	mov.f32 	%f333, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f333;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f334, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f334, %f93, %p4;\n"
    "	mov.f32 	%f335, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f335, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f336, %f73, %f99;\n"
    "	sub.f32 	%f101, %f336, %f88;\n"
    "	mul.f32 	%f337, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f337;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f338, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f338, %f104, %p2;\n"
    "	mov.f32 	%f339, %f2;\n"
    "	mov.f32 	%f340, %f26;\n"
    "	mad.f32 	%f341, %f340, %f106, %f339;\n"
    "	mov.f32 	%f2, %f341;\n"
    "	mov.f32 	%f342, %f4;\n"
    "	mov.f32 	%f343, %f38;\n"
    "	mad.f32 	%f344, %f343, %f106, %f342;\n"
    "	mov.f32 	%f4, %f344;\n"
    "	mov.f32 	%f345, %f6;\n"
    "	mov.f32 	%f346, %f48;\n"
    "	mad.f32 	%f347, %f346, %f106, %f345;\n"
    "	mov.f32 	%f6, %f347;\n"
    "	ld.shared.s32 	%r32, [%rd14+92];\n"
    "	add.s32 	%r27, %r32, %r6;\n"
    "	ld.shared.f32 	%f348, [%rd15+80];\n"
    "	mov.f32 	%f349, %f8;\n"
    "	sub.f32 	%f350, %f349, %f348;\n"
    "	mov.f32 	%f351, %f350;\n"
    "	mul.f32 	%f352, %f14, %f351;\n"
    "	cvt.rni.f32.f32 	%f353, %f352;\n"
    "	mul.f32 	%f354, %f13, %f353;\n"
    "	sub.f32 	%f25, %f350, %f354;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f355, 0f00000000;   	// 0\n"
    "	mad.f32 	%f356, %f25, %f25, %f355;\n"
    "	ld.shared.f32 	%f357, [%rd15+84];\n"
    "	mov.f32 	%f358, %f10;\n"
    "	sub.f32 	%f359, %f358, %f357;\n"
    "	mov.f32 	%f360, %f359;\n"
    "	mov.f32 	%f361, %f360;\n"
    "	mul.f32 	%f362, %f14, %f360;\n"
    "	cvt.rni.f32.f32 	%f363, %f362;\n"
    "	mul.f32 	%f364, %f13, %f363;\n"
    "	sub.f32 	%f37, %f359, %f364;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f365, %f37, %f37, %f356;\n"
    "	ld.shared.f32 	%f366, [%rd15+88];\n"
    "	mov.f32 	%f367, %f12;\n"
    "	sub.f32 	%f368, %f367, %f366;\n"
    "	mov.f32 	%f369, %f368;\n"
    "	mul.f32 	%f370, %f368, %f14;\n"
    "	cvt.rni.f32.f32 	%f371, %f370;\n"
    "	mul.f32 	%f372, %f13, %f371;\n"
    "	sub.f32 	%f47, %f368, %f372;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f365;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd27, %r27;\n"
    "	mul.wide.s32 	%rd28, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd28;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f373, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f374, %f54, %f373;\n"
    "	cvt.rzi.f32.f32 	%f57, %f374;\n"
    "	mov.f32 	%f375, %f57;\n"
    "	mov.f32 	%f376, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f377, %f376;\n"
    "	mov.f32 	%f378, %f54;\n"
    "	mad.f32 %f379, %f375, %f377, %f378;\n"
    "	mov.f32 	%f63, %f379;\n"
    "	mov.f32 	%f380, %f57;\n"
    "	mov.f32 	%f381, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f382, %f381;\n"
    "	mov.f32 	%f383, %f63;\n"
    "	mad.f32 %f384, %f380, %f382, %f383;\n"
    "	mov.f32 	%f63, %f384;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f385, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f385;\n"
    "	mov.f32 	%f386, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f386;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f387, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f387;\n"
    "	mov.f32 	%f388, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f388;\n"
    "	mov.f32 	%f389, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f389;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f390, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f390;\n"
    "	mov.f32 	%f391, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f391;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f392, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f392, %f93, %p4;\n"
    "	mov.f32 	%f393, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f393, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f394, %f73, %f99;\n"
    "	sub.f32 	%f101, %f394, %f88;\n"
    "	mul.f32 	%f395, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f395;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f396, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f396, %f104, %p2;\n"
    "	mov.f32 	%f397, %f2;\n"
    "	mov.f32 	%f398, %f26;\n"
    "	mad.f32 	%f399, %f398, %f106, %f397;\n"
    "	mov.f32 	%f2, %f399;\n"
    "	mov.f32 	%f400, %f4;\n"
    "	mov.f32 	%f401, %f38;\n"
    "	mad.f32 	%f402, %f401, %f106, %f400;\n"
    "	mov.f32 	%f4, %f402;\n"
    "	mov.f32 	%f403, %f6;\n"
    "	mov.f32 	%f404, %f48;\n"
    "	mad.f32 	%f405, %f404, %f106, %f403;\n"
    "	mov.f32 	%f6, %f405;\n"
    "	ld.shared.s32 	%r33, [%rd14+108];\n"
    "	add.s32 	%r27, %r33, %r6;\n"
    "	ld.shared.f32 	%f406, [%rd15+96];\n"
    "	mov.f32 	%f407, %f8;\n"
    "	sub.f32 	%f408, %f407, %f406;\n"
    "	mov.f32 	%f409, %f408;\n"
    "	mul.f32 	%f410, %f14, %f409;\n"
    "	cvt.rni.f32.f32 	%f411, %f410;\n"
    "	mul.f32 	%f412, %f13, %f411;\n"
    "	sub.f32 	%f25, %f408, %f412;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f413, 0f00000000;   	// 0\n"
    "	mad.f32 	%f414, %f25, %f25, %f413;\n"
    "	ld.shared.f32 	%f415, [%rd15+100];\n"
    "	mov.f32 	%f416, %f10;\n"
    "	sub.f32 	%f417, %f416, %f415;\n"
    "	mov.f32 	%f418, %f417;\n"
    "	mov.f32 	%f419, %f418;\n"
    "	mul.f32 	%f420, %f14, %f418;\n"
    "	cvt.rni.f32.f32 	%f421, %f420;\n"
    "	mul.f32 	%f422, %f13, %f421;\n"
    "	sub.f32 	%f37, %f417, %f422;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f423, %f37, %f37, %f414;\n"
    "	ld.shared.f32 	%f424, [%rd15+104];\n"
    "	mov.f32 	%f425, %f12;\n"
    "	sub.f32 	%f426, %f425, %f424;\n"
    "	mov.f32 	%f427, %f426;\n"
    "	mul.f32 	%f428, %f426, %f14;\n"
    "	cvt.rni.f32.f32 	%f429, %f428;\n"
    "	mul.f32 	%f430, %f13, %f429;\n"
    "	sub.f32 	%f47, %f426, %f430;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f423;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd29, %r27;\n"
    "	mul.wide.s32 	%rd30, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd30;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f431, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f432, %f54, %f431;\n"
    "	cvt.rzi.f32.f32 	%f57, %f432;\n"
    "	mov.f32 	%f433, %f57;\n"
    "	mov.f32 	%f434, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f435, %f434;\n"
    "	mov.f32 	%f436, %f54;\n"
    "	mad.f32 %f437, %f433, %f435, %f436;\n"
    "	mov.f32 	%f63, %f437;\n"
    "	mov.f32 	%f438, %f57;\n"
    "	mov.f32 	%f439, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f440, %f439;\n"
    "	mov.f32 	%f441, %f63;\n"
    "	mad.f32 %f442, %f438, %f440, %f441;\n"
    "	mov.f32 	%f63, %f442;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f443, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f443;\n"
    "	mov.f32 	%f444, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f444;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f445, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f445;\n"
    "	mov.f32 	%f446, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f446;\n"
    "	mov.f32 	%f447, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f447;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f448, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f448;\n"
    "	mov.f32 	%f449, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f449;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f450, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f450, %f93, %p4;\n"
    "	mov.f32 	%f451, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f451, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f452, %f73, %f99;\n"
    "	sub.f32 	%f101, %f452, %f88;\n"
    "	mul.f32 	%f453, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f453;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f454, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f454, %f104, %p2;\n"
    "	mov.f32 	%f455, %f2;\n"
    "	mov.f32 	%f456, %f26;\n"
    "	mad.f32 	%f457, %f456, %f106, %f455;\n"
    "	mov.f32 	%f2, %f457;\n"
    "	mov.f32 	%f458, %f4;\n"
    "	mov.f32 	%f459, %f38;\n"
    "	mad.f32 	%f460, %f459, %f106, %f458;\n"
    "	mov.f32 	%f4, %f460;\n"
    "	mov.f32 	%f461, %f6;\n"
    "	mov.f32 	%f462, %f48;\n"
    "	mad.f32 	%f463, %f462, %f106, %f461;\n"
    "	mov.f32 	%f6, %f463;\n"
    "	ld.shared.s32 	%r34, [%rd14+124];\n"
    "	add.s32 	%r27, %r34, %r6;\n"
    "	ld.shared.f32 	%f464, [%rd15+112];\n"
    "	mov.f32 	%f465, %f8;\n"
    "	sub.f32 	%f466, %f465, %f464;\n"
    "	mov.f32 	%f467, %f466;\n"
    "	mul.f32 	%f468, %f14, %f467;\n"
    "	cvt.rni.f32.f32 	%f469, %f468;\n"
    "	mul.f32 	%f470, %f13, %f469;\n"
    "	sub.f32 	%f25, %f466, %f470;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f471, 0f00000000;   	// 0\n"
    "	mad.f32 	%f472, %f25, %f25, %f471;\n"
    "	ld.shared.f32 	%f473, [%rd15+116];\n"
    "	mov.f32 	%f474, %f10;\n"
    "	sub.f32 	%f475, %f474, %f473;\n"
    "	mov.f32 	%f476, %f475;\n"
    "	mov.f32 	%f477, %f476;\n"
    "	mul.f32 	%f478, %f14, %f476;\n"
    "	cvt.rni.f32.f32 	%f479, %f478;\n"
    "	mul.f32 	%f480, %f13, %f479;\n"
    "	sub.f32 	%f37, %f475, %f480;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f481, %f37, %f37, %f472;\n"
    "	ld.shared.f32 	%f482, [%rd15+120];\n"
    "	mov.f32 	%f483, %f12;\n"
    "	sub.f32 	%f484, %f483, %f482;\n"
    "	mov.f32 	%f485, %f484;\n"
    "	mul.f32 	%f486, %f484, %f14;\n"
    "	cvt.rni.f32.f32 	%f487, %f486;\n"
    "	mul.f32 	%f488, %f13, %f487;\n"
    "	sub.f32 	%f47, %f484, %f488;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f481;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd31, %r27;\n"
    "	mul.wide.s32 	%rd32, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd32;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f489, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f490, %f54, %f489;\n"
    "	cvt.rzi.f32.f32 	%f57, %f490;\n"
    "	mov.f32 	%f491, %f57;\n"
    "	mov.f32 	%f492, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f493, %f492;\n"
    "	mov.f32 	%f494, %f54;\n"
    "	mad.f32 %f495, %f491, %f493, %f494;\n"
    "	mov.f32 	%f63, %f495;\n"
    "	mov.f32 	%f496, %f57;\n"
    "	mov.f32 	%f497, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f498, %f497;\n"
    "	mov.f32 	%f499, %f63;\n"
    "	mad.f32 %f500, %f496, %f498, %f499;\n"
    "	mov.f32 	%f63, %f500;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f501, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f501;\n"
    "	mov.f32 	%f502, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f502;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f503, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f503;\n"
    "	mov.f32 	%f504, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f504;\n"
    "	mov.f32 	%f505, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f505;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f506, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f506;\n"
    "	mov.f32 	%f507, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f507;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f508, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f508, %f93, %p4;\n"
    "	mov.f32 	%f509, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f509, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f510, %f73, %f99;\n"
    "	sub.f32 	%f101, %f510, %f88;\n"
    "	mul.f32 	%f511, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f511;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f512, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f512, %f104, %p2;\n"
    "	mov.f32 	%f513, %f2;\n"
    "	mov.f32 	%f514, %f26;\n"
    "	mad.f32 	%f515, %f514, %f106, %f513;\n"
    "	mov.f32 	%f2, %f515;\n"
    "	mov.f32 	%f516, %f4;\n"
    "	mov.f32 	%f517, %f38;\n"
    "	mad.f32 	%f518, %f517, %f106, %f516;\n"
    "	mov.f32 	%f4, %f518;\n"
    "	mov.f32 	%f519, %f6;\n"
    "	mov.f32 	%f520, %f48;\n"
    "	mad.f32 	%f521, %f520, %f106, %f519;\n"
    "	mov.f32 	%f6, %f521;\n"
    "	ld.shared.s32 	%r35, [%rd14+140];\n"
    "	add.s32 	%r27, %r35, %r6;\n"
    "	ld.shared.f32 	%f522, [%rd15+128];\n"
    "	mov.f32 	%f523, %f8;\n"
    "	sub.f32 	%f524, %f523, %f522;\n"
    "	mov.f32 	%f525, %f524;\n"
    "	mul.f32 	%f526, %f14, %f525;\n"
    "	cvt.rni.f32.f32 	%f527, %f526;\n"
    "	mul.f32 	%f528, %f13, %f527;\n"
    "	sub.f32 	%f25, %f524, %f528;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f529, 0f00000000;   	// 0\n"
    "	mad.f32 	%f530, %f25, %f25, %f529;\n"
    "	ld.shared.f32 	%f531, [%rd15+132];\n"
    "	mov.f32 	%f532, %f10;\n"
    "	sub.f32 	%f533, %f532, %f531;\n"
    "	mov.f32 	%f534, %f533;\n"
    "	mov.f32 	%f535, %f534;\n"
    "	mul.f32 	%f536, %f14, %f534;\n"
    "	cvt.rni.f32.f32 	%f537, %f536;\n"
    "	mul.f32 	%f538, %f13, %f537;\n"
    "	sub.f32 	%f37, %f533, %f538;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f539, %f37, %f37, %f530;\n"
    "	ld.shared.f32 	%f540, [%rd15+136];\n"
    "	mov.f32 	%f541, %f12;\n"
    "	sub.f32 	%f542, %f541, %f540;\n"
    "	mov.f32 	%f543, %f542;\n"
    "	mul.f32 	%f544, %f542, %f14;\n"
    "	cvt.rni.f32.f32 	%f545, %f544;\n"
    "	mul.f32 	%f546, %f13, %f545;\n"
    "	sub.f32 	%f47, %f542, %f546;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f539;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd33, %r27;\n"
    "	mul.wide.s32 	%rd34, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd34;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f547, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f548, %f54, %f547;\n"
    "	cvt.rzi.f32.f32 	%f57, %f548;\n"
    "	mov.f32 	%f549, %f57;\n"
    "	mov.f32 	%f550, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f551, %f550;\n"
    "	mov.f32 	%f552, %f54;\n"
    "	mad.f32 %f553, %f549, %f551, %f552;\n"
    "	mov.f32 	%f63, %f553;\n"
    "	mov.f32 	%f554, %f57;\n"
    "	mov.f32 	%f555, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f556, %f555;\n"
    "	mov.f32 	%f557, %f63;\n"
    "	mad.f32 %f558, %f554, %f556, %f557;\n"
    "	mov.f32 	%f63, %f558;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f559, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f559;\n"
    "	mov.f32 	%f560, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f560;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f561, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f561;\n"
    "	mov.f32 	%f562, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f562;\n"
    "	mov.f32 	%f563, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f563;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f564, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f564;\n"
    "	mov.f32 	%f565, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f565;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f566, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f566, %f93, %p4;\n"
    "	mov.f32 	%f567, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f567, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f568, %f73, %f99;\n"
    "	sub.f32 	%f101, %f568, %f88;\n"
    "	mul.f32 	%f569, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f569;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f570, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f570, %f104, %p2;\n"
    "	mov.f32 	%f571, %f2;\n"
    "	mov.f32 	%f572, %f26;\n"
    "	mad.f32 	%f573, %f572, %f106, %f571;\n"
    "	mov.f32 	%f2, %f573;\n"
    "	mov.f32 	%f574, %f4;\n"
    "	mov.f32 	%f575, %f38;\n"
    "	mad.f32 	%f576, %f575, %f106, %f574;\n"
    "	mov.f32 	%f4, %f576;\n"
    "	mov.f32 	%f577, %f6;\n"
    "	mov.f32 	%f578, %f48;\n"
    "	mad.f32 	%f579, %f578, %f106, %f577;\n"
    "	mov.f32 	%f6, %f579;\n"
    "	ld.shared.s32 	%r36, [%rd14+156];\n"
    "	add.s32 	%r27, %r36, %r6;\n"
    "	ld.shared.f32 	%f580, [%rd15+144];\n"
    "	mov.f32 	%f581, %f8;\n"
    "	sub.f32 	%f582, %f581, %f580;\n"
    "	mov.f32 	%f583, %f582;\n"
    "	mul.f32 	%f584, %f14, %f583;\n"
    "	cvt.rni.f32.f32 	%f585, %f584;\n"
    "	mul.f32 	%f586, %f13, %f585;\n"
    "	sub.f32 	%f25, %f582, %f586;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f587, 0f00000000;   	// 0\n"
    "	mad.f32 	%f588, %f25, %f25, %f587;\n"
    "	ld.shared.f32 	%f589, [%rd15+148];\n"
    "	mov.f32 	%f590, %f10;\n"
    "	sub.f32 	%f591, %f590, %f589;\n"
    "	mov.f32 	%f592, %f591;\n"
    "	mov.f32 	%f593, %f592;\n"
    "	mul.f32 	%f594, %f14, %f592;\n"
    "	cvt.rni.f32.f32 	%f595, %f594;\n"
    "	mul.f32 	%f596, %f13, %f595;\n"
    "	sub.f32 	%f37, %f591, %f596;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f597, %f37, %f37, %f588;\n"
    "	ld.shared.f32 	%f598, [%rd15+152];\n"
    "	mov.f32 	%f599, %f12;\n"
    "	sub.f32 	%f600, %f599, %f598;\n"
    "	mov.f32 	%f601, %f600;\n"
    "	mul.f32 	%f602, %f600, %f14;\n"
    "	cvt.rni.f32.f32 	%f603, %f602;\n"
    "	mul.f32 	%f604, %f13, %f603;\n"
    "	sub.f32 	%f47, %f600, %f604;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f597;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd35, %r27;\n"
    "	mul.wide.s32 	%rd36, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd36;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f605, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f606, %f54, %f605;\n"
    "	cvt.rzi.f32.f32 	%f57, %f606;\n"
    "	mov.f32 	%f607, %f57;\n"
    "	mov.f32 	%f608, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f609, %f608;\n"
    "	mov.f32 	%f610, %f54;\n"
    "	mad.f32 %f611, %f607, %f609, %f610;\n"
    "	mov.f32 	%f63, %f611;\n"
    "	mov.f32 	%f612, %f57;\n"
    "	mov.f32 	%f613, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f614, %f613;\n"
    "	mov.f32 	%f615, %f63;\n"
    "	mad.f32 %f616, %f612, %f614, %f615;\n"
    "	mov.f32 	%f63, %f616;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f617, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f617;\n"
    "	mov.f32 	%f618, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f618;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f619, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f619;\n"
    "	mov.f32 	%f620, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f620;\n"
    "	mov.f32 	%f621, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f621;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f622, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f622;\n"
    "	mov.f32 	%f623, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f623;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f624, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f624, %f93, %p4;\n"
    "	mov.f32 	%f625, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f625, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f626, %f73, %f99;\n"
    "	sub.f32 	%f101, %f626, %f88;\n"
    "	mul.f32 	%f627, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f627;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f628, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f628, %f104, %p2;\n"
    "	mov.f32 	%f629, %f2;\n"
    "	mov.f32 	%f630, %f26;\n"
    "	mad.f32 	%f631, %f630, %f106, %f629;\n"
    "	mov.f32 	%f2, %f631;\n"
    "	mov.f32 	%f632, %f4;\n"
    "	mov.f32 	%f633, %f38;\n"
    "	mad.f32 	%f634, %f633, %f106, %f632;\n"
    "	mov.f32 	%f4, %f634;\n"
    "	mov.f32 	%f635, %f6;\n"
    "	mov.f32 	%f636, %f48;\n"
    "	mad.f32 	%f637, %f636, %f106, %f635;\n"
    "	mov.f32 	%f6, %f637;\n"
    "	ld.shared.s32 	%r37, [%rd14+172];\n"
    "	add.s32 	%r27, %r37, %r6;\n"
    "	ld.shared.f32 	%f638, [%rd15+160];\n"
    "	mov.f32 	%f639, %f8;\n"
    "	sub.f32 	%f640, %f639, %f638;\n"
    "	mov.f32 	%f641, %f640;\n"
    "	mul.f32 	%f642, %f14, %f641;\n"
    "	cvt.rni.f32.f32 	%f643, %f642;\n"
    "	mul.f32 	%f644, %f13, %f643;\n"
    "	sub.f32 	%f25, %f640, %f644;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f645, 0f00000000;   	// 0\n"
    "	mad.f32 	%f646, %f25, %f25, %f645;\n"
    "	ld.shared.f32 	%f647, [%rd15+164];\n"
    "	mov.f32 	%f648, %f10;\n"
    "	sub.f32 	%f649, %f648, %f647;\n"
    "	mov.f32 	%f650, %f649;\n"
    "	mov.f32 	%f651, %f650;\n"
    "	mul.f32 	%f652, %f14, %f650;\n"
    "	cvt.rni.f32.f32 	%f653, %f652;\n"
    "	mul.f32 	%f654, %f13, %f653;\n"
    "	sub.f32 	%f37, %f649, %f654;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f655, %f37, %f37, %f646;\n"
    "	ld.shared.f32 	%f656, [%rd15+168];\n"
    "	mov.f32 	%f657, %f12;\n"
    "	sub.f32 	%f658, %f657, %f656;\n"
    "	mov.f32 	%f659, %f658;\n"
    "	mul.f32 	%f660, %f658, %f14;\n"
    "	cvt.rni.f32.f32 	%f661, %f660;\n"
    "	mul.f32 	%f662, %f13, %f661;\n"
    "	sub.f32 	%f47, %f658, %f662;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f655;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd37, %r27;\n"
    "	mul.wide.s32 	%rd38, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd38;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f663, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f664, %f54, %f663;\n"
    "	cvt.rzi.f32.f32 	%f57, %f664;\n"
    "	mov.f32 	%f665, %f57;\n"
    "	mov.f32 	%f666, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f667, %f666;\n"
    "	mov.f32 	%f668, %f54;\n"
    "	mad.f32 %f669, %f665, %f667, %f668;\n"
    "	mov.f32 	%f63, %f669;\n"
    "	mov.f32 	%f670, %f57;\n"
    "	mov.f32 	%f671, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f672, %f671;\n"
    "	mov.f32 	%f673, %f63;\n"
    "	mad.f32 %f674, %f670, %f672, %f673;\n"
    "	mov.f32 	%f63, %f674;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f675, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f675;\n"
    "	mov.f32 	%f676, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f676;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f677, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f677;\n"
    "	mov.f32 	%f678, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f678;\n"
    "	mov.f32 	%f679, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f679;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f680, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f680;\n"
    "	mov.f32 	%f681, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f681;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f682, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f682, %f93, %p4;\n"
    "	mov.f32 	%f683, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f683, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f684, %f73, %f99;\n"
    "	sub.f32 	%f101, %f684, %f88;\n"
    "	mul.f32 	%f685, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f685;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f686, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f686, %f104, %p2;\n"
    "	mov.f32 	%f687, %f2;\n"
    "	mov.f32 	%f688, %f26;\n"
    "	mad.f32 	%f689, %f688, %f106, %f687;\n"
    "	mov.f32 	%f2, %f689;\n"
    "	mov.f32 	%f690, %f4;\n"
    "	mov.f32 	%f691, %f38;\n"
    "	mad.f32 	%f692, %f691, %f106, %f690;\n"
    "	mov.f32 	%f4, %f692;\n"
    "	mov.f32 	%f693, %f6;\n"
    "	mov.f32 	%f694, %f48;\n"
    "	mad.f32 	%f695, %f694, %f106, %f693;\n"
    "	mov.f32 	%f6, %f695;\n"
    "	ld.shared.s32 	%r38, [%rd14+188];\n"
    "	add.s32 	%r27, %r38, %r6;\n"
    "	ld.shared.f32 	%f696, [%rd15+176];\n"
    "	mov.f32 	%f697, %f8;\n"
    "	sub.f32 	%f698, %f697, %f696;\n"
    "	mov.f32 	%f699, %f698;\n"
    "	mul.f32 	%f700, %f14, %f699;\n"
    "	cvt.rni.f32.f32 	%f701, %f700;\n"
    "	mul.f32 	%f702, %f13, %f701;\n"
    "	sub.f32 	%f25, %f698, %f702;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f703, 0f00000000;   	// 0\n"
    "	mad.f32 	%f704, %f25, %f25, %f703;\n"
    "	ld.shared.f32 	%f705, [%rd15+180];\n"
    "	mov.f32 	%f706, %f10;\n"
    "	sub.f32 	%f707, %f706, %f705;\n"
    "	mov.f32 	%f708, %f707;\n"
    "	mov.f32 	%f709, %f708;\n"
    "	mul.f32 	%f710, %f14, %f708;\n"
    "	cvt.rni.f32.f32 	%f711, %f710;\n"
    "	mul.f32 	%f712, %f13, %f711;\n"
    "	sub.f32 	%f37, %f707, %f712;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f713, %f37, %f37, %f704;\n"
    "	ld.shared.f32 	%f714, [%rd15+184];\n"
    "	mov.f32 	%f715, %f12;\n"
    "	sub.f32 	%f716, %f715, %f714;\n"
    "	mov.f32 	%f717, %f716;\n"
    "	mul.f32 	%f718, %f716, %f14;\n"
    "	cvt.rni.f32.f32 	%f719, %f718;\n"
    "	mul.f32 	%f720, %f13, %f719;\n"
    "	sub.f32 	%f47, %f716, %f720;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f713;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd39, %r27;\n"
    "	mul.wide.s32 	%rd40, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd40;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f721, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f722, %f54, %f721;\n"
    "	cvt.rzi.f32.f32 	%f57, %f722;\n"
    "	mov.f32 	%f723, %f57;\n"
    "	mov.f32 	%f724, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f725, %f724;\n"
    "	mov.f32 	%f726, %f54;\n"
    "	mad.f32 %f727, %f723, %f725, %f726;\n"
    "	mov.f32 	%f63, %f727;\n"
    "	mov.f32 	%f728, %f57;\n"
    "	mov.f32 	%f729, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f730, %f729;\n"
    "	mov.f32 	%f731, %f63;\n"
    "	mad.f32 %f732, %f728, %f730, %f731;\n"
    "	mov.f32 	%f63, %f732;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f733, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f733;\n"
    "	mov.f32 	%f734, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f734;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f735, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f735;\n"
    "	mov.f32 	%f736, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f736;\n"
    "	mov.f32 	%f737, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f737;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f738, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f738;\n"
    "	mov.f32 	%f739, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f739;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f740, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f740, %f93, %p4;\n"
    "	mov.f32 	%f741, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f741, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f742, %f73, %f99;\n"
    "	sub.f32 	%f101, %f742, %f88;\n"
    "	mul.f32 	%f743, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f743;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f744, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f744, %f104, %p2;\n"
    "	mov.f32 	%f745, %f2;\n"
    "	mov.f32 	%f746, %f26;\n"
    "	mad.f32 	%f747, %f746, %f106, %f745;\n"
    "	mov.f32 	%f2, %f747;\n"
    "	mov.f32 	%f748, %f4;\n"
    "	mov.f32 	%f749, %f38;\n"
    "	mad.f32 	%f750, %f749, %f106, %f748;\n"
    "	mov.f32 	%f4, %f750;\n"
    "	mov.f32 	%f751, %f6;\n"
    "	mov.f32 	%f752, %f48;\n"
    "	mad.f32 	%f753, %f752, %f106, %f751;\n"
    "	mov.f32 	%f6, %f753;\n"
    "	ld.shared.s32 	%r39, [%rd14+204];\n"
    "	add.s32 	%r27, %r39, %r6;\n"
    "	ld.shared.f32 	%f754, [%rd15+192];\n"
    "	mov.f32 	%f755, %f8;\n"
    "	sub.f32 	%f756, %f755, %f754;\n"
    "	mov.f32 	%f757, %f756;\n"
    "	mul.f32 	%f758, %f14, %f757;\n"
    "	cvt.rni.f32.f32 	%f759, %f758;\n"
    "	mul.f32 	%f760, %f13, %f759;\n"
    "	sub.f32 	%f25, %f756, %f760;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f761, 0f00000000;   	// 0\n"
    "	mad.f32 	%f762, %f25, %f25, %f761;\n"
    "	ld.shared.f32 	%f763, [%rd15+196];\n"
    "	mov.f32 	%f764, %f10;\n"
    "	sub.f32 	%f765, %f764, %f763;\n"
    "	mov.f32 	%f766, %f765;\n"
    "	mov.f32 	%f767, %f766;\n"
    "	mul.f32 	%f768, %f14, %f766;\n"
    "	cvt.rni.f32.f32 	%f769, %f768;\n"
    "	mul.f32 	%f770, %f13, %f769;\n"
    "	sub.f32 	%f37, %f765, %f770;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f771, %f37, %f37, %f762;\n"
    "	ld.shared.f32 	%f772, [%rd15+200];\n"
    "	mov.f32 	%f773, %f12;\n"
    "	sub.f32 	%f774, %f773, %f772;\n"
    "	mov.f32 	%f775, %f774;\n"
    "	mul.f32 	%f776, %f774, %f14;\n"
    "	cvt.rni.f32.f32 	%f777, %f776;\n"
    "	mul.f32 	%f778, %f13, %f777;\n"
    "	sub.f32 	%f47, %f774, %f778;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f771;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd41, %r27;\n"
    "	mul.wide.s32 	%rd42, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd42;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f779, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f780, %f54, %f779;\n"
    "	cvt.rzi.f32.f32 	%f57, %f780;\n"
    "	mov.f32 	%f781, %f57;\n"
    "	mov.f32 	%f782, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f783, %f782;\n"
    "	mov.f32 	%f784, %f54;\n"
    "	mad.f32 %f785, %f781, %f783, %f784;\n"
    "	mov.f32 	%f63, %f785;\n"
    "	mov.f32 	%f786, %f57;\n"
    "	mov.f32 	%f787, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f788, %f787;\n"
    "	mov.f32 	%f789, %f63;\n"
    "	mad.f32 %f790, %f786, %f788, %f789;\n"
    "	mov.f32 	%f63, %f790;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f791, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f791;\n"
    "	mov.f32 	%f792, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f792;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f793, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f793;\n"
    "	mov.f32 	%f794, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f794;\n"
    "	mov.f32 	%f795, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f795;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f796, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f796;\n"
    "	mov.f32 	%f797, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f797;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f798, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f798, %f93, %p4;\n"
    "	mov.f32 	%f799, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f799, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f800, %f73, %f99;\n"
    "	sub.f32 	%f101, %f800, %f88;\n"
    "	mul.f32 	%f801, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f801;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f802, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f802, %f104, %p2;\n"
    "	mov.f32 	%f803, %f2;\n"
    "	mov.f32 	%f804, %f26;\n"
    "	mad.f32 	%f805, %f804, %f106, %f803;\n"
    "	mov.f32 	%f2, %f805;\n"
    "	mov.f32 	%f806, %f4;\n"
    "	mov.f32 	%f807, %f38;\n"
    "	mad.f32 	%f808, %f807, %f106, %f806;\n"
    "	mov.f32 	%f4, %f808;\n"
    "	mov.f32 	%f809, %f6;\n"
    "	mov.f32 	%f810, %f48;\n"
    "	mad.f32 	%f811, %f810, %f106, %f809;\n"
    "	mov.f32 	%f6, %f811;\n"
    "	ld.shared.s32 	%r40, [%rd14+220];\n"
    "	add.s32 	%r27, %r40, %r6;\n"
    "	ld.shared.f32 	%f812, [%rd15+208];\n"
    "	mov.f32 	%f813, %f8;\n"
    "	sub.f32 	%f814, %f813, %f812;\n"
    "	mov.f32 	%f815, %f814;\n"
    "	mul.f32 	%f816, %f14, %f815;\n"
    "	cvt.rni.f32.f32 	%f817, %f816;\n"
    "	mul.f32 	%f818, %f13, %f817;\n"
    "	sub.f32 	%f25, %f814, %f818;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f819, 0f00000000;   	// 0\n"
    "	mad.f32 	%f820, %f25, %f25, %f819;\n"
    "	ld.shared.f32 	%f821, [%rd15+212];\n"
    "	mov.f32 	%f822, %f10;\n"
    "	sub.f32 	%f823, %f822, %f821;\n"
    "	mov.f32 	%f824, %f823;\n"
    "	mov.f32 	%f825, %f824;\n"
    "	mul.f32 	%f826, %f14, %f824;\n"
    "	cvt.rni.f32.f32 	%f827, %f826;\n"
    "	mul.f32 	%f828, %f13, %f827;\n"
    "	sub.f32 	%f37, %f823, %f828;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f829, %f37, %f37, %f820;\n"
    "	ld.shared.f32 	%f830, [%rd15+216];\n"
    "	mov.f32 	%f831, %f12;\n"
    "	sub.f32 	%f832, %f831, %f830;\n"
    "	mov.f32 	%f833, %f832;\n"
    "	mul.f32 	%f834, %f832, %f14;\n"
    "	cvt.rni.f32.f32 	%f835, %f834;\n"
    "	mul.f32 	%f836, %f13, %f835;\n"
    "	sub.f32 	%f47, %f832, %f836;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f829;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd43, %r27;\n"
    "	mul.wide.s32 	%rd44, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd44;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f837, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f838, %f54, %f837;\n"
    "	cvt.rzi.f32.f32 	%f57, %f838;\n"
    "	mov.f32 	%f839, %f57;\n"
    "	mov.f32 	%f840, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f841, %f840;\n"
    "	mov.f32 	%f842, %f54;\n"
    "	mad.f32 %f843, %f839, %f841, %f842;\n"
    "	mov.f32 	%f63, %f843;\n"
    "	mov.f32 	%f844, %f57;\n"
    "	mov.f32 	%f845, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f846, %f845;\n"
    "	mov.f32 	%f847, %f63;\n"
    "	mad.f32 %f848, %f844, %f846, %f847;\n"
    "	mov.f32 	%f63, %f848;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f849, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f849;\n"
    "	mov.f32 	%f850, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f850;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f851, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f851;\n"
    "	mov.f32 	%f852, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f852;\n"
    "	mov.f32 	%f853, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f853;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f854, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f854;\n"
    "	mov.f32 	%f855, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f855;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f856, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f856, %f93, %p4;\n"
    "	mov.f32 	%f857, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f857, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f858, %f73, %f99;\n"
    "	sub.f32 	%f101, %f858, %f88;\n"
    "	mul.f32 	%f859, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f859;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f860, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f860, %f104, %p2;\n"
    "	mov.f32 	%f861, %f2;\n"
    "	mov.f32 	%f862, %f26;\n"
    "	mad.f32 	%f863, %f862, %f106, %f861;\n"
    "	mov.f32 	%f2, %f863;\n"
    "	mov.f32 	%f864, %f4;\n"
    "	mov.f32 	%f865, %f38;\n"
    "	mad.f32 	%f866, %f865, %f106, %f864;\n"
    "	mov.f32 	%f4, %f866;\n"
    "	mov.f32 	%f867, %f6;\n"
    "	mov.f32 	%f868, %f48;\n"
    "	mad.f32 	%f869, %f868, %f106, %f867;\n"
    "	mov.f32 	%f6, %f869;\n"
    "	ld.shared.s32 	%r41, [%rd14+236];\n"
    "	add.s32 	%r27, %r41, %r6;\n"
    "	ld.shared.f32 	%f870, [%rd15+224];\n"
    "	mov.f32 	%f871, %f8;\n"
    "	sub.f32 	%f872, %f871, %f870;\n"
    "	mov.f32 	%f873, %f872;\n"
    "	mul.f32 	%f874, %f14, %f873;\n"
    "	cvt.rni.f32.f32 	%f875, %f874;\n"
    "	mul.f32 	%f876, %f13, %f875;\n"
    "	sub.f32 	%f25, %f872, %f876;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f877, 0f00000000;   	// 0\n"
    "	mad.f32 	%f878, %f25, %f25, %f877;\n"
    "	ld.shared.f32 	%f879, [%rd15+228];\n"
    "	mov.f32 	%f880, %f10;\n"
    "	sub.f32 	%f881, %f880, %f879;\n"
    "	mov.f32 	%f882, %f881;\n"
    "	mov.f32 	%f883, %f882;\n"
    "	mul.f32 	%f884, %f14, %f882;\n"
    "	cvt.rni.f32.f32 	%f885, %f884;\n"
    "	mul.f32 	%f886, %f13, %f885;\n"
    "	sub.f32 	%f37, %f881, %f886;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f887, %f37, %f37, %f878;\n"
    "	ld.shared.f32 	%f888, [%rd15+232];\n"
    "	mov.f32 	%f889, %f12;\n"
    "	sub.f32 	%f890, %f889, %f888;\n"
    "	mov.f32 	%f891, %f890;\n"
    "	mul.f32 	%f892, %f890, %f14;\n"
    "	cvt.rni.f32.f32 	%f893, %f892;\n"
    "	mul.f32 	%f894, %f13, %f893;\n"
    "	sub.f32 	%f47, %f890, %f894;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f887;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd45, %r27;\n"
    "	mul.wide.s32 	%rd46, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd46;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f895, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f896, %f54, %f895;\n"
    "	cvt.rzi.f32.f32 	%f57, %f896;\n"
    "	mov.f32 	%f897, %f57;\n"
    "	mov.f32 	%f898, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f899, %f898;\n"
    "	mov.f32 	%f900, %f54;\n"
    "	mad.f32 %f901, %f897, %f899, %f900;\n"
    "	mov.f32 	%f63, %f901;\n"
    "	mov.f32 	%f902, %f57;\n"
    "	mov.f32 	%f903, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f904, %f903;\n"
    "	mov.f32 	%f905, %f63;\n"
    "	mad.f32 %f906, %f902, %f904, %f905;\n"
    "	mov.f32 	%f63, %f906;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f907, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f907;\n"
    "	mov.f32 	%f908, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f908;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f909, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f909;\n"
    "	mov.f32 	%f910, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f910;\n"
    "	mov.f32 	%f911, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f911;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f912, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f912;\n"
    "	mov.f32 	%f913, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f913;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f914, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f914, %f93, %p4;\n"
    "	mov.f32 	%f915, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f915, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f916, %f73, %f99;\n"
    "	sub.f32 	%f101, %f916, %f88;\n"
    "	mul.f32 	%f917, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f917;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f918, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f918, %f104, %p2;\n"
    "	mov.f32 	%f919, %f2;\n"
    "	mov.f32 	%f920, %f26;\n"
    "	mad.f32 	%f921, %f920, %f106, %f919;\n"
    "	mov.f32 	%f2, %f921;\n"
    "	mov.f32 	%f922, %f4;\n"
    "	mov.f32 	%f923, %f38;\n"
    "	mad.f32 	%f924, %f923, %f106, %f922;\n"
    "	mov.f32 	%f4, %f924;\n"
    "	mov.f32 	%f925, %f6;\n"
    "	mov.f32 	%f926, %f48;\n"
    "	mad.f32 	%f927, %f926, %f106, %f925;\n"
    "	mov.f32 	%f6, %f927;\n"
    "	ld.shared.s32 	%r42, [%rd14+252];\n"
    "	add.s32 	%r27, %r42, %r6;\n"
    "	ld.shared.f32 	%f928, [%rd15+240];\n"
    "	mov.f32 	%f929, %f8;\n"
    "	sub.f32 	%f930, %f929, %f928;\n"
    "	mov.f32 	%f931, %f930;\n"
    "	mul.f32 	%f932, %f14, %f931;\n"
    "	cvt.rni.f32.f32 	%f933, %f932;\n"
    "	mul.f32 	%f934, %f13, %f933;\n"
    "	sub.f32 	%f25, %f930, %f934;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f935, 0f00000000;   	// 0\n"
    "	mad.f32 	%f936, %f25, %f25, %f935;\n"
    "	ld.shared.f32 	%f937, [%rd15+244];\n"
    "	mov.f32 	%f938, %f10;\n"
    "	sub.f32 	%f939, %f938, %f937;\n"
    "	mov.f32 	%f940, %f939;\n"
    "	mov.f32 	%f941, %f940;\n"
    "	mul.f32 	%f942, %f14, %f940;\n"
    "	cvt.rni.f32.f32 	%f943, %f942;\n"
    "	mul.f32 	%f944, %f13, %f943;\n"
    "	sub.f32 	%f37, %f939, %f944;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f945, %f37, %f37, %f936;\n"
    "	ld.shared.f32 	%f946, [%rd15+248];\n"
    "	mov.f32 	%f947, %f12;\n"
    "	sub.f32 	%f948, %f947, %f946;\n"
    "	mov.f32 	%f949, %f948;\n"
    "	mul.f32 	%f950, %f948, %f14;\n"
    "	cvt.rni.f32.f32 	%f951, %f950;\n"
    "	mul.f32 	%f952, %f13, %f951;\n"
    "	sub.f32 	%f47, %f948, %f952;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f945;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd47, %r27;\n"
    "	mul.wide.s32 	%rd48, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd48;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f953, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f954, %f54, %f953;\n"
    "	cvt.rzi.f32.f32 	%f57, %f954;\n"
    "	mov.f32 	%f955, %f57;\n"
    "	mov.f32 	%f956, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f957, %f956;\n"
    "	mov.f32 	%f958, %f54;\n"
    "	mad.f32 %f959, %f955, %f957, %f958;\n"
    "	mov.f32 	%f63, %f959;\n"
    "	mov.f32 	%f960, %f57;\n"
    "	mov.f32 	%f961, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f962, %f961;\n"
    "	mov.f32 	%f963, %f63;\n"
    "	mad.f32 %f964, %f960, %f962, %f963;\n"
    "	mov.f32 	%f63, %f964;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f965, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f965;\n"
    "	mov.f32 	%f966, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f966;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f967, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f967;\n"
    "	mov.f32 	%f968, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f968;\n"
    "	mov.f32 	%f969, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f969;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f970, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f970;\n"
    "	mov.f32 	%f971, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f971;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f972, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f972, %f93, %p4;\n"
    "	mov.f32 	%f973, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f973, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f974, %f73, %f99;\n"
    "	sub.f32 	%f101, %f974, %f88;\n"
    "	mul.f32 	%f975, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f975;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f976, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f976, %f104, %p2;\n"
    "	mov.f32 	%f977, %f2;\n"
    "	mov.f32 	%f978, %f26;\n"
    "	mad.f32 	%f979, %f978, %f106, %f977;\n"
    "	mov.f32 	%f2, %f979;\n"
    "	mov.f32 	%f980, %f4;\n"
    "	mov.f32 	%f981, %f38;\n"
    "	mad.f32 	%f982, %f981, %f106, %f980;\n"
    "	mov.f32 	%f4, %f982;\n"
    "	mov.f32 	%f983, %f6;\n"
    "	mov.f32 	%f984, %f48;\n"
    "	mad.f32 	%f985, %f984, %f106, %f983;\n"
    "	mov.f32 	%f6, %f985;\n"
    "	ld.shared.s32 	%r43, [%rd14+268];\n"
    "	add.s32 	%r27, %r43, %r6;\n"
    "	ld.shared.f32 	%f986, [%rd15+256];\n"
    "	mov.f32 	%f987, %f8;\n"
    "	sub.f32 	%f988, %f987, %f986;\n"
    "	mov.f32 	%f989, %f988;\n"
    "	mul.f32 	%f990, %f14, %f989;\n"
    "	cvt.rni.f32.f32 	%f991, %f990;\n"
    "	mul.f32 	%f992, %f13, %f991;\n"
    "	sub.f32 	%f25, %f988, %f992;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f993, 0f00000000;   	// 0\n"
    "	mad.f32 	%f994, %f25, %f25, %f993;\n"
    "	ld.shared.f32 	%f995, [%rd15+260];\n"
    "	mov.f32 	%f996, %f10;\n"
    "	sub.f32 	%f997, %f996, %f995;\n"
    "	mov.f32 	%f998, %f997;\n"
    "	mov.f32 	%f999, %f998;\n"
    "	mul.f32 	%f1000, %f14, %f998;\n"
    "	cvt.rni.f32.f32 	%f1001, %f1000;\n"
    "	mul.f32 	%f1002, %f13, %f1001;\n"
    "	sub.f32 	%f37, %f997, %f1002;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1003, %f37, %f37, %f994;\n"
    "	ld.shared.f32 	%f1004, [%rd15+264];\n"
    "	mov.f32 	%f1005, %f12;\n"
    "	sub.f32 	%f1006, %f1005, %f1004;\n"
    "	mov.f32 	%f1007, %f1006;\n"
    "	mul.f32 	%f1008, %f1006, %f14;\n"
    "	cvt.rni.f32.f32 	%f1009, %f1008;\n"
    "	mul.f32 	%f1010, %f13, %f1009;\n"
    "	sub.f32 	%f47, %f1006, %f1010;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1003;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd49, %r27;\n"
    "	mul.wide.s32 	%rd50, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd50;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f1011, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1012, %f54, %f1011;\n"
    "	cvt.rzi.f32.f32 	%f57, %f1012;\n"
    "	mov.f32 	%f1013, %f57;\n"
    "	mov.f32 	%f1014, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1015, %f1014;\n"
    "	mov.f32 	%f1016, %f54;\n"
    "	mad.f32 %f1017, %f1013, %f1015, %f1016;\n"
    "	mov.f32 	%f63, %f1017;\n"
    "	mov.f32 	%f1018, %f57;\n"
    "	mov.f32 	%f1019, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1020, %f1019;\n"
    "	mov.f32 	%f1021, %f63;\n"
    "	mad.f32 %f1022, %f1018, %f1020, %f1021;\n"
    "	mov.f32 	%f63, %f1022;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f1023, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f1023;\n"
    "	mov.f32 	%f1024, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f1024;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f1025, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f1025;\n"
    "	mov.f32 	%f1026, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f1026;\n"
    "	mov.f32 	%f1027, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f1027;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f1028, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f1028;\n"
    "	mov.f32 	%f1029, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f1029;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f1030, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f1030, %f93, %p4;\n"
    "	mov.f32 	%f1031, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f1031, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f1032, %f73, %f99;\n"
    "	sub.f32 	%f101, %f1032, %f88;\n"
    "	mul.f32 	%f1033, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f1033;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f1034, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f1034, %f104, %p2;\n"
    "	mov.f32 	%f1035, %f2;\n"
    "	mov.f32 	%f1036, %f26;\n"
    "	mad.f32 	%f1037, %f1036, %f106, %f1035;\n"
    "	mov.f32 	%f2, %f1037;\n"
    "	mov.f32 	%f1038, %f4;\n"
    "	mov.f32 	%f1039, %f38;\n"
    "	mad.f32 	%f1040, %f1039, %f106, %f1038;\n"
    "	mov.f32 	%f4, %f1040;\n"
    "	mov.f32 	%f1041, %f6;\n"
    "	mov.f32 	%f1042, %f48;\n"
    "	mad.f32 	%f1043, %f1042, %f106, %f1041;\n"
    "	mov.f32 	%f6, %f1043;\n"
    "	ld.shared.s32 	%r44, [%rd14+284];\n"
    "	add.s32 	%r27, %r44, %r6;\n"
    "	ld.shared.f32 	%f1044, [%rd15+272];\n"
    "	mov.f32 	%f1045, %f8;\n"
    "	sub.f32 	%f1046, %f1045, %f1044;\n"
    "	mov.f32 	%f1047, %f1046;\n"
    "	mul.f32 	%f1048, %f14, %f1047;\n"
    "	cvt.rni.f32.f32 	%f1049, %f1048;\n"
    "	mul.f32 	%f1050, %f13, %f1049;\n"
    "	sub.f32 	%f25, %f1046, %f1050;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1051, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1052, %f25, %f25, %f1051;\n"
    "	ld.shared.f32 	%f1053, [%rd15+276];\n"
    "	mov.f32 	%f1054, %f10;\n"
    "	sub.f32 	%f1055, %f1054, %f1053;\n"
    "	mov.f32 	%f1056, %f1055;\n"
    "	mov.f32 	%f1057, %f1056;\n"
    "	mul.f32 	%f1058, %f14, %f1056;\n"
    "	cvt.rni.f32.f32 	%f1059, %f1058;\n"
    "	mul.f32 	%f1060, %f13, %f1059;\n"
    "	sub.f32 	%f37, %f1055, %f1060;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1061, %f37, %f37, %f1052;\n"
    "	ld.shared.f32 	%f1062, [%rd15+280];\n"
    "	mov.f32 	%f1063, %f12;\n"
    "	sub.f32 	%f1064, %f1063, %f1062;\n"
    "	mov.f32 	%f1065, %f1064;\n"
    "	mul.f32 	%f1066, %f1064, %f14;\n"
    "	cvt.rni.f32.f32 	%f1067, %f1066;\n"
    "	mul.f32 	%f1068, %f13, %f1067;\n"
    "	sub.f32 	%f47, %f1064, %f1068;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1061;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd51, %r27;\n"
    "	mul.wide.s32 	%rd52, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd52;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f1069, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1070, %f54, %f1069;\n"
    "	cvt.rzi.f32.f32 	%f57, %f1070;\n"
    "	mov.f32 	%f1071, %f57;\n"
    "	mov.f32 	%f1072, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1073, %f1072;\n"
    "	mov.f32 	%f1074, %f54;\n"
    "	mad.f32 %f1075, %f1071, %f1073, %f1074;\n"
    "	mov.f32 	%f63, %f1075;\n"
    "	mov.f32 	%f1076, %f57;\n"
    "	mov.f32 	%f1077, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1078, %f1077;\n"
    "	mov.f32 	%f1079, %f63;\n"
    "	mad.f32 %f1080, %f1076, %f1078, %f1079;\n"
    "	mov.f32 	%f63, %f1080;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f1081, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f1081;\n"
    "	mov.f32 	%f1082, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f1082;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f1083, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f1083;\n"
    "	mov.f32 	%f1084, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f1084;\n"
    "	mov.f32 	%f1085, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f1085;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f1086, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f1086;\n"
    "	mov.f32 	%f1087, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f1087;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f1088, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f1088, %f93, %p4;\n"
    "	mov.f32 	%f1089, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f1089, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f1090, %f73, %f99;\n"
    "	sub.f32 	%f101, %f1090, %f88;\n"
    "	mul.f32 	%f1091, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f1091;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f1092, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f1092, %f104, %p2;\n"
    "	mov.f32 	%f1093, %f2;\n"
    "	mov.f32 	%f1094, %f26;\n"
    "	mad.f32 	%f1095, %f1094, %f106, %f1093;\n"
    "	mov.f32 	%f2, %f1095;\n"
    "	mov.f32 	%f1096, %f4;\n"
    "	mov.f32 	%f1097, %f38;\n"
    "	mad.f32 	%f1098, %f1097, %f106, %f1096;\n"
    "	mov.f32 	%f4, %f1098;\n"
    "	mov.f32 	%f1099, %f6;\n"
    "	mov.f32 	%f1100, %f48;\n"
    "	mad.f32 	%f1101, %f1100, %f106, %f1099;\n"
    "	mov.f32 	%f6, %f1101;\n"
    "	ld.shared.s32 	%r45, [%rd14+300];\n"
    "	add.s32 	%r27, %r45, %r6;\n"
    "	ld.shared.f32 	%f1102, [%rd15+288];\n"
    "	mov.f32 	%f1103, %f8;\n"
    "	sub.f32 	%f1104, %f1103, %f1102;\n"
    "	mov.f32 	%f1105, %f1104;\n"
    "	mul.f32 	%f1106, %f14, %f1105;\n"
    "	cvt.rni.f32.f32 	%f1107, %f1106;\n"
    "	mul.f32 	%f1108, %f13, %f1107;\n"
    "	sub.f32 	%f25, %f1104, %f1108;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1109, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1110, %f25, %f25, %f1109;\n"
    "	ld.shared.f32 	%f1111, [%rd15+292];\n"
    "	mov.f32 	%f1112, %f10;\n"
    "	sub.f32 	%f1113, %f1112, %f1111;\n"
    "	mov.f32 	%f1114, %f1113;\n"
    "	mov.f32 	%f1115, %f1114;\n"
    "	mul.f32 	%f1116, %f14, %f1114;\n"
    "	cvt.rni.f32.f32 	%f1117, %f1116;\n"
    "	mul.f32 	%f1118, %f13, %f1117;\n"
    "	sub.f32 	%f37, %f1113, %f1118;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1119, %f37, %f37, %f1110;\n"
    "	ld.shared.f32 	%f1120, [%rd15+296];\n"
    "	mov.f32 	%f1121, %f12;\n"
    "	sub.f32 	%f1122, %f1121, %f1120;\n"
    "	mov.f32 	%f1123, %f1122;\n"
    "	mul.f32 	%f1124, %f1122, %f14;\n"
    "	cvt.rni.f32.f32 	%f1125, %f1124;\n"
    "	mul.f32 	%f1126, %f13, %f1125;\n"
    "	sub.f32 	%f47, %f1122, %f1126;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1119;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd53, %r27;\n"
    "	mul.wide.s32 	%rd54, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd54;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f1127, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1128, %f54, %f1127;\n"
    "	cvt.rzi.f32.f32 	%f57, %f1128;\n"
    "	mov.f32 	%f1129, %f57;\n"
    "	mov.f32 	%f1130, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1131, %f1130;\n"
    "	mov.f32 	%f1132, %f54;\n"
    "	mad.f32 %f1133, %f1129, %f1131, %f1132;\n"
    "	mov.f32 	%f63, %f1133;\n"
    "	mov.f32 	%f1134, %f57;\n"
    "	mov.f32 	%f1135, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1136, %f1135;\n"
    "	mov.f32 	%f1137, %f63;\n"
    "	mad.f32 %f1138, %f1134, %f1136, %f1137;\n"
    "	mov.f32 	%f63, %f1138;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f1139, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f1139;\n"
    "	mov.f32 	%f1140, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f1140;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f1141, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f1141;\n"
    "	mov.f32 	%f1142, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f1142;\n"
    "	mov.f32 	%f1143, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f1143;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f1144, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f1144;\n"
    "	mov.f32 	%f1145, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f1145;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f1146, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f1146, %f93, %p4;\n"
    "	mov.f32 	%f1147, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f1147, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f1148, %f73, %f99;\n"
    "	sub.f32 	%f101, %f1148, %f88;\n"
    "	mul.f32 	%f1149, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f1149;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f1150, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f1150, %f104, %p2;\n"
    "	mov.f32 	%f1151, %f2;\n"
    "	mov.f32 	%f1152, %f26;\n"
    "	mad.f32 	%f1153, %f1152, %f106, %f1151;\n"
    "	mov.f32 	%f2, %f1153;\n"
    "	mov.f32 	%f1154, %f4;\n"
    "	mov.f32 	%f1155, %f38;\n"
    "	mad.f32 	%f1156, %f1155, %f106, %f1154;\n"
    "	mov.f32 	%f4, %f1156;\n"
    "	mov.f32 	%f1157, %f6;\n"
    "	mov.f32 	%f1158, %f48;\n"
    "	mad.f32 	%f1159, %f1158, %f106, %f1157;\n"
    "	mov.f32 	%f6, %f1159;\n"
    "	ld.shared.s32 	%r46, [%rd14+316];\n"
    "	add.s32 	%r27, %r46, %r6;\n"
    "	ld.shared.f32 	%f1160, [%rd15+304];\n"
    "	mov.f32 	%f1161, %f8;\n"
    "	sub.f32 	%f1162, %f1161, %f1160;\n"
    "	mov.f32 	%f1163, %f1162;\n"
    "	mul.f32 	%f1164, %f14, %f1163;\n"
    "	cvt.rni.f32.f32 	%f1165, %f1164;\n"
    "	mul.f32 	%f1166, %f13, %f1165;\n"
    "	sub.f32 	%f25, %f1162, %f1166;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1167, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1168, %f25, %f25, %f1167;\n"
    "	ld.shared.f32 	%f1169, [%rd15+308];\n"
    "	mov.f32 	%f1170, %f10;\n"
    "	sub.f32 	%f1171, %f1170, %f1169;\n"
    "	mov.f32 	%f1172, %f1171;\n"
    "	mov.f32 	%f1173, %f1172;\n"
    "	mul.f32 	%f1174, %f14, %f1172;\n"
    "	cvt.rni.f32.f32 	%f1175, %f1174;\n"
    "	mul.f32 	%f1176, %f13, %f1175;\n"
    "	sub.f32 	%f37, %f1171, %f1176;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1177, %f37, %f37, %f1168;\n"
    "	ld.shared.f32 	%f1178, [%rd15+312];\n"
    "	mov.f32 	%f1179, %f12;\n"
    "	sub.f32 	%f1180, %f1179, %f1178;\n"
    "	mov.f32 	%f1181, %f1180;\n"
    "	mul.f32 	%f1182, %f1180, %f14;\n"
    "	cvt.rni.f32.f32 	%f1183, %f1182;\n"
    "	mul.f32 	%f1184, %f13, %f1183;\n"
    "	sub.f32 	%f47, %f1180, %f1184;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1177;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd55, %r27;\n"
    "	mul.wide.s32 	%rd56, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd56;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f1185, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1186, %f54, %f1185;\n"
    "	cvt.rzi.f32.f32 	%f57, %f1186;\n"
    "	mov.f32 	%f1187, %f57;\n"
    "	mov.f32 	%f1188, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1189, %f1188;\n"
    "	mov.f32 	%f1190, %f54;\n"
    "	mad.f32 %f1191, %f1187, %f1189, %f1190;\n"
    "	mov.f32 	%f63, %f1191;\n"
    "	mov.f32 	%f1192, %f57;\n"
    "	mov.f32 	%f1193, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1194, %f1193;\n"
    "	mov.f32 	%f1195, %f63;\n"
    "	mad.f32 %f1196, %f1192, %f1194, %f1195;\n"
    "	mov.f32 	%f63, %f1196;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f1197, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f1197;\n"
    "	mov.f32 	%f1198, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f1198;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f1199, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f1199;\n"
    "	mov.f32 	%f1200, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f1200;\n"
    "	mov.f32 	%f1201, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f1201;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f1202, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f1202;\n"
    "	mov.f32 	%f1203, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f1203;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f1204, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f1204, %f93, %p4;\n"
    "	mov.f32 	%f1205, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f1205, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f1206, %f73, %f99;\n"
    "	sub.f32 	%f101, %f1206, %f88;\n"
    "	mul.f32 	%f1207, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f1207;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f1208, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f1208, %f104, %p2;\n"
    "	mov.f32 	%f1209, %f2;\n"
    "	mov.f32 	%f1210, %f26;\n"
    "	mad.f32 	%f1211, %f1210, %f106, %f1209;\n"
    "	mov.f32 	%f2, %f1211;\n"
    "	mov.f32 	%f1212, %f4;\n"
    "	mov.f32 	%f1213, %f38;\n"
    "	mad.f32 	%f1214, %f1213, %f106, %f1212;\n"
    "	mov.f32 	%f4, %f1214;\n"
    "	mov.f32 	%f1215, %f6;\n"
    "	mov.f32 	%f1216, %f48;\n"
    "	mad.f32 	%f1217, %f1216, %f106, %f1215;\n"
    "	mov.f32 	%f6, %f1217;\n"
    "	ld.shared.s32 	%r47, [%rd14+332];\n"
    "	add.s32 	%r27, %r47, %r6;\n"
    "	ld.shared.f32 	%f1218, [%rd15+320];\n"
    "	mov.f32 	%f1219, %f8;\n"
    "	sub.f32 	%f1220, %f1219, %f1218;\n"
    "	mov.f32 	%f1221, %f1220;\n"
    "	mul.f32 	%f1222, %f14, %f1221;\n"
    "	cvt.rni.f32.f32 	%f1223, %f1222;\n"
    "	mul.f32 	%f1224, %f13, %f1223;\n"
    "	sub.f32 	%f25, %f1220, %f1224;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1225, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1226, %f25, %f25, %f1225;\n"
    "	ld.shared.f32 	%f1227, [%rd15+324];\n"
    "	mov.f32 	%f1228, %f10;\n"
    "	sub.f32 	%f1229, %f1228, %f1227;\n"
    "	mov.f32 	%f1230, %f1229;\n"
    "	mov.f32 	%f1231, %f1230;\n"
    "	mul.f32 	%f1232, %f14, %f1230;\n"
    "	cvt.rni.f32.f32 	%f1233, %f1232;\n"
    "	mul.f32 	%f1234, %f13, %f1233;\n"
    "	sub.f32 	%f37, %f1229, %f1234;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1235, %f37, %f37, %f1226;\n"
    "	ld.shared.f32 	%f1236, [%rd15+328];\n"
    "	mov.f32 	%f1237, %f12;\n"
    "	sub.f32 	%f1238, %f1237, %f1236;\n"
    "	mov.f32 	%f1239, %f1238;\n"
    "	mul.f32 	%f1240, %f1238, %f14;\n"
    "	cvt.rni.f32.f32 	%f1241, %f1240;\n"
    "	mul.f32 	%f1242, %f13, %f1241;\n"
    "	sub.f32 	%f47, %f1238, %f1242;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1235;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd57, %r27;\n"
    "	mul.wide.s32 	%rd58, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd58;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f1243, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1244, %f54, %f1243;\n"
    "	cvt.rzi.f32.f32 	%f57, %f1244;\n"
    "	mov.f32 	%f1245, %f57;\n"
    "	mov.f32 	%f1246, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1247, %f1246;\n"
    "	mov.f32 	%f1248, %f54;\n"
    "	mad.f32 %f1249, %f1245, %f1247, %f1248;\n"
    "	mov.f32 	%f63, %f1249;\n"
    "	mov.f32 	%f1250, %f57;\n"
    "	mov.f32 	%f1251, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1252, %f1251;\n"
    "	mov.f32 	%f1253, %f63;\n"
    "	mad.f32 %f1254, %f1250, %f1252, %f1253;\n"
    "	mov.f32 	%f63, %f1254;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f1255, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f1255;\n"
    "	mov.f32 	%f1256, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f1256;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f1257, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f1257;\n"
    "	mov.f32 	%f1258, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f1258;\n"
    "	mov.f32 	%f1259, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f1259;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f1260, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f1260;\n"
    "	mov.f32 	%f1261, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f1261;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f1262, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f1262, %f93, %p4;\n"
    "	mov.f32 	%f1263, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f1263, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f1264, %f73, %f99;\n"
    "	sub.f32 	%f101, %f1264, %f88;\n"
    "	mul.f32 	%f1265, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f1265;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f1266, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f1266, %f104, %p2;\n"
    "	mov.f32 	%f1267, %f2;\n"
    "	mov.f32 	%f1268, %f26;\n"
    "	mad.f32 	%f1269, %f1268, %f106, %f1267;\n"
    "	mov.f32 	%f2, %f1269;\n"
    "	mov.f32 	%f1270, %f4;\n"
    "	mov.f32 	%f1271, %f38;\n"
    "	mad.f32 	%f1272, %f1271, %f106, %f1270;\n"
    "	mov.f32 	%f4, %f1272;\n"
    "	mov.f32 	%f1273, %f6;\n"
    "	mov.f32 	%f1274, %f48;\n"
    "	mad.f32 	%f1275, %f1274, %f106, %f1273;\n"
    "	mov.f32 	%f6, %f1275;\n"
    "	ld.shared.s32 	%r48, [%rd14+348];\n"
    "	add.s32 	%r27, %r48, %r6;\n"
    "	ld.shared.f32 	%f1276, [%rd15+336];\n"
    "	mov.f32 	%f1277, %f8;\n"
    "	sub.f32 	%f1278, %f1277, %f1276;\n"
    "	mov.f32 	%f1279, %f1278;\n"
    "	mul.f32 	%f1280, %f14, %f1279;\n"
    "	cvt.rni.f32.f32 	%f1281, %f1280;\n"
    "	mul.f32 	%f1282, %f13, %f1281;\n"
    "	sub.f32 	%f25, %f1278, %f1282;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1283, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1284, %f25, %f25, %f1283;\n"
    "	ld.shared.f32 	%f1285, [%rd15+340];\n"
    "	mov.f32 	%f1286, %f10;\n"
    "	sub.f32 	%f1287, %f1286, %f1285;\n"
    "	mov.f32 	%f1288, %f1287;\n"
    "	mov.f32 	%f1289, %f1288;\n"
    "	mul.f32 	%f1290, %f14, %f1288;\n"
    "	cvt.rni.f32.f32 	%f1291, %f1290;\n"
    "	mul.f32 	%f1292, %f13, %f1291;\n"
    "	sub.f32 	%f37, %f1287, %f1292;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1293, %f37, %f37, %f1284;\n"
    "	ld.shared.f32 	%f1294, [%rd15+344];\n"
    "	mov.f32 	%f1295, %f12;\n"
    "	sub.f32 	%f1296, %f1295, %f1294;\n"
    "	mov.f32 	%f1297, %f1296;\n"
    "	mul.f32 	%f1298, %f1296, %f14;\n"
    "	cvt.rni.f32.f32 	%f1299, %f1298;\n"
    "	mul.f32 	%f1300, %f13, %f1299;\n"
    "	sub.f32 	%f47, %f1296, %f1300;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1293;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd59, %r27;\n"
    "	mul.wide.s32 	%rd60, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd60;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f1301, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1302, %f54, %f1301;\n"
    "	cvt.rzi.f32.f32 	%f57, %f1302;\n"
    "	mov.f32 	%f1303, %f57;\n"
    "	mov.f32 	%f1304, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1305, %f1304;\n"
    "	mov.f32 	%f1306, %f54;\n"
    "	mad.f32 %f1307, %f1303, %f1305, %f1306;\n"
    "	mov.f32 	%f63, %f1307;\n"
    "	mov.f32 	%f1308, %f57;\n"
    "	mov.f32 	%f1309, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1310, %f1309;\n"
    "	mov.f32 	%f1311, %f63;\n"
    "	mad.f32 %f1312, %f1308, %f1310, %f1311;\n"
    "	mov.f32 	%f63, %f1312;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f1313, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f1313;\n"
    "	mov.f32 	%f1314, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f1314;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f1315, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f1315;\n"
    "	mov.f32 	%f1316, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f1316;\n"
    "	mov.f32 	%f1317, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f1317;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f1318, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f1318;\n"
    "	mov.f32 	%f1319, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f1319;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f1320, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f1320, %f93, %p4;\n"
    "	mov.f32 	%f1321, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f1321, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f1322, %f73, %f99;\n"
    "	sub.f32 	%f101, %f1322, %f88;\n"
    "	mul.f32 	%f1323, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f1323;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f1324, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f1324, %f104, %p2;\n"
    "	mov.f32 	%f1325, %f2;\n"
    "	mov.f32 	%f1326, %f26;\n"
    "	mad.f32 	%f1327, %f1326, %f106, %f1325;\n"
    "	mov.f32 	%f2, %f1327;\n"
    "	mov.f32 	%f1328, %f4;\n"
    "	mov.f32 	%f1329, %f38;\n"
    "	mad.f32 	%f1330, %f1329, %f106, %f1328;\n"
    "	mov.f32 	%f4, %f1330;\n"
    "	mov.f32 	%f1331, %f6;\n"
    "	mov.f32 	%f1332, %f48;\n"
    "	mad.f32 	%f1333, %f1332, %f106, %f1331;\n"
    "	mov.f32 	%f6, %f1333;\n"
    "	ld.shared.s32 	%r49, [%rd14+364];\n"
    "	add.s32 	%r27, %r49, %r6;\n"
    "	ld.shared.f32 	%f1334, [%rd15+352];\n"
    "	mov.f32 	%f1335, %f8;\n"
    "	sub.f32 	%f1336, %f1335, %f1334;\n"
    "	mov.f32 	%f1337, %f1336;\n"
    "	mul.f32 	%f1338, %f14, %f1337;\n"
    "	cvt.rni.f32.f32 	%f1339, %f1338;\n"
    "	mul.f32 	%f1340, %f13, %f1339;\n"
    "	sub.f32 	%f25, %f1336, %f1340;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1341, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1342, %f25, %f25, %f1341;\n"
    "	ld.shared.f32 	%f1343, [%rd15+356];\n"
    "	mov.f32 	%f1344, %f10;\n"
    "	sub.f32 	%f1345, %f1344, %f1343;\n"
    "	mov.f32 	%f1346, %f1345;\n"
    "	mov.f32 	%f1347, %f1346;\n"
    "	mul.f32 	%f1348, %f14, %f1346;\n"
    "	cvt.rni.f32.f32 	%f1349, %f1348;\n"
    "	mul.f32 	%f1350, %f13, %f1349;\n"
    "	sub.f32 	%f37, %f1345, %f1350;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1351, %f37, %f37, %f1342;\n"
    "	ld.shared.f32 	%f1352, [%rd15+360];\n"
    "	mov.f32 	%f1353, %f12;\n"
    "	sub.f32 	%f1354, %f1353, %f1352;\n"
    "	mov.f32 	%f1355, %f1354;\n"
    "	mul.f32 	%f1356, %f1354, %f14;\n"
    "	cvt.rni.f32.f32 	%f1357, %f1356;\n"
    "	mul.f32 	%f1358, %f13, %f1357;\n"
    "	sub.f32 	%f47, %f1354, %f1358;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1351;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd61, %r27;\n"
    "	mul.wide.s32 	%rd62, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd62;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f1359, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1360, %f54, %f1359;\n"
    "	cvt.rzi.f32.f32 	%f57, %f1360;\n"
    "	mov.f32 	%f1361, %f57;\n"
    "	mov.f32 	%f1362, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1363, %f1362;\n"
    "	mov.f32 	%f1364, %f54;\n"
    "	mad.f32 %f1365, %f1361, %f1363, %f1364;\n"
    "	mov.f32 	%f63, %f1365;\n"
    "	mov.f32 	%f1366, %f57;\n"
    "	mov.f32 	%f1367, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1368, %f1367;\n"
    "	mov.f32 	%f1369, %f63;\n"
    "	mad.f32 %f1370, %f1366, %f1368, %f1369;\n"
    "	mov.f32 	%f63, %f1370;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f1371, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f1371;\n"
    "	mov.f32 	%f1372, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f1372;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f1373, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f1373;\n"
    "	mov.f32 	%f1374, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f1374;\n"
    "	mov.f32 	%f1375, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f1375;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f1376, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f1376;\n"
    "	mov.f32 	%f1377, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f1377;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f1378, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f1378, %f93, %p4;\n"
    "	mov.f32 	%f1379, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f1379, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f1380, %f73, %f99;\n"
    "	sub.f32 	%f101, %f1380, %f88;\n"
    "	mul.f32 	%f1381, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f1381;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f1382, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f1382, %f104, %p2;\n"
    "	mov.f32 	%f1383, %f2;\n"
    "	mov.f32 	%f1384, %f26;\n"
    "	mad.f32 	%f1385, %f1384, %f106, %f1383;\n"
    "	mov.f32 	%f2, %f1385;\n"
    "	mov.f32 	%f1386, %f4;\n"
    "	mov.f32 	%f1387, %f38;\n"
    "	mad.f32 	%f1388, %f1387, %f106, %f1386;\n"
    "	mov.f32 	%f4, %f1388;\n"
    "	mov.f32 	%f1389, %f6;\n"
    "	mov.f32 	%f1390, %f48;\n"
    "	mad.f32 	%f1391, %f1390, %f106, %f1389;\n"
    "	mov.f32 	%f6, %f1391;\n"
    "	ld.shared.s32 	%r50, [%rd14+380];\n"
    "	add.s32 	%r27, %r50, %r6;\n"
    "	ld.shared.f32 	%f1392, [%rd15+368];\n"
    "	mov.f32 	%f1393, %f8;\n"
    "	sub.f32 	%f1394, %f1393, %f1392;\n"
    "	mov.f32 	%f1395, %f1394;\n"
    "	mul.f32 	%f1396, %f14, %f1395;\n"
    "	cvt.rni.f32.f32 	%f1397, %f1396;\n"
    "	mul.f32 	%f1398, %f13, %f1397;\n"
    "	sub.f32 	%f25, %f1394, %f1398;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1399, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1400, %f25, %f25, %f1399;\n"
    "	ld.shared.f32 	%f1401, [%rd15+372];\n"
    "	mov.f32 	%f1402, %f10;\n"
    "	sub.f32 	%f1403, %f1402, %f1401;\n"
    "	mov.f32 	%f1404, %f1403;\n"
    "	mov.f32 	%f1405, %f1404;\n"
    "	mul.f32 	%f1406, %f14, %f1404;\n"
    "	cvt.rni.f32.f32 	%f1407, %f1406;\n"
    "	mul.f32 	%f1408, %f13, %f1407;\n"
    "	sub.f32 	%f37, %f1403, %f1408;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1409, %f37, %f37, %f1400;\n"
    "	ld.shared.f32 	%f1410, [%rd15+376];\n"
    "	mov.f32 	%f1411, %f12;\n"
    "	sub.f32 	%f1412, %f1411, %f1410;\n"
    "	mov.f32 	%f1413, %f1412;\n"
    "	mul.f32 	%f1414, %f1412, %f14;\n"
    "	cvt.rni.f32.f32 	%f1415, %f1414;\n"
    "	mul.f32 	%f1416, %f13, %f1415;\n"
    "	sub.f32 	%f47, %f1412, %f1416;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1409;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd63, %r27;\n"
    "	mul.wide.s32 	%rd64, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd64;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f1417, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1418, %f54, %f1417;\n"
    "	cvt.rzi.f32.f32 	%f57, %f1418;\n"
    "	mov.f32 	%f1419, %f57;\n"
    "	mov.f32 	%f1420, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1421, %f1420;\n"
    "	mov.f32 	%f1422, %f54;\n"
    "	mad.f32 %f1423, %f1419, %f1421, %f1422;\n"
    "	mov.f32 	%f63, %f1423;\n"
    "	mov.f32 	%f1424, %f57;\n"
    "	mov.f32 	%f1425, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1426, %f1425;\n"
    "	mov.f32 	%f1427, %f63;\n"
    "	mad.f32 %f1428, %f1424, %f1426, %f1427;\n"
    "	mov.f32 	%f63, %f1428;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f1429, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f1429;\n"
    "	mov.f32 	%f1430, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f1430;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f1431, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f1431;\n"
    "	mov.f32 	%f1432, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f1432;\n"
    "	mov.f32 	%f1433, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f1433;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f1434, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f1434;\n"
    "	mov.f32 	%f1435, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f1435;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f1436, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f1436, %f93, %p4;\n"
    "	mov.f32 	%f1437, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f1437, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f1438, %f73, %f99;\n"
    "	sub.f32 	%f101, %f1438, %f88;\n"
    "	mul.f32 	%f1439, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f1439;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f1440, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f1440, %f104, %p2;\n"
    "	mov.f32 	%f1441, %f2;\n"
    "	mov.f32 	%f1442, %f26;\n"
    "	mad.f32 	%f1443, %f1442, %f106, %f1441;\n"
    "	mov.f32 	%f2, %f1443;\n"
    "	mov.f32 	%f1444, %f4;\n"
    "	mov.f32 	%f1445, %f38;\n"
    "	mad.f32 	%f1446, %f1445, %f106, %f1444;\n"
    "	mov.f32 	%f4, %f1446;\n"
    "	mov.f32 	%f1447, %f6;\n"
    "	mov.f32 	%f1448, %f48;\n"
    "	mad.f32 	%f1449, %f1448, %f106, %f1447;\n"
    "	mov.f32 	%f6, %f1449;\n"
    "	ld.shared.s32 	%r51, [%rd14+396];\n"
    "	add.s32 	%r27, %r51, %r6;\n"
    "	ld.shared.f32 	%f1450, [%rd15+384];\n"
    "	mov.f32 	%f1451, %f8;\n"
    "	sub.f32 	%f1452, %f1451, %f1450;\n"
    "	mov.f32 	%f1453, %f1452;\n"
    "	mul.f32 	%f1454, %f14, %f1453;\n"
    "	cvt.rni.f32.f32 	%f1455, %f1454;\n"
    "	mul.f32 	%f1456, %f13, %f1455;\n"
    "	sub.f32 	%f25, %f1452, %f1456;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1457, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1458, %f25, %f25, %f1457;\n"
    "	ld.shared.f32 	%f1459, [%rd15+388];\n"
    "	mov.f32 	%f1460, %f10;\n"
    "	sub.f32 	%f1461, %f1460, %f1459;\n"
    "	mov.f32 	%f1462, %f1461;\n"
    "	mov.f32 	%f1463, %f1462;\n"
    "	mul.f32 	%f1464, %f14, %f1462;\n"
    "	cvt.rni.f32.f32 	%f1465, %f1464;\n"
    "	mul.f32 	%f1466, %f13, %f1465;\n"
    "	sub.f32 	%f37, %f1461, %f1466;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1467, %f37, %f37, %f1458;\n"
    "	ld.shared.f32 	%f1468, [%rd15+392];\n"
    "	mov.f32 	%f1469, %f12;\n"
    "	sub.f32 	%f1470, %f1469, %f1468;\n"
    "	mov.f32 	%f1471, %f1470;\n"
    "	mul.f32 	%f1472, %f1470, %f14;\n"
    "	cvt.rni.f32.f32 	%f1473, %f1472;\n"
    "	mul.f32 	%f1474, %f13, %f1473;\n"
    "	sub.f32 	%f47, %f1470, %f1474;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1467;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd65, %r27;\n"
    "	mul.wide.s32 	%rd66, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd66;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f1475, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1476, %f54, %f1475;\n"
    "	cvt.rzi.f32.f32 	%f57, %f1476;\n"
    "	mov.f32 	%f1477, %f57;\n"
    "	mov.f32 	%f1478, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1479, %f1478;\n"
    "	mov.f32 	%f1480, %f54;\n"
    "	mad.f32 %f1481, %f1477, %f1479, %f1480;\n"
    "	mov.f32 	%f63, %f1481;\n"
    "	mov.f32 	%f1482, %f57;\n"
    "	mov.f32 	%f1483, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1484, %f1483;\n"
    "	mov.f32 	%f1485, %f63;\n"
    "	mad.f32 %f1486, %f1482, %f1484, %f1485;\n"
    "	mov.f32 	%f63, %f1486;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f1487, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f1487;\n"
    "	mov.f32 	%f1488, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f1488;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f1489, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f1489;\n"
    "	mov.f32 	%f1490, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f1490;\n"
    "	mov.f32 	%f1491, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f1491;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f1492, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f1492;\n"
    "	mov.f32 	%f1493, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f1493;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f1494, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f1494, %f93, %p4;\n"
    "	mov.f32 	%f1495, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f1495, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f1496, %f73, %f99;\n"
    "	sub.f32 	%f101, %f1496, %f88;\n"
    "	mul.f32 	%f1497, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f1497;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f1498, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f1498, %f104, %p2;\n"
    "	mov.f32 	%f1499, %f2;\n"
    "	mov.f32 	%f1500, %f26;\n"
    "	mad.f32 	%f1501, %f1500, %f106, %f1499;\n"
    "	mov.f32 	%f2, %f1501;\n"
    "	mov.f32 	%f1502, %f4;\n"
    "	mov.f32 	%f1503, %f38;\n"
    "	mad.f32 	%f1504, %f1503, %f106, %f1502;\n"
    "	mov.f32 	%f4, %f1504;\n"
    "	mov.f32 	%f1505, %f6;\n"
    "	mov.f32 	%f1506, %f48;\n"
    "	mad.f32 	%f1507, %f1506, %f106, %f1505;\n"
    "	mov.f32 	%f6, %f1507;\n"
    "	ld.shared.s32 	%r52, [%rd14+412];\n"
    "	add.s32 	%r27, %r52, %r6;\n"
    "	ld.shared.f32 	%f1508, [%rd15+400];\n"
    "	mov.f32 	%f1509, %f8;\n"
    "	sub.f32 	%f1510, %f1509, %f1508;\n"
    "	mov.f32 	%f1511, %f1510;\n"
    "	mul.f32 	%f1512, %f14, %f1511;\n"
    "	cvt.rni.f32.f32 	%f1513, %f1512;\n"
    "	mul.f32 	%f1514, %f13, %f1513;\n"
    "	sub.f32 	%f25, %f1510, %f1514;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1515, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1516, %f25, %f25, %f1515;\n"
    "	ld.shared.f32 	%f1517, [%rd15+404];\n"
    "	mov.f32 	%f1518, %f10;\n"
    "	sub.f32 	%f1519, %f1518, %f1517;\n"
    "	mov.f32 	%f1520, %f1519;\n"
    "	mov.f32 	%f1521, %f1520;\n"
    "	mul.f32 	%f1522, %f14, %f1520;\n"
    "	cvt.rni.f32.f32 	%f1523, %f1522;\n"
    "	mul.f32 	%f1524, %f13, %f1523;\n"
    "	sub.f32 	%f37, %f1519, %f1524;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1525, %f37, %f37, %f1516;\n"
    "	ld.shared.f32 	%f1526, [%rd15+408];\n"
    "	mov.f32 	%f1527, %f12;\n"
    "	sub.f32 	%f1528, %f1527, %f1526;\n"
    "	mov.f32 	%f1529, %f1528;\n"
    "	mul.f32 	%f1530, %f1528, %f14;\n"
    "	cvt.rni.f32.f32 	%f1531, %f1530;\n"
    "	mul.f32 	%f1532, %f13, %f1531;\n"
    "	sub.f32 	%f47, %f1528, %f1532;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1525;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd67, %r27;\n"
    "	mul.wide.s32 	%rd68, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd68;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f1533, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1534, %f54, %f1533;\n"
    "	cvt.rzi.f32.f32 	%f57, %f1534;\n"
    "	mov.f32 	%f1535, %f57;\n"
    "	mov.f32 	%f1536, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1537, %f1536;\n"
    "	mov.f32 	%f1538, %f54;\n"
    "	mad.f32 %f1539, %f1535, %f1537, %f1538;\n"
    "	mov.f32 	%f63, %f1539;\n"
    "	mov.f32 	%f1540, %f57;\n"
    "	mov.f32 	%f1541, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1542, %f1541;\n"
    "	mov.f32 	%f1543, %f63;\n"
    "	mad.f32 %f1544, %f1540, %f1542, %f1543;\n"
    "	mov.f32 	%f63, %f1544;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f1545, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f1545;\n"
    "	mov.f32 	%f1546, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f1546;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f1547, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f1547;\n"
    "	mov.f32 	%f1548, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f1548;\n"
    "	mov.f32 	%f1549, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f1549;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f1550, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f1550;\n"
    "	mov.f32 	%f1551, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f1551;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f1552, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f1552, %f93, %p4;\n"
    "	mov.f32 	%f1553, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f1553, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f1554, %f73, %f99;\n"
    "	sub.f32 	%f101, %f1554, %f88;\n"
    "	mul.f32 	%f1555, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f1555;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f1556, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f1556, %f104, %p2;\n"
    "	mov.f32 	%f1557, %f2;\n"
    "	mov.f32 	%f1558, %f26;\n"
    "	mad.f32 	%f1559, %f1558, %f106, %f1557;\n"
    "	mov.f32 	%f2, %f1559;\n"
    "	mov.f32 	%f1560, %f4;\n"
    "	mov.f32 	%f1561, %f38;\n"
    "	mad.f32 	%f1562, %f1561, %f106, %f1560;\n"
    "	mov.f32 	%f4, %f1562;\n"
    "	mov.f32 	%f1563, %f6;\n"
    "	mov.f32 	%f1564, %f48;\n"
    "	mad.f32 	%f1565, %f1564, %f106, %f1563;\n"
    "	mov.f32 	%f6, %f1565;\n"
    "	ld.shared.s32 	%r53, [%rd14+428];\n"
    "	add.s32 	%r27, %r53, %r6;\n"
    "	ld.shared.f32 	%f1566, [%rd15+416];\n"
    "	mov.f32 	%f1567, %f8;\n"
    "	sub.f32 	%f1568, %f1567, %f1566;\n"
    "	mov.f32 	%f1569, %f1568;\n"
    "	mul.f32 	%f1570, %f14, %f1569;\n"
    "	cvt.rni.f32.f32 	%f1571, %f1570;\n"
    "	mul.f32 	%f1572, %f13, %f1571;\n"
    "	sub.f32 	%f25, %f1568, %f1572;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1573, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1574, %f25, %f25, %f1573;\n"
    "	ld.shared.f32 	%f1575, [%rd15+420];\n"
    "	mov.f32 	%f1576, %f10;\n"
    "	sub.f32 	%f1577, %f1576, %f1575;\n"
    "	mov.f32 	%f1578, %f1577;\n"
    "	mov.f32 	%f1579, %f1578;\n"
    "	mul.f32 	%f1580, %f14, %f1578;\n"
    "	cvt.rni.f32.f32 	%f1581, %f1580;\n"
    "	mul.f32 	%f1582, %f13, %f1581;\n"
    "	sub.f32 	%f37, %f1577, %f1582;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1583, %f37, %f37, %f1574;\n"
    "	ld.shared.f32 	%f1584, [%rd15+424];\n"
    "	mov.f32 	%f1585, %f12;\n"
    "	sub.f32 	%f1586, %f1585, %f1584;\n"
    "	mov.f32 	%f1587, %f1586;\n"
    "	mul.f32 	%f1588, %f1586, %f14;\n"
    "	cvt.rni.f32.f32 	%f1589, %f1588;\n"
    "	mul.f32 	%f1590, %f13, %f1589;\n"
    "	sub.f32 	%f47, %f1586, %f1590;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1583;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd69, %r27;\n"
    "	mul.wide.s32 	%rd70, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd70;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f1591, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1592, %f54, %f1591;\n"
    "	cvt.rzi.f32.f32 	%f57, %f1592;\n"
    "	mov.f32 	%f1593, %f57;\n"
    "	mov.f32 	%f1594, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1595, %f1594;\n"
    "	mov.f32 	%f1596, %f54;\n"
    "	mad.f32 %f1597, %f1593, %f1595, %f1596;\n"
    "	mov.f32 	%f63, %f1597;\n"
    "	mov.f32 	%f1598, %f57;\n"
    "	mov.f32 	%f1599, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1600, %f1599;\n"
    "	mov.f32 	%f1601, %f63;\n"
    "	mad.f32 %f1602, %f1598, %f1600, %f1601;\n"
    "	mov.f32 	%f63, %f1602;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f1603, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f1603;\n"
    "	mov.f32 	%f1604, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f1604;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f1605, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f1605;\n"
    "	mov.f32 	%f1606, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f1606;\n"
    "	mov.f32 	%f1607, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f1607;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f1608, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f1608;\n"
    "	mov.f32 	%f1609, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f1609;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f1610, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f1610, %f93, %p4;\n"
    "	mov.f32 	%f1611, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f1611, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f1612, %f73, %f99;\n"
    "	sub.f32 	%f101, %f1612, %f88;\n"
    "	mul.f32 	%f1613, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f1613;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f1614, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f1614, %f104, %p2;\n"
    "	mov.f32 	%f1615, %f2;\n"
    "	mov.f32 	%f1616, %f26;\n"
    "	mad.f32 	%f1617, %f1616, %f106, %f1615;\n"
    "	mov.f32 	%f2, %f1617;\n"
    "	mov.f32 	%f1618, %f4;\n"
    "	mov.f32 	%f1619, %f38;\n"
    "	mad.f32 	%f1620, %f1619, %f106, %f1618;\n"
    "	mov.f32 	%f4, %f1620;\n"
    "	mov.f32 	%f1621, %f6;\n"
    "	mov.f32 	%f1622, %f48;\n"
    "	mad.f32 	%f1623, %f1622, %f106, %f1621;\n"
    "	mov.f32 	%f6, %f1623;\n"
    "	ld.shared.s32 	%r54, [%rd14+444];\n"
    "	add.s32 	%r27, %r54, %r6;\n"
    "	ld.shared.f32 	%f1624, [%rd15+432];\n"
    "	mov.f32 	%f1625, %f8;\n"
    "	sub.f32 	%f1626, %f1625, %f1624;\n"
    "	mov.f32 	%f1627, %f1626;\n"
    "	mul.f32 	%f1628, %f14, %f1627;\n"
    "	cvt.rni.f32.f32 	%f1629, %f1628;\n"
    "	mul.f32 	%f1630, %f13, %f1629;\n"
    "	sub.f32 	%f25, %f1626, %f1630;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1631, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1632, %f25, %f25, %f1631;\n"
    "	ld.shared.f32 	%f1633, [%rd15+436];\n"
    "	mov.f32 	%f1634, %f10;\n"
    "	sub.f32 	%f1635, %f1634, %f1633;\n"
    "	mov.f32 	%f1636, %f1635;\n"
    "	mov.f32 	%f1637, %f1636;\n"
    "	mul.f32 	%f1638, %f14, %f1636;\n"
    "	cvt.rni.f32.f32 	%f1639, %f1638;\n"
    "	mul.f32 	%f1640, %f13, %f1639;\n"
    "	sub.f32 	%f37, %f1635, %f1640;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1641, %f37, %f37, %f1632;\n"
    "	ld.shared.f32 	%f1642, [%rd15+440];\n"
    "	mov.f32 	%f1643, %f12;\n"
    "	sub.f32 	%f1644, %f1643, %f1642;\n"
    "	mov.f32 	%f1645, %f1644;\n"
    "	mul.f32 	%f1646, %f1644, %f14;\n"
    "	cvt.rni.f32.f32 	%f1647, %f1646;\n"
    "	mul.f32 	%f1648, %f13, %f1647;\n"
    "	sub.f32 	%f47, %f1644, %f1648;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1641;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd71, %r27;\n"
    "	mul.wide.s32 	%rd72, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd72;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f1649, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1650, %f54, %f1649;\n"
    "	cvt.rzi.f32.f32 	%f57, %f1650;\n"
    "	mov.f32 	%f1651, %f57;\n"
    "	mov.f32 	%f1652, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1653, %f1652;\n"
    "	mov.f32 	%f1654, %f54;\n"
    "	mad.f32 %f1655, %f1651, %f1653, %f1654;\n"
    "	mov.f32 	%f63, %f1655;\n"
    "	mov.f32 	%f1656, %f57;\n"
    "	mov.f32 	%f1657, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1658, %f1657;\n"
    "	mov.f32 	%f1659, %f63;\n"
    "	mad.f32 %f1660, %f1656, %f1658, %f1659;\n"
    "	mov.f32 	%f63, %f1660;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f1661, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f1661;\n"
    "	mov.f32 	%f1662, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f1662;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f1663, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f1663;\n"
    "	mov.f32 	%f1664, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f1664;\n"
    "	mov.f32 	%f1665, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f1665;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f1666, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f1666;\n"
    "	mov.f32 	%f1667, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f1667;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f1668, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f1668, %f93, %p4;\n"
    "	mov.f32 	%f1669, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f1669, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f1670, %f73, %f99;\n"
    "	sub.f32 	%f101, %f1670, %f88;\n"
    "	mul.f32 	%f1671, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f1671;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f1672, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f1672, %f104, %p2;\n"
    "	mov.f32 	%f1673, %f2;\n"
    "	mov.f32 	%f1674, %f26;\n"
    "	mad.f32 	%f1675, %f1674, %f106, %f1673;\n"
    "	mov.f32 	%f2, %f1675;\n"
    "	mov.f32 	%f1676, %f4;\n"
    "	mov.f32 	%f1677, %f38;\n"
    "	mad.f32 	%f1678, %f1677, %f106, %f1676;\n"
    "	mov.f32 	%f4, %f1678;\n"
    "	mov.f32 	%f1679, %f6;\n"
    "	mov.f32 	%f1680, %f48;\n"
    "	mad.f32 	%f1681, %f1680, %f106, %f1679;\n"
    "	mov.f32 	%f6, %f1681;\n"
    "	ld.shared.s32 	%r55, [%rd14+460];\n"
    "	add.s32 	%r27, %r55, %r6;\n"
    "	ld.shared.f32 	%f1682, [%rd15+448];\n"
    "	mov.f32 	%f1683, %f8;\n"
    "	sub.f32 	%f1684, %f1683, %f1682;\n"
    "	mov.f32 	%f1685, %f1684;\n"
    "	mul.f32 	%f1686, %f14, %f1685;\n"
    "	cvt.rni.f32.f32 	%f1687, %f1686;\n"
    "	mul.f32 	%f1688, %f13, %f1687;\n"
    "	sub.f32 	%f25, %f1684, %f1688;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1689, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1690, %f25, %f25, %f1689;\n"
    "	ld.shared.f32 	%f1691, [%rd15+452];\n"
    "	mov.f32 	%f1692, %f10;\n"
    "	sub.f32 	%f1693, %f1692, %f1691;\n"
    "	mov.f32 	%f1694, %f1693;\n"
    "	mov.f32 	%f1695, %f1694;\n"
    "	mul.f32 	%f1696, %f14, %f1694;\n"
    "	cvt.rni.f32.f32 	%f1697, %f1696;\n"
    "	mul.f32 	%f1698, %f13, %f1697;\n"
    "	sub.f32 	%f37, %f1693, %f1698;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1699, %f37, %f37, %f1690;\n"
    "	ld.shared.f32 	%f1700, [%rd15+456];\n"
    "	mov.f32 	%f1701, %f12;\n"
    "	sub.f32 	%f1702, %f1701, %f1700;\n"
    "	mov.f32 	%f1703, %f1702;\n"
    "	mul.f32 	%f1704, %f1702, %f14;\n"
    "	cvt.rni.f32.f32 	%f1705, %f1704;\n"
    "	mul.f32 	%f1706, %f13, %f1705;\n"
    "	sub.f32 	%f47, %f1702, %f1706;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1699;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd73, %r27;\n"
    "	mul.wide.s32 	%rd74, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd74;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f1707, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1708, %f54, %f1707;\n"
    "	cvt.rzi.f32.f32 	%f57, %f1708;\n"
    "	mov.f32 	%f1709, %f57;\n"
    "	mov.f32 	%f1710, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1711, %f1710;\n"
    "	mov.f32 	%f1712, %f54;\n"
    "	mad.f32 %f1713, %f1709, %f1711, %f1712;\n"
    "	mov.f32 	%f63, %f1713;\n"
    "	mov.f32 	%f1714, %f57;\n"
    "	mov.f32 	%f1715, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1716, %f1715;\n"
    "	mov.f32 	%f1717, %f63;\n"
    "	mad.f32 %f1718, %f1714, %f1716, %f1717;\n"
    "	mov.f32 	%f63, %f1718;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f1719, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f1719;\n"
    "	mov.f32 	%f1720, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f1720;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f1721, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f1721;\n"
    "	mov.f32 	%f1722, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f1722;\n"
    "	mov.f32 	%f1723, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f1723;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f1724, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f1724;\n"
    "	mov.f32 	%f1725, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f1725;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f1726, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f1726, %f93, %p4;\n"
    "	mov.f32 	%f1727, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f1727, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f1728, %f73, %f99;\n"
    "	sub.f32 	%f101, %f1728, %f88;\n"
    "	mul.f32 	%f1729, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f1729;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f1730, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f1730, %f104, %p2;\n"
    "	mov.f32 	%f1731, %f2;\n"
    "	mov.f32 	%f1732, %f26;\n"
    "	mad.f32 	%f1733, %f1732, %f106, %f1731;\n"
    "	mov.f32 	%f2, %f1733;\n"
    "	mov.f32 	%f1734, %f4;\n"
    "	mov.f32 	%f1735, %f38;\n"
    "	mad.f32 	%f1736, %f1735, %f106, %f1734;\n"
    "	mov.f32 	%f4, %f1736;\n"
    "	mov.f32 	%f1737, %f6;\n"
    "	mov.f32 	%f1738, %f48;\n"
    "	mad.f32 	%f1739, %f1738, %f106, %f1737;\n"
    "	mov.f32 	%f6, %f1739;\n"
    "	ld.shared.s32 	%r56, [%rd14+476];\n"
    "	add.s32 	%r27, %r56, %r6;\n"
    "	ld.shared.f32 	%f1740, [%rd15+464];\n"
    "	mov.f32 	%f1741, %f8;\n"
    "	sub.f32 	%f1742, %f1741, %f1740;\n"
    "	mov.f32 	%f1743, %f1742;\n"
    "	mul.f32 	%f1744, %f14, %f1743;\n"
    "	cvt.rni.f32.f32 	%f1745, %f1744;\n"
    "	mul.f32 	%f1746, %f13, %f1745;\n"
    "	sub.f32 	%f25, %f1742, %f1746;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1747, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1748, %f25, %f25, %f1747;\n"
    "	ld.shared.f32 	%f1749, [%rd15+468];\n"
    "	mov.f32 	%f1750, %f10;\n"
    "	sub.f32 	%f1751, %f1750, %f1749;\n"
    "	mov.f32 	%f1752, %f1751;\n"
    "	mov.f32 	%f1753, %f1752;\n"
    "	mul.f32 	%f1754, %f14, %f1752;\n"
    "	cvt.rni.f32.f32 	%f1755, %f1754;\n"
    "	mul.f32 	%f1756, %f13, %f1755;\n"
    "	sub.f32 	%f37, %f1751, %f1756;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1757, %f37, %f37, %f1748;\n"
    "	ld.shared.f32 	%f1758, [%rd15+472];\n"
    "	mov.f32 	%f1759, %f12;\n"
    "	sub.f32 	%f1760, %f1759, %f1758;\n"
    "	mov.f32 	%f1761, %f1760;\n"
    "	mul.f32 	%f1762, %f1760, %f14;\n"
    "	cvt.rni.f32.f32 	%f1763, %f1762;\n"
    "	mul.f32 	%f1764, %f13, %f1763;\n"
    "	sub.f32 	%f47, %f1760, %f1764;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1757;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd75, %r27;\n"
    "	mul.wide.s32 	%rd76, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd76;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f1765, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1766, %f54, %f1765;\n"
    "	cvt.rzi.f32.f32 	%f57, %f1766;\n"
    "	mov.f32 	%f1767, %f57;\n"
    "	mov.f32 	%f1768, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1769, %f1768;\n"
    "	mov.f32 	%f1770, %f54;\n"
    "	mad.f32 %f1771, %f1767, %f1769, %f1770;\n"
    "	mov.f32 	%f63, %f1771;\n"
    "	mov.f32 	%f1772, %f57;\n"
    "	mov.f32 	%f1773, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1774, %f1773;\n"
    "	mov.f32 	%f1775, %f63;\n"
    "	mad.f32 %f1776, %f1772, %f1774, %f1775;\n"
    "	mov.f32 	%f63, %f1776;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f1777, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f1777;\n"
    "	mov.f32 	%f1778, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f1778;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f1779, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f1779;\n"
    "	mov.f32 	%f1780, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f1780;\n"
    "	mov.f32 	%f1781, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f1781;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f1782, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f1782;\n"
    "	mov.f32 	%f1783, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f1783;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f1784, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f1784, %f93, %p4;\n"
    "	mov.f32 	%f1785, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f1785, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f1786, %f73, %f99;\n"
    "	sub.f32 	%f101, %f1786, %f88;\n"
    "	mul.f32 	%f1787, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f1787;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f1788, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f1788, %f104, %p2;\n"
    "	mov.f32 	%f1789, %f2;\n"
    "	mov.f32 	%f1790, %f26;\n"
    "	mad.f32 	%f1791, %f1790, %f106, %f1789;\n"
    "	mov.f32 	%f2, %f1791;\n"
    "	mov.f32 	%f1792, %f4;\n"
    "	mov.f32 	%f1793, %f38;\n"
    "	mad.f32 	%f1794, %f1793, %f106, %f1792;\n"
    "	mov.f32 	%f4, %f1794;\n"
    "	mov.f32 	%f1795, %f6;\n"
    "	mov.f32 	%f1796, %f48;\n"
    "	mad.f32 	%f1797, %f1796, %f106, %f1795;\n"
    "	mov.f32 	%f6, %f1797;\n"
    "	ld.shared.s32 	%r57, [%rd14+492];\n"
    "	add.s32 	%r27, %r57, %r6;\n"
    "	ld.shared.f32 	%f1798, [%rd15+480];\n"
    "	mov.f32 	%f1799, %f8;\n"
    "	sub.f32 	%f1800, %f1799, %f1798;\n"
    "	mov.f32 	%f1801, %f1800;\n"
    "	mul.f32 	%f1802, %f14, %f1801;\n"
    "	cvt.rni.f32.f32 	%f1803, %f1802;\n"
    "	mul.f32 	%f1804, %f13, %f1803;\n"
    "	sub.f32 	%f25, %f1800, %f1804;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1805, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1806, %f25, %f25, %f1805;\n"
    "	ld.shared.f32 	%f1807, [%rd15+484];\n"
    "	mov.f32 	%f1808, %f10;\n"
    "	sub.f32 	%f1809, %f1808, %f1807;\n"
    "	mov.f32 	%f1810, %f1809;\n"
    "	mov.f32 	%f1811, %f1810;\n"
    "	mul.f32 	%f1812, %f14, %f1810;\n"
    "	cvt.rni.f32.f32 	%f1813, %f1812;\n"
    "	mul.f32 	%f1814, %f13, %f1813;\n"
    "	sub.f32 	%f37, %f1809, %f1814;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1815, %f37, %f37, %f1806;\n"
    "	ld.shared.f32 	%f1816, [%rd15+488];\n"
    "	mov.f32 	%f1817, %f12;\n"
    "	sub.f32 	%f1818, %f1817, %f1816;\n"
    "	mov.f32 	%f1819, %f1818;\n"
    "	mul.f32 	%f1820, %f1818, %f14;\n"
    "	cvt.rni.f32.f32 	%f1821, %f1820;\n"
    "	mul.f32 	%f1822, %f13, %f1821;\n"
    "	sub.f32 	%f47, %f1818, %f1822;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1815;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd77, %r27;\n"
    "	mul.wide.s32 	%rd78, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd78;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f1823, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1824, %f54, %f1823;\n"
    "	cvt.rzi.f32.f32 	%f57, %f1824;\n"
    "	mov.f32 	%f1825, %f57;\n"
    "	mov.f32 	%f1826, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1827, %f1826;\n"
    "	mov.f32 	%f1828, %f54;\n"
    "	mad.f32 %f1829, %f1825, %f1827, %f1828;\n"
    "	mov.f32 	%f63, %f1829;\n"
    "	mov.f32 	%f1830, %f57;\n"
    "	mov.f32 	%f1831, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1832, %f1831;\n"
    "	mov.f32 	%f1833, %f63;\n"
    "	mad.f32 %f1834, %f1830, %f1832, %f1833;\n"
    "	mov.f32 	%f63, %f1834;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f1835, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f1835;\n"
    "	mov.f32 	%f1836, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f1836;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f1837, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f1837;\n"
    "	mov.f32 	%f1838, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f1838;\n"
    "	mov.f32 	%f1839, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f1839;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f1840, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f1840;\n"
    "	mov.f32 	%f1841, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f1841;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f1842, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f1842, %f93, %p4;\n"
    "	mov.f32 	%f1843, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f1843, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f1844, %f73, %f99;\n"
    "	sub.f32 	%f101, %f1844, %f88;\n"
    "	mul.f32 	%f1845, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f1845;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f1846, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f1846, %f104, %p2;\n"
    "	mov.f32 	%f1847, %f2;\n"
    "	mov.f32 	%f1848, %f26;\n"
    "	mad.f32 	%f1849, %f1848, %f106, %f1847;\n"
    "	mov.f32 	%f2, %f1849;\n"
    "	mov.f32 	%f1850, %f4;\n"
    "	mov.f32 	%f1851, %f38;\n"
    "	mad.f32 	%f1852, %f1851, %f106, %f1850;\n"
    "	mov.f32 	%f4, %f1852;\n"
    "	mov.f32 	%f1853, %f6;\n"
    "	mov.f32 	%f1854, %f48;\n"
    "	mad.f32 	%f1855, %f1854, %f106, %f1853;\n"
    "	mov.f32 	%f6, %f1855;\n"
    "	ld.shared.s32 	%r58, [%rd14+508];\n"
    "	add.s32 	%r27, %r58, %r6;\n"
    "	ld.shared.f32 	%f1856, [%rd15+496];\n"
    "	mov.f32 	%f1857, %f8;\n"
    "	sub.f32 	%f1858, %f1857, %f1856;\n"
    "	mov.f32 	%f1859, %f1858;\n"
    "	mul.f32 	%f1860, %f14, %f1859;\n"
    "	cvt.rni.f32.f32 	%f1861, %f1860;\n"
    "	mul.f32 	%f1862, %f13, %f1861;\n"
    "	sub.f32 	%f25, %f1858, %f1862;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1863, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1864, %f25, %f25, %f1863;\n"
    "	ld.shared.f32 	%f1865, [%rd15+500];\n"
    "	mov.f32 	%f1866, %f10;\n"
    "	sub.f32 	%f1867, %f1866, %f1865;\n"
    "	mov.f32 	%f1868, %f1867;\n"
    "	mov.f32 	%f1869, %f1868;\n"
    "	mul.f32 	%f1870, %f14, %f1868;\n"
    "	cvt.rni.f32.f32 	%f1871, %f1870;\n"
    "	mul.f32 	%f1872, %f13, %f1871;\n"
    "	sub.f32 	%f37, %f1867, %f1872;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1873, %f37, %f37, %f1864;\n"
    "	ld.shared.f32 	%f1874, [%rd15+504];\n"
    "	mov.f32 	%f1875, %f12;\n"
    "	sub.f32 	%f1876, %f1875, %f1874;\n"
    "	mov.f32 	%f1877, %f1876;\n"
    "	mul.f32 	%f1878, %f1876, %f14;\n"
    "	cvt.rni.f32.f32 	%f1879, %f1878;\n"
    "	mul.f32 	%f1880, %f13, %f1879;\n"
    "	sub.f32 	%f47, %f1876, %f1880;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1873;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd79, %r27;\n"
    "	mul.wide.s32 	%rd80, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd80;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f1881, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1882, %f54, %f1881;\n"
    "	cvt.rzi.f32.f32 	%f57, %f1882;\n"
    "	mov.f32 	%f1883, %f57;\n"
    "	mov.f32 	%f1884, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1885, %f1884;\n"
    "	mov.f32 	%f1886, %f54;\n"
    "	mad.f32 %f1887, %f1883, %f1885, %f1886;\n"
    "	mov.f32 	%f63, %f1887;\n"
    "	mov.f32 	%f1888, %f57;\n"
    "	mov.f32 	%f1889, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1890, %f1889;\n"
    "	mov.f32 	%f1891, %f63;\n"
    "	mad.f32 %f1892, %f1888, %f1890, %f1891;\n"
    "	mov.f32 	%f63, %f1892;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f1893, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f1893;\n"
    "	mov.f32 	%f1894, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f1894;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f1895, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f1895;\n"
    "	mov.f32 	%f1896, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f1896;\n"
    "	mov.f32 	%f1897, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f1897;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f1898, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f1898;\n"
    "	mov.f32 	%f1899, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f1899;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f1900, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f1900, %f93, %p4;\n"
    "	mov.f32 	%f1901, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f1901, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f1902, %f73, %f99;\n"
    "	sub.f32 	%f101, %f1902, %f88;\n"
    "	mul.f32 	%f1903, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f1903;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f1904, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f1904, %f104, %p2;\n"
    "	mov.f32 	%f1905, %f2;\n"
    "	mov.f32 	%f1906, %f26;\n"
    "	mad.f32 	%f1907, %f1906, %f106, %f1905;\n"
    "	mov.f32 	%f2, %f1907;\n"
    "	mov.f32 	%f1908, %f4;\n"
    "	mov.f32 	%f1909, %f38;\n"
    "	mad.f32 	%f1910, %f1909, %f106, %f1908;\n"
    "	mov.f32 	%f4, %f1910;\n"
    "	mov.f32 	%f1911, %f6;\n"
    "	mov.f32 	%f1912, %f48;\n"
    "	mad.f32 	%f1913, %f1912, %f106, %f1911;\n"
    "	mov.f32 	%f6, %f1913;\n"
    "	ld.shared.s32 	%r59, [%rd14+524];\n"
    "	add.s32 	%r27, %r59, %r6;\n"
    "	ld.shared.f32 	%f1914, [%rd15+512];\n"
    "	mov.f32 	%f1915, %f8;\n"
    "	sub.f32 	%f1916, %f1915, %f1914;\n"
    "	mov.f32 	%f1917, %f1916;\n"
    "	mul.f32 	%f1918, %f14, %f1917;\n"
    "	cvt.rni.f32.f32 	%f1919, %f1918;\n"
    "	mul.f32 	%f1920, %f13, %f1919;\n"
    "	sub.f32 	%f25, %f1916, %f1920;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1921, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1922, %f25, %f25, %f1921;\n"
    "	ld.shared.f32 	%f1923, [%rd15+516];\n"
    "	mov.f32 	%f1924, %f10;\n"
    "	sub.f32 	%f1925, %f1924, %f1923;\n"
    "	mov.f32 	%f1926, %f1925;\n"
    "	mov.f32 	%f1927, %f1926;\n"
    "	mul.f32 	%f1928, %f14, %f1926;\n"
    "	cvt.rni.f32.f32 	%f1929, %f1928;\n"
    "	mul.f32 	%f1930, %f13, %f1929;\n"
    "	sub.f32 	%f37, %f1925, %f1930;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1931, %f37, %f37, %f1922;\n"
    "	ld.shared.f32 	%f1932, [%rd15+520];\n"
    "	mov.f32 	%f1933, %f12;\n"
    "	sub.f32 	%f1934, %f1933, %f1932;\n"
    "	mov.f32 	%f1935, %f1934;\n"
    "	mul.f32 	%f1936, %f1934, %f14;\n"
    "	cvt.rni.f32.f32 	%f1937, %f1936;\n"
    "	mul.f32 	%f1938, %f13, %f1937;\n"
    "	sub.f32 	%f47, %f1934, %f1938;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1931;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd81, %r27;\n"
    "	mul.wide.s32 	%rd82, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd82;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f1939, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1940, %f54, %f1939;\n"
    "	cvt.rzi.f32.f32 	%f57, %f1940;\n"
    "	mov.f32 	%f1941, %f57;\n"
    "	mov.f32 	%f1942, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f1943, %f1942;\n"
    "	mov.f32 	%f1944, %f54;\n"
    "	mad.f32 %f1945, %f1941, %f1943, %f1944;\n"
    "	mov.f32 	%f63, %f1945;\n"
    "	mov.f32 	%f1946, %f57;\n"
    "	mov.f32 	%f1947, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f1948, %f1947;\n"
    "	mov.f32 	%f1949, %f63;\n"
    "	mad.f32 %f1950, %f1946, %f1948, %f1949;\n"
    "	mov.f32 	%f63, %f1950;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f1951, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f1951;\n"
    "	mov.f32 	%f1952, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f1952;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f1953, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f1953;\n"
    "	mov.f32 	%f1954, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f1954;\n"
    "	mov.f32 	%f1955, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f1955;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f1956, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f1956;\n"
    "	mov.f32 	%f1957, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f1957;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f1958, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f1958, %f93, %p4;\n"
    "	mov.f32 	%f1959, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f1959, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f1960, %f73, %f99;\n"
    "	sub.f32 	%f101, %f1960, %f88;\n"
    "	mul.f32 	%f1961, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f1961;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f1962, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f1962, %f104, %p2;\n"
    "	mov.f32 	%f1963, %f2;\n"
    "	mov.f32 	%f1964, %f26;\n"
    "	mad.f32 	%f1965, %f1964, %f106, %f1963;\n"
    "	mov.f32 	%f2, %f1965;\n"
    "	mov.f32 	%f1966, %f4;\n"
    "	mov.f32 	%f1967, %f38;\n"
    "	mad.f32 	%f1968, %f1967, %f106, %f1966;\n"
    "	mov.f32 	%f4, %f1968;\n"
    "	mov.f32 	%f1969, %f6;\n"
    "	mov.f32 	%f1970, %f48;\n"
    "	mad.f32 	%f1971, %f1970, %f106, %f1969;\n"
    "	mov.f32 	%f6, %f1971;\n"
    "	ld.shared.s32 	%r60, [%rd14+540];\n"
    "	add.s32 	%r27, %r60, %r6;\n"
    "	ld.shared.f32 	%f1972, [%rd15+528];\n"
    "	mov.f32 	%f1973, %f8;\n"
    "	sub.f32 	%f1974, %f1973, %f1972;\n"
    "	mov.f32 	%f1975, %f1974;\n"
    "	mul.f32 	%f1976, %f14, %f1975;\n"
    "	cvt.rni.f32.f32 	%f1977, %f1976;\n"
    "	mul.f32 	%f1978, %f13, %f1977;\n"
    "	sub.f32 	%f25, %f1974, %f1978;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f1979, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1980, %f25, %f25, %f1979;\n"
    "	ld.shared.f32 	%f1981, [%rd15+532];\n"
    "	mov.f32 	%f1982, %f10;\n"
    "	sub.f32 	%f1983, %f1982, %f1981;\n"
    "	mov.f32 	%f1984, %f1983;\n"
    "	mov.f32 	%f1985, %f1984;\n"
    "	mul.f32 	%f1986, %f14, %f1984;\n"
    "	cvt.rni.f32.f32 	%f1987, %f1986;\n"
    "	mul.f32 	%f1988, %f13, %f1987;\n"
    "	sub.f32 	%f37, %f1983, %f1988;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f1989, %f37, %f37, %f1980;\n"
    "	ld.shared.f32 	%f1990, [%rd15+536];\n"
    "	mov.f32 	%f1991, %f12;\n"
    "	sub.f32 	%f1992, %f1991, %f1990;\n"
    "	mov.f32 	%f1993, %f1992;\n"
    "	mul.f32 	%f1994, %f1992, %f14;\n"
    "	cvt.rni.f32.f32 	%f1995, %f1994;\n"
    "	mul.f32 	%f1996, %f13, %f1995;\n"
    "	sub.f32 	%f47, %f1992, %f1996;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f1989;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd83, %r27;\n"
    "	mul.wide.s32 	%rd84, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd84;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f1997, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1998, %f54, %f1997;\n"
    "	cvt.rzi.f32.f32 	%f57, %f1998;\n"
    "	mov.f32 	%f1999, %f57;\n"
    "	mov.f32 	%f2000, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2001, %f2000;\n"
    "	mov.f32 	%f2002, %f54;\n"
    "	mad.f32 %f2003, %f1999, %f2001, %f2002;\n"
    "	mov.f32 	%f63, %f2003;\n"
    "	mov.f32 	%f2004, %f57;\n"
    "	mov.f32 	%f2005, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2006, %f2005;\n"
    "	mov.f32 	%f2007, %f63;\n"
    "	mad.f32 %f2008, %f2004, %f2006, %f2007;\n"
    "	mov.f32 	%f63, %f2008;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f2009, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f2009;\n"
    "	mov.f32 	%f2010, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f2010;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f2011, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f2011;\n"
    "	mov.f32 	%f2012, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f2012;\n"
    "	mov.f32 	%f2013, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f2013;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f2014, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f2014;\n"
    "	mov.f32 	%f2015, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f2015;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f2016, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f2016, %f93, %p4;\n"
    "	mov.f32 	%f2017, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f2017, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f2018, %f73, %f99;\n"
    "	sub.f32 	%f101, %f2018, %f88;\n"
    "	mul.f32 	%f2019, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f2019;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f2020, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f2020, %f104, %p2;\n"
    "	mov.f32 	%f2021, %f2;\n"
    "	mov.f32 	%f2022, %f26;\n"
    "	mad.f32 	%f2023, %f2022, %f106, %f2021;\n"
    "	mov.f32 	%f2, %f2023;\n"
    "	mov.f32 	%f2024, %f4;\n"
    "	mov.f32 	%f2025, %f38;\n"
    "	mad.f32 	%f2026, %f2025, %f106, %f2024;\n"
    "	mov.f32 	%f4, %f2026;\n"
    "	mov.f32 	%f2027, %f6;\n"
    "	mov.f32 	%f2028, %f48;\n"
    "	mad.f32 	%f2029, %f2028, %f106, %f2027;\n"
    "	mov.f32 	%f6, %f2029;\n"
    "	ld.shared.s32 	%r61, [%rd14+556];\n"
    "	add.s32 	%r27, %r61, %r6;\n"
    "	ld.shared.f32 	%f2030, [%rd15+544];\n"
    "	mov.f32 	%f2031, %f8;\n"
    "	sub.f32 	%f2032, %f2031, %f2030;\n"
    "	mov.f32 	%f2033, %f2032;\n"
    "	mul.f32 	%f2034, %f14, %f2033;\n"
    "	cvt.rni.f32.f32 	%f2035, %f2034;\n"
    "	mul.f32 	%f2036, %f13, %f2035;\n"
    "	sub.f32 	%f25, %f2032, %f2036;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2037, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2038, %f25, %f25, %f2037;\n"
    "	ld.shared.f32 	%f2039, [%rd15+548];\n"
    "	mov.f32 	%f2040, %f10;\n"
    "	sub.f32 	%f2041, %f2040, %f2039;\n"
    "	mov.f32 	%f2042, %f2041;\n"
    "	mov.f32 	%f2043, %f2042;\n"
    "	mul.f32 	%f2044, %f14, %f2042;\n"
    "	cvt.rni.f32.f32 	%f2045, %f2044;\n"
    "	mul.f32 	%f2046, %f13, %f2045;\n"
    "	sub.f32 	%f37, %f2041, %f2046;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2047, %f37, %f37, %f2038;\n"
    "	ld.shared.f32 	%f2048, [%rd15+552];\n"
    "	mov.f32 	%f2049, %f12;\n"
    "	sub.f32 	%f2050, %f2049, %f2048;\n"
    "	mov.f32 	%f2051, %f2050;\n"
    "	mul.f32 	%f2052, %f2050, %f14;\n"
    "	cvt.rni.f32.f32 	%f2053, %f2052;\n"
    "	mul.f32 	%f2054, %f13, %f2053;\n"
    "	sub.f32 	%f47, %f2050, %f2054;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2047;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd85, %r27;\n"
    "	mul.wide.s32 	%rd86, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd86;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f2055, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2056, %f54, %f2055;\n"
    "	cvt.rzi.f32.f32 	%f57, %f2056;\n"
    "	mov.f32 	%f2057, %f57;\n"
    "	mov.f32 	%f2058, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2059, %f2058;\n"
    "	mov.f32 	%f2060, %f54;\n"
    "	mad.f32 %f2061, %f2057, %f2059, %f2060;\n"
    "	mov.f32 	%f63, %f2061;\n"
    "	mov.f32 	%f2062, %f57;\n"
    "	mov.f32 	%f2063, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2064, %f2063;\n"
    "	mov.f32 	%f2065, %f63;\n"
    "	mad.f32 %f2066, %f2062, %f2064, %f2065;\n"
    "	mov.f32 	%f63, %f2066;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f2067, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f2067;\n"
    "	mov.f32 	%f2068, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f2068;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f2069, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f2069;\n"
    "	mov.f32 	%f2070, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f2070;\n"
    "	mov.f32 	%f2071, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f2071;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f2072, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f2072;\n"
    "	mov.f32 	%f2073, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f2073;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f2074, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f2074, %f93, %p4;\n"
    "	mov.f32 	%f2075, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f2075, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f2076, %f73, %f99;\n"
    "	sub.f32 	%f101, %f2076, %f88;\n"
    "	mul.f32 	%f2077, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f2077;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f2078, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f2078, %f104, %p2;\n"
    "	mov.f32 	%f2079, %f2;\n"
    "	mov.f32 	%f2080, %f26;\n"
    "	mad.f32 	%f2081, %f2080, %f106, %f2079;\n"
    "	mov.f32 	%f2, %f2081;\n"
    "	mov.f32 	%f2082, %f4;\n"
    "	mov.f32 	%f2083, %f38;\n"
    "	mad.f32 	%f2084, %f2083, %f106, %f2082;\n"
    "	mov.f32 	%f4, %f2084;\n"
    "	mov.f32 	%f2085, %f6;\n"
    "	mov.f32 	%f2086, %f48;\n"
    "	mad.f32 	%f2087, %f2086, %f106, %f2085;\n"
    "	mov.f32 	%f6, %f2087;\n"
    "	ld.shared.s32 	%r62, [%rd14+572];\n"
    "	add.s32 	%r27, %r62, %r6;\n"
    "	ld.shared.f32 	%f2088, [%rd15+560];\n"
    "	mov.f32 	%f2089, %f8;\n"
    "	sub.f32 	%f2090, %f2089, %f2088;\n"
    "	mov.f32 	%f2091, %f2090;\n"
    "	mul.f32 	%f2092, %f14, %f2091;\n"
    "	cvt.rni.f32.f32 	%f2093, %f2092;\n"
    "	mul.f32 	%f2094, %f13, %f2093;\n"
    "	sub.f32 	%f25, %f2090, %f2094;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2095, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2096, %f25, %f25, %f2095;\n"
    "	ld.shared.f32 	%f2097, [%rd15+564];\n"
    "	mov.f32 	%f2098, %f10;\n"
    "	sub.f32 	%f2099, %f2098, %f2097;\n"
    "	mov.f32 	%f2100, %f2099;\n"
    "	mov.f32 	%f2101, %f2100;\n"
    "	mul.f32 	%f2102, %f14, %f2100;\n"
    "	cvt.rni.f32.f32 	%f2103, %f2102;\n"
    "	mul.f32 	%f2104, %f13, %f2103;\n"
    "	sub.f32 	%f37, %f2099, %f2104;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2105, %f37, %f37, %f2096;\n"
    "	ld.shared.f32 	%f2106, [%rd15+568];\n"
    "	mov.f32 	%f2107, %f12;\n"
    "	sub.f32 	%f2108, %f2107, %f2106;\n"
    "	mov.f32 	%f2109, %f2108;\n"
    "	mul.f32 	%f2110, %f2108, %f14;\n"
    "	cvt.rni.f32.f32 	%f2111, %f2110;\n"
    "	mul.f32 	%f2112, %f13, %f2111;\n"
    "	sub.f32 	%f47, %f2108, %f2112;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2105;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd87, %r27;\n"
    "	mul.wide.s32 	%rd88, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd88;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f2113, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2114, %f54, %f2113;\n"
    "	cvt.rzi.f32.f32 	%f57, %f2114;\n"
    "	mov.f32 	%f2115, %f57;\n"
    "	mov.f32 	%f2116, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2117, %f2116;\n"
    "	mov.f32 	%f2118, %f54;\n"
    "	mad.f32 %f2119, %f2115, %f2117, %f2118;\n"
    "	mov.f32 	%f63, %f2119;\n"
    "	mov.f32 	%f2120, %f57;\n"
    "	mov.f32 	%f2121, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2122, %f2121;\n"
    "	mov.f32 	%f2123, %f63;\n"
    "	mad.f32 %f2124, %f2120, %f2122, %f2123;\n"
    "	mov.f32 	%f63, %f2124;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f2125, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f2125;\n"
    "	mov.f32 	%f2126, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f2126;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f2127, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f2127;\n"
    "	mov.f32 	%f2128, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f2128;\n"
    "	mov.f32 	%f2129, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f2129;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f2130, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f2130;\n"
    "	mov.f32 	%f2131, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f2131;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f2132, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f2132, %f93, %p4;\n"
    "	mov.f32 	%f2133, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f2133, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f2134, %f73, %f99;\n"
    "	sub.f32 	%f101, %f2134, %f88;\n"
    "	mul.f32 	%f2135, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f2135;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f2136, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f2136, %f104, %p2;\n"
    "	mov.f32 	%f2137, %f2;\n"
    "	mov.f32 	%f2138, %f26;\n"
    "	mad.f32 	%f2139, %f2138, %f106, %f2137;\n"
    "	mov.f32 	%f2, %f2139;\n"
    "	mov.f32 	%f2140, %f4;\n"
    "	mov.f32 	%f2141, %f38;\n"
    "	mad.f32 	%f2142, %f2141, %f106, %f2140;\n"
    "	mov.f32 	%f4, %f2142;\n"
    "	mov.f32 	%f2143, %f6;\n"
    "	mov.f32 	%f2144, %f48;\n"
    "	mad.f32 	%f2145, %f2144, %f106, %f2143;\n"
    "	mov.f32 	%f6, %f2145;\n"
    "	ld.shared.s32 	%r63, [%rd14+588];\n"
    "	add.s32 	%r27, %r63, %r6;\n"
    "	ld.shared.f32 	%f2146, [%rd15+576];\n"
    "	mov.f32 	%f2147, %f8;\n"
    "	sub.f32 	%f2148, %f2147, %f2146;\n"
    "	mov.f32 	%f2149, %f2148;\n"
    "	mul.f32 	%f2150, %f14, %f2149;\n"
    "	cvt.rni.f32.f32 	%f2151, %f2150;\n"
    "	mul.f32 	%f2152, %f13, %f2151;\n"
    "	sub.f32 	%f25, %f2148, %f2152;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2153, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2154, %f25, %f25, %f2153;\n"
    "	ld.shared.f32 	%f2155, [%rd15+580];\n"
    "	mov.f32 	%f2156, %f10;\n"
    "	sub.f32 	%f2157, %f2156, %f2155;\n"
    "	mov.f32 	%f2158, %f2157;\n"
    "	mov.f32 	%f2159, %f2158;\n"
    "	mul.f32 	%f2160, %f14, %f2158;\n"
    "	cvt.rni.f32.f32 	%f2161, %f2160;\n"
    "	mul.f32 	%f2162, %f13, %f2161;\n"
    "	sub.f32 	%f37, %f2157, %f2162;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2163, %f37, %f37, %f2154;\n"
    "	ld.shared.f32 	%f2164, [%rd15+584];\n"
    "	mov.f32 	%f2165, %f12;\n"
    "	sub.f32 	%f2166, %f2165, %f2164;\n"
    "	mov.f32 	%f2167, %f2166;\n"
    "	mul.f32 	%f2168, %f2166, %f14;\n"
    "	cvt.rni.f32.f32 	%f2169, %f2168;\n"
    "	mul.f32 	%f2170, %f13, %f2169;\n"
    "	sub.f32 	%f47, %f2166, %f2170;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2163;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd89, %r27;\n"
    "	mul.wide.s32 	%rd90, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd90;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f2171, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2172, %f54, %f2171;\n"
    "	cvt.rzi.f32.f32 	%f57, %f2172;\n"
    "	mov.f32 	%f2173, %f57;\n"
    "	mov.f32 	%f2174, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2175, %f2174;\n"
    "	mov.f32 	%f2176, %f54;\n"
    "	mad.f32 %f2177, %f2173, %f2175, %f2176;\n"
    "	mov.f32 	%f63, %f2177;\n"
    "	mov.f32 	%f2178, %f57;\n"
    "	mov.f32 	%f2179, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2180, %f2179;\n"
    "	mov.f32 	%f2181, %f63;\n"
    "	mad.f32 %f2182, %f2178, %f2180, %f2181;\n"
    "	mov.f32 	%f63, %f2182;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f2183, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f2183;\n"
    "	mov.f32 	%f2184, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f2184;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f2185, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f2185;\n"
    "	mov.f32 	%f2186, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f2186;\n"
    "	mov.f32 	%f2187, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f2187;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f2188, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f2188;\n"
    "	mov.f32 	%f2189, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f2189;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f2190, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f2190, %f93, %p4;\n"
    "	mov.f32 	%f2191, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f2191, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f2192, %f73, %f99;\n"
    "	sub.f32 	%f101, %f2192, %f88;\n"
    "	mul.f32 	%f2193, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f2193;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f2194, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f2194, %f104, %p2;\n"
    "	mov.f32 	%f2195, %f2;\n"
    "	mov.f32 	%f2196, %f26;\n"
    "	mad.f32 	%f2197, %f2196, %f106, %f2195;\n"
    "	mov.f32 	%f2, %f2197;\n"
    "	mov.f32 	%f2198, %f4;\n"
    "	mov.f32 	%f2199, %f38;\n"
    "	mad.f32 	%f2200, %f2199, %f106, %f2198;\n"
    "	mov.f32 	%f4, %f2200;\n"
    "	mov.f32 	%f2201, %f6;\n"
    "	mov.f32 	%f2202, %f48;\n"
    "	mad.f32 	%f2203, %f2202, %f106, %f2201;\n"
    "	mov.f32 	%f6, %f2203;\n"
    "	ld.shared.s32 	%r64, [%rd14+604];\n"
    "	add.s32 	%r27, %r64, %r6;\n"
    "	ld.shared.f32 	%f2204, [%rd15+592];\n"
    "	mov.f32 	%f2205, %f8;\n"
    "	sub.f32 	%f2206, %f2205, %f2204;\n"
    "	mov.f32 	%f2207, %f2206;\n"
    "	mul.f32 	%f2208, %f14, %f2207;\n"
    "	cvt.rni.f32.f32 	%f2209, %f2208;\n"
    "	mul.f32 	%f2210, %f13, %f2209;\n"
    "	sub.f32 	%f25, %f2206, %f2210;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2211, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2212, %f25, %f25, %f2211;\n"
    "	ld.shared.f32 	%f2213, [%rd15+596];\n"
    "	mov.f32 	%f2214, %f10;\n"
    "	sub.f32 	%f2215, %f2214, %f2213;\n"
    "	mov.f32 	%f2216, %f2215;\n"
    "	mov.f32 	%f2217, %f2216;\n"
    "	mul.f32 	%f2218, %f14, %f2216;\n"
    "	cvt.rni.f32.f32 	%f2219, %f2218;\n"
    "	mul.f32 	%f2220, %f13, %f2219;\n"
    "	sub.f32 	%f37, %f2215, %f2220;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2221, %f37, %f37, %f2212;\n"
    "	ld.shared.f32 	%f2222, [%rd15+600];\n"
    "	mov.f32 	%f2223, %f12;\n"
    "	sub.f32 	%f2224, %f2223, %f2222;\n"
    "	mov.f32 	%f2225, %f2224;\n"
    "	mul.f32 	%f2226, %f2224, %f14;\n"
    "	cvt.rni.f32.f32 	%f2227, %f2226;\n"
    "	mul.f32 	%f2228, %f13, %f2227;\n"
    "	sub.f32 	%f47, %f2224, %f2228;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2221;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd91, %r27;\n"
    "	mul.wide.s32 	%rd92, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd92;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f2229, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2230, %f54, %f2229;\n"
    "	cvt.rzi.f32.f32 	%f57, %f2230;\n"
    "	mov.f32 	%f2231, %f57;\n"
    "	mov.f32 	%f2232, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2233, %f2232;\n"
    "	mov.f32 	%f2234, %f54;\n"
    "	mad.f32 %f2235, %f2231, %f2233, %f2234;\n"
    "	mov.f32 	%f63, %f2235;\n"
    "	mov.f32 	%f2236, %f57;\n"
    "	mov.f32 	%f2237, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2238, %f2237;\n"
    "	mov.f32 	%f2239, %f63;\n"
    "	mad.f32 %f2240, %f2236, %f2238, %f2239;\n"
    "	mov.f32 	%f63, %f2240;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f2241, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f2241;\n"
    "	mov.f32 	%f2242, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f2242;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f2243, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f2243;\n"
    "	mov.f32 	%f2244, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f2244;\n"
    "	mov.f32 	%f2245, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f2245;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f2246, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f2246;\n"
    "	mov.f32 	%f2247, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f2247;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f2248, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f2248, %f93, %p4;\n"
    "	mov.f32 	%f2249, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f2249, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f2250, %f73, %f99;\n"
    "	sub.f32 	%f101, %f2250, %f88;\n"
    "	mul.f32 	%f2251, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f2251;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f2252, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f2252, %f104, %p2;\n"
    "	mov.f32 	%f2253, %f2;\n"
    "	mov.f32 	%f2254, %f26;\n"
    "	mad.f32 	%f2255, %f2254, %f106, %f2253;\n"
    "	mov.f32 	%f2, %f2255;\n"
    "	mov.f32 	%f2256, %f4;\n"
    "	mov.f32 	%f2257, %f38;\n"
    "	mad.f32 	%f2258, %f2257, %f106, %f2256;\n"
    "	mov.f32 	%f4, %f2258;\n"
    "	mov.f32 	%f2259, %f6;\n"
    "	mov.f32 	%f2260, %f48;\n"
    "	mad.f32 	%f2261, %f2260, %f106, %f2259;\n"
    "	mov.f32 	%f6, %f2261;\n"
    "	ld.shared.s32 	%r65, [%rd14+620];\n"
    "	add.s32 	%r27, %r65, %r6;\n"
    "	ld.shared.f32 	%f2262, [%rd15+608];\n"
    "	mov.f32 	%f2263, %f8;\n"
    "	sub.f32 	%f2264, %f2263, %f2262;\n"
    "	mov.f32 	%f2265, %f2264;\n"
    "	mul.f32 	%f2266, %f14, %f2265;\n"
    "	cvt.rni.f32.f32 	%f2267, %f2266;\n"
    "	mul.f32 	%f2268, %f13, %f2267;\n"
    "	sub.f32 	%f25, %f2264, %f2268;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2269, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2270, %f25, %f25, %f2269;\n"
    "	ld.shared.f32 	%f2271, [%rd15+612];\n"
    "	mov.f32 	%f2272, %f10;\n"
    "	sub.f32 	%f2273, %f2272, %f2271;\n"
    "	mov.f32 	%f2274, %f2273;\n"
    "	mov.f32 	%f2275, %f2274;\n"
    "	mul.f32 	%f2276, %f14, %f2274;\n"
    "	cvt.rni.f32.f32 	%f2277, %f2276;\n"
    "	mul.f32 	%f2278, %f13, %f2277;\n"
    "	sub.f32 	%f37, %f2273, %f2278;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2279, %f37, %f37, %f2270;\n"
    "	ld.shared.f32 	%f2280, [%rd15+616];\n"
    "	mov.f32 	%f2281, %f12;\n"
    "	sub.f32 	%f2282, %f2281, %f2280;\n"
    "	mov.f32 	%f2283, %f2282;\n"
    "	mul.f32 	%f2284, %f2282, %f14;\n"
    "	cvt.rni.f32.f32 	%f2285, %f2284;\n"
    "	mul.f32 	%f2286, %f13, %f2285;\n"
    "	sub.f32 	%f47, %f2282, %f2286;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2279;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd93, %r27;\n"
    "	mul.wide.s32 	%rd94, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd94;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f2287, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2288, %f54, %f2287;\n"
    "	cvt.rzi.f32.f32 	%f57, %f2288;\n"
    "	mov.f32 	%f2289, %f57;\n"
    "	mov.f32 	%f2290, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2291, %f2290;\n"
    "	mov.f32 	%f2292, %f54;\n"
    "	mad.f32 %f2293, %f2289, %f2291, %f2292;\n"
    "	mov.f32 	%f63, %f2293;\n"
    "	mov.f32 	%f2294, %f57;\n"
    "	mov.f32 	%f2295, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2296, %f2295;\n"
    "	mov.f32 	%f2297, %f63;\n"
    "	mad.f32 %f2298, %f2294, %f2296, %f2297;\n"
    "	mov.f32 	%f63, %f2298;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f2299, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f2299;\n"
    "	mov.f32 	%f2300, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f2300;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f2301, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f2301;\n"
    "	mov.f32 	%f2302, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f2302;\n"
    "	mov.f32 	%f2303, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f2303;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f2304, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f2304;\n"
    "	mov.f32 	%f2305, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f2305;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f2306, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f2306, %f93, %p4;\n"
    "	mov.f32 	%f2307, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f2307, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f2308, %f73, %f99;\n"
    "	sub.f32 	%f101, %f2308, %f88;\n"
    "	mul.f32 	%f2309, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f2309;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f2310, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f2310, %f104, %p2;\n"
    "	mov.f32 	%f2311, %f2;\n"
    "	mov.f32 	%f2312, %f26;\n"
    "	mad.f32 	%f2313, %f2312, %f106, %f2311;\n"
    "	mov.f32 	%f2, %f2313;\n"
    "	mov.f32 	%f2314, %f4;\n"
    "	mov.f32 	%f2315, %f38;\n"
    "	mad.f32 	%f2316, %f2315, %f106, %f2314;\n"
    "	mov.f32 	%f4, %f2316;\n"
    "	mov.f32 	%f2317, %f6;\n"
    "	mov.f32 	%f2318, %f48;\n"
    "	mad.f32 	%f2319, %f2318, %f106, %f2317;\n"
    "	mov.f32 	%f6, %f2319;\n"
    "	ld.shared.s32 	%r66, [%rd14+636];\n"
    "	add.s32 	%r27, %r66, %r6;\n"
    "	ld.shared.f32 	%f2320, [%rd15+624];\n"
    "	mov.f32 	%f2321, %f8;\n"
    "	sub.f32 	%f2322, %f2321, %f2320;\n"
    "	mov.f32 	%f2323, %f2322;\n"
    "	mul.f32 	%f2324, %f14, %f2323;\n"
    "	cvt.rni.f32.f32 	%f2325, %f2324;\n"
    "	mul.f32 	%f2326, %f13, %f2325;\n"
    "	sub.f32 	%f25, %f2322, %f2326;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2327, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2328, %f25, %f25, %f2327;\n"
    "	ld.shared.f32 	%f2329, [%rd15+628];\n"
    "	mov.f32 	%f2330, %f10;\n"
    "	sub.f32 	%f2331, %f2330, %f2329;\n"
    "	mov.f32 	%f2332, %f2331;\n"
    "	mov.f32 	%f2333, %f2332;\n"
    "	mul.f32 	%f2334, %f14, %f2332;\n"
    "	cvt.rni.f32.f32 	%f2335, %f2334;\n"
    "	mul.f32 	%f2336, %f13, %f2335;\n"
    "	sub.f32 	%f37, %f2331, %f2336;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2337, %f37, %f37, %f2328;\n"
    "	ld.shared.f32 	%f2338, [%rd15+632];\n"
    "	mov.f32 	%f2339, %f12;\n"
    "	sub.f32 	%f2340, %f2339, %f2338;\n"
    "	mov.f32 	%f2341, %f2340;\n"
    "	mul.f32 	%f2342, %f2340, %f14;\n"
    "	cvt.rni.f32.f32 	%f2343, %f2342;\n"
    "	mul.f32 	%f2344, %f13, %f2343;\n"
    "	sub.f32 	%f47, %f2340, %f2344;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2337;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd95, %r27;\n"
    "	mul.wide.s32 	%rd96, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd96;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f2345, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2346, %f54, %f2345;\n"
    "	cvt.rzi.f32.f32 	%f57, %f2346;\n"
    "	mov.f32 	%f2347, %f57;\n"
    "	mov.f32 	%f2348, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2349, %f2348;\n"
    "	mov.f32 	%f2350, %f54;\n"
    "	mad.f32 %f2351, %f2347, %f2349, %f2350;\n"
    "	mov.f32 	%f63, %f2351;\n"
    "	mov.f32 	%f2352, %f57;\n"
    "	mov.f32 	%f2353, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2354, %f2353;\n"
    "	mov.f32 	%f2355, %f63;\n"
    "	mad.f32 %f2356, %f2352, %f2354, %f2355;\n"
    "	mov.f32 	%f63, %f2356;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f2357, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f2357;\n"
    "	mov.f32 	%f2358, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f2358;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f2359, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f2359;\n"
    "	mov.f32 	%f2360, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f2360;\n"
    "	mov.f32 	%f2361, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f2361;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f2362, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f2362;\n"
    "	mov.f32 	%f2363, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f2363;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f2364, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f2364, %f93, %p4;\n"
    "	mov.f32 	%f2365, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f2365, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f2366, %f73, %f99;\n"
    "	sub.f32 	%f101, %f2366, %f88;\n"
    "	mul.f32 	%f2367, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f2367;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f2368, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f2368, %f104, %p2;\n"
    "	mov.f32 	%f2369, %f2;\n"
    "	mov.f32 	%f2370, %f26;\n"
    "	mad.f32 	%f2371, %f2370, %f106, %f2369;\n"
    "	mov.f32 	%f2, %f2371;\n"
    "	mov.f32 	%f2372, %f4;\n"
    "	mov.f32 	%f2373, %f38;\n"
    "	mad.f32 	%f2374, %f2373, %f106, %f2372;\n"
    "	mov.f32 	%f4, %f2374;\n"
    "	mov.f32 	%f2375, %f6;\n"
    "	mov.f32 	%f2376, %f48;\n"
    "	mad.f32 	%f2377, %f2376, %f106, %f2375;\n"
    "	mov.f32 	%f6, %f2377;\n"
    "	ld.shared.s32 	%r67, [%rd14+652];\n"
    "	add.s32 	%r27, %r67, %r6;\n"
    "	ld.shared.f32 	%f2378, [%rd15+640];\n"
    "	mov.f32 	%f2379, %f8;\n"
    "	sub.f32 	%f2380, %f2379, %f2378;\n"
    "	mov.f32 	%f2381, %f2380;\n"
    "	mul.f32 	%f2382, %f14, %f2381;\n"
    "	cvt.rni.f32.f32 	%f2383, %f2382;\n"
    "	mul.f32 	%f2384, %f13, %f2383;\n"
    "	sub.f32 	%f25, %f2380, %f2384;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2385, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2386, %f25, %f25, %f2385;\n"
    "	ld.shared.f32 	%f2387, [%rd15+644];\n"
    "	mov.f32 	%f2388, %f10;\n"
    "	sub.f32 	%f2389, %f2388, %f2387;\n"
    "	mov.f32 	%f2390, %f2389;\n"
    "	mov.f32 	%f2391, %f2390;\n"
    "	mul.f32 	%f2392, %f14, %f2390;\n"
    "	cvt.rni.f32.f32 	%f2393, %f2392;\n"
    "	mul.f32 	%f2394, %f13, %f2393;\n"
    "	sub.f32 	%f37, %f2389, %f2394;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2395, %f37, %f37, %f2386;\n"
    "	ld.shared.f32 	%f2396, [%rd15+648];\n"
    "	mov.f32 	%f2397, %f12;\n"
    "	sub.f32 	%f2398, %f2397, %f2396;\n"
    "	mov.f32 	%f2399, %f2398;\n"
    "	mul.f32 	%f2400, %f2398, %f14;\n"
    "	cvt.rni.f32.f32 	%f2401, %f2400;\n"
    "	mul.f32 	%f2402, %f13, %f2401;\n"
    "	sub.f32 	%f47, %f2398, %f2402;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2395;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd97, %r27;\n"
    "	mul.wide.s32 	%rd98, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd98;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f2403, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2404, %f54, %f2403;\n"
    "	cvt.rzi.f32.f32 	%f57, %f2404;\n"
    "	mov.f32 	%f2405, %f57;\n"
    "	mov.f32 	%f2406, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2407, %f2406;\n"
    "	mov.f32 	%f2408, %f54;\n"
    "	mad.f32 %f2409, %f2405, %f2407, %f2408;\n"
    "	mov.f32 	%f63, %f2409;\n"
    "	mov.f32 	%f2410, %f57;\n"
    "	mov.f32 	%f2411, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2412, %f2411;\n"
    "	mov.f32 	%f2413, %f63;\n"
    "	mad.f32 %f2414, %f2410, %f2412, %f2413;\n"
    "	mov.f32 	%f63, %f2414;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f2415, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f2415;\n"
    "	mov.f32 	%f2416, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f2416;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f2417, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f2417;\n"
    "	mov.f32 	%f2418, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f2418;\n"
    "	mov.f32 	%f2419, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f2419;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f2420, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f2420;\n"
    "	mov.f32 	%f2421, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f2421;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f2422, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f2422, %f93, %p4;\n"
    "	mov.f32 	%f2423, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f2423, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f2424, %f73, %f99;\n"
    "	sub.f32 	%f101, %f2424, %f88;\n"
    "	mul.f32 	%f2425, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f2425;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f2426, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f2426, %f104, %p2;\n"
    "	mov.f32 	%f2427, %f2;\n"
    "	mov.f32 	%f2428, %f26;\n"
    "	mad.f32 	%f2429, %f2428, %f106, %f2427;\n"
    "	mov.f32 	%f2, %f2429;\n"
    "	mov.f32 	%f2430, %f4;\n"
    "	mov.f32 	%f2431, %f38;\n"
    "	mad.f32 	%f2432, %f2431, %f106, %f2430;\n"
    "	mov.f32 	%f4, %f2432;\n"
    "	mov.f32 	%f2433, %f6;\n"
    "	mov.f32 	%f2434, %f48;\n"
    "	mad.f32 	%f2435, %f2434, %f106, %f2433;\n"
    "	mov.f32 	%f6, %f2435;\n"
    "	ld.shared.s32 	%r68, [%rd14+668];\n"
    "	add.s32 	%r27, %r68, %r6;\n"
    "	ld.shared.f32 	%f2436, [%rd15+656];\n"
    "	mov.f32 	%f2437, %f8;\n"
    "	sub.f32 	%f2438, %f2437, %f2436;\n"
    "	mov.f32 	%f2439, %f2438;\n"
    "	mul.f32 	%f2440, %f14, %f2439;\n"
    "	cvt.rni.f32.f32 	%f2441, %f2440;\n"
    "	mul.f32 	%f2442, %f13, %f2441;\n"
    "	sub.f32 	%f25, %f2438, %f2442;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2443, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2444, %f25, %f25, %f2443;\n"
    "	ld.shared.f32 	%f2445, [%rd15+660];\n"
    "	mov.f32 	%f2446, %f10;\n"
    "	sub.f32 	%f2447, %f2446, %f2445;\n"
    "	mov.f32 	%f2448, %f2447;\n"
    "	mov.f32 	%f2449, %f2448;\n"
    "	mul.f32 	%f2450, %f14, %f2448;\n"
    "	cvt.rni.f32.f32 	%f2451, %f2450;\n"
    "	mul.f32 	%f2452, %f13, %f2451;\n"
    "	sub.f32 	%f37, %f2447, %f2452;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2453, %f37, %f37, %f2444;\n"
    "	ld.shared.f32 	%f2454, [%rd15+664];\n"
    "	mov.f32 	%f2455, %f12;\n"
    "	sub.f32 	%f2456, %f2455, %f2454;\n"
    "	mov.f32 	%f2457, %f2456;\n"
    "	mul.f32 	%f2458, %f2456, %f14;\n"
    "	cvt.rni.f32.f32 	%f2459, %f2458;\n"
    "	mul.f32 	%f2460, %f13, %f2459;\n"
    "	sub.f32 	%f47, %f2456, %f2460;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2453;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd99, %r27;\n"
    "	mul.wide.s32 	%rd100, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd100;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f2461, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2462, %f54, %f2461;\n"
    "	cvt.rzi.f32.f32 	%f57, %f2462;\n"
    "	mov.f32 	%f2463, %f57;\n"
    "	mov.f32 	%f2464, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2465, %f2464;\n"
    "	mov.f32 	%f2466, %f54;\n"
    "	mad.f32 %f2467, %f2463, %f2465, %f2466;\n"
    "	mov.f32 	%f63, %f2467;\n"
    "	mov.f32 	%f2468, %f57;\n"
    "	mov.f32 	%f2469, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2470, %f2469;\n"
    "	mov.f32 	%f2471, %f63;\n"
    "	mad.f32 %f2472, %f2468, %f2470, %f2471;\n"
    "	mov.f32 	%f63, %f2472;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f2473, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f2473;\n"
    "	mov.f32 	%f2474, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f2474;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f2475, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f2475;\n"
    "	mov.f32 	%f2476, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f2476;\n"
    "	mov.f32 	%f2477, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f2477;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f2478, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f2478;\n"
    "	mov.f32 	%f2479, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f2479;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f2480, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f2480, %f93, %p4;\n"
    "	mov.f32 	%f2481, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f2481, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f2482, %f73, %f99;\n"
    "	sub.f32 	%f101, %f2482, %f88;\n"
    "	mul.f32 	%f2483, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f2483;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f2484, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f2484, %f104, %p2;\n"
    "	mov.f32 	%f2485, %f2;\n"
    "	mov.f32 	%f2486, %f26;\n"
    "	mad.f32 	%f2487, %f2486, %f106, %f2485;\n"
    "	mov.f32 	%f2, %f2487;\n"
    "	mov.f32 	%f2488, %f4;\n"
    "	mov.f32 	%f2489, %f38;\n"
    "	mad.f32 	%f2490, %f2489, %f106, %f2488;\n"
    "	mov.f32 	%f4, %f2490;\n"
    "	mov.f32 	%f2491, %f6;\n"
    "	mov.f32 	%f2492, %f48;\n"
    "	mad.f32 	%f2493, %f2492, %f106, %f2491;\n"
    "	mov.f32 	%f6, %f2493;\n"
    "	ld.shared.s32 	%r69, [%rd14+684];\n"
    "	add.s32 	%r27, %r69, %r6;\n"
    "	ld.shared.f32 	%f2494, [%rd15+672];\n"
    "	mov.f32 	%f2495, %f8;\n"
    "	sub.f32 	%f2496, %f2495, %f2494;\n"
    "	mov.f32 	%f2497, %f2496;\n"
    "	mul.f32 	%f2498, %f14, %f2497;\n"
    "	cvt.rni.f32.f32 	%f2499, %f2498;\n"
    "	mul.f32 	%f2500, %f13, %f2499;\n"
    "	sub.f32 	%f25, %f2496, %f2500;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2501, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2502, %f25, %f25, %f2501;\n"
    "	ld.shared.f32 	%f2503, [%rd15+676];\n"
    "	mov.f32 	%f2504, %f10;\n"
    "	sub.f32 	%f2505, %f2504, %f2503;\n"
    "	mov.f32 	%f2506, %f2505;\n"
    "	mov.f32 	%f2507, %f2506;\n"
    "	mul.f32 	%f2508, %f14, %f2506;\n"
    "	cvt.rni.f32.f32 	%f2509, %f2508;\n"
    "	mul.f32 	%f2510, %f13, %f2509;\n"
    "	sub.f32 	%f37, %f2505, %f2510;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2511, %f37, %f37, %f2502;\n"
    "	ld.shared.f32 	%f2512, [%rd15+680];\n"
    "	mov.f32 	%f2513, %f12;\n"
    "	sub.f32 	%f2514, %f2513, %f2512;\n"
    "	mov.f32 	%f2515, %f2514;\n"
    "	mul.f32 	%f2516, %f2514, %f14;\n"
    "	cvt.rni.f32.f32 	%f2517, %f2516;\n"
    "	mul.f32 	%f2518, %f13, %f2517;\n"
    "	sub.f32 	%f47, %f2514, %f2518;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2511;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd101, %r27;\n"
    "	mul.wide.s32 	%rd102, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd102;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f2519, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2520, %f54, %f2519;\n"
    "	cvt.rzi.f32.f32 	%f57, %f2520;\n"
    "	mov.f32 	%f2521, %f57;\n"
    "	mov.f32 	%f2522, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2523, %f2522;\n"
    "	mov.f32 	%f2524, %f54;\n"
    "	mad.f32 %f2525, %f2521, %f2523, %f2524;\n"
    "	mov.f32 	%f63, %f2525;\n"
    "	mov.f32 	%f2526, %f57;\n"
    "	mov.f32 	%f2527, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2528, %f2527;\n"
    "	mov.f32 	%f2529, %f63;\n"
    "	mad.f32 %f2530, %f2526, %f2528, %f2529;\n"
    "	mov.f32 	%f63, %f2530;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f2531, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f2531;\n"
    "	mov.f32 	%f2532, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f2532;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f2533, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f2533;\n"
    "	mov.f32 	%f2534, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f2534;\n"
    "	mov.f32 	%f2535, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f2535;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f2536, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f2536;\n"
    "	mov.f32 	%f2537, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f2537;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f2538, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f2538, %f93, %p4;\n"
    "	mov.f32 	%f2539, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f2539, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f2540, %f73, %f99;\n"
    "	sub.f32 	%f101, %f2540, %f88;\n"
    "	mul.f32 	%f2541, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f2541;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f2542, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f2542, %f104, %p2;\n"
    "	mov.f32 	%f2543, %f2;\n"
    "	mov.f32 	%f2544, %f26;\n"
    "	mad.f32 	%f2545, %f2544, %f106, %f2543;\n"
    "	mov.f32 	%f2, %f2545;\n"
    "	mov.f32 	%f2546, %f4;\n"
    "	mov.f32 	%f2547, %f38;\n"
    "	mad.f32 	%f2548, %f2547, %f106, %f2546;\n"
    "	mov.f32 	%f4, %f2548;\n"
    "	mov.f32 	%f2549, %f6;\n"
    "	mov.f32 	%f2550, %f48;\n"
    "	mad.f32 	%f2551, %f2550, %f106, %f2549;\n"
    "	mov.f32 	%f6, %f2551;\n"
    "	ld.shared.s32 	%r70, [%rd14+700];\n"
    "	add.s32 	%r27, %r70, %r6;\n"
    "	ld.shared.f32 	%f2552, [%rd15+688];\n"
    "	mov.f32 	%f2553, %f8;\n"
    "	sub.f32 	%f2554, %f2553, %f2552;\n"
    "	mov.f32 	%f2555, %f2554;\n"
    "	mul.f32 	%f2556, %f14, %f2555;\n"
    "	cvt.rni.f32.f32 	%f2557, %f2556;\n"
    "	mul.f32 	%f2558, %f13, %f2557;\n"
    "	sub.f32 	%f25, %f2554, %f2558;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2559, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2560, %f25, %f25, %f2559;\n"
    "	ld.shared.f32 	%f2561, [%rd15+692];\n"
    "	mov.f32 	%f2562, %f10;\n"
    "	sub.f32 	%f2563, %f2562, %f2561;\n"
    "	mov.f32 	%f2564, %f2563;\n"
    "	mov.f32 	%f2565, %f2564;\n"
    "	mul.f32 	%f2566, %f14, %f2564;\n"
    "	cvt.rni.f32.f32 	%f2567, %f2566;\n"
    "	mul.f32 	%f2568, %f13, %f2567;\n"
    "	sub.f32 	%f37, %f2563, %f2568;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2569, %f37, %f37, %f2560;\n"
    "	ld.shared.f32 	%f2570, [%rd15+696];\n"
    "	mov.f32 	%f2571, %f12;\n"
    "	sub.f32 	%f2572, %f2571, %f2570;\n"
    "	mov.f32 	%f2573, %f2572;\n"
    "	mul.f32 	%f2574, %f2572, %f14;\n"
    "	cvt.rni.f32.f32 	%f2575, %f2574;\n"
    "	mul.f32 	%f2576, %f13, %f2575;\n"
    "	sub.f32 	%f47, %f2572, %f2576;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2569;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd103, %r27;\n"
    "	mul.wide.s32 	%rd104, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd104;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f2577, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2578, %f54, %f2577;\n"
    "	cvt.rzi.f32.f32 	%f57, %f2578;\n"
    "	mov.f32 	%f2579, %f57;\n"
    "	mov.f32 	%f2580, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2581, %f2580;\n"
    "	mov.f32 	%f2582, %f54;\n"
    "	mad.f32 %f2583, %f2579, %f2581, %f2582;\n"
    "	mov.f32 	%f63, %f2583;\n"
    "	mov.f32 	%f2584, %f57;\n"
    "	mov.f32 	%f2585, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2586, %f2585;\n"
    "	mov.f32 	%f2587, %f63;\n"
    "	mad.f32 %f2588, %f2584, %f2586, %f2587;\n"
    "	mov.f32 	%f63, %f2588;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f2589, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f2589;\n"
    "	mov.f32 	%f2590, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f2590;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f2591, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f2591;\n"
    "	mov.f32 	%f2592, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f2592;\n"
    "	mov.f32 	%f2593, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f2593;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f2594, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f2594;\n"
    "	mov.f32 	%f2595, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f2595;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f2596, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f2596, %f93, %p4;\n"
    "	mov.f32 	%f2597, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f2597, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f2598, %f73, %f99;\n"
    "	sub.f32 	%f101, %f2598, %f88;\n"
    "	mul.f32 	%f2599, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f2599;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f2600, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f2600, %f104, %p2;\n"
    "	mov.f32 	%f2601, %f2;\n"
    "	mov.f32 	%f2602, %f26;\n"
    "	mad.f32 	%f2603, %f2602, %f106, %f2601;\n"
    "	mov.f32 	%f2, %f2603;\n"
    "	mov.f32 	%f2604, %f4;\n"
    "	mov.f32 	%f2605, %f38;\n"
    "	mad.f32 	%f2606, %f2605, %f106, %f2604;\n"
    "	mov.f32 	%f4, %f2606;\n"
    "	mov.f32 	%f2607, %f6;\n"
    "	mov.f32 	%f2608, %f48;\n"
    "	mad.f32 	%f2609, %f2608, %f106, %f2607;\n"
    "	mov.f32 	%f6, %f2609;\n"
    "	ld.shared.s32 	%r71, [%rd14+716];\n"
    "	add.s32 	%r27, %r71, %r6;\n"
    "	ld.shared.f32 	%f2610, [%rd15+704];\n"
    "	mov.f32 	%f2611, %f8;\n"
    "	sub.f32 	%f2612, %f2611, %f2610;\n"
    "	mov.f32 	%f2613, %f2612;\n"
    "	mul.f32 	%f2614, %f14, %f2613;\n"
    "	cvt.rni.f32.f32 	%f2615, %f2614;\n"
    "	mul.f32 	%f2616, %f13, %f2615;\n"
    "	sub.f32 	%f25, %f2612, %f2616;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2617, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2618, %f25, %f25, %f2617;\n"
    "	ld.shared.f32 	%f2619, [%rd15+708];\n"
    "	mov.f32 	%f2620, %f10;\n"
    "	sub.f32 	%f2621, %f2620, %f2619;\n"
    "	mov.f32 	%f2622, %f2621;\n"
    "	mov.f32 	%f2623, %f2622;\n"
    "	mul.f32 	%f2624, %f14, %f2622;\n"
    "	cvt.rni.f32.f32 	%f2625, %f2624;\n"
    "	mul.f32 	%f2626, %f13, %f2625;\n"
    "	sub.f32 	%f37, %f2621, %f2626;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2627, %f37, %f37, %f2618;\n"
    "	ld.shared.f32 	%f2628, [%rd15+712];\n"
    "	mov.f32 	%f2629, %f12;\n"
    "	sub.f32 	%f2630, %f2629, %f2628;\n"
    "	mov.f32 	%f2631, %f2630;\n"
    "	mul.f32 	%f2632, %f2630, %f14;\n"
    "	cvt.rni.f32.f32 	%f2633, %f2632;\n"
    "	mul.f32 	%f2634, %f13, %f2633;\n"
    "	sub.f32 	%f47, %f2630, %f2634;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2627;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd105, %r27;\n"
    "	mul.wide.s32 	%rd106, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd106;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f2635, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2636, %f54, %f2635;\n"
    "	cvt.rzi.f32.f32 	%f57, %f2636;\n"
    "	mov.f32 	%f2637, %f57;\n"
    "	mov.f32 	%f2638, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2639, %f2638;\n"
    "	mov.f32 	%f2640, %f54;\n"
    "	mad.f32 %f2641, %f2637, %f2639, %f2640;\n"
    "	mov.f32 	%f63, %f2641;\n"
    "	mov.f32 	%f2642, %f57;\n"
    "	mov.f32 	%f2643, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2644, %f2643;\n"
    "	mov.f32 	%f2645, %f63;\n"
    "	mad.f32 %f2646, %f2642, %f2644, %f2645;\n"
    "	mov.f32 	%f63, %f2646;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f2647, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f2647;\n"
    "	mov.f32 	%f2648, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f2648;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f2649, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f2649;\n"
    "	mov.f32 	%f2650, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f2650;\n"
    "	mov.f32 	%f2651, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f2651;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f2652, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f2652;\n"
    "	mov.f32 	%f2653, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f2653;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f2654, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f2654, %f93, %p4;\n"
    "	mov.f32 	%f2655, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f2655, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f2656, %f73, %f99;\n"
    "	sub.f32 	%f101, %f2656, %f88;\n"
    "	mul.f32 	%f2657, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f2657;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f2658, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f2658, %f104, %p2;\n"
    "	mov.f32 	%f2659, %f2;\n"
    "	mov.f32 	%f2660, %f26;\n"
    "	mad.f32 	%f2661, %f2660, %f106, %f2659;\n"
    "	mov.f32 	%f2, %f2661;\n"
    "	mov.f32 	%f2662, %f4;\n"
    "	mov.f32 	%f2663, %f38;\n"
    "	mad.f32 	%f2664, %f2663, %f106, %f2662;\n"
    "	mov.f32 	%f4, %f2664;\n"
    "	mov.f32 	%f2665, %f6;\n"
    "	mov.f32 	%f2666, %f48;\n"
    "	mad.f32 	%f2667, %f2666, %f106, %f2665;\n"
    "	mov.f32 	%f6, %f2667;\n"
    "	ld.shared.s32 	%r72, [%rd14+732];\n"
    "	add.s32 	%r27, %r72, %r6;\n"
    "	ld.shared.f32 	%f2668, [%rd15+720];\n"
    "	mov.f32 	%f2669, %f8;\n"
    "	sub.f32 	%f2670, %f2669, %f2668;\n"
    "	mov.f32 	%f2671, %f2670;\n"
    "	mul.f32 	%f2672, %f14, %f2671;\n"
    "	cvt.rni.f32.f32 	%f2673, %f2672;\n"
    "	mul.f32 	%f2674, %f13, %f2673;\n"
    "	sub.f32 	%f25, %f2670, %f2674;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2675, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2676, %f25, %f25, %f2675;\n"
    "	ld.shared.f32 	%f2677, [%rd15+724];\n"
    "	mov.f32 	%f2678, %f10;\n"
    "	sub.f32 	%f2679, %f2678, %f2677;\n"
    "	mov.f32 	%f2680, %f2679;\n"
    "	mov.f32 	%f2681, %f2680;\n"
    "	mul.f32 	%f2682, %f14, %f2680;\n"
    "	cvt.rni.f32.f32 	%f2683, %f2682;\n"
    "	mul.f32 	%f2684, %f13, %f2683;\n"
    "	sub.f32 	%f37, %f2679, %f2684;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2685, %f37, %f37, %f2676;\n"
    "	ld.shared.f32 	%f2686, [%rd15+728];\n"
    "	mov.f32 	%f2687, %f12;\n"
    "	sub.f32 	%f2688, %f2687, %f2686;\n"
    "	mov.f32 	%f2689, %f2688;\n"
    "	mul.f32 	%f2690, %f2688, %f14;\n"
    "	cvt.rni.f32.f32 	%f2691, %f2690;\n"
    "	mul.f32 	%f2692, %f13, %f2691;\n"
    "	sub.f32 	%f47, %f2688, %f2692;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2685;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd107, %r27;\n"
    "	mul.wide.s32 	%rd108, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd108;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f2693, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2694, %f54, %f2693;\n"
    "	cvt.rzi.f32.f32 	%f57, %f2694;\n"
    "	mov.f32 	%f2695, %f57;\n"
    "	mov.f32 	%f2696, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2697, %f2696;\n"
    "	mov.f32 	%f2698, %f54;\n"
    "	mad.f32 %f2699, %f2695, %f2697, %f2698;\n"
    "	mov.f32 	%f63, %f2699;\n"
    "	mov.f32 	%f2700, %f57;\n"
    "	mov.f32 	%f2701, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2702, %f2701;\n"
    "	mov.f32 	%f2703, %f63;\n"
    "	mad.f32 %f2704, %f2700, %f2702, %f2703;\n"
    "	mov.f32 	%f63, %f2704;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f2705, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f2705;\n"
    "	mov.f32 	%f2706, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f2706;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f2707, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f2707;\n"
    "	mov.f32 	%f2708, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f2708;\n"
    "	mov.f32 	%f2709, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f2709;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f2710, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f2710;\n"
    "	mov.f32 	%f2711, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f2711;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f2712, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f2712, %f93, %p4;\n"
    "	mov.f32 	%f2713, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f2713, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f2714, %f73, %f99;\n"
    "	sub.f32 	%f101, %f2714, %f88;\n"
    "	mul.f32 	%f2715, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f2715;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f2716, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f2716, %f104, %p2;\n"
    "	mov.f32 	%f2717, %f2;\n"
    "	mov.f32 	%f2718, %f26;\n"
    "	mad.f32 	%f2719, %f2718, %f106, %f2717;\n"
    "	mov.f32 	%f2, %f2719;\n"
    "	mov.f32 	%f2720, %f4;\n"
    "	mov.f32 	%f2721, %f38;\n"
    "	mad.f32 	%f2722, %f2721, %f106, %f2720;\n"
    "	mov.f32 	%f4, %f2722;\n"
    "	mov.f32 	%f2723, %f6;\n"
    "	mov.f32 	%f2724, %f48;\n"
    "	mad.f32 	%f2725, %f2724, %f106, %f2723;\n"
    "	mov.f32 	%f6, %f2725;\n"
    "	ld.shared.s32 	%r73, [%rd14+748];\n"
    "	add.s32 	%r27, %r73, %r6;\n"
    "	ld.shared.f32 	%f2726, [%rd15+736];\n"
    "	mov.f32 	%f2727, %f8;\n"
    "	sub.f32 	%f2728, %f2727, %f2726;\n"
    "	mov.f32 	%f2729, %f2728;\n"
    "	mul.f32 	%f2730, %f14, %f2729;\n"
    "	cvt.rni.f32.f32 	%f2731, %f2730;\n"
    "	mul.f32 	%f2732, %f13, %f2731;\n"
    "	sub.f32 	%f25, %f2728, %f2732;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2733, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2734, %f25, %f25, %f2733;\n"
    "	ld.shared.f32 	%f2735, [%rd15+740];\n"
    "	mov.f32 	%f2736, %f10;\n"
    "	sub.f32 	%f2737, %f2736, %f2735;\n"
    "	mov.f32 	%f2738, %f2737;\n"
    "	mov.f32 	%f2739, %f2738;\n"
    "	mul.f32 	%f2740, %f14, %f2738;\n"
    "	cvt.rni.f32.f32 	%f2741, %f2740;\n"
    "	mul.f32 	%f2742, %f13, %f2741;\n"
    "	sub.f32 	%f37, %f2737, %f2742;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2743, %f37, %f37, %f2734;\n"
    "	ld.shared.f32 	%f2744, [%rd15+744];\n"
    "	mov.f32 	%f2745, %f12;\n"
    "	sub.f32 	%f2746, %f2745, %f2744;\n"
    "	mov.f32 	%f2747, %f2746;\n"
    "	mul.f32 	%f2748, %f2746, %f14;\n"
    "	cvt.rni.f32.f32 	%f2749, %f2748;\n"
    "	mul.f32 	%f2750, %f13, %f2749;\n"
    "	sub.f32 	%f47, %f2746, %f2750;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2743;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd109, %r27;\n"
    "	mul.wide.s32 	%rd110, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd110;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f2751, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2752, %f54, %f2751;\n"
    "	cvt.rzi.f32.f32 	%f57, %f2752;\n"
    "	mov.f32 	%f2753, %f57;\n"
    "	mov.f32 	%f2754, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2755, %f2754;\n"
    "	mov.f32 	%f2756, %f54;\n"
    "	mad.f32 %f2757, %f2753, %f2755, %f2756;\n"
    "	mov.f32 	%f63, %f2757;\n"
    "	mov.f32 	%f2758, %f57;\n"
    "	mov.f32 	%f2759, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2760, %f2759;\n"
    "	mov.f32 	%f2761, %f63;\n"
    "	mad.f32 %f2762, %f2758, %f2760, %f2761;\n"
    "	mov.f32 	%f63, %f2762;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f2763, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f2763;\n"
    "	mov.f32 	%f2764, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f2764;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f2765, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f2765;\n"
    "	mov.f32 	%f2766, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f2766;\n"
    "	mov.f32 	%f2767, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f2767;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f2768, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f2768;\n"
    "	mov.f32 	%f2769, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f2769;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f2770, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f2770, %f93, %p4;\n"
    "	mov.f32 	%f2771, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f2771, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f2772, %f73, %f99;\n"
    "	sub.f32 	%f101, %f2772, %f88;\n"
    "	mul.f32 	%f2773, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f2773;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f2774, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f2774, %f104, %p2;\n"
    "	mov.f32 	%f2775, %f2;\n"
    "	mov.f32 	%f2776, %f26;\n"
    "	mad.f32 	%f2777, %f2776, %f106, %f2775;\n"
    "	mov.f32 	%f2, %f2777;\n"
    "	mov.f32 	%f2778, %f4;\n"
    "	mov.f32 	%f2779, %f38;\n"
    "	mad.f32 	%f2780, %f2779, %f106, %f2778;\n"
    "	mov.f32 	%f4, %f2780;\n"
    "	mov.f32 	%f2781, %f6;\n"
    "	mov.f32 	%f2782, %f48;\n"
    "	mad.f32 	%f2783, %f2782, %f106, %f2781;\n"
    "	mov.f32 	%f6, %f2783;\n"
    "	ld.shared.s32 	%r74, [%rd14+764];\n"
    "	add.s32 	%r27, %r74, %r6;\n"
    "	ld.shared.f32 	%f2784, [%rd15+752];\n"
    "	mov.f32 	%f2785, %f8;\n"
    "	sub.f32 	%f2786, %f2785, %f2784;\n"
    "	mov.f32 	%f2787, %f2786;\n"
    "	mul.f32 	%f2788, %f14, %f2787;\n"
    "	cvt.rni.f32.f32 	%f2789, %f2788;\n"
    "	mul.f32 	%f2790, %f13, %f2789;\n"
    "	sub.f32 	%f25, %f2786, %f2790;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2791, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2792, %f25, %f25, %f2791;\n"
    "	ld.shared.f32 	%f2793, [%rd15+756];\n"
    "	mov.f32 	%f2794, %f10;\n"
    "	sub.f32 	%f2795, %f2794, %f2793;\n"
    "	mov.f32 	%f2796, %f2795;\n"
    "	mov.f32 	%f2797, %f2796;\n"
    "	mul.f32 	%f2798, %f14, %f2796;\n"
    "	cvt.rni.f32.f32 	%f2799, %f2798;\n"
    "	mul.f32 	%f2800, %f13, %f2799;\n"
    "	sub.f32 	%f37, %f2795, %f2800;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2801, %f37, %f37, %f2792;\n"
    "	ld.shared.f32 	%f2802, [%rd15+760];\n"
    "	mov.f32 	%f2803, %f12;\n"
    "	sub.f32 	%f2804, %f2803, %f2802;\n"
    "	mov.f32 	%f2805, %f2804;\n"
    "	mul.f32 	%f2806, %f2804, %f14;\n"
    "	cvt.rni.f32.f32 	%f2807, %f2806;\n"
    "	mul.f32 	%f2808, %f13, %f2807;\n"
    "	sub.f32 	%f47, %f2804, %f2808;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2801;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd111, %r27;\n"
    "	mul.wide.s32 	%rd112, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd112;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f2809, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2810, %f54, %f2809;\n"
    "	cvt.rzi.f32.f32 	%f57, %f2810;\n"
    "	mov.f32 	%f2811, %f57;\n"
    "	mov.f32 	%f2812, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2813, %f2812;\n"
    "	mov.f32 	%f2814, %f54;\n"
    "	mad.f32 %f2815, %f2811, %f2813, %f2814;\n"
    "	mov.f32 	%f63, %f2815;\n"
    "	mov.f32 	%f2816, %f57;\n"
    "	mov.f32 	%f2817, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2818, %f2817;\n"
    "	mov.f32 	%f2819, %f63;\n"
    "	mad.f32 %f2820, %f2816, %f2818, %f2819;\n"
    "	mov.f32 	%f63, %f2820;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f2821, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f2821;\n"
    "	mov.f32 	%f2822, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f2822;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f2823, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f2823;\n"
    "	mov.f32 	%f2824, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f2824;\n"
    "	mov.f32 	%f2825, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f2825;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f2826, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f2826;\n"
    "	mov.f32 	%f2827, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f2827;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f2828, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f2828, %f93, %p4;\n"
    "	mov.f32 	%f2829, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f2829, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f2830, %f73, %f99;\n"
    "	sub.f32 	%f101, %f2830, %f88;\n"
    "	mul.f32 	%f2831, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f2831;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f2832, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f2832, %f104, %p2;\n"
    "	mov.f32 	%f2833, %f2;\n"
    "	mov.f32 	%f2834, %f26;\n"
    "	mad.f32 	%f2835, %f2834, %f106, %f2833;\n"
    "	mov.f32 	%f2, %f2835;\n"
    "	mov.f32 	%f2836, %f4;\n"
    "	mov.f32 	%f2837, %f38;\n"
    "	mad.f32 	%f2838, %f2837, %f106, %f2836;\n"
    "	mov.f32 	%f4, %f2838;\n"
    "	mov.f32 	%f2839, %f6;\n"
    "	mov.f32 	%f2840, %f48;\n"
    "	mad.f32 	%f2841, %f2840, %f106, %f2839;\n"
    "	mov.f32 	%f6, %f2841;\n"
    "	ld.shared.s32 	%r75, [%rd14+780];\n"
    "	add.s32 	%r27, %r75, %r6;\n"
    "	ld.shared.f32 	%f2842, [%rd15+768];\n"
    "	mov.f32 	%f2843, %f8;\n"
    "	sub.f32 	%f2844, %f2843, %f2842;\n"
    "	mov.f32 	%f2845, %f2844;\n"
    "	mul.f32 	%f2846, %f14, %f2845;\n"
    "	cvt.rni.f32.f32 	%f2847, %f2846;\n"
    "	mul.f32 	%f2848, %f13, %f2847;\n"
    "	sub.f32 	%f25, %f2844, %f2848;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2849, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2850, %f25, %f25, %f2849;\n"
    "	ld.shared.f32 	%f2851, [%rd15+772];\n"
    "	mov.f32 	%f2852, %f10;\n"
    "	sub.f32 	%f2853, %f2852, %f2851;\n"
    "	mov.f32 	%f2854, %f2853;\n"
    "	mov.f32 	%f2855, %f2854;\n"
    "	mul.f32 	%f2856, %f14, %f2854;\n"
    "	cvt.rni.f32.f32 	%f2857, %f2856;\n"
    "	mul.f32 	%f2858, %f13, %f2857;\n"
    "	sub.f32 	%f37, %f2853, %f2858;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2859, %f37, %f37, %f2850;\n"
    "	ld.shared.f32 	%f2860, [%rd15+776];\n"
    "	mov.f32 	%f2861, %f12;\n"
    "	sub.f32 	%f2862, %f2861, %f2860;\n"
    "	mov.f32 	%f2863, %f2862;\n"
    "	mul.f32 	%f2864, %f2862, %f14;\n"
    "	cvt.rni.f32.f32 	%f2865, %f2864;\n"
    "	mul.f32 	%f2866, %f13, %f2865;\n"
    "	sub.f32 	%f47, %f2862, %f2866;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2859;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd113, %r27;\n"
    "	mul.wide.s32 	%rd114, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd114;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f2867, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2868, %f54, %f2867;\n"
    "	cvt.rzi.f32.f32 	%f57, %f2868;\n"
    "	mov.f32 	%f2869, %f57;\n"
    "	mov.f32 	%f2870, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2871, %f2870;\n"
    "	mov.f32 	%f2872, %f54;\n"
    "	mad.f32 %f2873, %f2869, %f2871, %f2872;\n"
    "	mov.f32 	%f63, %f2873;\n"
    "	mov.f32 	%f2874, %f57;\n"
    "	mov.f32 	%f2875, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2876, %f2875;\n"
    "	mov.f32 	%f2877, %f63;\n"
    "	mad.f32 %f2878, %f2874, %f2876, %f2877;\n"
    "	mov.f32 	%f63, %f2878;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f2879, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f2879;\n"
    "	mov.f32 	%f2880, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f2880;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f2881, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f2881;\n"
    "	mov.f32 	%f2882, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f2882;\n"
    "	mov.f32 	%f2883, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f2883;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f2884, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f2884;\n"
    "	mov.f32 	%f2885, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f2885;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f2886, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f2886, %f93, %p4;\n"
    "	mov.f32 	%f2887, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f2887, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f2888, %f73, %f99;\n"
    "	sub.f32 	%f101, %f2888, %f88;\n"
    "	mul.f32 	%f2889, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f2889;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f2890, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f2890, %f104, %p2;\n"
    "	mov.f32 	%f2891, %f2;\n"
    "	mov.f32 	%f2892, %f26;\n"
    "	mad.f32 	%f2893, %f2892, %f106, %f2891;\n"
    "	mov.f32 	%f2, %f2893;\n"
    "	mov.f32 	%f2894, %f4;\n"
    "	mov.f32 	%f2895, %f38;\n"
    "	mad.f32 	%f2896, %f2895, %f106, %f2894;\n"
    "	mov.f32 	%f4, %f2896;\n"
    "	mov.f32 	%f2897, %f6;\n"
    "	mov.f32 	%f2898, %f48;\n"
    "	mad.f32 	%f2899, %f2898, %f106, %f2897;\n"
    "	mov.f32 	%f6, %f2899;\n"
    "	ld.shared.s32 	%r76, [%rd14+796];\n"
    "	add.s32 	%r27, %r76, %r6;\n"
    "	ld.shared.f32 	%f2900, [%rd15+784];\n"
    "	mov.f32 	%f2901, %f8;\n"
    "	sub.f32 	%f2902, %f2901, %f2900;\n"
    "	mov.f32 	%f2903, %f2902;\n"
    "	mul.f32 	%f2904, %f14, %f2903;\n"
    "	cvt.rni.f32.f32 	%f2905, %f2904;\n"
    "	mul.f32 	%f2906, %f13, %f2905;\n"
    "	sub.f32 	%f25, %f2902, %f2906;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2907, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2908, %f25, %f25, %f2907;\n"
    "	ld.shared.f32 	%f2909, [%rd15+788];\n"
    "	mov.f32 	%f2910, %f10;\n"
    "	sub.f32 	%f2911, %f2910, %f2909;\n"
    "	mov.f32 	%f2912, %f2911;\n"
    "	mov.f32 	%f2913, %f2912;\n"
    "	mul.f32 	%f2914, %f14, %f2912;\n"
    "	cvt.rni.f32.f32 	%f2915, %f2914;\n"
    "	mul.f32 	%f2916, %f13, %f2915;\n"
    "	sub.f32 	%f37, %f2911, %f2916;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2917, %f37, %f37, %f2908;\n"
    "	ld.shared.f32 	%f2918, [%rd15+792];\n"
    "	mov.f32 	%f2919, %f12;\n"
    "	sub.f32 	%f2920, %f2919, %f2918;\n"
    "	mov.f32 	%f2921, %f2920;\n"
    "	mul.f32 	%f2922, %f2920, %f14;\n"
    "	cvt.rni.f32.f32 	%f2923, %f2922;\n"
    "	mul.f32 	%f2924, %f13, %f2923;\n"
    "	sub.f32 	%f47, %f2920, %f2924;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2917;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd115, %r27;\n"
    "	mul.wide.s32 	%rd116, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd116;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f2925, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2926, %f54, %f2925;\n"
    "	cvt.rzi.f32.f32 	%f57, %f2926;\n"
    "	mov.f32 	%f2927, %f57;\n"
    "	mov.f32 	%f2928, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2929, %f2928;\n"
    "	mov.f32 	%f2930, %f54;\n"
    "	mad.f32 %f2931, %f2927, %f2929, %f2930;\n"
    "	mov.f32 	%f63, %f2931;\n"
    "	mov.f32 	%f2932, %f57;\n"
    "	mov.f32 	%f2933, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2934, %f2933;\n"
    "	mov.f32 	%f2935, %f63;\n"
    "	mad.f32 %f2936, %f2932, %f2934, %f2935;\n"
    "	mov.f32 	%f63, %f2936;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f2937, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f2937;\n"
    "	mov.f32 	%f2938, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f2938;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f2939, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f2939;\n"
    "	mov.f32 	%f2940, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f2940;\n"
    "	mov.f32 	%f2941, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f2941;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f2942, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f2942;\n"
    "	mov.f32 	%f2943, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f2943;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f2944, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f2944, %f93, %p4;\n"
    "	mov.f32 	%f2945, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f2945, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f2946, %f73, %f99;\n"
    "	sub.f32 	%f101, %f2946, %f88;\n"
    "	mul.f32 	%f2947, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f2947;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f2948, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f2948, %f104, %p2;\n"
    "	mov.f32 	%f2949, %f2;\n"
    "	mov.f32 	%f2950, %f26;\n"
    "	mad.f32 	%f2951, %f2950, %f106, %f2949;\n"
    "	mov.f32 	%f2, %f2951;\n"
    "	mov.f32 	%f2952, %f4;\n"
    "	mov.f32 	%f2953, %f38;\n"
    "	mad.f32 	%f2954, %f2953, %f106, %f2952;\n"
    "	mov.f32 	%f4, %f2954;\n"
    "	mov.f32 	%f2955, %f6;\n"
    "	mov.f32 	%f2956, %f48;\n"
    "	mad.f32 	%f2957, %f2956, %f106, %f2955;\n"
    "	mov.f32 	%f6, %f2957;\n"
    "	ld.shared.s32 	%r77, [%rd14+812];\n"
    "	add.s32 	%r27, %r77, %r6;\n"
    "	ld.shared.f32 	%f2958, [%rd15+800];\n"
    "	mov.f32 	%f2959, %f8;\n"
    "	sub.f32 	%f2960, %f2959, %f2958;\n"
    "	mov.f32 	%f2961, %f2960;\n"
    "	mul.f32 	%f2962, %f14, %f2961;\n"
    "	cvt.rni.f32.f32 	%f2963, %f2962;\n"
    "	mul.f32 	%f2964, %f13, %f2963;\n"
    "	sub.f32 	%f25, %f2960, %f2964;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f2965, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2966, %f25, %f25, %f2965;\n"
    "	ld.shared.f32 	%f2967, [%rd15+804];\n"
    "	mov.f32 	%f2968, %f10;\n"
    "	sub.f32 	%f2969, %f2968, %f2967;\n"
    "	mov.f32 	%f2970, %f2969;\n"
    "	mov.f32 	%f2971, %f2970;\n"
    "	mul.f32 	%f2972, %f14, %f2970;\n"
    "	cvt.rni.f32.f32 	%f2973, %f2972;\n"
    "	mul.f32 	%f2974, %f13, %f2973;\n"
    "	sub.f32 	%f37, %f2969, %f2974;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f2975, %f37, %f37, %f2966;\n"
    "	ld.shared.f32 	%f2976, [%rd15+808];\n"
    "	mov.f32 	%f2977, %f12;\n"
    "	sub.f32 	%f2978, %f2977, %f2976;\n"
    "	mov.f32 	%f2979, %f2978;\n"
    "	mul.f32 	%f2980, %f2978, %f14;\n"
    "	cvt.rni.f32.f32 	%f2981, %f2980;\n"
    "	mul.f32 	%f2982, %f13, %f2981;\n"
    "	sub.f32 	%f47, %f2978, %f2982;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f2975;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd117, %r27;\n"
    "	mul.wide.s32 	%rd118, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd118;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f2983, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2984, %f54, %f2983;\n"
    "	cvt.rzi.f32.f32 	%f57, %f2984;\n"
    "	mov.f32 	%f2985, %f57;\n"
    "	mov.f32 	%f2986, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f2987, %f2986;\n"
    "	mov.f32 	%f2988, %f54;\n"
    "	mad.f32 %f2989, %f2985, %f2987, %f2988;\n"
    "	mov.f32 	%f63, %f2989;\n"
    "	mov.f32 	%f2990, %f57;\n"
    "	mov.f32 	%f2991, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f2992, %f2991;\n"
    "	mov.f32 	%f2993, %f63;\n"
    "	mad.f32 %f2994, %f2990, %f2992, %f2993;\n"
    "	mov.f32 	%f63, %f2994;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f2995, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f2995;\n"
    "	mov.f32 	%f2996, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f2996;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f2997, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f2997;\n"
    "	mov.f32 	%f2998, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f2998;\n"
    "	mov.f32 	%f2999, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f2999;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f3000, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f3000;\n"
    "	mov.f32 	%f3001, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f3001;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f3002, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f3002, %f93, %p4;\n"
    "	mov.f32 	%f3003, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f3003, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f3004, %f73, %f99;\n"
    "	sub.f32 	%f101, %f3004, %f88;\n"
    "	mul.f32 	%f3005, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f3005;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f3006, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f3006, %f104, %p2;\n"
    "	mov.f32 	%f3007, %f2;\n"
    "	mov.f32 	%f3008, %f26;\n"
    "	mad.f32 	%f3009, %f3008, %f106, %f3007;\n"
    "	mov.f32 	%f2, %f3009;\n"
    "	mov.f32 	%f3010, %f4;\n"
    "	mov.f32 	%f3011, %f38;\n"
    "	mad.f32 	%f3012, %f3011, %f106, %f3010;\n"
    "	mov.f32 	%f4, %f3012;\n"
    "	mov.f32 	%f3013, %f6;\n"
    "	mov.f32 	%f3014, %f48;\n"
    "	mad.f32 	%f3015, %f3014, %f106, %f3013;\n"
    "	mov.f32 	%f6, %f3015;\n"
    "	ld.shared.s32 	%r78, [%rd14+828];\n"
    "	add.s32 	%r27, %r78, %r6;\n"
    "	ld.shared.f32 	%f3016, [%rd15+816];\n"
    "	mov.f32 	%f3017, %f8;\n"
    "	sub.f32 	%f3018, %f3017, %f3016;\n"
    "	mov.f32 	%f3019, %f3018;\n"
    "	mul.f32 	%f3020, %f14, %f3019;\n"
    "	cvt.rni.f32.f32 	%f3021, %f3020;\n"
    "	mul.f32 	%f3022, %f13, %f3021;\n"
    "	sub.f32 	%f25, %f3018, %f3022;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3023, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3024, %f25, %f25, %f3023;\n"
    "	ld.shared.f32 	%f3025, [%rd15+820];\n"
    "	mov.f32 	%f3026, %f10;\n"
    "	sub.f32 	%f3027, %f3026, %f3025;\n"
    "	mov.f32 	%f3028, %f3027;\n"
    "	mov.f32 	%f3029, %f3028;\n"
    "	mul.f32 	%f3030, %f14, %f3028;\n"
    "	cvt.rni.f32.f32 	%f3031, %f3030;\n"
    "	mul.f32 	%f3032, %f13, %f3031;\n"
    "	sub.f32 	%f37, %f3027, %f3032;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3033, %f37, %f37, %f3024;\n"
    "	ld.shared.f32 	%f3034, [%rd15+824];\n"
    "	mov.f32 	%f3035, %f12;\n"
    "	sub.f32 	%f3036, %f3035, %f3034;\n"
    "	mov.f32 	%f3037, %f3036;\n"
    "	mul.f32 	%f3038, %f3036, %f14;\n"
    "	cvt.rni.f32.f32 	%f3039, %f3038;\n"
    "	mul.f32 	%f3040, %f13, %f3039;\n"
    "	sub.f32 	%f47, %f3036, %f3040;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3033;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd119, %r27;\n"
    "	mul.wide.s32 	%rd120, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd120;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f3041, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3042, %f54, %f3041;\n"
    "	cvt.rzi.f32.f32 	%f57, %f3042;\n"
    "	mov.f32 	%f3043, %f57;\n"
    "	mov.f32 	%f3044, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3045, %f3044;\n"
    "	mov.f32 	%f3046, %f54;\n"
    "	mad.f32 %f3047, %f3043, %f3045, %f3046;\n"
    "	mov.f32 	%f63, %f3047;\n"
    "	mov.f32 	%f3048, %f57;\n"
    "	mov.f32 	%f3049, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3050, %f3049;\n"
    "	mov.f32 	%f3051, %f63;\n"
    "	mad.f32 %f3052, %f3048, %f3050, %f3051;\n"
    "	mov.f32 	%f63, %f3052;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f3053, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f3053;\n"
    "	mov.f32 	%f3054, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f3054;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f3055, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f3055;\n"
    "	mov.f32 	%f3056, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f3056;\n"
    "	mov.f32 	%f3057, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f3057;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f3058, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f3058;\n"
    "	mov.f32 	%f3059, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f3059;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f3060, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f3060, %f93, %p4;\n"
    "	mov.f32 	%f3061, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f3061, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f3062, %f73, %f99;\n"
    "	sub.f32 	%f101, %f3062, %f88;\n"
    "	mul.f32 	%f3063, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f3063;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f3064, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f3064, %f104, %p2;\n"
    "	mov.f32 	%f3065, %f2;\n"
    "	mov.f32 	%f3066, %f26;\n"
    "	mad.f32 	%f3067, %f3066, %f106, %f3065;\n"
    "	mov.f32 	%f2, %f3067;\n"
    "	mov.f32 	%f3068, %f4;\n"
    "	mov.f32 	%f3069, %f38;\n"
    "	mad.f32 	%f3070, %f3069, %f106, %f3068;\n"
    "	mov.f32 	%f4, %f3070;\n"
    "	mov.f32 	%f3071, %f6;\n"
    "	mov.f32 	%f3072, %f48;\n"
    "	mad.f32 	%f3073, %f3072, %f106, %f3071;\n"
    "	mov.f32 	%f6, %f3073;\n"
    "	ld.shared.s32 	%r79, [%rd14+844];\n"
    "	add.s32 	%r27, %r79, %r6;\n"
    "	ld.shared.f32 	%f3074, [%rd15+832];\n"
    "	mov.f32 	%f3075, %f8;\n"
    "	sub.f32 	%f3076, %f3075, %f3074;\n"
    "	mov.f32 	%f3077, %f3076;\n"
    "	mul.f32 	%f3078, %f14, %f3077;\n"
    "	cvt.rni.f32.f32 	%f3079, %f3078;\n"
    "	mul.f32 	%f3080, %f13, %f3079;\n"
    "	sub.f32 	%f25, %f3076, %f3080;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3081, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3082, %f25, %f25, %f3081;\n"
    "	ld.shared.f32 	%f3083, [%rd15+836];\n"
    "	mov.f32 	%f3084, %f10;\n"
    "	sub.f32 	%f3085, %f3084, %f3083;\n"
    "	mov.f32 	%f3086, %f3085;\n"
    "	mov.f32 	%f3087, %f3086;\n"
    "	mul.f32 	%f3088, %f14, %f3086;\n"
    "	cvt.rni.f32.f32 	%f3089, %f3088;\n"
    "	mul.f32 	%f3090, %f13, %f3089;\n"
    "	sub.f32 	%f37, %f3085, %f3090;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3091, %f37, %f37, %f3082;\n"
    "	ld.shared.f32 	%f3092, [%rd15+840];\n"
    "	mov.f32 	%f3093, %f12;\n"
    "	sub.f32 	%f3094, %f3093, %f3092;\n"
    "	mov.f32 	%f3095, %f3094;\n"
    "	mul.f32 	%f3096, %f3094, %f14;\n"
    "	cvt.rni.f32.f32 	%f3097, %f3096;\n"
    "	mul.f32 	%f3098, %f13, %f3097;\n"
    "	sub.f32 	%f47, %f3094, %f3098;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3091;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd121, %r27;\n"
    "	mul.wide.s32 	%rd122, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd122;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f3099, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3100, %f54, %f3099;\n"
    "	cvt.rzi.f32.f32 	%f57, %f3100;\n"
    "	mov.f32 	%f3101, %f57;\n"
    "	mov.f32 	%f3102, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3103, %f3102;\n"
    "	mov.f32 	%f3104, %f54;\n"
    "	mad.f32 %f3105, %f3101, %f3103, %f3104;\n"
    "	mov.f32 	%f63, %f3105;\n"
    "	mov.f32 	%f3106, %f57;\n"
    "	mov.f32 	%f3107, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3108, %f3107;\n"
    "	mov.f32 	%f3109, %f63;\n"
    "	mad.f32 %f3110, %f3106, %f3108, %f3109;\n"
    "	mov.f32 	%f63, %f3110;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f3111, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f3111;\n"
    "	mov.f32 	%f3112, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f3112;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f3113, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f3113;\n"
    "	mov.f32 	%f3114, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f3114;\n"
    "	mov.f32 	%f3115, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f3115;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f3116, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f3116;\n"
    "	mov.f32 	%f3117, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f3117;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f3118, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f3118, %f93, %p4;\n"
    "	mov.f32 	%f3119, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f3119, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f3120, %f73, %f99;\n"
    "	sub.f32 	%f101, %f3120, %f88;\n"
    "	mul.f32 	%f3121, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f3121;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f3122, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f3122, %f104, %p2;\n"
    "	mov.f32 	%f3123, %f2;\n"
    "	mov.f32 	%f3124, %f26;\n"
    "	mad.f32 	%f3125, %f3124, %f106, %f3123;\n"
    "	mov.f32 	%f2, %f3125;\n"
    "	mov.f32 	%f3126, %f4;\n"
    "	mov.f32 	%f3127, %f38;\n"
    "	mad.f32 	%f3128, %f3127, %f106, %f3126;\n"
    "	mov.f32 	%f4, %f3128;\n"
    "	mov.f32 	%f3129, %f6;\n"
    "	mov.f32 	%f3130, %f48;\n"
    "	mad.f32 	%f3131, %f3130, %f106, %f3129;\n"
    "	mov.f32 	%f6, %f3131;\n"
    "	ld.shared.s32 	%r80, [%rd14+860];\n"
    "	add.s32 	%r27, %r80, %r6;\n"
    "	ld.shared.f32 	%f3132, [%rd15+848];\n"
    "	mov.f32 	%f3133, %f8;\n"
    "	sub.f32 	%f3134, %f3133, %f3132;\n"
    "	mov.f32 	%f3135, %f3134;\n"
    "	mul.f32 	%f3136, %f14, %f3135;\n"
    "	cvt.rni.f32.f32 	%f3137, %f3136;\n"
    "	mul.f32 	%f3138, %f13, %f3137;\n"
    "	sub.f32 	%f25, %f3134, %f3138;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3139, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3140, %f25, %f25, %f3139;\n"
    "	ld.shared.f32 	%f3141, [%rd15+852];\n"
    "	mov.f32 	%f3142, %f10;\n"
    "	sub.f32 	%f3143, %f3142, %f3141;\n"
    "	mov.f32 	%f3144, %f3143;\n"
    "	mov.f32 	%f3145, %f3144;\n"
    "	mul.f32 	%f3146, %f14, %f3144;\n"
    "	cvt.rni.f32.f32 	%f3147, %f3146;\n"
    "	mul.f32 	%f3148, %f13, %f3147;\n"
    "	sub.f32 	%f37, %f3143, %f3148;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3149, %f37, %f37, %f3140;\n"
    "	ld.shared.f32 	%f3150, [%rd15+856];\n"
    "	mov.f32 	%f3151, %f12;\n"
    "	sub.f32 	%f3152, %f3151, %f3150;\n"
    "	mov.f32 	%f3153, %f3152;\n"
    "	mul.f32 	%f3154, %f3152, %f14;\n"
    "	cvt.rni.f32.f32 	%f3155, %f3154;\n"
    "	mul.f32 	%f3156, %f13, %f3155;\n"
    "	sub.f32 	%f47, %f3152, %f3156;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3149;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd123, %r27;\n"
    "	mul.wide.s32 	%rd124, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd124;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f3157, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3158, %f54, %f3157;\n"
    "	cvt.rzi.f32.f32 	%f57, %f3158;\n"
    "	mov.f32 	%f3159, %f57;\n"
    "	mov.f32 	%f3160, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3161, %f3160;\n"
    "	mov.f32 	%f3162, %f54;\n"
    "	mad.f32 %f3163, %f3159, %f3161, %f3162;\n"
    "	mov.f32 	%f63, %f3163;\n"
    "	mov.f32 	%f3164, %f57;\n"
    "	mov.f32 	%f3165, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3166, %f3165;\n"
    "	mov.f32 	%f3167, %f63;\n"
    "	mad.f32 %f3168, %f3164, %f3166, %f3167;\n"
    "	mov.f32 	%f63, %f3168;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f3169, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f3169;\n"
    "	mov.f32 	%f3170, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f3170;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f3171, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f3171;\n"
    "	mov.f32 	%f3172, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f3172;\n"
    "	mov.f32 	%f3173, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f3173;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f3174, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f3174;\n"
    "	mov.f32 	%f3175, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f3175;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f3176, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f3176, %f93, %p4;\n"
    "	mov.f32 	%f3177, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f3177, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f3178, %f73, %f99;\n"
    "	sub.f32 	%f101, %f3178, %f88;\n"
    "	mul.f32 	%f3179, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f3179;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f3180, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f3180, %f104, %p2;\n"
    "	mov.f32 	%f3181, %f2;\n"
    "	mov.f32 	%f3182, %f26;\n"
    "	mad.f32 	%f3183, %f3182, %f106, %f3181;\n"
    "	mov.f32 	%f2, %f3183;\n"
    "	mov.f32 	%f3184, %f4;\n"
    "	mov.f32 	%f3185, %f38;\n"
    "	mad.f32 	%f3186, %f3185, %f106, %f3184;\n"
    "	mov.f32 	%f4, %f3186;\n"
    "	mov.f32 	%f3187, %f6;\n"
    "	mov.f32 	%f3188, %f48;\n"
    "	mad.f32 	%f3189, %f3188, %f106, %f3187;\n"
    "	mov.f32 	%f6, %f3189;\n"
    "	ld.shared.s32 	%r81, [%rd14+876];\n"
    "	add.s32 	%r27, %r81, %r6;\n"
    "	ld.shared.f32 	%f3190, [%rd15+864];\n"
    "	mov.f32 	%f3191, %f8;\n"
    "	sub.f32 	%f3192, %f3191, %f3190;\n"
    "	mov.f32 	%f3193, %f3192;\n"
    "	mul.f32 	%f3194, %f14, %f3193;\n"
    "	cvt.rni.f32.f32 	%f3195, %f3194;\n"
    "	mul.f32 	%f3196, %f13, %f3195;\n"
    "	sub.f32 	%f25, %f3192, %f3196;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3197, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3198, %f25, %f25, %f3197;\n"
    "	ld.shared.f32 	%f3199, [%rd15+868];\n"
    "	mov.f32 	%f3200, %f10;\n"
    "	sub.f32 	%f3201, %f3200, %f3199;\n"
    "	mov.f32 	%f3202, %f3201;\n"
    "	mov.f32 	%f3203, %f3202;\n"
    "	mul.f32 	%f3204, %f14, %f3202;\n"
    "	cvt.rni.f32.f32 	%f3205, %f3204;\n"
    "	mul.f32 	%f3206, %f13, %f3205;\n"
    "	sub.f32 	%f37, %f3201, %f3206;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3207, %f37, %f37, %f3198;\n"
    "	ld.shared.f32 	%f3208, [%rd15+872];\n"
    "	mov.f32 	%f3209, %f12;\n"
    "	sub.f32 	%f3210, %f3209, %f3208;\n"
    "	mov.f32 	%f3211, %f3210;\n"
    "	mul.f32 	%f3212, %f3210, %f14;\n"
    "	cvt.rni.f32.f32 	%f3213, %f3212;\n"
    "	mul.f32 	%f3214, %f13, %f3213;\n"
    "	sub.f32 	%f47, %f3210, %f3214;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3207;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd125, %r27;\n"
    "	mul.wide.s32 	%rd126, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd126;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f3215, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3216, %f54, %f3215;\n"
    "	cvt.rzi.f32.f32 	%f57, %f3216;\n"
    "	mov.f32 	%f3217, %f57;\n"
    "	mov.f32 	%f3218, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3219, %f3218;\n"
    "	mov.f32 	%f3220, %f54;\n"
    "	mad.f32 %f3221, %f3217, %f3219, %f3220;\n"
    "	mov.f32 	%f63, %f3221;\n"
    "	mov.f32 	%f3222, %f57;\n"
    "	mov.f32 	%f3223, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3224, %f3223;\n"
    "	mov.f32 	%f3225, %f63;\n"
    "	mad.f32 %f3226, %f3222, %f3224, %f3225;\n"
    "	mov.f32 	%f63, %f3226;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f3227, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f3227;\n"
    "	mov.f32 	%f3228, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f3228;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f3229, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f3229;\n"
    "	mov.f32 	%f3230, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f3230;\n"
    "	mov.f32 	%f3231, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f3231;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f3232, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f3232;\n"
    "	mov.f32 	%f3233, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f3233;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f3234, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f3234, %f93, %p4;\n"
    "	mov.f32 	%f3235, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f3235, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f3236, %f73, %f99;\n"
    "	sub.f32 	%f101, %f3236, %f88;\n"
    "	mul.f32 	%f3237, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f3237;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f3238, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f3238, %f104, %p2;\n"
    "	mov.f32 	%f3239, %f2;\n"
    "	mov.f32 	%f3240, %f26;\n"
    "	mad.f32 	%f3241, %f3240, %f106, %f3239;\n"
    "	mov.f32 	%f2, %f3241;\n"
    "	mov.f32 	%f3242, %f4;\n"
    "	mov.f32 	%f3243, %f38;\n"
    "	mad.f32 	%f3244, %f3243, %f106, %f3242;\n"
    "	mov.f32 	%f4, %f3244;\n"
    "	mov.f32 	%f3245, %f6;\n"
    "	mov.f32 	%f3246, %f48;\n"
    "	mad.f32 	%f3247, %f3246, %f106, %f3245;\n"
    "	mov.f32 	%f6, %f3247;\n"
    "	ld.shared.s32 	%r82, [%rd14+892];\n"
    "	add.s32 	%r27, %r82, %r6;\n"
    "	ld.shared.f32 	%f3248, [%rd15+880];\n"
    "	mov.f32 	%f3249, %f8;\n"
    "	sub.f32 	%f3250, %f3249, %f3248;\n"
    "	mov.f32 	%f3251, %f3250;\n"
    "	mul.f32 	%f3252, %f14, %f3251;\n"
    "	cvt.rni.f32.f32 	%f3253, %f3252;\n"
    "	mul.f32 	%f3254, %f13, %f3253;\n"
    "	sub.f32 	%f25, %f3250, %f3254;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3255, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3256, %f25, %f25, %f3255;\n"
    "	ld.shared.f32 	%f3257, [%rd15+884];\n"
    "	mov.f32 	%f3258, %f10;\n"
    "	sub.f32 	%f3259, %f3258, %f3257;\n"
    "	mov.f32 	%f3260, %f3259;\n"
    "	mov.f32 	%f3261, %f3260;\n"
    "	mul.f32 	%f3262, %f14, %f3260;\n"
    "	cvt.rni.f32.f32 	%f3263, %f3262;\n"
    "	mul.f32 	%f3264, %f13, %f3263;\n"
    "	sub.f32 	%f37, %f3259, %f3264;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3265, %f37, %f37, %f3256;\n"
    "	ld.shared.f32 	%f3266, [%rd15+888];\n"
    "	mov.f32 	%f3267, %f12;\n"
    "	sub.f32 	%f3268, %f3267, %f3266;\n"
    "	mov.f32 	%f3269, %f3268;\n"
    "	mul.f32 	%f3270, %f3268, %f14;\n"
    "	cvt.rni.f32.f32 	%f3271, %f3270;\n"
    "	mul.f32 	%f3272, %f13, %f3271;\n"
    "	sub.f32 	%f47, %f3268, %f3272;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3265;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd127, %r27;\n"
    "	mul.wide.s32 	%rd128, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd128;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f3273, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3274, %f54, %f3273;\n"
    "	cvt.rzi.f32.f32 	%f57, %f3274;\n"
    "	mov.f32 	%f3275, %f57;\n"
    "	mov.f32 	%f3276, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3277, %f3276;\n"
    "	mov.f32 	%f3278, %f54;\n"
    "	mad.f32 %f3279, %f3275, %f3277, %f3278;\n"
    "	mov.f32 	%f63, %f3279;\n"
    "	mov.f32 	%f3280, %f57;\n"
    "	mov.f32 	%f3281, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3282, %f3281;\n"
    "	mov.f32 	%f3283, %f63;\n"
    "	mad.f32 %f3284, %f3280, %f3282, %f3283;\n"
    "	mov.f32 	%f63, %f3284;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f3285, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f3285;\n"
    "	mov.f32 	%f3286, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f3286;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f3287, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f3287;\n"
    "	mov.f32 	%f3288, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f3288;\n"
    "	mov.f32 	%f3289, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f3289;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f3290, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f3290;\n"
    "	mov.f32 	%f3291, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f3291;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f3292, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f3292, %f93, %p4;\n"
    "	mov.f32 	%f3293, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f3293, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f3294, %f73, %f99;\n"
    "	sub.f32 	%f101, %f3294, %f88;\n"
    "	mul.f32 	%f3295, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f3295;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f3296, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f3296, %f104, %p2;\n"
    "	mov.f32 	%f3297, %f2;\n"
    "	mov.f32 	%f3298, %f26;\n"
    "	mad.f32 	%f3299, %f3298, %f106, %f3297;\n"
    "	mov.f32 	%f2, %f3299;\n"
    "	mov.f32 	%f3300, %f4;\n"
    "	mov.f32 	%f3301, %f38;\n"
    "	mad.f32 	%f3302, %f3301, %f106, %f3300;\n"
    "	mov.f32 	%f4, %f3302;\n"
    "	mov.f32 	%f3303, %f6;\n"
    "	mov.f32 	%f3304, %f48;\n"
    "	mad.f32 	%f3305, %f3304, %f106, %f3303;\n"
    "	mov.f32 	%f6, %f3305;\n"
    "	ld.shared.s32 	%r83, [%rd14+908];\n"
    "	add.s32 	%r27, %r83, %r6;\n"
    "	ld.shared.f32 	%f3306, [%rd15+896];\n"
    "	mov.f32 	%f3307, %f8;\n"
    "	sub.f32 	%f3308, %f3307, %f3306;\n"
    "	mov.f32 	%f3309, %f3308;\n"
    "	mul.f32 	%f3310, %f14, %f3309;\n"
    "	cvt.rni.f32.f32 	%f3311, %f3310;\n"
    "	mul.f32 	%f3312, %f13, %f3311;\n"
    "	sub.f32 	%f25, %f3308, %f3312;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3313, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3314, %f25, %f25, %f3313;\n"
    "	ld.shared.f32 	%f3315, [%rd15+900];\n"
    "	mov.f32 	%f3316, %f10;\n"
    "	sub.f32 	%f3317, %f3316, %f3315;\n"
    "	mov.f32 	%f3318, %f3317;\n"
    "	mov.f32 	%f3319, %f3318;\n"
    "	mul.f32 	%f3320, %f14, %f3318;\n"
    "	cvt.rni.f32.f32 	%f3321, %f3320;\n"
    "	mul.f32 	%f3322, %f13, %f3321;\n"
    "	sub.f32 	%f37, %f3317, %f3322;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3323, %f37, %f37, %f3314;\n"
    "	ld.shared.f32 	%f3324, [%rd15+904];\n"
    "	mov.f32 	%f3325, %f12;\n"
    "	sub.f32 	%f3326, %f3325, %f3324;\n"
    "	mov.f32 	%f3327, %f3326;\n"
    "	mul.f32 	%f3328, %f3326, %f14;\n"
    "	cvt.rni.f32.f32 	%f3329, %f3328;\n"
    "	mul.f32 	%f3330, %f13, %f3329;\n"
    "	sub.f32 	%f47, %f3326, %f3330;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3323;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd129, %r27;\n"
    "	mul.wide.s32 	%rd130, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd130;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f3331, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3332, %f54, %f3331;\n"
    "	cvt.rzi.f32.f32 	%f57, %f3332;\n"
    "	mov.f32 	%f3333, %f57;\n"
    "	mov.f32 	%f3334, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3335, %f3334;\n"
    "	mov.f32 	%f3336, %f54;\n"
    "	mad.f32 %f3337, %f3333, %f3335, %f3336;\n"
    "	mov.f32 	%f63, %f3337;\n"
    "	mov.f32 	%f3338, %f57;\n"
    "	mov.f32 	%f3339, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3340, %f3339;\n"
    "	mov.f32 	%f3341, %f63;\n"
    "	mad.f32 %f3342, %f3338, %f3340, %f3341;\n"
    "	mov.f32 	%f63, %f3342;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f3343, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f3343;\n"
    "	mov.f32 	%f3344, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f3344;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f3345, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f3345;\n"
    "	mov.f32 	%f3346, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f3346;\n"
    "	mov.f32 	%f3347, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f3347;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f3348, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f3348;\n"
    "	mov.f32 	%f3349, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f3349;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f3350, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f3350, %f93, %p4;\n"
    "	mov.f32 	%f3351, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f3351, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f3352, %f73, %f99;\n"
    "	sub.f32 	%f101, %f3352, %f88;\n"
    "	mul.f32 	%f3353, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f3353;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f3354, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f3354, %f104, %p2;\n"
    "	mov.f32 	%f3355, %f2;\n"
    "	mov.f32 	%f3356, %f26;\n"
    "	mad.f32 	%f3357, %f3356, %f106, %f3355;\n"
    "	mov.f32 	%f2, %f3357;\n"
    "	mov.f32 	%f3358, %f4;\n"
    "	mov.f32 	%f3359, %f38;\n"
    "	mad.f32 	%f3360, %f3359, %f106, %f3358;\n"
    "	mov.f32 	%f4, %f3360;\n"
    "	mov.f32 	%f3361, %f6;\n"
    "	mov.f32 	%f3362, %f48;\n"
    "	mad.f32 	%f3363, %f3362, %f106, %f3361;\n"
    "	mov.f32 	%f6, %f3363;\n"
    "	ld.shared.s32 	%r84, [%rd14+924];\n"
    "	add.s32 	%r27, %r84, %r6;\n"
    "	ld.shared.f32 	%f3364, [%rd15+912];\n"
    "	mov.f32 	%f3365, %f8;\n"
    "	sub.f32 	%f3366, %f3365, %f3364;\n"
    "	mov.f32 	%f3367, %f3366;\n"
    "	mul.f32 	%f3368, %f14, %f3367;\n"
    "	cvt.rni.f32.f32 	%f3369, %f3368;\n"
    "	mul.f32 	%f3370, %f13, %f3369;\n"
    "	sub.f32 	%f25, %f3366, %f3370;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3371, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3372, %f25, %f25, %f3371;\n"
    "	ld.shared.f32 	%f3373, [%rd15+916];\n"
    "	mov.f32 	%f3374, %f10;\n"
    "	sub.f32 	%f3375, %f3374, %f3373;\n"
    "	mov.f32 	%f3376, %f3375;\n"
    "	mov.f32 	%f3377, %f3376;\n"
    "	mul.f32 	%f3378, %f14, %f3376;\n"
    "	cvt.rni.f32.f32 	%f3379, %f3378;\n"
    "	mul.f32 	%f3380, %f13, %f3379;\n"
    "	sub.f32 	%f37, %f3375, %f3380;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3381, %f37, %f37, %f3372;\n"
    "	ld.shared.f32 	%f3382, [%rd15+920];\n"
    "	mov.f32 	%f3383, %f12;\n"
    "	sub.f32 	%f3384, %f3383, %f3382;\n"
    "	mov.f32 	%f3385, %f3384;\n"
    "	mul.f32 	%f3386, %f3384, %f14;\n"
    "	cvt.rni.f32.f32 	%f3387, %f3386;\n"
    "	mul.f32 	%f3388, %f13, %f3387;\n"
    "	sub.f32 	%f47, %f3384, %f3388;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3381;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd131, %r27;\n"
    "	mul.wide.s32 	%rd132, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd132;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f3389, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3390, %f54, %f3389;\n"
    "	cvt.rzi.f32.f32 	%f57, %f3390;\n"
    "	mov.f32 	%f3391, %f57;\n"
    "	mov.f32 	%f3392, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3393, %f3392;\n"
    "	mov.f32 	%f3394, %f54;\n"
    "	mad.f32 %f3395, %f3391, %f3393, %f3394;\n"
    "	mov.f32 	%f63, %f3395;\n"
    "	mov.f32 	%f3396, %f57;\n"
    "	mov.f32 	%f3397, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3398, %f3397;\n"
    "	mov.f32 	%f3399, %f63;\n"
    "	mad.f32 %f3400, %f3396, %f3398, %f3399;\n"
    "	mov.f32 	%f63, %f3400;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f3401, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f3401;\n"
    "	mov.f32 	%f3402, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f3402;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f3403, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f3403;\n"
    "	mov.f32 	%f3404, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f3404;\n"
    "	mov.f32 	%f3405, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f3405;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f3406, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f3406;\n"
    "	mov.f32 	%f3407, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f3407;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f3408, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f3408, %f93, %p4;\n"
    "	mov.f32 	%f3409, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f3409, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f3410, %f73, %f99;\n"
    "	sub.f32 	%f101, %f3410, %f88;\n"
    "	mul.f32 	%f3411, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f3411;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f3412, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f3412, %f104, %p2;\n"
    "	mov.f32 	%f3413, %f2;\n"
    "	mov.f32 	%f3414, %f26;\n"
    "	mad.f32 	%f3415, %f3414, %f106, %f3413;\n"
    "	mov.f32 	%f2, %f3415;\n"
    "	mov.f32 	%f3416, %f4;\n"
    "	mov.f32 	%f3417, %f38;\n"
    "	mad.f32 	%f3418, %f3417, %f106, %f3416;\n"
    "	mov.f32 	%f4, %f3418;\n"
    "	mov.f32 	%f3419, %f6;\n"
    "	mov.f32 	%f3420, %f48;\n"
    "	mad.f32 	%f3421, %f3420, %f106, %f3419;\n"
    "	mov.f32 	%f6, %f3421;\n"
    "	ld.shared.s32 	%r85, [%rd14+940];\n"
    "	add.s32 	%r27, %r85, %r6;\n"
    "	ld.shared.f32 	%f3422, [%rd15+928];\n"
    "	mov.f32 	%f3423, %f8;\n"
    "	sub.f32 	%f3424, %f3423, %f3422;\n"
    "	mov.f32 	%f3425, %f3424;\n"
    "	mul.f32 	%f3426, %f14, %f3425;\n"
    "	cvt.rni.f32.f32 	%f3427, %f3426;\n"
    "	mul.f32 	%f3428, %f13, %f3427;\n"
    "	sub.f32 	%f25, %f3424, %f3428;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3429, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3430, %f25, %f25, %f3429;\n"
    "	ld.shared.f32 	%f3431, [%rd15+932];\n"
    "	mov.f32 	%f3432, %f10;\n"
    "	sub.f32 	%f3433, %f3432, %f3431;\n"
    "	mov.f32 	%f3434, %f3433;\n"
    "	mov.f32 	%f3435, %f3434;\n"
    "	mul.f32 	%f3436, %f14, %f3434;\n"
    "	cvt.rni.f32.f32 	%f3437, %f3436;\n"
    "	mul.f32 	%f3438, %f13, %f3437;\n"
    "	sub.f32 	%f37, %f3433, %f3438;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3439, %f37, %f37, %f3430;\n"
    "	ld.shared.f32 	%f3440, [%rd15+936];\n"
    "	mov.f32 	%f3441, %f12;\n"
    "	sub.f32 	%f3442, %f3441, %f3440;\n"
    "	mov.f32 	%f3443, %f3442;\n"
    "	mul.f32 	%f3444, %f3442, %f14;\n"
    "	cvt.rni.f32.f32 	%f3445, %f3444;\n"
    "	mul.f32 	%f3446, %f13, %f3445;\n"
    "	sub.f32 	%f47, %f3442, %f3446;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3439;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd133, %r27;\n"
    "	mul.wide.s32 	%rd134, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd134;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f3447, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3448, %f54, %f3447;\n"
    "	cvt.rzi.f32.f32 	%f57, %f3448;\n"
    "	mov.f32 	%f3449, %f57;\n"
    "	mov.f32 	%f3450, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3451, %f3450;\n"
    "	mov.f32 	%f3452, %f54;\n"
    "	mad.f32 %f3453, %f3449, %f3451, %f3452;\n"
    "	mov.f32 	%f63, %f3453;\n"
    "	mov.f32 	%f3454, %f57;\n"
    "	mov.f32 	%f3455, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3456, %f3455;\n"
    "	mov.f32 	%f3457, %f63;\n"
    "	mad.f32 %f3458, %f3454, %f3456, %f3457;\n"
    "	mov.f32 	%f63, %f3458;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f3459, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f3459;\n"
    "	mov.f32 	%f3460, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f3460;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f3461, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f3461;\n"
    "	mov.f32 	%f3462, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f3462;\n"
    "	mov.f32 	%f3463, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f3463;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f3464, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f3464;\n"
    "	mov.f32 	%f3465, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f3465;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f3466, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f3466, %f93, %p4;\n"
    "	mov.f32 	%f3467, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f3467, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f3468, %f73, %f99;\n"
    "	sub.f32 	%f101, %f3468, %f88;\n"
    "	mul.f32 	%f3469, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f3469;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f3470, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f3470, %f104, %p2;\n"
    "	mov.f32 	%f3471, %f2;\n"
    "	mov.f32 	%f3472, %f26;\n"
    "	mad.f32 	%f3473, %f3472, %f106, %f3471;\n"
    "	mov.f32 	%f2, %f3473;\n"
    "	mov.f32 	%f3474, %f4;\n"
    "	mov.f32 	%f3475, %f38;\n"
    "	mad.f32 	%f3476, %f3475, %f106, %f3474;\n"
    "	mov.f32 	%f4, %f3476;\n"
    "	mov.f32 	%f3477, %f6;\n"
    "	mov.f32 	%f3478, %f48;\n"
    "	mad.f32 	%f3479, %f3478, %f106, %f3477;\n"
    "	mov.f32 	%f6, %f3479;\n"
    "	ld.shared.s32 	%r86, [%rd14+956];\n"
    "	add.s32 	%r27, %r86, %r6;\n"
    "	ld.shared.f32 	%f3480, [%rd15+944];\n"
    "	mov.f32 	%f3481, %f8;\n"
    "	sub.f32 	%f3482, %f3481, %f3480;\n"
    "	mov.f32 	%f3483, %f3482;\n"
    "	mul.f32 	%f3484, %f14, %f3483;\n"
    "	cvt.rni.f32.f32 	%f3485, %f3484;\n"
    "	mul.f32 	%f3486, %f13, %f3485;\n"
    "	sub.f32 	%f25, %f3482, %f3486;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3487, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3488, %f25, %f25, %f3487;\n"
    "	ld.shared.f32 	%f3489, [%rd15+948];\n"
    "	mov.f32 	%f3490, %f10;\n"
    "	sub.f32 	%f3491, %f3490, %f3489;\n"
    "	mov.f32 	%f3492, %f3491;\n"
    "	mov.f32 	%f3493, %f3492;\n"
    "	mul.f32 	%f3494, %f14, %f3492;\n"
    "	cvt.rni.f32.f32 	%f3495, %f3494;\n"
    "	mul.f32 	%f3496, %f13, %f3495;\n"
    "	sub.f32 	%f37, %f3491, %f3496;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3497, %f37, %f37, %f3488;\n"
    "	ld.shared.f32 	%f3498, [%rd15+952];\n"
    "	mov.f32 	%f3499, %f12;\n"
    "	sub.f32 	%f3500, %f3499, %f3498;\n"
    "	mov.f32 	%f3501, %f3500;\n"
    "	mul.f32 	%f3502, %f3500, %f14;\n"
    "	cvt.rni.f32.f32 	%f3503, %f3502;\n"
    "	mul.f32 	%f3504, %f13, %f3503;\n"
    "	sub.f32 	%f47, %f3500, %f3504;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3497;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd135, %r27;\n"
    "	mul.wide.s32 	%rd136, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd136;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f3505, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3506, %f54, %f3505;\n"
    "	cvt.rzi.f32.f32 	%f57, %f3506;\n"
    "	mov.f32 	%f3507, %f57;\n"
    "	mov.f32 	%f3508, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3509, %f3508;\n"
    "	mov.f32 	%f3510, %f54;\n"
    "	mad.f32 %f3511, %f3507, %f3509, %f3510;\n"
    "	mov.f32 	%f63, %f3511;\n"
    "	mov.f32 	%f3512, %f57;\n"
    "	mov.f32 	%f3513, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3514, %f3513;\n"
    "	mov.f32 	%f3515, %f63;\n"
    "	mad.f32 %f3516, %f3512, %f3514, %f3515;\n"
    "	mov.f32 	%f63, %f3516;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f3517, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f3517;\n"
    "	mov.f32 	%f3518, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f3518;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f3519, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f3519;\n"
    "	mov.f32 	%f3520, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f3520;\n"
    "	mov.f32 	%f3521, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f3521;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f3522, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f3522;\n"
    "	mov.f32 	%f3523, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f3523;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f3524, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f3524, %f93, %p4;\n"
    "	mov.f32 	%f3525, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f3525, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f3526, %f73, %f99;\n"
    "	sub.f32 	%f101, %f3526, %f88;\n"
    "	mul.f32 	%f3527, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f3527;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f3528, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f3528, %f104, %p2;\n"
    "	mov.f32 	%f3529, %f2;\n"
    "	mov.f32 	%f3530, %f26;\n"
    "	mad.f32 	%f3531, %f3530, %f106, %f3529;\n"
    "	mov.f32 	%f2, %f3531;\n"
    "	mov.f32 	%f3532, %f4;\n"
    "	mov.f32 	%f3533, %f38;\n"
    "	mad.f32 	%f3534, %f3533, %f106, %f3532;\n"
    "	mov.f32 	%f4, %f3534;\n"
    "	mov.f32 	%f3535, %f6;\n"
    "	mov.f32 	%f3536, %f48;\n"
    "	mad.f32 	%f3537, %f3536, %f106, %f3535;\n"
    "	mov.f32 	%f6, %f3537;\n"
    "	ld.shared.s32 	%r87, [%rd14+972];\n"
    "	add.s32 	%r27, %r87, %r6;\n"
    "	ld.shared.f32 	%f3538, [%rd15+960];\n"
    "	mov.f32 	%f3539, %f8;\n"
    "	sub.f32 	%f3540, %f3539, %f3538;\n"
    "	mov.f32 	%f3541, %f3540;\n"
    "	mul.f32 	%f3542, %f14, %f3541;\n"
    "	cvt.rni.f32.f32 	%f3543, %f3542;\n"
    "	mul.f32 	%f3544, %f13, %f3543;\n"
    "	sub.f32 	%f25, %f3540, %f3544;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3545, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3546, %f25, %f25, %f3545;\n"
    "	ld.shared.f32 	%f3547, [%rd15+964];\n"
    "	mov.f32 	%f3548, %f10;\n"
    "	sub.f32 	%f3549, %f3548, %f3547;\n"
    "	mov.f32 	%f3550, %f3549;\n"
    "	mov.f32 	%f3551, %f3550;\n"
    "	mul.f32 	%f3552, %f14, %f3550;\n"
    "	cvt.rni.f32.f32 	%f3553, %f3552;\n"
    "	mul.f32 	%f3554, %f13, %f3553;\n"
    "	sub.f32 	%f37, %f3549, %f3554;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3555, %f37, %f37, %f3546;\n"
    "	ld.shared.f32 	%f3556, [%rd15+968];\n"
    "	mov.f32 	%f3557, %f12;\n"
    "	sub.f32 	%f3558, %f3557, %f3556;\n"
    "	mov.f32 	%f3559, %f3558;\n"
    "	mul.f32 	%f3560, %f3558, %f14;\n"
    "	cvt.rni.f32.f32 	%f3561, %f3560;\n"
    "	mul.f32 	%f3562, %f13, %f3561;\n"
    "	sub.f32 	%f47, %f3558, %f3562;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3555;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd137, %r27;\n"
    "	mul.wide.s32 	%rd138, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd138;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f3563, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3564, %f54, %f3563;\n"
    "	cvt.rzi.f32.f32 	%f57, %f3564;\n"
    "	mov.f32 	%f3565, %f57;\n"
    "	mov.f32 	%f3566, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3567, %f3566;\n"
    "	mov.f32 	%f3568, %f54;\n"
    "	mad.f32 %f3569, %f3565, %f3567, %f3568;\n"
    "	mov.f32 	%f63, %f3569;\n"
    "	mov.f32 	%f3570, %f57;\n"
    "	mov.f32 	%f3571, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3572, %f3571;\n"
    "	mov.f32 	%f3573, %f63;\n"
    "	mad.f32 %f3574, %f3570, %f3572, %f3573;\n"
    "	mov.f32 	%f63, %f3574;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f3575, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f3575;\n"
    "	mov.f32 	%f3576, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f3576;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f3577, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f3577;\n"
    "	mov.f32 	%f3578, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f3578;\n"
    "	mov.f32 	%f3579, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f3579;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f3580, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f3580;\n"
    "	mov.f32 	%f3581, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f3581;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f3582, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f3582, %f93, %p4;\n"
    "	mov.f32 	%f3583, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f3583, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f3584, %f73, %f99;\n"
    "	sub.f32 	%f101, %f3584, %f88;\n"
    "	mul.f32 	%f3585, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f3585;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f3586, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f3586, %f104, %p2;\n"
    "	mov.f32 	%f3587, %f2;\n"
    "	mov.f32 	%f3588, %f26;\n"
    "	mad.f32 	%f3589, %f3588, %f106, %f3587;\n"
    "	mov.f32 	%f2, %f3589;\n"
    "	mov.f32 	%f3590, %f4;\n"
    "	mov.f32 	%f3591, %f38;\n"
    "	mad.f32 	%f3592, %f3591, %f106, %f3590;\n"
    "	mov.f32 	%f4, %f3592;\n"
    "	mov.f32 	%f3593, %f6;\n"
    "	mov.f32 	%f3594, %f48;\n"
    "	mad.f32 	%f3595, %f3594, %f106, %f3593;\n"
    "	mov.f32 	%f6, %f3595;\n"
    "	ld.shared.s32 	%r88, [%rd14+988];\n"
    "	add.s32 	%r27, %r88, %r6;\n"
    "	ld.shared.f32 	%f3596, [%rd15+976];\n"
    "	mov.f32 	%f3597, %f8;\n"
    "	sub.f32 	%f3598, %f3597, %f3596;\n"
    "	mov.f32 	%f3599, %f3598;\n"
    "	mul.f32 	%f3600, %f14, %f3599;\n"
    "	cvt.rni.f32.f32 	%f3601, %f3600;\n"
    "	mul.f32 	%f3602, %f13, %f3601;\n"
    "	sub.f32 	%f25, %f3598, %f3602;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3603, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3604, %f25, %f25, %f3603;\n"
    "	ld.shared.f32 	%f3605, [%rd15+980];\n"
    "	mov.f32 	%f3606, %f10;\n"
    "	sub.f32 	%f3607, %f3606, %f3605;\n"
    "	mov.f32 	%f3608, %f3607;\n"
    "	mov.f32 	%f3609, %f3608;\n"
    "	mul.f32 	%f3610, %f14, %f3608;\n"
    "	cvt.rni.f32.f32 	%f3611, %f3610;\n"
    "	mul.f32 	%f3612, %f13, %f3611;\n"
    "	sub.f32 	%f37, %f3607, %f3612;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3613, %f37, %f37, %f3604;\n"
    "	ld.shared.f32 	%f3614, [%rd15+984];\n"
    "	mov.f32 	%f3615, %f12;\n"
    "	sub.f32 	%f3616, %f3615, %f3614;\n"
    "	mov.f32 	%f3617, %f3616;\n"
    "	mul.f32 	%f3618, %f3616, %f14;\n"
    "	cvt.rni.f32.f32 	%f3619, %f3618;\n"
    "	mul.f32 	%f3620, %f13, %f3619;\n"
    "	sub.f32 	%f47, %f3616, %f3620;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3613;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd139, %r27;\n"
    "	mul.wide.s32 	%rd140, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd140;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f3621, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3622, %f54, %f3621;\n"
    "	cvt.rzi.f32.f32 	%f57, %f3622;\n"
    "	mov.f32 	%f3623, %f57;\n"
    "	mov.f32 	%f3624, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3625, %f3624;\n"
    "	mov.f32 	%f3626, %f54;\n"
    "	mad.f32 %f3627, %f3623, %f3625, %f3626;\n"
    "	mov.f32 	%f63, %f3627;\n"
    "	mov.f32 	%f3628, %f57;\n"
    "	mov.f32 	%f3629, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3630, %f3629;\n"
    "	mov.f32 	%f3631, %f63;\n"
    "	mad.f32 %f3632, %f3628, %f3630, %f3631;\n"
    "	mov.f32 	%f63, %f3632;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f3633, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f3633;\n"
    "	mov.f32 	%f3634, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f3634;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f3635, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f3635;\n"
    "	mov.f32 	%f3636, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f3636;\n"
    "	mov.f32 	%f3637, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f3637;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f3638, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f3638;\n"
    "	mov.f32 	%f3639, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f3639;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f3640, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f3640, %f93, %p4;\n"
    "	mov.f32 	%f3641, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f3641, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f3642, %f73, %f99;\n"
    "	sub.f32 	%f101, %f3642, %f88;\n"
    "	mul.f32 	%f3643, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f3643;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f3644, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f3644, %f104, %p2;\n"
    "	mov.f32 	%f3645, %f2;\n"
    "	mov.f32 	%f3646, %f26;\n"
    "	mad.f32 	%f3647, %f3646, %f106, %f3645;\n"
    "	mov.f32 	%f2, %f3647;\n"
    "	mov.f32 	%f3648, %f4;\n"
    "	mov.f32 	%f3649, %f38;\n"
    "	mad.f32 	%f3650, %f3649, %f106, %f3648;\n"
    "	mov.f32 	%f4, %f3650;\n"
    "	mov.f32 	%f3651, %f6;\n"
    "	mov.f32 	%f3652, %f48;\n"
    "	mad.f32 	%f3653, %f3652, %f106, %f3651;\n"
    "	mov.f32 	%f6, %f3653;\n"
    "	ld.shared.s32 	%r89, [%rd14+1004];\n"
    "	add.s32 	%r27, %r89, %r6;\n"
    "	ld.shared.f32 	%f3654, [%rd15+992];\n"
    "	mov.f32 	%f3655, %f8;\n"
    "	sub.f32 	%f3656, %f3655, %f3654;\n"
    "	mov.f32 	%f3657, %f3656;\n"
    "	mul.f32 	%f3658, %f14, %f3657;\n"
    "	cvt.rni.f32.f32 	%f3659, %f3658;\n"
    "	mul.f32 	%f3660, %f13, %f3659;\n"
    "	sub.f32 	%f25, %f3656, %f3660;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3661, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3662, %f25, %f25, %f3661;\n"
    "	ld.shared.f32 	%f3663, [%rd15+996];\n"
    "	mov.f32 	%f3664, %f10;\n"
    "	sub.f32 	%f3665, %f3664, %f3663;\n"
    "	mov.f32 	%f3666, %f3665;\n"
    "	mov.f32 	%f3667, %f3666;\n"
    "	mul.f32 	%f3668, %f14, %f3666;\n"
    "	cvt.rni.f32.f32 	%f3669, %f3668;\n"
    "	mul.f32 	%f3670, %f13, %f3669;\n"
    "	sub.f32 	%f37, %f3665, %f3670;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3671, %f37, %f37, %f3662;\n"
    "	ld.shared.f32 	%f3672, [%rd15+1000];\n"
    "	mov.f32 	%f3673, %f12;\n"
    "	sub.f32 	%f3674, %f3673, %f3672;\n"
    "	mov.f32 	%f3675, %f3674;\n"
    "	mul.f32 	%f3676, %f3674, %f14;\n"
    "	cvt.rni.f32.f32 	%f3677, %f3676;\n"
    "	mul.f32 	%f3678, %f13, %f3677;\n"
    "	sub.f32 	%f47, %f3674, %f3678;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3671;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd141, %r27;\n"
    "	mul.wide.s32 	%rd142, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd142;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f3679, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3680, %f54, %f3679;\n"
    "	cvt.rzi.f32.f32 	%f57, %f3680;\n"
    "	mov.f32 	%f3681, %f57;\n"
    "	mov.f32 	%f3682, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3683, %f3682;\n"
    "	mov.f32 	%f3684, %f54;\n"
    "	mad.f32 %f3685, %f3681, %f3683, %f3684;\n"
    "	mov.f32 	%f63, %f3685;\n"
    "	mov.f32 	%f3686, %f57;\n"
    "	mov.f32 	%f3687, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3688, %f3687;\n"
    "	mov.f32 	%f3689, %f63;\n"
    "	mad.f32 %f3690, %f3686, %f3688, %f3689;\n"
    "	mov.f32 	%f63, %f3690;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f3691, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f3691;\n"
    "	mov.f32 	%f3692, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f3692;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f3693, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f3693;\n"
    "	mov.f32 	%f3694, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f3694;\n"
    "	mov.f32 	%f3695, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f3695;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f3696, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f3696;\n"
    "	mov.f32 	%f3697, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f3697;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f3698, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f3698, %f93, %p4;\n"
    "	mov.f32 	%f3699, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f3699, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f3700, %f73, %f99;\n"
    "	sub.f32 	%f101, %f3700, %f88;\n"
    "	mul.f32 	%f3701, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f3701;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f3702, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f3702, %f104, %p2;\n"
    "	mov.f32 	%f3703, %f2;\n"
    "	mov.f32 	%f3704, %f26;\n"
    "	mad.f32 	%f3705, %f3704, %f106, %f3703;\n"
    "	mov.f32 	%f2, %f3705;\n"
    "	mov.f32 	%f3706, %f4;\n"
    "	mov.f32 	%f3707, %f38;\n"
    "	mad.f32 	%f3708, %f3707, %f106, %f3706;\n"
    "	mov.f32 	%f4, %f3708;\n"
    "	mov.f32 	%f3709, %f6;\n"
    "	mov.f32 	%f3710, %f48;\n"
    "	mad.f32 	%f3711, %f3710, %f106, %f3709;\n"
    "	mov.f32 	%f6, %f3711;\n"
    "	ld.shared.s32 	%r90, [%rd14+1020];\n"
    "	add.s32 	%r27, %r90, %r6;\n"
    "	ld.shared.f32 	%f3712, [%rd15+1008];\n"
    "	mov.f32 	%f3713, %f8;\n"
    "	sub.f32 	%f3714, %f3713, %f3712;\n"
    "	mov.f32 	%f3715, %f3714;\n"
    "	mul.f32 	%f3716, %f14, %f3715;\n"
    "	cvt.rni.f32.f32 	%f3717, %f3716;\n"
    "	mul.f32 	%f3718, %f13, %f3717;\n"
    "	sub.f32 	%f25, %f3714, %f3718;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f3719, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3720, %f25, %f25, %f3719;\n"
    "	ld.shared.f32 	%f3721, [%rd15+1012];\n"
    "	mov.f32 	%f3722, %f10;\n"
    "	sub.f32 	%f3723, %f3722, %f3721;\n"
    "	mov.f32 	%f3724, %f3723;\n"
    "	mov.f32 	%f3725, %f3724;\n"
    "	mul.f32 	%f3726, %f14, %f3724;\n"
    "	cvt.rni.f32.f32 	%f3727, %f3726;\n"
    "	mul.f32 	%f3728, %f13, %f3727;\n"
    "	sub.f32 	%f37, %f3723, %f3728;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f3729, %f37, %f37, %f3720;\n"
    "	ld.shared.f32 	%f3730, [%rd15+1016];\n"
    "	mov.f32 	%f3731, %f12;\n"
    "	sub.f32 	%f3732, %f3731, %f3730;\n"
    "	mov.f32 	%f3733, %f3732;\n"
    "	mul.f32 	%f3734, %f3732, %f14;\n"
    "	cvt.rni.f32.f32 	%f3735, %f3734;\n"
    "	mul.f32 	%f3736, %f13, %f3735;\n"
    "	sub.f32 	%f47, %f3732, %f3736;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f3729;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd143, %r27;\n"
    "	mul.wide.s32 	%rd144, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd144;\n"
    "	ld.const.f32 	%f51, [%rd18+8];\n"
    "	ld.const.f32 	%f52, [%rd18+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f3737, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3738, %f54, %f3737;\n"
    "	cvt.rzi.f32.f32 	%f57, %f3738;\n"
    "	mov.f32 	%f3739, %f57;\n"
    "	mov.f32 	%f3740, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3741, %f3740;\n"
    "	mov.f32 	%f3742, %f54;\n"
    "	mad.f32 %f3743, %f3739, %f3741, %f3742;\n"
    "	mov.f32 	%f63, %f3743;\n"
    "	mov.f32 	%f3744, %f57;\n"
    "	mov.f32 	%f3745, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3746, %f3745;\n"
    "	mov.f32 	%f3747, %f63;\n"
    "	mad.f32 %f3748, %f3744, %f3746, %f3747;\n"
    "	mov.f32 	%f63, %f3748;\n"
    "	.loc	3	1513	0\n"
    "	mov.f32 	%f3749, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f3749;\n"
    "	mov.f32 	%f3750, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f3750;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd18+12];\n"
    "	ld.const.f32 	%f76, [%rd18+0];\n"
    "	ld.const.f32 	%f77, [%rd18+16];\n"
    "	ld.const.f32 	%f78, [%rd18+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f3751, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f82, %f75, %f3751;\n"
    "	mov.f32 	%f3752, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f3752;\n"
    "	mov.f32 	%f3753, 0f41000000;  	// 8\n"
    "	mul.f32 	%f86, %f77, %f3753;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f3754, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p3, %f54, %f3754;\n"
    "	mov.f32 	%f3755, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p4, %f54, %f3755;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f3756, 0f00000000;  	// 0\n"
    "	selp.f32 	%f95, %f3756, %f93, %p4;\n"
    "	mov.f32 	%f3757, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f3757, %f95, %p3;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f3758, %f73, %f99;\n"
    "	sub.f32 	%f101, %f3758, %f88;\n"
    "	mul.f32 	%f3759, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f3759;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f3760, 0f00000000;  	// 0\n"
    "	selp.f32 	%f106, %f3760, %f104, %p2;\n"
    "	mov.f32 	%f3761, %f2;\n"
    "	mov.f32 	%f3762, %f26;\n"
    "	mad.f32 	%f3763, %f3762, %f106, %f3761;\n"
    "	mov.f32 	%f2, %f3763;\n"
    "	mov.f32 	%f3764, %f4;\n"
    "	mov.f32 	%f3765, %f38;\n"
    "	mad.f32 	%f3766, %f3765, %f106, %f3764;\n"
    "	mov.f32 	%f4, %f3766;\n"
    "	mov.f32 	%f3767, %f6;\n"
    "	mov.f32 	%f3768, %f48;\n"
    "	mad.f32 	%f3769, %f3768, %f106, %f3767;\n"
    "	mov.f32 	%f6, %f3769;\n"
    "	add.s32 	%r25, %r25, 64;\n"
    "	add.u64 	%rd13, %rd13, 1024;\n"
    "	mov.u32 	%r91, 256;\n"
    "	setp.ne.s32 	%p5, %r25, %r91;\n"
    "	@%p5 bra 	$Lt_10_16386;\n"
    "	add.s32 	%r21, %r21, 256;\n"
    "	setp.gt.s32 	%p6, %r13, %r21;\n"
    "	@%p6 bra 	$Lt_10_15618;\n"
    "$Lt_10_15106:\n"
    "	mov.u64 	%rd9, c_matrix;\n"
    "	.loc	3	1515	0\n"
    "	mov.s32 	%r21, %r13;\n"
    "	setp.ge.s32 	%p7, %r13, %r7;\n"
    "	@%p7 bra 	$Lt_10_17154;\n"
    "	sub.s32 	%r92, %r7, %r13;\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_if_xmax];\n"
    "	rcp.approx.f32 	%f14, %f13;\n"
    "	cvt.s64.s32 	%rd145, %r13;\n"
    "	mul.wide.s32 	%rd146, %r13, 16;\n"
    "	add.u64 	%rd147, %rd1, %rd146;\n"
    "	mov.s32 	%r93, %r92;\n"
    "$Lt_10_17666:\n"
    " //<loop> Loop body line 1515, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	1516	0\n"
    "	ld.global.s32 	%r94, [%rd147+12];\n"
    "	add.s32 	%r95, %r94, %r6;\n"
    "	ld.global.f32 	%f3770, [%rd147+0];\n"
    "	mov.f32 	%f3771, %f8;\n"
    "	sub.f32 	%f3772, %f3771, %f3770;\n"
    "	mov.f32 	%f3773, %f3772;\n"
    "	mul.f32 	%f3774, %f14, %f3773;\n"
    "	cvt.rni.f32.f32 	%f3775, %f3774;\n"
    "	.loc	3	1515	0\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_if_xmax];\n"
    "	.loc	3	1516	0\n"
    "	mul.f32 	%f3776, %f13, %f3775;\n"
    "	sub.f32 	%f3777, %f3772, %f3776;\n"
    "	mov.f32 	%f3778, %f3777;\n"
    "	mov.f32 	%f3779, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3780, %f3777, %f3777, %f3779;\n"
    "	ld.global.f32 	%f3781, [%rd147+4];\n"
    "	mov.f32 	%f3782, %f10;\n"
    "	sub.f32 	%f3783, %f3782, %f3781;\n"
    "	mov.f32 	%f3784, %f3783;\n"
    "	mov.f32 	%f3785, %f3784;\n"
    "	mul.f32 	%f3786, %f14, %f3784;\n"
    "	cvt.rni.f32.f32 	%f3787, %f3786;\n"
    "	mul.f32 	%f3788, %f13, %f3787;\n"
    "	sub.f32 	%f3789, %f3783, %f3788;\n"
    "	mov.f32 	%f3790, %f3789;\n"
    "	mad.f32 	%f3791, %f3789, %f3789, %f3780;\n"
    "	ld.global.f32 	%f3792, [%rd147+8];\n"
    "	mov.f32 	%f3793, %f12;\n"
    "	sub.f32 	%f3794, %f3793, %f3792;\n"
    "	mov.f32 	%f3795, %f3794;\n"
    "	mul.f32 	%f3796, %f3794, %f14;\n"
    "	cvt.rni.f32.f32 	%f3797, %f3796;\n"
    "	mul.f32 	%f3798, %f13, %f3797;\n"
    "	sub.f32 	%f3799, %f3794, %f3798;\n"
    "	mov.f32 	%f3800, %f3799;\n"
    "	mad.f32 	%f3801, %f3799, %f3799, %f3791;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f3802, %f3801;\n"
    "	cvt.s64.s32 	%rd148, %r95;\n"
    "	mul.wide.s32 	%rd149, %r95, 24;\n"
    "	add.u64 	%rd150, %rd9, %rd149;\n"
    "	ld.const.f32 	%f3803, [%rd150+8];\n"
    "	ld.const.f32 	%f3804, [%rd150+4];\n"
    "	sub.f32 	%f3805, %f3804, %f3802;\n"
    "	mul.f32 	%f3806, %f3803, %f3805;\n"
    "	mov.f32 	%f3807, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3808, %f3806, %f3807;\n"
    "	cvt.rzi.f32.f32 	%f3809, %f3808;\n"
    "	mov.f32 	%f3810, %f3809;\n"
    "	mov.f32 	%f3811, 0fbf317200;  	// -0.693146\n"
    "	mov.f32 	%f3812, %f3811;\n"
    "	mov.f32 	%f3813, %f3806;\n"
    "	mad.f32 %f3814, %f3810, %f3812, %f3813;\n"
    "	mov.f32 	%f63, %f3814;\n"
    "	mov.f32 	%f3815, %f3809;\n"
    "	mov.f32 	%f3816, 0fb5bfbe8e;  	// -1.42861e-06\n"
    "	mov.f32 	%f3817, %f3816;\n"
    "	mov.f32 	%f3818, %f63;\n"
    "	mad.f32 %f3819, %f3815, %f3817, %f3818;\n"
    "	mov.f32 	%f63, %f3819;\n"
    "	.loc	3	1516	0\n"
    "	mov.f32 	%f3820, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p8, %f3801, %f3820;\n"
    "	mov.f32 	%f3821, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f3821;\n"
    "	rcp.approx.f32 	%f3822, %f3802;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	mul.f32 	%f3823, %f3822, %f3822;\n"
    "	ld.const.f32 	%f3824, [%rd150+12];\n"
    "	ld.const.f32 	%f3825, [%rd150+0];\n"
    "	ld.const.f32 	%f3826, [%rd150+16];\n"
    "	ld.const.f32 	%f3827, [%rd150+20];\n"
    "	mul.f32 	%f3828, %f3823, %f3823;\n"
    "	mul.f32 	%f3829, %f3822, %f3823;\n"
    "	mov.f32 	%f3830, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3831, %f3824, %f3830;\n"
    "	mov.f32 	%f3832, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3833, %f3825, %f3832;\n"
    "	mov.f32 	%f3834, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3835, %f3826, %f3834;\n"
    "	mul.f32 	%f3836, %f3828, %f3828;\n"
    "	mul.f32 	%f3837, %f3831, %f3836;\n"
    "	mul.f32 	%f3838, %f3835, %f3836;\n"
    "	mov.f32 	%f3839, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p9, %f3806, %f3839;\n"
    "	mov.f32 	%f3840, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p10, %f3806, %f3840;\n"
    "	ex2.approx.f32 	%f3841, %f3809;\n"
    "	mul.f32 	%f3842, %f72, %f3841;\n"
    "	mov.f32 	%f3843, 0f00000000;  	// 0\n"
    "	selp.f32 	%f3844, %f3843, %f3842, %p10;\n"
    "	mov.f32 	%f3845, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f3846, %f3845, %f3844, %p9;\n"
    "	mul.f32 	%f3847, %f3833, %f3846;\n"
    "	mul.f32 	%f3848, %f3803, %f3847;\n"
    "	mul.f32 	%f3849, %f3822, %f3848;\n"
    "	sub.f32 	%f3850, %f3849, %f3837;\n"
    "	mul.f32 	%f3851, %f3823, %f3838;\n"
    "	sub.f32 	%f3852, %f3850, %f3851;\n"
    "	mad.f32 	%f3853, %f3827, %f3829, %f3852;\n"
    "	mov.f32 	%f3854, 0f00000000;  	// 0\n"
    "	selp.f32 	%f3855, %f3854, %f3853, %p8;\n"
    "	mov.f32 	%f3856, %f2;\n"
    "	mov.f32 	%f3857, %f3778;\n"
    "	mad.f32 	%f3858, %f3857, %f3855, %f3856;\n"
    "	mov.f32 	%f2, %f3858;\n"
    "	mov.f32 	%f3859, %f4;\n"
    "	mov.f32 	%f3860, %f3790;\n"
    "	mad.f32 	%f3861, %f3860, %f3855, %f3859;\n"
    "	mov.f32 	%f4, %f3861;\n"
    "	mov.f32 	%f3862, %f6;\n"
    "	mov.f32 	%f3863, %f3800;\n"
    "	mad.f32 	%f3864, %f3863, %f3855, %f3862;\n"
    "	mov.f32 	%f6, %f3864;\n"
    "	add.s32 	%r21, %r21, 1;\n"
    "	add.u64 	%rd147, %rd147, 16;\n"
    "	setp.ne.s32 	%p11, %r7, %r21;\n"
    "	@%p11 bra 	$Lt_10_17666;\n"
    "$Lt_10_17154:\n"
    "	.loc	3	1518	0\n"
    "	ld.param.u64 	%rd151, [__cudaparm_nacl_kernel_if_fvec];\n"
    "	mul.lo.s32 	%r96, %r3, 3;\n"
    "	cvt.s64.s32 	%rd152, %r96;\n"
    "	mul.wide.s32 	%rd153, %r96, 4;\n"
    "	add.u64 	%rd154, %rd151, %rd153;\n"
    "	mov.f32 	%f3865, %f2;\n"
    "	st.global.f32 	[%rd154+0], %f3865;\n"
    "	mov.f32 	%f3866, %f4;\n"
    "	st.global.f32 	[%rd154+4], %f3866;\n"
    "	mov.f32 	%f3867, %f6;\n"
    "	st.global.f32 	[%rd154+8], %f3867;\n"
    "	.loc	3	1519	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel_if:\n"
    "	} // nacl_kernel_if\n"
    "\n"
    "	.entry nacl_kernel_if2 (\n"
    "		.param .u64 __cudaparm_nacl_kernel_if2_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_if2_n,\n"
    "		.param .s32 __cudaparm_nacl_kernel_if2_nat,\n"
    "		.param .f32 __cudaparm_nacl_kernel_if2_xmax,\n"
    "		.param .u64 __cudaparm_nacl_kernel_if2_fvec)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<99>;\n"
    "	.reg .u64 %rd<67>;\n"
    "	.reg .f32 %f<1071>;\n"
    "	.reg .pred %p<21>;\n"
    "	.shared .align 4 .b8 __cuda___cuda_local_var_17078_33_non_const_s_fi50568[3072];\n"
    "	.shared .align 4 .b8 __cuda___cuda_local_var_17077_35_non_const_s_xj53640[4096];\n"
    "	.loc	3	1638	0\n"
    "$LDWbegin_nacl_kernel_if2:\n"
    "	.loc	3	1650	0\n"
    "	cvt.s32.u16 	%r1, %tid.x;\n"
    "	cvt.s64.s32 	%rd1, %r1;\n"
    "	mov.u64 	%rd2, __cuda___cuda_local_var_17078_33_non_const_s_fi50568;\n"
    "	mul.wide.s32 	%rd3, %r1, 12;\n"
    "	add.u64 	%rd4, %rd2, %rd3;\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	st.shared.f32 	[%rd4+0], %f1;\n"
    "	mov.f32 	%f2, 0f00000000;     	// 0\n"
    "	st.shared.f32 	[%rd4+4], %f2;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	st.shared.f32 	[%rd4+8], %f3;\n"
    "	.loc	3	1651	0\n"
    "	and.b32 	%r2, %r1, 15;\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	mul.wide.u16 	%r3, %rh1, 16;\n"
    "	add.u32 	%r4, %r2, %r3;\n"
    "	ld.param.u64 	%rd5, [__cudaparm_nacl_kernel_if2_x];\n"
    "	cvt.s64.s32 	%rd6, %r4;\n"
    "	mul.wide.s32 	%rd7, %r4, 16;\n"
    "	add.u64 	%rd8, %rd5, %rd7;\n"
    "	ld.global.f32 	%f4, [%rd8+0];\n"
    "	mov.f32 	%f5, %f4;\n"
    "	ld.global.f32 	%f6, [%rd8+4];\n"
    "	mov.f32 	%f7, %f6;\n"
    "	ld.global.f32 	%f8, [%rd8+8];\n"
    "	mov.f32 	%f9, %f8;\n"
    "	.loc	3	1652	0\n"
    "	ld.global.s32 	%r5, [%rd8+12];\n"
    "	ld.param.s32 	%r6, [__cudaparm_nacl_kernel_if2_nat];\n"
    "	mul.lo.s32 	%r7, %r5, %r6;\n"
    "	ld.param.s32 	%r8, [__cudaparm_nacl_kernel_if2_n];\n"
    "	shr.s32 	%r9, %r8, 31;\n"
    "	mov.s32 	%r10, 255;\n"
    "	and.b32 	%r11, %r9, %r10;\n"
    "	add.s32 	%r12, %r11, %r8;\n"
    "	shr.s32 	%r13, %r12, 8;\n"
    "	shr.s32 	%r14, %r1, 31;\n"
    "	mov.s32 	%r15, 15;\n"
    "	and.b32 	%r16, %r14, %r15;\n"
    "	add.s32 	%r17, %r16, %r1;\n"
    "	shr.s32 	%r18, %r17, 4;\n"
    "	mul.lo.s32 	%r19, %r13, 256;\n"
    "	mov.u32 	%r20, 0;\n"
    "	setp.le.s32 	%p1, %r19, %r20;\n"
    "	@%p1 bra 	$Lt_11_23042;\n"
    "	mov.u64 	%rd9, __cuda___cuda_local_var_17077_35_non_const_s_xj53640;\n"
    "	ld.param.f32 	%f10, [__cudaparm_nacl_kernel_if2_xmax];\n"
    "	rcp.approx.f32 	%f11, %f10;\n"
    "	add.s32 	%r21, %r19, 255;\n"
    "	shr.s32 	%r22, %r21, 31;\n"
    "	mov.s32 	%r23, 255;\n"
    "	and.b32 	%r24, %r22, %r23;\n"
    "	add.s32 	%r25, %r24, %r21;\n"
    "	shr.s32 	%r26, %r25, 8;\n"
    "	mov.s32 	%r27, 271;\n"
    "	sub.s32 	%r28, %r27, %r18;\n"
    "	mul.lo.u64 	%rd10, %rd1, 16;\n"
    "	add.u64 	%rd11, %rd9, %rd10;\n"
    "	shr.s32 	%r29, %r28, 31;\n"
    "	mov.s32 	%r30, 15;\n"
    "	and.b32 	%r31, %r29, %r30;\n"
    "	add.s32 	%r32, %r31, %r28;\n"
    "	shr.s32 	%r33, %r32, 4;\n"
    "	shr.s32 	%r34, %r33, 31;\n"
    "	mov.s32 	%r35, 15;\n"
    "	and.b32 	%r36, %r34, %r35;\n"
    "	add.s32 	%r37, %r36, %r33;\n"
    "	shr.s32 	%r38, %r37, 4;\n"
    "	mul.lo.s32 	%r39, %r38, 256;\n"
    "	add.s32 	%r40, %r18, %r39;\n"
    "	setp.lt.s32 	%p2, %r18, %r40;\n"
    "	mov.s32 	%r41, 0;\n"
    "	mov.u64 	%rd12, c_matrix;\n"
    "	mov.s32 	%r42, %r26;\n"
    "$Lt_11_23554:\n"
    " //<loop> Loop body line 1652, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	1657	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	1658	0\n"
    "	add.s32 	%r43, %r41, %r1;\n"
    "	cvt.s64.s32 	%rd13, %r43;\n"
    "	mul.wide.s32 	%rd14, %r43, 16;\n"
    "	add.u64 	%rd15, %rd5, %rd14;\n"
    "	ld.global.f32 	%f12, [%rd15+0];\n"
    "	st.shared.f32 	[%rd11+0], %f12;\n"
    "	ld.global.f32 	%f13, [%rd15+4];\n"
    "	st.shared.f32 	[%rd11+4], %f13;\n"
    "	ld.global.f32 	%f14, [%rd15+8];\n"
    "	st.shared.f32 	[%rd11+8], %f14;\n"
    "	ld.global.s32 	%r44, [%rd15+12];\n"
    "	st.shared.s32 	[%rd11+12], %r44;\n"
    "	.loc	3	1659	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	24	0\n"
    "	mov.s32 	%r45, %r18;\n"
    "	@!%p2 bra 	$Lt_11_23810;\n"
    "	add.s32 	%r46, %r39, 255;\n"
    "	shr.s32 	%r47, %r46, 31;\n"
    "	mov.s32 	%r48, 255;\n"
    "	and.b32 	%r49, %r47, %r48;\n"
    "	add.s32 	%r50, %r49, %r46;\n"
    "	shr.s32 	%r51, %r50, 8;\n"
    "	cvt.s64.s32 	%rd16, %r18;\n"
    "	mul.wide.s32 	%rd17, %r18, 16;\n"
    "	ld.shared.f32 	%f15, [%rd4+0];\n"
    "	ld.shared.f32 	%f16, [%rd4+4];\n"
    "	ld.shared.f32 	%f17, [%rd4+8];\n"
    "	mov.s32 	%r52, %r51;\n"
    "$Lt_11_24322:\n"
    " //<loop> Loop body line 24, nesting depth: 2, estimated iterations: unknown\n"
    "	.loc	3	1662	0\n"
    "	add.u64 	%rd18, %rd17, %rd9;\n"
    "	ld.shared.s32 	%r53, [%rd18+12];\n"
    "	add.s32 	%r54, %r53, %r7;\n"
    "	add.u64 	%rd19, %rd17, %rd9;\n"
    "	ld.shared.f32 	%f18, [%rd19+0];\n"
    "	mov.f32 	%f19, %f5;\n"
    "	sub.f32 	%f20, %f19, %f18;\n"
    "	mov.f32 	%f21, %f20;\n"
    "	mul.f32 	%f22, %f11, %f21;\n"
    "	cvt.rni.f32.f32 	%f23, %f22;\n"
    "	mul.f32 	%f24, %f10, %f23;\n"
    "	sub.f32 	%f25, %f20, %f24;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f27, 0f00000000;    	// 0\n"
    "	mad.f32 	%f28, %f25, %f25, %f27;\n"
    "	ld.shared.f32 	%f29, [%rd19+4];\n"
    "	mov.f32 	%f30, %f7;\n"
    "	sub.f32 	%f31, %f30, %f29;\n"
    "	mov.f32 	%f32, %f31;\n"
    "	mov.f32 	%f33, %f32;\n"
    "	mul.f32 	%f34, %f11, %f32;\n"
    "	cvt.rni.f32.f32 	%f35, %f34;\n"
    "	mul.f32 	%f36, %f10, %f35;\n"
    "	sub.f32 	%f37, %f31, %f36;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f39, %f37, %f37, %f28;\n"
    "	ld.shared.f32 	%f40, [%rd19+8];\n"
    "	mov.f32 	%f41, %f9;\n"
    "	sub.f32 	%f42, %f41, %f40;\n"
    "	mov.f32 	%f43, %f42;\n"
    "	mul.f32 	%f44, %f42, %f11;\n"
    "	cvt.rni.f32.f32 	%f45, %f44;\n"
    "	mul.f32 	%f46, %f10, %f45;\n"
    "	sub.f32 	%f47, %f42, %f46;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f39;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd20, %r54;\n"
    "	mul.wide.s32 	%rd21, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd21;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f55, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f56, %f54, %f55;\n"
    "	cvt.rzi.f32.f32 	%f57, %f56;\n"
    "	mov.f32 	%f58, %f57;\n"
    "	mov.f32 	%f59, 0fbf317200;    	// -0.693146\n"
    "	mov.f32 	%f60, %f59;\n"
    "	mov.f32 	%f61, %f54;\n"
    "	mad.f32 %f62, %f58, %f60, %f61;\n"
    "	mov.f32 	%f63, %f62;\n"
    "	mov.f32 	%f64, %f57;\n"
    "	mov.f32 	%f65, 0fb5bfbe8e;    	// -1.42861e-06\n"
    "	mov.f32 	%f66, %f65;\n"
    "	mov.f32 	%f67, %f63;\n"
    "	mad.f32 %f68, %f64, %f66, %f67;\n"
    "	mov.f32 	%f63, %f68;\n"
    "	.loc	3	1662	0\n"
    "	mov.f32 	%f69, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f69;\n"
    "	mov.f32 	%f71, 0f00000000;    	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f71;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd22+12];\n"
    "	ld.const.f32 	%f76, [%rd22+0];\n"
    "	ld.const.f32 	%f77, [%rd22+16];\n"
    "	ld.const.f32 	%f78, [%rd22+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f81, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f82, %f75, %f81;\n"
    "	mov.f32 	%f83, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f83;\n"
    "	mov.f32 	%f85, 0f41000000;    	// 8\n"
    "	mul.f32 	%f86, %f77, %f85;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f90, 0f42d20000;    	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f90;\n"
    "	mov.f32 	%f91, 0fc2d20000;    	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f91;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f94, 0f00000000;    	// 0\n"
    "	selp.f32 	%f95, %f94, %f93, %p5;\n"
    "	mov.f32 	%f96, 0f7f800000;    	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f96, %f95, %p4;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f100, %f73, %f99;\n"
    "	sub.f32 	%f101, %f100, %f88;\n"
    "	mul.f32 	%f102, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f102;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f105, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f105, %f104, %p3;\n"
    "	mov.f32 	%f107, %f26;\n"
    "	mad.f32 	%f15, %f107, %f106, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f108, %f38;\n"
    "	mad.f32 	%f16, %f108, %f106, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f109, %f48;\n"
    "	mad.f32 	%f17, %f109, %f106, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	ld.shared.s32 	%r55, [%rd18+268];\n"
    "	add.s32 	%r54, %r55, %r7;\n"
    "	ld.shared.f32 	%f110, [%rd19+256];\n"
    "	mov.f32 	%f111, %f5;\n"
    "	sub.f32 	%f112, %f111, %f110;\n"
    "	mov.f32 	%f113, %f112;\n"
    "	mul.f32 	%f114, %f11, %f113;\n"
    "	cvt.rni.f32.f32 	%f115, %f114;\n"
    "	mul.f32 	%f116, %f10, %f115;\n"
    "	sub.f32 	%f25, %f112, %f116;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f117, 0f00000000;   	// 0\n"
    "	mad.f32 	%f118, %f25, %f25, %f117;\n"
    "	ld.shared.f32 	%f119, [%rd19+260];\n"
    "	mov.f32 	%f120, %f7;\n"
    "	sub.f32 	%f121, %f120, %f119;\n"
    "	mov.f32 	%f122, %f121;\n"
    "	mov.f32 	%f123, %f122;\n"
    "	mul.f32 	%f124, %f11, %f122;\n"
    "	cvt.rni.f32.f32 	%f125, %f124;\n"
    "	mul.f32 	%f126, %f10, %f125;\n"
    "	sub.f32 	%f37, %f121, %f126;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f127, %f37, %f37, %f118;\n"
    "	ld.shared.f32 	%f128, [%rd19+264];\n"
    "	mov.f32 	%f129, %f9;\n"
    "	sub.f32 	%f130, %f129, %f128;\n"
    "	mov.f32 	%f131, %f130;\n"
    "	mul.f32 	%f132, %f130, %f11;\n"
    "	cvt.rni.f32.f32 	%f133, %f132;\n"
    "	mul.f32 	%f134, %f10, %f133;\n"
    "	sub.f32 	%f47, %f130, %f134;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f127;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd23, %r54;\n"
    "	mul.wide.s32 	%rd24, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd24;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f135, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f136, %f54, %f135;\n"
    "	cvt.rzi.f32.f32 	%f57, %f136;\n"
    "	mov.f32 	%f137, %f57;\n"
    "	mov.f32 	%f138, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f139, %f138;\n"
    "	mov.f32 	%f140, %f54;\n"
    "	mad.f32 %f141, %f137, %f139, %f140;\n"
    "	mov.f32 	%f63, %f141;\n"
    "	mov.f32 	%f142, %f57;\n"
    "	mov.f32 	%f143, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f144, %f143;\n"
    "	mov.f32 	%f145, %f63;\n"
    "	mad.f32 %f146, %f142, %f144, %f145;\n"
    "	mov.f32 	%f63, %f146;\n"
    "	.loc	3	1662	0\n"
    "	mov.f32 	%f147, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f147;\n"
    "	mov.f32 	%f148, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f148;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd22+12];\n"
    "	ld.const.f32 	%f76, [%rd22+0];\n"
    "	ld.const.f32 	%f77, [%rd22+16];\n"
    "	ld.const.f32 	%f78, [%rd22+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f149, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f149;\n"
    "	mov.f32 	%f150, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f150;\n"
    "	mov.f32 	%f151, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f151;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f152, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f152;\n"
    "	mov.f32 	%f153, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f153;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f154, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f154, %f93, %p5;\n"
    "	mov.f32 	%f155, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f155, %f95, %p4;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f156, %f73, %f99;\n"
    "	sub.f32 	%f101, %f156, %f88;\n"
    "	mul.f32 	%f157, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f157;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f158, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f158, %f104, %p3;\n"
    "	mov.f32 	%f159, %f26;\n"
    "	mad.f32 	%f15, %f159, %f106, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f160, %f38;\n"
    "	mad.f32 	%f16, %f160, %f106, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f161, %f48;\n"
    "	mad.f32 	%f17, %f161, %f106, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	ld.shared.s32 	%r56, [%rd18+524];\n"
    "	add.s32 	%r54, %r56, %r7;\n"
    "	ld.shared.f32 	%f162, [%rd19+512];\n"
    "	mov.f32 	%f163, %f5;\n"
    "	sub.f32 	%f164, %f163, %f162;\n"
    "	mov.f32 	%f165, %f164;\n"
    "	mul.f32 	%f166, %f11, %f165;\n"
    "	cvt.rni.f32.f32 	%f167, %f166;\n"
    "	mul.f32 	%f168, %f10, %f167;\n"
    "	sub.f32 	%f25, %f164, %f168;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f169, 0f00000000;   	// 0\n"
    "	mad.f32 	%f170, %f25, %f25, %f169;\n"
    "	ld.shared.f32 	%f171, [%rd19+516];\n"
    "	mov.f32 	%f172, %f7;\n"
    "	sub.f32 	%f173, %f172, %f171;\n"
    "	mov.f32 	%f174, %f173;\n"
    "	mov.f32 	%f175, %f174;\n"
    "	mul.f32 	%f176, %f11, %f174;\n"
    "	cvt.rni.f32.f32 	%f177, %f176;\n"
    "	mul.f32 	%f178, %f10, %f177;\n"
    "	sub.f32 	%f37, %f173, %f178;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f179, %f37, %f37, %f170;\n"
    "	ld.shared.f32 	%f180, [%rd19+520];\n"
    "	mov.f32 	%f181, %f9;\n"
    "	sub.f32 	%f182, %f181, %f180;\n"
    "	mov.f32 	%f183, %f182;\n"
    "	mul.f32 	%f184, %f182, %f11;\n"
    "	cvt.rni.f32.f32 	%f185, %f184;\n"
    "	mul.f32 	%f186, %f10, %f185;\n"
    "	sub.f32 	%f47, %f182, %f186;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f179;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd25, %r54;\n"
    "	mul.wide.s32 	%rd26, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd26;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f187, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f188, %f54, %f187;\n"
    "	cvt.rzi.f32.f32 	%f57, %f188;\n"
    "	mov.f32 	%f189, %f57;\n"
    "	mov.f32 	%f190, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f191, %f190;\n"
    "	mov.f32 	%f192, %f54;\n"
    "	mad.f32 %f193, %f189, %f191, %f192;\n"
    "	mov.f32 	%f63, %f193;\n"
    "	mov.f32 	%f194, %f57;\n"
    "	mov.f32 	%f195, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f196, %f195;\n"
    "	mov.f32 	%f197, %f63;\n"
    "	mad.f32 %f198, %f194, %f196, %f197;\n"
    "	mov.f32 	%f63, %f198;\n"
    "	.loc	3	1662	0\n"
    "	mov.f32 	%f199, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f199;\n"
    "	mov.f32 	%f200, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f200;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd22+12];\n"
    "	ld.const.f32 	%f76, [%rd22+0];\n"
    "	ld.const.f32 	%f77, [%rd22+16];\n"
    "	ld.const.f32 	%f78, [%rd22+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f201, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f201;\n"
    "	mov.f32 	%f202, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f202;\n"
    "	mov.f32 	%f203, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f203;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f204, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f204;\n"
    "	mov.f32 	%f205, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f205;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f206, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f206, %f93, %p5;\n"
    "	mov.f32 	%f207, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f207, %f95, %p4;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f208, %f73, %f99;\n"
    "	sub.f32 	%f101, %f208, %f88;\n"
    "	mul.f32 	%f209, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f209;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f210, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f210, %f104, %p3;\n"
    "	mov.f32 	%f211, %f26;\n"
    "	mad.f32 	%f15, %f211, %f106, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f212, %f38;\n"
    "	mad.f32 	%f16, %f212, %f106, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f213, %f48;\n"
    "	mad.f32 	%f17, %f213, %f106, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	ld.shared.s32 	%r57, [%rd18+780];\n"
    "	add.s32 	%r54, %r57, %r7;\n"
    "	ld.shared.f32 	%f214, [%rd19+768];\n"
    "	mov.f32 	%f215, %f5;\n"
    "	sub.f32 	%f216, %f215, %f214;\n"
    "	mov.f32 	%f217, %f216;\n"
    "	mul.f32 	%f218, %f11, %f217;\n"
    "	cvt.rni.f32.f32 	%f219, %f218;\n"
    "	mul.f32 	%f220, %f10, %f219;\n"
    "	sub.f32 	%f25, %f216, %f220;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f221, 0f00000000;   	// 0\n"
    "	mad.f32 	%f222, %f25, %f25, %f221;\n"
    "	ld.shared.f32 	%f223, [%rd19+772];\n"
    "	mov.f32 	%f224, %f7;\n"
    "	sub.f32 	%f225, %f224, %f223;\n"
    "	mov.f32 	%f226, %f225;\n"
    "	mov.f32 	%f227, %f226;\n"
    "	mul.f32 	%f228, %f11, %f226;\n"
    "	cvt.rni.f32.f32 	%f229, %f228;\n"
    "	mul.f32 	%f230, %f10, %f229;\n"
    "	sub.f32 	%f37, %f225, %f230;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f231, %f37, %f37, %f222;\n"
    "	ld.shared.f32 	%f232, [%rd19+776];\n"
    "	mov.f32 	%f233, %f9;\n"
    "	sub.f32 	%f234, %f233, %f232;\n"
    "	mov.f32 	%f235, %f234;\n"
    "	mul.f32 	%f236, %f234, %f11;\n"
    "	cvt.rni.f32.f32 	%f237, %f236;\n"
    "	mul.f32 	%f238, %f10, %f237;\n"
    "	sub.f32 	%f47, %f234, %f238;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f231;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd27, %r54;\n"
    "	mul.wide.s32 	%rd28, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd28;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f239, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f240, %f54, %f239;\n"
    "	cvt.rzi.f32.f32 	%f57, %f240;\n"
    "	mov.f32 	%f241, %f57;\n"
    "	mov.f32 	%f242, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f243, %f242;\n"
    "	mov.f32 	%f244, %f54;\n"
    "	mad.f32 %f245, %f241, %f243, %f244;\n"
    "	mov.f32 	%f63, %f245;\n"
    "	mov.f32 	%f246, %f57;\n"
    "	mov.f32 	%f247, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f248, %f247;\n"
    "	mov.f32 	%f249, %f63;\n"
    "	mad.f32 %f250, %f246, %f248, %f249;\n"
    "	mov.f32 	%f63, %f250;\n"
    "	.loc	3	1662	0\n"
    "	mov.f32 	%f251, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f251;\n"
    "	mov.f32 	%f252, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f252;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd22+12];\n"
    "	ld.const.f32 	%f76, [%rd22+0];\n"
    "	ld.const.f32 	%f77, [%rd22+16];\n"
    "	ld.const.f32 	%f78, [%rd22+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f253, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f253;\n"
    "	mov.f32 	%f254, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f254;\n"
    "	mov.f32 	%f255, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f255;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f256, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f256;\n"
    "	mov.f32 	%f257, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f257;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f258, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f258, %f93, %p5;\n"
    "	mov.f32 	%f259, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f259, %f95, %p4;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f260, %f73, %f99;\n"
    "	sub.f32 	%f101, %f260, %f88;\n"
    "	mul.f32 	%f261, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f261;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f262, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f262, %f104, %p3;\n"
    "	mov.f32 	%f263, %f26;\n"
    "	mad.f32 	%f15, %f263, %f106, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f264, %f38;\n"
    "	mad.f32 	%f16, %f264, %f106, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f265, %f48;\n"
    "	mad.f32 	%f17, %f265, %f106, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	ld.shared.s32 	%r58, [%rd18+1036];\n"
    "	add.s32 	%r54, %r58, %r7;\n"
    "	ld.shared.f32 	%f266, [%rd19+1024];\n"
    "	mov.f32 	%f267, %f5;\n"
    "	sub.f32 	%f268, %f267, %f266;\n"
    "	mov.f32 	%f269, %f268;\n"
    "	mul.f32 	%f270, %f11, %f269;\n"
    "	cvt.rni.f32.f32 	%f271, %f270;\n"
    "	mul.f32 	%f272, %f10, %f271;\n"
    "	sub.f32 	%f25, %f268, %f272;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f273, 0f00000000;   	// 0\n"
    "	mad.f32 	%f274, %f25, %f25, %f273;\n"
    "	ld.shared.f32 	%f275, [%rd19+1028];\n"
    "	mov.f32 	%f276, %f7;\n"
    "	sub.f32 	%f277, %f276, %f275;\n"
    "	mov.f32 	%f278, %f277;\n"
    "	mov.f32 	%f279, %f278;\n"
    "	mul.f32 	%f280, %f11, %f278;\n"
    "	cvt.rni.f32.f32 	%f281, %f280;\n"
    "	mul.f32 	%f282, %f10, %f281;\n"
    "	sub.f32 	%f37, %f277, %f282;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f283, %f37, %f37, %f274;\n"
    "	ld.shared.f32 	%f284, [%rd19+1032];\n"
    "	mov.f32 	%f285, %f9;\n"
    "	sub.f32 	%f286, %f285, %f284;\n"
    "	mov.f32 	%f287, %f286;\n"
    "	mul.f32 	%f288, %f286, %f11;\n"
    "	cvt.rni.f32.f32 	%f289, %f288;\n"
    "	mul.f32 	%f290, %f10, %f289;\n"
    "	sub.f32 	%f47, %f286, %f290;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f283;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd29, %r54;\n"
    "	mul.wide.s32 	%rd30, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd30;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f291, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f292, %f54, %f291;\n"
    "	cvt.rzi.f32.f32 	%f57, %f292;\n"
    "	mov.f32 	%f293, %f57;\n"
    "	mov.f32 	%f294, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f295, %f294;\n"
    "	mov.f32 	%f296, %f54;\n"
    "	mad.f32 %f297, %f293, %f295, %f296;\n"
    "	mov.f32 	%f63, %f297;\n"
    "	mov.f32 	%f298, %f57;\n"
    "	mov.f32 	%f299, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f300, %f299;\n"
    "	mov.f32 	%f301, %f63;\n"
    "	mad.f32 %f302, %f298, %f300, %f301;\n"
    "	mov.f32 	%f63, %f302;\n"
    "	.loc	3	1662	0\n"
    "	mov.f32 	%f303, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f303;\n"
    "	mov.f32 	%f304, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f304;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd22+12];\n"
    "	ld.const.f32 	%f76, [%rd22+0];\n"
    "	ld.const.f32 	%f77, [%rd22+16];\n"
    "	ld.const.f32 	%f78, [%rd22+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f305, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f305;\n"
    "	mov.f32 	%f306, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f306;\n"
    "	mov.f32 	%f307, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f307;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f308, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f308;\n"
    "	mov.f32 	%f309, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f309;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f310, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f310, %f93, %p5;\n"
    "	mov.f32 	%f311, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f311, %f95, %p4;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f312, %f73, %f99;\n"
    "	sub.f32 	%f101, %f312, %f88;\n"
    "	mul.f32 	%f313, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f313;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f314, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f314, %f104, %p3;\n"
    "	mov.f32 	%f315, %f26;\n"
    "	mad.f32 	%f15, %f315, %f106, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f316, %f38;\n"
    "	mad.f32 	%f16, %f316, %f106, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f317, %f48;\n"
    "	mad.f32 	%f17, %f317, %f106, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	ld.shared.s32 	%r59, [%rd18+1292];\n"
    "	add.s32 	%r54, %r59, %r7;\n"
    "	ld.shared.f32 	%f318, [%rd19+1280];\n"
    "	mov.f32 	%f319, %f5;\n"
    "	sub.f32 	%f320, %f319, %f318;\n"
    "	mov.f32 	%f321, %f320;\n"
    "	mul.f32 	%f322, %f11, %f321;\n"
    "	cvt.rni.f32.f32 	%f323, %f322;\n"
    "	mul.f32 	%f324, %f10, %f323;\n"
    "	sub.f32 	%f25, %f320, %f324;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f325, 0f00000000;   	// 0\n"
    "	mad.f32 	%f326, %f25, %f25, %f325;\n"
    "	ld.shared.f32 	%f327, [%rd19+1284];\n"
    "	mov.f32 	%f328, %f7;\n"
    "	sub.f32 	%f329, %f328, %f327;\n"
    "	mov.f32 	%f330, %f329;\n"
    "	mov.f32 	%f331, %f330;\n"
    "	mul.f32 	%f332, %f11, %f330;\n"
    "	cvt.rni.f32.f32 	%f333, %f332;\n"
    "	mul.f32 	%f334, %f10, %f333;\n"
    "	sub.f32 	%f37, %f329, %f334;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f335, %f37, %f37, %f326;\n"
    "	ld.shared.f32 	%f336, [%rd19+1288];\n"
    "	mov.f32 	%f337, %f9;\n"
    "	sub.f32 	%f338, %f337, %f336;\n"
    "	mov.f32 	%f339, %f338;\n"
    "	mul.f32 	%f340, %f338, %f11;\n"
    "	cvt.rni.f32.f32 	%f341, %f340;\n"
    "	mul.f32 	%f342, %f10, %f341;\n"
    "	sub.f32 	%f47, %f338, %f342;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f335;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd31, %r54;\n"
    "	mul.wide.s32 	%rd32, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd32;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f343, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f344, %f54, %f343;\n"
    "	cvt.rzi.f32.f32 	%f57, %f344;\n"
    "	mov.f32 	%f345, %f57;\n"
    "	mov.f32 	%f346, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f347, %f346;\n"
    "	mov.f32 	%f348, %f54;\n"
    "	mad.f32 %f349, %f345, %f347, %f348;\n"
    "	mov.f32 	%f63, %f349;\n"
    "	mov.f32 	%f350, %f57;\n"
    "	mov.f32 	%f351, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f352, %f351;\n"
    "	mov.f32 	%f353, %f63;\n"
    "	mad.f32 %f354, %f350, %f352, %f353;\n"
    "	mov.f32 	%f63, %f354;\n"
    "	.loc	3	1662	0\n"
    "	mov.f32 	%f355, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f355;\n"
    "	mov.f32 	%f356, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f356;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd22+12];\n"
    "	ld.const.f32 	%f76, [%rd22+0];\n"
    "	ld.const.f32 	%f77, [%rd22+16];\n"
    "	ld.const.f32 	%f78, [%rd22+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f357, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f357;\n"
    "	mov.f32 	%f358, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f358;\n"
    "	mov.f32 	%f359, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f359;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f360, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f360;\n"
    "	mov.f32 	%f361, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f361;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f362, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f362, %f93, %p5;\n"
    "	mov.f32 	%f363, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f363, %f95, %p4;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f364, %f73, %f99;\n"
    "	sub.f32 	%f101, %f364, %f88;\n"
    "	mul.f32 	%f365, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f365;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f366, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f366, %f104, %p3;\n"
    "	mov.f32 	%f367, %f26;\n"
    "	mad.f32 	%f15, %f367, %f106, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f368, %f38;\n"
    "	mad.f32 	%f16, %f368, %f106, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f369, %f48;\n"
    "	mad.f32 	%f17, %f369, %f106, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	ld.shared.s32 	%r60, [%rd18+1548];\n"
    "	add.s32 	%r54, %r60, %r7;\n"
    "	ld.shared.f32 	%f370, [%rd19+1536];\n"
    "	mov.f32 	%f371, %f5;\n"
    "	sub.f32 	%f372, %f371, %f370;\n"
    "	mov.f32 	%f373, %f372;\n"
    "	mul.f32 	%f374, %f11, %f373;\n"
    "	cvt.rni.f32.f32 	%f375, %f374;\n"
    "	mul.f32 	%f376, %f10, %f375;\n"
    "	sub.f32 	%f25, %f372, %f376;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f377, 0f00000000;   	// 0\n"
    "	mad.f32 	%f378, %f25, %f25, %f377;\n"
    "	ld.shared.f32 	%f379, [%rd19+1540];\n"
    "	mov.f32 	%f380, %f7;\n"
    "	sub.f32 	%f381, %f380, %f379;\n"
    "	mov.f32 	%f382, %f381;\n"
    "	mov.f32 	%f383, %f382;\n"
    "	mul.f32 	%f384, %f11, %f382;\n"
    "	cvt.rni.f32.f32 	%f385, %f384;\n"
    "	mul.f32 	%f386, %f10, %f385;\n"
    "	sub.f32 	%f37, %f381, %f386;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f387, %f37, %f37, %f378;\n"
    "	ld.shared.f32 	%f388, [%rd19+1544];\n"
    "	mov.f32 	%f389, %f9;\n"
    "	sub.f32 	%f390, %f389, %f388;\n"
    "	mov.f32 	%f391, %f390;\n"
    "	mul.f32 	%f392, %f390, %f11;\n"
    "	cvt.rni.f32.f32 	%f393, %f392;\n"
    "	mul.f32 	%f394, %f10, %f393;\n"
    "	sub.f32 	%f47, %f390, %f394;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f387;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd33, %r54;\n"
    "	mul.wide.s32 	%rd34, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd34;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f395, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f396, %f54, %f395;\n"
    "	cvt.rzi.f32.f32 	%f57, %f396;\n"
    "	mov.f32 	%f397, %f57;\n"
    "	mov.f32 	%f398, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f399, %f398;\n"
    "	mov.f32 	%f400, %f54;\n"
    "	mad.f32 %f401, %f397, %f399, %f400;\n"
    "	mov.f32 	%f63, %f401;\n"
    "	mov.f32 	%f402, %f57;\n"
    "	mov.f32 	%f403, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f404, %f403;\n"
    "	mov.f32 	%f405, %f63;\n"
    "	mad.f32 %f406, %f402, %f404, %f405;\n"
    "	mov.f32 	%f63, %f406;\n"
    "	.loc	3	1662	0\n"
    "	mov.f32 	%f407, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f407;\n"
    "	mov.f32 	%f408, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f408;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd22+12];\n"
    "	ld.const.f32 	%f76, [%rd22+0];\n"
    "	ld.const.f32 	%f77, [%rd22+16];\n"
    "	ld.const.f32 	%f78, [%rd22+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f409, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f409;\n"
    "	mov.f32 	%f410, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f410;\n"
    "	mov.f32 	%f411, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f411;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f412, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f412;\n"
    "	mov.f32 	%f413, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f413;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f414, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f414, %f93, %p5;\n"
    "	mov.f32 	%f415, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f415, %f95, %p4;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f416, %f73, %f99;\n"
    "	sub.f32 	%f101, %f416, %f88;\n"
    "	mul.f32 	%f417, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f417;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f418, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f418, %f104, %p3;\n"
    "	mov.f32 	%f419, %f26;\n"
    "	mad.f32 	%f15, %f419, %f106, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f420, %f38;\n"
    "	mad.f32 	%f16, %f420, %f106, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f421, %f48;\n"
    "	mad.f32 	%f17, %f421, %f106, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	ld.shared.s32 	%r61, [%rd18+1804];\n"
    "	add.s32 	%r54, %r61, %r7;\n"
    "	ld.shared.f32 	%f422, [%rd19+1792];\n"
    "	mov.f32 	%f423, %f5;\n"
    "	sub.f32 	%f424, %f423, %f422;\n"
    "	mov.f32 	%f425, %f424;\n"
    "	mul.f32 	%f426, %f11, %f425;\n"
    "	cvt.rni.f32.f32 	%f427, %f426;\n"
    "	mul.f32 	%f428, %f10, %f427;\n"
    "	sub.f32 	%f25, %f424, %f428;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f429, 0f00000000;   	// 0\n"
    "	mad.f32 	%f430, %f25, %f25, %f429;\n"
    "	ld.shared.f32 	%f431, [%rd19+1796];\n"
    "	mov.f32 	%f432, %f7;\n"
    "	sub.f32 	%f433, %f432, %f431;\n"
    "	mov.f32 	%f434, %f433;\n"
    "	mov.f32 	%f435, %f434;\n"
    "	mul.f32 	%f436, %f11, %f434;\n"
    "	cvt.rni.f32.f32 	%f437, %f436;\n"
    "	mul.f32 	%f438, %f10, %f437;\n"
    "	sub.f32 	%f37, %f433, %f438;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f439, %f37, %f37, %f430;\n"
    "	ld.shared.f32 	%f440, [%rd19+1800];\n"
    "	mov.f32 	%f441, %f9;\n"
    "	sub.f32 	%f442, %f441, %f440;\n"
    "	mov.f32 	%f443, %f442;\n"
    "	mul.f32 	%f444, %f442, %f11;\n"
    "	cvt.rni.f32.f32 	%f445, %f444;\n"
    "	mul.f32 	%f446, %f10, %f445;\n"
    "	sub.f32 	%f47, %f442, %f446;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f439;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd35, %r54;\n"
    "	mul.wide.s32 	%rd36, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd36;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f447, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f448, %f54, %f447;\n"
    "	cvt.rzi.f32.f32 	%f57, %f448;\n"
    "	mov.f32 	%f449, %f57;\n"
    "	mov.f32 	%f450, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f451, %f450;\n"
    "	mov.f32 	%f452, %f54;\n"
    "	mad.f32 %f453, %f449, %f451, %f452;\n"
    "	mov.f32 	%f63, %f453;\n"
    "	mov.f32 	%f454, %f57;\n"
    "	mov.f32 	%f455, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f456, %f455;\n"
    "	mov.f32 	%f457, %f63;\n"
    "	mad.f32 %f458, %f454, %f456, %f457;\n"
    "	mov.f32 	%f63, %f458;\n"
    "	.loc	3	1662	0\n"
    "	mov.f32 	%f459, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f459;\n"
    "	mov.f32 	%f460, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f460;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd22+12];\n"
    "	ld.const.f32 	%f76, [%rd22+0];\n"
    "	ld.const.f32 	%f77, [%rd22+16];\n"
    "	ld.const.f32 	%f78, [%rd22+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f461, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f461;\n"
    "	mov.f32 	%f462, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f462;\n"
    "	mov.f32 	%f463, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f463;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f464, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f464;\n"
    "	mov.f32 	%f465, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f465;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f466, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f466, %f93, %p5;\n"
    "	mov.f32 	%f467, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f467, %f95, %p4;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f468, %f73, %f99;\n"
    "	sub.f32 	%f101, %f468, %f88;\n"
    "	mul.f32 	%f469, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f469;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f470, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f470, %f104, %p3;\n"
    "	mov.f32 	%f471, %f26;\n"
    "	mad.f32 	%f15, %f471, %f106, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f472, %f38;\n"
    "	mad.f32 	%f16, %f472, %f106, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f473, %f48;\n"
    "	mad.f32 	%f17, %f473, %f106, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	ld.shared.s32 	%r62, [%rd18+2060];\n"
    "	add.s32 	%r54, %r62, %r7;\n"
    "	ld.shared.f32 	%f474, [%rd19+2048];\n"
    "	mov.f32 	%f475, %f5;\n"
    "	sub.f32 	%f476, %f475, %f474;\n"
    "	mov.f32 	%f477, %f476;\n"
    "	mul.f32 	%f478, %f11, %f477;\n"
    "	cvt.rni.f32.f32 	%f479, %f478;\n"
    "	mul.f32 	%f480, %f10, %f479;\n"
    "	sub.f32 	%f25, %f476, %f480;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f481, 0f00000000;   	// 0\n"
    "	mad.f32 	%f482, %f25, %f25, %f481;\n"
    "	ld.shared.f32 	%f483, [%rd19+2052];\n"
    "	mov.f32 	%f484, %f7;\n"
    "	sub.f32 	%f485, %f484, %f483;\n"
    "	mov.f32 	%f486, %f485;\n"
    "	mov.f32 	%f487, %f486;\n"
    "	mul.f32 	%f488, %f11, %f486;\n"
    "	cvt.rni.f32.f32 	%f489, %f488;\n"
    "	mul.f32 	%f490, %f10, %f489;\n"
    "	sub.f32 	%f37, %f485, %f490;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f491, %f37, %f37, %f482;\n"
    "	ld.shared.f32 	%f492, [%rd19+2056];\n"
    "	mov.f32 	%f493, %f9;\n"
    "	sub.f32 	%f494, %f493, %f492;\n"
    "	mov.f32 	%f495, %f494;\n"
    "	mul.f32 	%f496, %f494, %f11;\n"
    "	cvt.rni.f32.f32 	%f497, %f496;\n"
    "	mul.f32 	%f498, %f10, %f497;\n"
    "	sub.f32 	%f47, %f494, %f498;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f491;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd37, %r54;\n"
    "	mul.wide.s32 	%rd38, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd38;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f499, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f500, %f54, %f499;\n"
    "	cvt.rzi.f32.f32 	%f57, %f500;\n"
    "	mov.f32 	%f501, %f57;\n"
    "	mov.f32 	%f502, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f503, %f502;\n"
    "	mov.f32 	%f504, %f54;\n"
    "	mad.f32 %f505, %f501, %f503, %f504;\n"
    "	mov.f32 	%f63, %f505;\n"
    "	mov.f32 	%f506, %f57;\n"
    "	mov.f32 	%f507, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f508, %f507;\n"
    "	mov.f32 	%f509, %f63;\n"
    "	mad.f32 %f510, %f506, %f508, %f509;\n"
    "	mov.f32 	%f63, %f510;\n"
    "	.loc	3	1662	0\n"
    "	mov.f32 	%f511, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f511;\n"
    "	mov.f32 	%f512, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f512;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd22+12];\n"
    "	ld.const.f32 	%f76, [%rd22+0];\n"
    "	ld.const.f32 	%f77, [%rd22+16];\n"
    "	ld.const.f32 	%f78, [%rd22+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f513, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f513;\n"
    "	mov.f32 	%f514, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f514;\n"
    "	mov.f32 	%f515, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f515;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f516, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f516;\n"
    "	mov.f32 	%f517, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f517;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f518, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f518, %f93, %p5;\n"
    "	mov.f32 	%f519, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f519, %f95, %p4;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f520, %f73, %f99;\n"
    "	sub.f32 	%f101, %f520, %f88;\n"
    "	mul.f32 	%f521, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f521;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f522, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f522, %f104, %p3;\n"
    "	mov.f32 	%f523, %f26;\n"
    "	mad.f32 	%f15, %f523, %f106, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f524, %f38;\n"
    "	mad.f32 	%f16, %f524, %f106, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f525, %f48;\n"
    "	mad.f32 	%f17, %f525, %f106, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	ld.shared.s32 	%r63, [%rd18+2316];\n"
    "	add.s32 	%r54, %r63, %r7;\n"
    "	ld.shared.f32 	%f526, [%rd19+2304];\n"
    "	mov.f32 	%f527, %f5;\n"
    "	sub.f32 	%f528, %f527, %f526;\n"
    "	mov.f32 	%f529, %f528;\n"
    "	mul.f32 	%f530, %f11, %f529;\n"
    "	cvt.rni.f32.f32 	%f531, %f530;\n"
    "	mul.f32 	%f532, %f10, %f531;\n"
    "	sub.f32 	%f25, %f528, %f532;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f533, 0f00000000;   	// 0\n"
    "	mad.f32 	%f534, %f25, %f25, %f533;\n"
    "	ld.shared.f32 	%f535, [%rd19+2308];\n"
    "	mov.f32 	%f536, %f7;\n"
    "	sub.f32 	%f537, %f536, %f535;\n"
    "	mov.f32 	%f538, %f537;\n"
    "	mov.f32 	%f539, %f538;\n"
    "	mul.f32 	%f540, %f11, %f538;\n"
    "	cvt.rni.f32.f32 	%f541, %f540;\n"
    "	mul.f32 	%f542, %f10, %f541;\n"
    "	sub.f32 	%f37, %f537, %f542;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f543, %f37, %f37, %f534;\n"
    "	ld.shared.f32 	%f544, [%rd19+2312];\n"
    "	mov.f32 	%f545, %f9;\n"
    "	sub.f32 	%f546, %f545, %f544;\n"
    "	mov.f32 	%f547, %f546;\n"
    "	mul.f32 	%f548, %f546, %f11;\n"
    "	cvt.rni.f32.f32 	%f549, %f548;\n"
    "	mul.f32 	%f550, %f10, %f549;\n"
    "	sub.f32 	%f47, %f546, %f550;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f543;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd39, %r54;\n"
    "	mul.wide.s32 	%rd40, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd40;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f551, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f552, %f54, %f551;\n"
    "	cvt.rzi.f32.f32 	%f57, %f552;\n"
    "	mov.f32 	%f553, %f57;\n"
    "	mov.f32 	%f554, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f555, %f554;\n"
    "	mov.f32 	%f556, %f54;\n"
    "	mad.f32 %f557, %f553, %f555, %f556;\n"
    "	mov.f32 	%f63, %f557;\n"
    "	mov.f32 	%f558, %f57;\n"
    "	mov.f32 	%f559, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f560, %f559;\n"
    "	mov.f32 	%f561, %f63;\n"
    "	mad.f32 %f562, %f558, %f560, %f561;\n"
    "	mov.f32 	%f63, %f562;\n"
    "	.loc	3	1662	0\n"
    "	mov.f32 	%f563, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f563;\n"
    "	mov.f32 	%f564, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f564;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd22+12];\n"
    "	ld.const.f32 	%f76, [%rd22+0];\n"
    "	ld.const.f32 	%f77, [%rd22+16];\n"
    "	ld.const.f32 	%f78, [%rd22+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f565, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f565;\n"
    "	mov.f32 	%f566, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f566;\n"
    "	mov.f32 	%f567, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f567;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f568, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f568;\n"
    "	mov.f32 	%f569, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f569;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f570, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f570, %f93, %p5;\n"
    "	mov.f32 	%f571, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f571, %f95, %p4;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f572, %f73, %f99;\n"
    "	sub.f32 	%f101, %f572, %f88;\n"
    "	mul.f32 	%f573, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f573;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f574, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f574, %f104, %p3;\n"
    "	mov.f32 	%f575, %f26;\n"
    "	mad.f32 	%f15, %f575, %f106, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f576, %f38;\n"
    "	mad.f32 	%f16, %f576, %f106, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f577, %f48;\n"
    "	mad.f32 	%f17, %f577, %f106, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	ld.shared.s32 	%r64, [%rd18+2572];\n"
    "	add.s32 	%r54, %r64, %r7;\n"
    "	ld.shared.f32 	%f578, [%rd19+2560];\n"
    "	mov.f32 	%f579, %f5;\n"
    "	sub.f32 	%f580, %f579, %f578;\n"
    "	mov.f32 	%f581, %f580;\n"
    "	mul.f32 	%f582, %f11, %f581;\n"
    "	cvt.rni.f32.f32 	%f583, %f582;\n"
    "	mul.f32 	%f584, %f10, %f583;\n"
    "	sub.f32 	%f25, %f580, %f584;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f585, 0f00000000;   	// 0\n"
    "	mad.f32 	%f586, %f25, %f25, %f585;\n"
    "	ld.shared.f32 	%f587, [%rd19+2564];\n"
    "	mov.f32 	%f588, %f7;\n"
    "	sub.f32 	%f589, %f588, %f587;\n"
    "	mov.f32 	%f590, %f589;\n"
    "	mov.f32 	%f591, %f590;\n"
    "	mul.f32 	%f592, %f11, %f590;\n"
    "	cvt.rni.f32.f32 	%f593, %f592;\n"
    "	mul.f32 	%f594, %f10, %f593;\n"
    "	sub.f32 	%f37, %f589, %f594;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f595, %f37, %f37, %f586;\n"
    "	ld.shared.f32 	%f596, [%rd19+2568];\n"
    "	mov.f32 	%f597, %f9;\n"
    "	sub.f32 	%f598, %f597, %f596;\n"
    "	mov.f32 	%f599, %f598;\n"
    "	mul.f32 	%f600, %f598, %f11;\n"
    "	cvt.rni.f32.f32 	%f601, %f600;\n"
    "	mul.f32 	%f602, %f10, %f601;\n"
    "	sub.f32 	%f47, %f598, %f602;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f595;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd41, %r54;\n"
    "	mul.wide.s32 	%rd42, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd42;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f603, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f604, %f54, %f603;\n"
    "	cvt.rzi.f32.f32 	%f57, %f604;\n"
    "	mov.f32 	%f605, %f57;\n"
    "	mov.f32 	%f606, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f607, %f606;\n"
    "	mov.f32 	%f608, %f54;\n"
    "	mad.f32 %f609, %f605, %f607, %f608;\n"
    "	mov.f32 	%f63, %f609;\n"
    "	mov.f32 	%f610, %f57;\n"
    "	mov.f32 	%f611, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f612, %f611;\n"
    "	mov.f32 	%f613, %f63;\n"
    "	mad.f32 %f614, %f610, %f612, %f613;\n"
    "	mov.f32 	%f63, %f614;\n"
    "	.loc	3	1662	0\n"
    "	mov.f32 	%f615, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f615;\n"
    "	mov.f32 	%f616, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f616;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd22+12];\n"
    "	ld.const.f32 	%f76, [%rd22+0];\n"
    "	ld.const.f32 	%f77, [%rd22+16];\n"
    "	ld.const.f32 	%f78, [%rd22+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f617, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f617;\n"
    "	mov.f32 	%f618, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f618;\n"
    "	mov.f32 	%f619, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f619;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f620, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f620;\n"
    "	mov.f32 	%f621, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f621;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f622, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f622, %f93, %p5;\n"
    "	mov.f32 	%f623, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f623, %f95, %p4;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f624, %f73, %f99;\n"
    "	sub.f32 	%f101, %f624, %f88;\n"
    "	mul.f32 	%f625, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f625;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f626, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f626, %f104, %p3;\n"
    "	mov.f32 	%f627, %f26;\n"
    "	mad.f32 	%f15, %f627, %f106, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f628, %f38;\n"
    "	mad.f32 	%f16, %f628, %f106, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f629, %f48;\n"
    "	mad.f32 	%f17, %f629, %f106, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	ld.shared.s32 	%r65, [%rd18+2828];\n"
    "	add.s32 	%r54, %r65, %r7;\n"
    "	ld.shared.f32 	%f630, [%rd19+2816];\n"
    "	mov.f32 	%f631, %f5;\n"
    "	sub.f32 	%f632, %f631, %f630;\n"
    "	mov.f32 	%f633, %f632;\n"
    "	mul.f32 	%f634, %f11, %f633;\n"
    "	cvt.rni.f32.f32 	%f635, %f634;\n"
    "	mul.f32 	%f636, %f10, %f635;\n"
    "	sub.f32 	%f25, %f632, %f636;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f637, 0f00000000;   	// 0\n"
    "	mad.f32 	%f638, %f25, %f25, %f637;\n"
    "	ld.shared.f32 	%f639, [%rd19+2820];\n"
    "	mov.f32 	%f640, %f7;\n"
    "	sub.f32 	%f641, %f640, %f639;\n"
    "	mov.f32 	%f642, %f641;\n"
    "	mov.f32 	%f643, %f642;\n"
    "	mul.f32 	%f644, %f11, %f642;\n"
    "	cvt.rni.f32.f32 	%f645, %f644;\n"
    "	mul.f32 	%f646, %f10, %f645;\n"
    "	sub.f32 	%f37, %f641, %f646;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f647, %f37, %f37, %f638;\n"
    "	ld.shared.f32 	%f648, [%rd19+2824];\n"
    "	mov.f32 	%f649, %f9;\n"
    "	sub.f32 	%f650, %f649, %f648;\n"
    "	mov.f32 	%f651, %f650;\n"
    "	mul.f32 	%f652, %f650, %f11;\n"
    "	cvt.rni.f32.f32 	%f653, %f652;\n"
    "	mul.f32 	%f654, %f10, %f653;\n"
    "	sub.f32 	%f47, %f650, %f654;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f647;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd43, %r54;\n"
    "	mul.wide.s32 	%rd44, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd44;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f655, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f656, %f54, %f655;\n"
    "	cvt.rzi.f32.f32 	%f57, %f656;\n"
    "	mov.f32 	%f657, %f57;\n"
    "	mov.f32 	%f658, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f659, %f658;\n"
    "	mov.f32 	%f660, %f54;\n"
    "	mad.f32 %f661, %f657, %f659, %f660;\n"
    "	mov.f32 	%f63, %f661;\n"
    "	mov.f32 	%f662, %f57;\n"
    "	mov.f32 	%f663, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f664, %f663;\n"
    "	mov.f32 	%f665, %f63;\n"
    "	mad.f32 %f666, %f662, %f664, %f665;\n"
    "	mov.f32 	%f63, %f666;\n"
    "	.loc	3	1662	0\n"
    "	mov.f32 	%f667, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f667;\n"
    "	mov.f32 	%f668, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f668;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd22+12];\n"
    "	ld.const.f32 	%f76, [%rd22+0];\n"
    "	ld.const.f32 	%f77, [%rd22+16];\n"
    "	ld.const.f32 	%f78, [%rd22+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f669, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f669;\n"
    "	mov.f32 	%f670, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f670;\n"
    "	mov.f32 	%f671, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f671;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f672, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f672;\n"
    "	mov.f32 	%f673, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f673;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f674, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f674, %f93, %p5;\n"
    "	mov.f32 	%f675, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f675, %f95, %p4;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f676, %f73, %f99;\n"
    "	sub.f32 	%f101, %f676, %f88;\n"
    "	mul.f32 	%f677, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f677;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f678, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f678, %f104, %p3;\n"
    "	mov.f32 	%f679, %f26;\n"
    "	mad.f32 	%f15, %f679, %f106, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f680, %f38;\n"
    "	mad.f32 	%f16, %f680, %f106, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f681, %f48;\n"
    "	mad.f32 	%f17, %f681, %f106, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	ld.shared.s32 	%r66, [%rd18+3084];\n"
    "	add.s32 	%r54, %r66, %r7;\n"
    "	ld.shared.f32 	%f682, [%rd19+3072];\n"
    "	mov.f32 	%f683, %f5;\n"
    "	sub.f32 	%f684, %f683, %f682;\n"
    "	mov.f32 	%f685, %f684;\n"
    "	mul.f32 	%f686, %f11, %f685;\n"
    "	cvt.rni.f32.f32 	%f687, %f686;\n"
    "	mul.f32 	%f688, %f10, %f687;\n"
    "	sub.f32 	%f25, %f684, %f688;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f689, 0f00000000;   	// 0\n"
    "	mad.f32 	%f690, %f25, %f25, %f689;\n"
    "	ld.shared.f32 	%f691, [%rd19+3076];\n"
    "	mov.f32 	%f692, %f7;\n"
    "	sub.f32 	%f693, %f692, %f691;\n"
    "	mov.f32 	%f694, %f693;\n"
    "	mov.f32 	%f695, %f694;\n"
    "	mul.f32 	%f696, %f11, %f694;\n"
    "	cvt.rni.f32.f32 	%f697, %f696;\n"
    "	mul.f32 	%f698, %f10, %f697;\n"
    "	sub.f32 	%f37, %f693, %f698;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f699, %f37, %f37, %f690;\n"
    "	ld.shared.f32 	%f700, [%rd19+3080];\n"
    "	mov.f32 	%f701, %f9;\n"
    "	sub.f32 	%f702, %f701, %f700;\n"
    "	mov.f32 	%f703, %f702;\n"
    "	mul.f32 	%f704, %f702, %f11;\n"
    "	cvt.rni.f32.f32 	%f705, %f704;\n"
    "	mul.f32 	%f706, %f10, %f705;\n"
    "	sub.f32 	%f47, %f702, %f706;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f699;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd45, %r54;\n"
    "	mul.wide.s32 	%rd46, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd46;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f707, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f708, %f54, %f707;\n"
    "	cvt.rzi.f32.f32 	%f57, %f708;\n"
    "	mov.f32 	%f709, %f57;\n"
    "	mov.f32 	%f710, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f711, %f710;\n"
    "	mov.f32 	%f712, %f54;\n"
    "	mad.f32 %f713, %f709, %f711, %f712;\n"
    "	mov.f32 	%f63, %f713;\n"
    "	mov.f32 	%f714, %f57;\n"
    "	mov.f32 	%f715, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f716, %f715;\n"
    "	mov.f32 	%f717, %f63;\n"
    "	mad.f32 %f718, %f714, %f716, %f717;\n"
    "	mov.f32 	%f63, %f718;\n"
    "	.loc	3	1662	0\n"
    "	mov.f32 	%f719, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f719;\n"
    "	mov.f32 	%f720, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f720;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd22+12];\n"
    "	ld.const.f32 	%f76, [%rd22+0];\n"
    "	ld.const.f32 	%f77, [%rd22+16];\n"
    "	ld.const.f32 	%f78, [%rd22+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f721, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f721;\n"
    "	mov.f32 	%f722, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f722;\n"
    "	mov.f32 	%f723, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f723;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f724, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f724;\n"
    "	mov.f32 	%f725, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f725;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f726, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f726, %f93, %p5;\n"
    "	mov.f32 	%f727, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f727, %f95, %p4;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f728, %f73, %f99;\n"
    "	sub.f32 	%f101, %f728, %f88;\n"
    "	mul.f32 	%f729, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f729;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f730, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f730, %f104, %p3;\n"
    "	mov.f32 	%f731, %f26;\n"
    "	mad.f32 	%f15, %f731, %f106, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f732, %f38;\n"
    "	mad.f32 	%f16, %f732, %f106, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f733, %f48;\n"
    "	mad.f32 	%f17, %f733, %f106, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	ld.shared.s32 	%r67, [%rd18+3340];\n"
    "	add.s32 	%r54, %r67, %r7;\n"
    "	ld.shared.f32 	%f734, [%rd19+3328];\n"
    "	mov.f32 	%f735, %f5;\n"
    "	sub.f32 	%f736, %f735, %f734;\n"
    "	mov.f32 	%f737, %f736;\n"
    "	mul.f32 	%f738, %f11, %f737;\n"
    "	cvt.rni.f32.f32 	%f739, %f738;\n"
    "	mul.f32 	%f740, %f10, %f739;\n"
    "	sub.f32 	%f25, %f736, %f740;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f741, 0f00000000;   	// 0\n"
    "	mad.f32 	%f742, %f25, %f25, %f741;\n"
    "	ld.shared.f32 	%f743, [%rd19+3332];\n"
    "	mov.f32 	%f744, %f7;\n"
    "	sub.f32 	%f745, %f744, %f743;\n"
    "	mov.f32 	%f746, %f745;\n"
    "	mov.f32 	%f747, %f746;\n"
    "	mul.f32 	%f748, %f11, %f746;\n"
    "	cvt.rni.f32.f32 	%f749, %f748;\n"
    "	mul.f32 	%f750, %f10, %f749;\n"
    "	sub.f32 	%f37, %f745, %f750;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f751, %f37, %f37, %f742;\n"
    "	ld.shared.f32 	%f752, [%rd19+3336];\n"
    "	mov.f32 	%f753, %f9;\n"
    "	sub.f32 	%f754, %f753, %f752;\n"
    "	mov.f32 	%f755, %f754;\n"
    "	mul.f32 	%f756, %f754, %f11;\n"
    "	cvt.rni.f32.f32 	%f757, %f756;\n"
    "	mul.f32 	%f758, %f10, %f757;\n"
    "	sub.f32 	%f47, %f754, %f758;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f751;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd47, %r54;\n"
    "	mul.wide.s32 	%rd48, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd48;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f759, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f760, %f54, %f759;\n"
    "	cvt.rzi.f32.f32 	%f57, %f760;\n"
    "	mov.f32 	%f761, %f57;\n"
    "	mov.f32 	%f762, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f763, %f762;\n"
    "	mov.f32 	%f764, %f54;\n"
    "	mad.f32 %f765, %f761, %f763, %f764;\n"
    "	mov.f32 	%f63, %f765;\n"
    "	mov.f32 	%f766, %f57;\n"
    "	mov.f32 	%f767, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f768, %f767;\n"
    "	mov.f32 	%f769, %f63;\n"
    "	mad.f32 %f770, %f766, %f768, %f769;\n"
    "	mov.f32 	%f63, %f770;\n"
    "	.loc	3	1662	0\n"
    "	mov.f32 	%f771, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f771;\n"
    "	mov.f32 	%f772, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f772;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd22+12];\n"
    "	ld.const.f32 	%f76, [%rd22+0];\n"
    "	ld.const.f32 	%f77, [%rd22+16];\n"
    "	ld.const.f32 	%f78, [%rd22+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f773, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f773;\n"
    "	mov.f32 	%f774, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f774;\n"
    "	mov.f32 	%f775, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f775;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f776, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f776;\n"
    "	mov.f32 	%f777, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f777;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f778, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f778, %f93, %p5;\n"
    "	mov.f32 	%f779, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f779, %f95, %p4;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f780, %f73, %f99;\n"
    "	sub.f32 	%f101, %f780, %f88;\n"
    "	mul.f32 	%f781, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f781;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f782, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f782, %f104, %p3;\n"
    "	mov.f32 	%f783, %f26;\n"
    "	mad.f32 	%f15, %f783, %f106, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f784, %f38;\n"
    "	mad.f32 	%f16, %f784, %f106, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f785, %f48;\n"
    "	mad.f32 	%f17, %f785, %f106, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	ld.shared.s32 	%r68, [%rd18+3596];\n"
    "	add.s32 	%r54, %r68, %r7;\n"
    "	ld.shared.f32 	%f786, [%rd19+3584];\n"
    "	mov.f32 	%f787, %f5;\n"
    "	sub.f32 	%f788, %f787, %f786;\n"
    "	mov.f32 	%f789, %f788;\n"
    "	mul.f32 	%f790, %f11, %f789;\n"
    "	cvt.rni.f32.f32 	%f791, %f790;\n"
    "	mul.f32 	%f792, %f10, %f791;\n"
    "	sub.f32 	%f25, %f788, %f792;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f793, 0f00000000;   	// 0\n"
    "	mad.f32 	%f794, %f25, %f25, %f793;\n"
    "	ld.shared.f32 	%f795, [%rd19+3588];\n"
    "	mov.f32 	%f796, %f7;\n"
    "	sub.f32 	%f797, %f796, %f795;\n"
    "	mov.f32 	%f798, %f797;\n"
    "	mov.f32 	%f799, %f798;\n"
    "	mul.f32 	%f800, %f11, %f798;\n"
    "	cvt.rni.f32.f32 	%f801, %f800;\n"
    "	mul.f32 	%f802, %f10, %f801;\n"
    "	sub.f32 	%f37, %f797, %f802;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f803, %f37, %f37, %f794;\n"
    "	ld.shared.f32 	%f804, [%rd19+3592];\n"
    "	mov.f32 	%f805, %f9;\n"
    "	sub.f32 	%f806, %f805, %f804;\n"
    "	mov.f32 	%f807, %f806;\n"
    "	mul.f32 	%f808, %f806, %f11;\n"
    "	cvt.rni.f32.f32 	%f809, %f808;\n"
    "	mul.f32 	%f810, %f10, %f809;\n"
    "	sub.f32 	%f47, %f806, %f810;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f803;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd49, %r54;\n"
    "	mul.wide.s32 	%rd50, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd50;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f811, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f812, %f54, %f811;\n"
    "	cvt.rzi.f32.f32 	%f57, %f812;\n"
    "	mov.f32 	%f813, %f57;\n"
    "	mov.f32 	%f814, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f815, %f814;\n"
    "	mov.f32 	%f816, %f54;\n"
    "	mad.f32 %f817, %f813, %f815, %f816;\n"
    "	mov.f32 	%f63, %f817;\n"
    "	mov.f32 	%f818, %f57;\n"
    "	mov.f32 	%f819, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f820, %f819;\n"
    "	mov.f32 	%f821, %f63;\n"
    "	mad.f32 %f822, %f818, %f820, %f821;\n"
    "	mov.f32 	%f63, %f822;\n"
    "	.loc	3	1662	0\n"
    "	mov.f32 	%f823, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f823;\n"
    "	mov.f32 	%f824, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f824;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd22+12];\n"
    "	ld.const.f32 	%f76, [%rd22+0];\n"
    "	ld.const.f32 	%f77, [%rd22+16];\n"
    "	ld.const.f32 	%f78, [%rd22+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f825, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f825;\n"
    "	mov.f32 	%f826, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f826;\n"
    "	mov.f32 	%f827, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f827;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f828, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f828;\n"
    "	mov.f32 	%f829, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f829;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f830, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f830, %f93, %p5;\n"
    "	mov.f32 	%f831, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f831, %f95, %p4;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f832, %f73, %f99;\n"
    "	sub.f32 	%f101, %f832, %f88;\n"
    "	mul.f32 	%f833, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f833;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f834, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f834, %f104, %p3;\n"
    "	mov.f32 	%f835, %f26;\n"
    "	mad.f32 	%f15, %f835, %f106, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f836, %f38;\n"
    "	mad.f32 	%f16, %f836, %f106, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f837, %f48;\n"
    "	mad.f32 	%f17, %f837, %f106, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	ld.shared.s32 	%r69, [%rd18+3852];\n"
    "	add.s32 	%r54, %r69, %r7;\n"
    "	ld.shared.f32 	%f838, [%rd19+3840];\n"
    "	mov.f32 	%f839, %f5;\n"
    "	sub.f32 	%f840, %f839, %f838;\n"
    "	mov.f32 	%f841, %f840;\n"
    "	mul.f32 	%f842, %f11, %f841;\n"
    "	cvt.rni.f32.f32 	%f843, %f842;\n"
    "	mul.f32 	%f844, %f10, %f843;\n"
    "	sub.f32 	%f25, %f840, %f844;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f845, 0f00000000;   	// 0\n"
    "	mad.f32 	%f846, %f25, %f25, %f845;\n"
    "	ld.shared.f32 	%f847, [%rd19+3844];\n"
    "	mov.f32 	%f848, %f7;\n"
    "	sub.f32 	%f849, %f848, %f847;\n"
    "	mov.f32 	%f850, %f849;\n"
    "	mov.f32 	%f851, %f850;\n"
    "	mul.f32 	%f852, %f11, %f850;\n"
    "	cvt.rni.f32.f32 	%f853, %f852;\n"
    "	mul.f32 	%f854, %f10, %f853;\n"
    "	sub.f32 	%f37, %f849, %f854;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f855, %f37, %f37, %f846;\n"
    "	ld.shared.f32 	%f856, [%rd19+3848];\n"
    "	mov.f32 	%f857, %f9;\n"
    "	sub.f32 	%f858, %f857, %f856;\n"
    "	mov.f32 	%f859, %f858;\n"
    "	mul.f32 	%f860, %f858, %f11;\n"
    "	cvt.rni.f32.f32 	%f861, %f860;\n"
    "	mul.f32 	%f862, %f10, %f861;\n"
    "	sub.f32 	%f47, %f858, %f862;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f855;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd51, %r54;\n"
    "	mul.wide.s32 	%rd52, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd52;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f863, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f864, %f54, %f863;\n"
    "	cvt.rzi.f32.f32 	%f57, %f864;\n"
    "	mov.f32 	%f865, %f57;\n"
    "	mov.f32 	%f866, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f867, %f866;\n"
    "	mov.f32 	%f868, %f54;\n"
    "	mad.f32 %f869, %f865, %f867, %f868;\n"
    "	mov.f32 	%f63, %f869;\n"
    "	mov.f32 	%f870, %f57;\n"
    "	mov.f32 	%f871, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f872, %f871;\n"
    "	mov.f32 	%f873, %f63;\n"
    "	mad.f32 %f874, %f870, %f872, %f873;\n"
    "	mov.f32 	%f63, %f874;\n"
    "	.loc	3	1662	0\n"
    "	mov.f32 	%f875, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f875;\n"
    "	mov.f32 	%f876, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f876;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd22+12];\n"
    "	ld.const.f32 	%f76, [%rd22+0];\n"
    "	ld.const.f32 	%f77, [%rd22+16];\n"
    "	ld.const.f32 	%f78, [%rd22+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f877, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f877;\n"
    "	mov.f32 	%f878, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f878;\n"
    "	mov.f32 	%f879, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f879;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f880, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f880;\n"
    "	mov.f32 	%f881, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f881;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f882, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f882, %f93, %p5;\n"
    "	mov.f32 	%f883, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f883, %f95, %p4;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f884, %f73, %f99;\n"
    "	sub.f32 	%f101, %f884, %f88;\n"
    "	mul.f32 	%f885, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f885;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f886, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f886, %f104, %p3;\n"
    "	mov.f32 	%f887, %f26;\n"
    "	mad.f32 	%f15, %f887, %f106, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f888, %f38;\n"
    "	mad.f32 	%f16, %f888, %f106, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f889, %f48;\n"
    "	mad.f32 	%f17, %f889, %f106, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	add.s32 	%r45, %r45, 256;\n"
    "	add.u64 	%rd17, %rd17, 4096;\n"
    "	setp.gt.s32 	%p6, %r40, %r45;\n"
    "	@%p6 bra 	$Lt_11_24322;\n"
    "$Lt_11_23810:\n"
    "	mov.u32 	%r70, 255;\n"
    "	setp.gt.s32 	%p7, %r45, %r70;\n"
    "	@%p7 bra 	$Lt_11_24834;\n"
    "	mov.s32 	%r71, 271;\n"
    "	sub.s32 	%r72, %r71, %r45;\n"
    "	shr.s32 	%r73, %r72, 31;\n"
    "	mov.s32 	%r74, 15;\n"
    "	and.b32 	%r75, %r73, %r74;\n"
    "	add.s32 	%r76, %r75, %r72;\n"
    "	shr.s32 	%r77, %r76, 4;\n"
    "	cvt.s64.s32 	%rd53, %r45;\n"
    "	mul.wide.s32 	%rd17, %r45, 16;\n"
    "	add.u64 	%rd18, %rd17, %rd9;\n"
    "	add.u64 	%rd19, %rd17, %rd9;\n"
    "	ld.shared.f32 	%f15, [%rd4+0];\n"
    "	ld.shared.f32 	%f16, [%rd4+4];\n"
    "	ld.shared.f32 	%f17, [%rd4+8];\n"
    "	mov.s32 	%r78, %r77;\n"
    "$Lt_11_25346:\n"
    " //<loop> Loop body line 1662, nesting depth: 2, estimated iterations: 15\n"
    "	ld.shared.s32 	%r79, [%rd18+12];\n"
    "	add.s32 	%r54, %r79, %r7;\n"
    "	ld.shared.f32 	%f890, [%rd19+0];\n"
    "	mov.f32 	%f891, %f5;\n"
    "	sub.f32 	%f892, %f891, %f890;\n"
    "	mov.f32 	%f893, %f892;\n"
    "	mul.f32 	%f894, %f11, %f893;\n"
    "	cvt.rni.f32.f32 	%f895, %f894;\n"
    "	mul.f32 	%f896, %f10, %f895;\n"
    "	sub.f32 	%f25, %f892, %f896;\n"
    "	mov.f32 	%f26, %f25;\n"
    "	mov.f32 	%f897, 0f00000000;   	// 0\n"
    "	mad.f32 	%f898, %f25, %f25, %f897;\n"
    "	ld.shared.f32 	%f899, [%rd19+4];\n"
    "	mov.f32 	%f900, %f7;\n"
    "	sub.f32 	%f901, %f900, %f899;\n"
    "	mov.f32 	%f902, %f901;\n"
    "	mov.f32 	%f903, %f902;\n"
    "	mul.f32 	%f904, %f11, %f902;\n"
    "	cvt.rni.f32.f32 	%f905, %f904;\n"
    "	mul.f32 	%f906, %f10, %f905;\n"
    "	sub.f32 	%f37, %f901, %f906;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f907, %f37, %f37, %f898;\n"
    "	ld.shared.f32 	%f908, [%rd19+8];\n"
    "	mov.f32 	%f909, %f9;\n"
    "	sub.f32 	%f910, %f909, %f908;\n"
    "	mov.f32 	%f911, %f910;\n"
    "	mul.f32 	%f912, %f910, %f11;\n"
    "	cvt.rni.f32.f32 	%f913, %f912;\n"
    "	mul.f32 	%f914, %f10, %f913;\n"
    "	sub.f32 	%f47, %f910, %f914;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f907;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f50, %f49;\n"
    "	cvt.s64.s32 	%rd54, %r54;\n"
    "	mul.wide.s32 	%rd55, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd55;\n"
    "	ld.const.f32 	%f51, [%rd22+8];\n"
    "	ld.const.f32 	%f52, [%rd22+4];\n"
    "	sub.f32 	%f53, %f52, %f50;\n"
    "	mul.f32 	%f54, %f51, %f53;\n"
    "	mov.f32 	%f915, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f916, %f54, %f915;\n"
    "	cvt.rzi.f32.f32 	%f57, %f916;\n"
    "	mov.f32 	%f917, %f57;\n"
    "	mov.f32 	%f918, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f919, %f918;\n"
    "	mov.f32 	%f920, %f54;\n"
    "	mad.f32 %f921, %f917, %f919, %f920;\n"
    "	mov.f32 	%f63, %f921;\n"
    "	mov.f32 	%f922, %f57;\n"
    "	mov.f32 	%f923, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f924, %f923;\n"
    "	mov.f32 	%f925, %f63;\n"
    "	mad.f32 %f926, %f922, %f924, %f925;\n"
    "	mov.f32 	%f63, %f926;\n"
    "	.loc	3	1662	0\n"
    "	mov.f32 	%f927, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f927;\n"
    "	mov.f32 	%f928, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f928;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	rcp.approx.f32 	%f73, %f50;\n"
    "	mul.f32 	%f74, %f73, %f73;\n"
    "	ld.const.f32 	%f75, [%rd22+12];\n"
    "	ld.const.f32 	%f76, [%rd22+0];\n"
    "	ld.const.f32 	%f77, [%rd22+16];\n"
    "	ld.const.f32 	%f78, [%rd22+20];\n"
    "	mul.f32 	%f79, %f74, %f74;\n"
    "	mul.f32 	%f80, %f73, %f74;\n"
    "	mov.f32 	%f929, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f82, %f75, %f929;\n"
    "	mov.f32 	%f930, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f84, %f76, %f930;\n"
    "	mov.f32 	%f931, 0f41000000;   	// 8\n"
    "	mul.f32 	%f86, %f77, %f931;\n"
    "	mul.f32 	%f87, %f79, %f79;\n"
    "	mul.f32 	%f88, %f82, %f87;\n"
    "	mul.f32 	%f89, %f86, %f87;\n"
    "	mov.f32 	%f932, 0f42d20000;   	// 105\n"
    "	setp.gt.f32 	%p4, %f54, %f932;\n"
    "	mov.f32 	%f933, 0fc2d20000;   	// -105\n"
    "	setp.lt.f32 	%p5, %f54, %f933;\n"
    "	ex2.approx.f32 	%f92, %f57;\n"
    "	mul.f32 	%f93, %f72, %f92;\n"
    "	mov.f32 	%f934, 0f00000000;   	// 0\n"
    "	selp.f32 	%f95, %f934, %f93, %p5;\n"
    "	mov.f32 	%f935, 0f7f800000;   	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f97, %f935, %f95, %p4;\n"
    "	mul.f32 	%f98, %f84, %f97;\n"
    "	mul.f32 	%f99, %f51, %f98;\n"
    "	mul.f32 	%f936, %f73, %f99;\n"
    "	sub.f32 	%f101, %f936, %f88;\n"
    "	mul.f32 	%f937, %f74, %f89;\n"
    "	sub.f32 	%f103, %f101, %f937;\n"
    "	mad.f32 	%f104, %f78, %f80, %f103;\n"
    "	mov.f32 	%f938, 0f00000000;   	// 0\n"
    "	selp.f32 	%f106, %f938, %f104, %p3;\n"
    "	mov.f32 	%f939, %f26;\n"
    "	mad.f32 	%f15, %f939, %f106, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f940, %f38;\n"
    "	mad.f32 	%f16, %f940, %f106, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f941, %f48;\n"
    "	mad.f32 	%f17, %f941, %f106, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	add.s32 	%r45, %r45, 16;\n"
    "	add.u64 	%rd19, %rd19, 256;\n"
    "	add.u64 	%rd18, %rd18, 256;\n"
    "	mov.u32 	%r80, 255;\n"
    "	setp.le.s32 	%p8, %r45, %r80;\n"
    "	@%p8 bra 	$Lt_11_25346;\n"
    "$Lt_11_24834:\n"
    "	add.s32 	%r41, %r41, 256;\n"
    "	setp.gt.s32 	%p9, %r19, %r41;\n"
    "	@%p9 bra 	$Lt_11_23554;\n"
    "$Lt_11_23042:\n"
    "	mov.u64 	%rd12, c_matrix;\n"
    "	.loc	3	1664	0\n"
    "	add.s32 	%r81, %r18, %r19;\n"
    "	mov.s32 	%r41, %r81;\n"
    "	setp.ge.s32 	%p10, %r81, %r8;\n"
    "	@%p10 bra 	$Lt_11_26114;\n"
    "	sub.s32 	%r82, %r8, %r81;\n"
    "	add.s32 	%r83, %r82, 15;\n"
    "	shr.s32 	%r84, %r83, 31;\n"
    "	mov.s32 	%r85, 15;\n"
    "	and.b32 	%r86, %r84, %r85;\n"
    "	add.s32 	%r87, %r86, %r83;\n"
    "	shr.s32 	%r88, %r87, 4;\n"
    "	ld.param.f32 	%f10, [__cudaparm_nacl_kernel_if2_xmax];\n"
    "	rcp.approx.f32 	%f11, %f10;\n"
    "	cvt.s64.s32 	%rd56, %r81;\n"
    "	mul.wide.s32 	%rd57, %r81, 16;\n"
    "	add.u64 	%rd58, %rd5, %rd57;\n"
    "	ld.shared.f32 	%f15, [%rd4+0];\n"
    "	ld.shared.f32 	%f16, [%rd4+4];\n"
    "	ld.shared.f32 	%f17, [%rd4+8];\n"
    "	mov.s32 	%r89, %r88;\n"
    "$Lt_11_26626:\n"
    " //<loop> Loop body line 1664, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	1665	0\n"
    "	ld.global.s32 	%r90, [%rd58+12];\n"
    "	add.s32 	%r91, %r90, %r7;\n"
    "	ld.global.f32 	%f942, [%rd58+0];\n"
    "	mov.f32 	%f943, %f5;\n"
    "	sub.f32 	%f944, %f943, %f942;\n"
    "	mov.f32 	%f945, %f944;\n"
    "	mul.f32 	%f946, %f11, %f945;\n"
    "	cvt.rni.f32.f32 	%f947, %f946;\n"
    "	.loc	3	1664	0\n"
    "	ld.param.f32 	%f10, [__cudaparm_nacl_kernel_if2_xmax];\n"
    "	.loc	3	1665	0\n"
    "	mul.f32 	%f948, %f10, %f947;\n"
    "	sub.f32 	%f949, %f944, %f948;\n"
    "	mov.f32 	%f950, %f949;\n"
    "	mov.f32 	%f951, 0f00000000;   	// 0\n"
    "	mad.f32 	%f952, %f949, %f949, %f951;\n"
    "	ld.global.f32 	%f953, [%rd58+4];\n"
    "	mov.f32 	%f954, %f7;\n"
    "	sub.f32 	%f955, %f954, %f953;\n"
    "	mov.f32 	%f956, %f955;\n"
    "	mov.f32 	%f957, %f956;\n"
    "	mul.f32 	%f958, %f11, %f956;\n"
    "	cvt.rni.f32.f32 	%f959, %f958;\n"
    "	mul.f32 	%f960, %f10, %f959;\n"
    "	sub.f32 	%f961, %f955, %f960;\n"
    "	mov.f32 	%f962, %f961;\n"
    "	mad.f32 	%f963, %f961, %f961, %f952;\n"
    "	ld.global.f32 	%f964, [%rd58+8];\n"
    "	mov.f32 	%f965, %f9;\n"
    "	sub.f32 	%f966, %f965, %f964;\n"
    "	mov.f32 	%f967, %f966;\n"
    "	mul.f32 	%f968, %f966, %f11;\n"
    "	cvt.rni.f32.f32 	%f969, %f968;\n"
    "	mul.f32 	%f970, %f10, %f969;\n"
    "	sub.f32 	%f971, %f966, %f970;\n"
    "	mov.f32 	%f972, %f971;\n"
    "	mad.f32 	%f973, %f971, %f971, %f963;\n"
    "	.loc	16	3138	0\n"
    "	sqrt.approx.f32 	%f974, %f973;\n"
    "	cvt.s64.s32 	%rd59, %r91;\n"
    "	mul.wide.s32 	%rd60, %r91, 24;\n"
    "	add.u64 	%rd61, %rd12, %rd60;\n"
    "	ld.const.f32 	%f975, [%rd61+8];\n"
    "	ld.const.f32 	%f976, [%rd61+4];\n"
    "	sub.f32 	%f977, %f976, %f974;\n"
    "	mul.f32 	%f978, %f975, %f977;\n"
    "	mov.f32 	%f979, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f980, %f978, %f979;\n"
    "	cvt.rzi.f32.f32 	%f981, %f980;\n"
    "	mov.f32 	%f982, %f981;\n"
    "	mov.f32 	%f983, 0fbf317200;   	// -0.693146\n"
    "	mov.f32 	%f984, %f983;\n"
    "	mov.f32 	%f985, %f978;\n"
    "	mad.f32 %f986, %f982, %f984, %f985;\n"
    "	mov.f32 	%f63, %f986;\n"
    "	mov.f32 	%f987, %f981;\n"
    "	mov.f32 	%f988, 0fb5bfbe8e;   	// -1.42861e-06\n"
    "	mov.f32 	%f989, %f988;\n"
    "	mov.f32 	%f990, %f63;\n"
    "	mad.f32 %f991, %f987, %f989, %f990;\n"
    "	mov.f32 	%f63, %f991;\n"
    "	.loc	3	1665	0\n"
    "	mov.f32 	%f992, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p11, %f973, %f992;\n"
    "	mov.f32 	%f993, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f70, %f63, %f993;\n"
    "	rcp.approx.f32 	%f994, %f974;\n"
    "	ex2.approx.f32 	%f72, %f70;\n"
    "	mul.f32 	%f995, %f994, %f994;\n"
    "	ld.const.f32 	%f996, [%rd61+12];\n"
    "	ld.const.f32 	%f997, [%rd61+0];\n"
    "	ld.const.f32 	%f998, [%rd61+16];\n"
    "	ld.const.f32 	%f999, [%rd61+20];\n"
    "	mul.f32 	%f1000, %f995, %f995;\n"
    "	mul.f32 	%f1001, %f994, %f995;\n"
    "	mov.f32 	%f1002, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1003, %f996, %f1002;\n"
    "	mov.f32 	%f1004, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1005, %f997, %f1004;\n"
    "	mov.f32 	%f1006, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1007, %f998, %f1006;\n"
    "	mul.f32 	%f1008, %f1000, %f1000;\n"
    "	mul.f32 	%f1009, %f1003, %f1008;\n"
    "	mul.f32 	%f1010, %f1007, %f1008;\n"
    "	mov.f32 	%f1011, 0f42d20000;  	// 105\n"
    "	setp.gt.f32 	%p12, %f978, %f1011;\n"
    "	mov.f32 	%f1012, 0fc2d20000;  	// -105\n"
    "	setp.lt.f32 	%p13, %f978, %f1012;\n"
    "	ex2.approx.f32 	%f1013, %f981;\n"
    "	mul.f32 	%f1014, %f72, %f1013;\n"
    "	mov.f32 	%f1015, 0f00000000;  	// 0\n"
    "	selp.f32 	%f1016, %f1015, %f1014, %p13;\n"
    "	mov.f32 	%f1017, 0f7f800000;  	// ((1.0F)/(0.0F))\n"
    "	selp.f32 	%f1018, %f1017, %f1016, %p12;\n"
    "	mul.f32 	%f1019, %f1005, %f1018;\n"
    "	mul.f32 	%f1020, %f975, %f1019;\n"
    "	mul.f32 	%f1021, %f994, %f1020;\n"
    "	sub.f32 	%f1022, %f1021, %f1009;\n"
    "	mul.f32 	%f1023, %f995, %f1010;\n"
    "	sub.f32 	%f1024, %f1022, %f1023;\n"
    "	mad.f32 	%f1025, %f999, %f1001, %f1024;\n"
    "	mov.f32 	%f1026, 0f00000000;  	// 0\n"
    "	selp.f32 	%f1027, %f1026, %f1025, %p11;\n"
    "	mov.f32 	%f1028, %f950;\n"
    "	mad.f32 	%f15, %f1028, %f1027, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f1029, %f962;\n"
    "	mad.f32 	%f16, %f1029, %f1027, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mov.f32 	%f1030, %f972;\n"
    "	mad.f32 	%f17, %f1030, %f1027, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	add.s32 	%r41, %r41, 16;\n"
    "	add.u64 	%rd58, %rd58, 256;\n"
    "	setp.gt.s32 	%p14, %r8, %r41;\n"
    "	@%p14 bra 	$Lt_11_26626;\n"
    "$Lt_11_26114:\n"
    "	.loc	3	1672	0\n"
    "	bar.sync 	0;\n"
    "	mov.u32 	%r92, 127;\n"
    "	setp.gt.s32 	%p15, %r1, %r92;\n"
    "	@%p15 bra 	$Lt_11_27138;\n"
    "	.loc	3	1673	0\n"
    "	ld.shared.f32 	%f1031, [%rd4+0];\n"
    "	ld.shared.f32 	%f1032, [%rd4+1536];\n"
    "	add.f32 	%f1033, %f1031, %f1032;\n"
    "	st.shared.f32 	[%rd4+0], %f1033;\n"
    "	ld.shared.f32 	%f1034, [%rd4+4];\n"
    "	ld.shared.f32 	%f1035, [%rd4+1540];\n"
    "	add.f32 	%f1036, %f1034, %f1035;\n"
    "	st.shared.f32 	[%rd4+4], %f1036;\n"
    "	ld.shared.f32 	%f1037, [%rd4+8];\n"
    "	ld.shared.f32 	%f1038, [%rd4+1544];\n"
    "	add.f32 	%f1039, %f1037, %f1038;\n"
    "	st.shared.f32 	[%rd4+8], %f1039;\n"
    "$Lt_11_27138:\n"
    "	.loc	3	1676	0\n"
    "	bar.sync 	0;\n"
    "	mov.u32 	%r93, 63;\n"
    "	setp.gt.s32 	%p16, %r1, %r93;\n"
    "	@%p16 bra 	$Lt_11_27650;\n"
    "	.loc	3	1677	0\n"
    "	ld.shared.f32 	%f1040, [%rd4+0];\n"
    "	ld.shared.f32 	%f1041, [%rd4+768];\n"
    "	add.f32 	%f1042, %f1040, %f1041;\n"
    "	st.shared.f32 	[%rd4+0], %f1042;\n"
    "	ld.shared.f32 	%f1043, [%rd4+4];\n"
    "	ld.shared.f32 	%f1044, [%rd4+772];\n"
    "	add.f32 	%f1045, %f1043, %f1044;\n"
    "	st.shared.f32 	[%rd4+4], %f1045;\n"
    "	ld.shared.f32 	%f1046, [%rd4+8];\n"
    "	ld.shared.f32 	%f1047, [%rd4+776];\n"
    "	add.f32 	%f1048, %f1046, %f1047;\n"
    "	st.shared.f32 	[%rd4+8], %f1048;\n"
    "$Lt_11_27650:\n"
    "	.loc	3	1680	0\n"
    "	bar.sync 	0;\n"
    "	mov.u32 	%r94, 31;\n"
    "	setp.gt.s32 	%p17, %r1, %r94;\n"
    "	@%p17 bra 	$Lt_11_28162;\n"
    "	.loc	3	1681	0\n"
    "	ld.shared.f32 	%f1049, [%rd4+0];\n"
    "	ld.shared.f32 	%f1050, [%rd4+384];\n"
    "	add.f32 	%f1051, %f1049, %f1050;\n"
    "	st.shared.f32 	[%rd4+0], %f1051;\n"
    "	ld.shared.f32 	%f1052, [%rd4+4];\n"
    "	ld.shared.f32 	%f1053, [%rd4+388];\n"
    "	add.f32 	%f1054, %f1052, %f1053;\n"
    "	st.shared.f32 	[%rd4+4], %f1054;\n"
    "	ld.shared.f32 	%f1055, [%rd4+8];\n"
    "	ld.shared.f32 	%f1056, [%rd4+392];\n"
    "	add.f32 	%f1057, %f1055, %f1056;\n"
    "	st.shared.f32 	[%rd4+8], %f1057;\n"
    "$Lt_11_28162:\n"
    "	mov.u32 	%r95, 15;\n"
    "	setp.gt.s32 	%p18, %r1, %r95;\n"
    "	@%p18 bra 	$Lt_11_28674;\n"
    "	.loc	3	1684	0\n"
    "	ld.shared.f32 	%f1058, [%rd4+0];\n"
    "	ld.shared.f32 	%f1059, [%rd4+192];\n"
    "	add.f32 	%f1060, %f1058, %f1059;\n"
    "	st.shared.f32 	[%rd4+0], %f1060;\n"
    "	ld.shared.f32 	%f1061, [%rd4+4];\n"
    "	ld.shared.f32 	%f1062, [%rd4+196];\n"
    "	add.f32 	%f1063, %f1061, %f1062;\n"
    "	st.shared.f32 	[%rd4+4], %f1063;\n"
    "	ld.shared.f32 	%f1064, [%rd4+8];\n"
    "	ld.shared.f32 	%f1065, [%rd4+200];\n"
    "	add.f32 	%f1066, %f1064, %f1065;\n"
    "	st.shared.f32 	[%rd4+8], %f1066;\n"
    "$Lt_11_28674:\n"
    "	mov.u32 	%r96, 0;\n"
    "	setp.ne.s32 	%p19, %r18, %r96;\n"
    "	@%p19 bra 	$Lt_11_29186;\n"
    "	.loc	3	1698	0\n"
    "	ld.param.u64 	%rd62, [__cudaparm_nacl_kernel_if2_fvec];\n"
    "	mul.lo.s32 	%r97, %r4, 3;\n"
    "	cvt.s64.s32 	%rd63, %r97;\n"
    "	mul.wide.s32 	%rd64, %r97, 4;\n"
    "	add.u64 	%rd65, %rd62, %rd64;\n"
    "	ld.shared.f32 	%f1067, [%rd4+0];\n"
    "	st.global.f32 	[%rd65+0], %f1067;\n"
    "	ld.shared.f32 	%f1068, [%rd4+4];\n"
    "	st.global.f32 	[%rd65+4], %f1068;\n"
    "	ld.shared.f32 	%f1069, [%rd4+8];\n"
    "	st.global.f32 	[%rd65+8], %f1069;\n"
    "$Lt_11_29186:\n"
    "	.loc	3	1699	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel_if2:\n"
    "	} // nacl_kernel_if2\n"
    "\n";
#pragma dscuda endofptx
# 1 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h" 1



# 1 "/usr/include/stdint.h" 1 3 4
# 27 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 49 "/usr/include/stdint.h" 3 4
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;



typedef unsigned long int uint64_t;
# 66 "/usr/include/stdint.h" 3 4
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 91 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 104 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 120 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 135 "/usr/include/stdint.h" 3 4
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
# 5 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include-fixed/limits.h" 1 3 4
# 6 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h" 2
# 1 "/usr/local/cuda/include/cuda_runtime_api.h" 1
# 7 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h" 2
# 1 "/usr/local/cuda/include/builtin_types.h" 1
# 8 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h" 2
# 1 "/usr/local/cuda/include/driver_types.h" 1
# 9 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h" 2
# 1 "/usr/local/cuda/include/cuda_texture_types.h" 1
# 10 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h" 2
# 1 "/usr/local/cuda/include/texture_types.h" 1
# 11 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h" 2
# 1 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscudadefs.h" 1
# 12 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h" 2
# 1 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscudamacros.h" 1
# 14 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscudamacros.h"
int dscudaWarnLevel(void);
void dscudaSetWarnLevel(int level);
# 13 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h" 2
# 1 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/ibvdefs.h" 1
# 14 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h" 2
# 1 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/tcpdefs.h" 1



typedef struct {
    int svrsock;
    int sendbufsize;
    int recvbufsize;
    char *sendbuf;
    char *recvbuf;
} TcpConnection;
# 15 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h" 2

typedef unsigned long RCadr;
typedef unsigned long RCstream;
typedef unsigned long RCevent;
typedef unsigned long RCipaddr;
typedef unsigned int RCsize;
typedef unsigned long RCpid;
typedef struct {
    unsigned int x;
    unsigned int y;
    unsigned int z;
} RCdim3;

typedef unsigned int RCchannelformat;

typedef struct {
    int normalized;
    int filterMode;
    int addressMode[3];
    RCchannelformat f;
    int w;
    int x;
    int y;
    int z;
} RCtexture;

enum RCargType {
    dscudaArgTypeP = 0,
    dscudaArgTypeI = 1,
    dscudaArgTypeF = 2,
    dscudaArgTypeV = 3
};

typedef struct {
    int type;
    union {
        unsigned long pointerval;
        unsigned int intval;
        float floatval;
        char customval[64];
    } val;
    unsigned int offset;
    unsigned int size;
} RCArg;

typedef char *RCbuf;

typedef enum {
    RCMethodNone = 0,
    RCMethodMemcpyH2D,
    RCMethodMemcpyD2H,
    RCMethodMemcpyD2D,
    RCMethodMemset,
    RCMethodMalloc,
    RCMethodFree,
    RCMethodGetErrorString,
    RCMethodGetDeviceProperties,
    RCMethodRuntimeGetVersion,
    RCMethodThreadSynchronize,
    RCMethodThreadExit,
    RCMethodDeviceSynchronize,
    RCMethodCreateChannelDesc,
    RCMethodDeviceSetLimit,
    RCMethodDeviceSetSharedMemConfig,


    RCMethodDscudaMemcpyToSymbolH2D,
    RCMethodDscudaMemcpyToSymbolD2D,
    RCMethodDscudaMemcpyFromSymbolD2H,
    RCMethodDscudaMemcpyFromSymbolD2D,
    RCMethodDscudaMemcpyToSymbolAsyncH2D,
    RCMethodDscudaMemcpyToSymbolAsyncD2D,
    RCMethodDscudaMemcpyFromSymbolAsyncD2H,
    RCMethodDscudaMemcpyFromSymbolAsyncD2D,
    RCMethodDscudaLoadModule,
    RCMethodDscudaLaunchKernel,
    RCMethodDscudaBindTexture,
    RCMethodDscudaUnbindTexture,





    RCMethodLaunch,
    RCMethodConfigureCall,
    RCMethodSetupArgument,


    RCMethodDscudaRegisterFatBinary,
    RCMethodDscudaUnregisterFatBinary,
    RCMethodDscudaRegisterFunction,
    RCMethodDscudaRegisterVar,


    RCMethodDscudaSortByKey,

    RCMethodEnd,


    RCMethodSetDevice,

} RCMethod;


typedef struct {
    RCMethod method;
    int payload;
} RCHdr;


typedef struct {
    RCMethod method;
    int payload;
    size_t count;
    RCadr dstadr;
    void *srcbuf;
} RCMemcpyH2DInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCMemcpyH2DReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    size_t count;
    RCadr srcadr;
} RCMemcpyD2HInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
    void *dstbuf;
} RCMemcpyD2HReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    size_t count;
    RCadr dstadr;
    RCadr srcadr;
} RCMemcpyD2DInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCMemcpyD2DReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int value;
    size_t count;
    RCadr devptr;
} RCMemsetInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCMemsetReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    size_t size;
} RCMallocInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
    RCadr devAdr;
} RCMallocReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    RCadr devAdr;
} RCFreeInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCFreeReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int device;
    cudaError_t err;
} RCGetErrorStringInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    char *errmsg;
} RCGetErrorStringReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int device;
} RCGetDevicePropertiesInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
    cudaDeviceProp prop;
} RCGetDevicePropertiesReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    char dummy[8];
} RCRuntimeGetVersionInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
    int version;
} RCRuntimeGetVersionReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    char dummy[8];
} RCThreadSynchronizeInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCThreadSynchronizeReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    char dummy[8];
} RCThreadExitInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCThreadExitReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    char dummy[8];
} RCDeviceSynchronizeInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDeviceSynchronizeReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int x, y, z, w;
    enum cudaChannelFormatKind f;
} RCCreateChannelDescInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaChannelFormatDesc desc;
} RCCreateChannelDescReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    cudaLimit limit;
    size_t value;
} RCDeviceSetLimitInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDeviceSetLimitReturnHdr;
# 329 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h"
typedef struct {
    RCMethod method;
    int payload;
    int config;
} RCDeviceSetSharedMemConfigInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDeviceSetSharedMemConfigReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int moduleid;
    char symbol[128];
    size_t count;
    size_t offset;
    void *srcbuf;
} RCDscudaMemcpyToSymbolH2DInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaMemcpyToSymbolH2DReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int moduleid;
    char symbol[128];
    size_t count;
    size_t offset;
    RCadr srcadr;
} RCDscudaMemcpyToSymbolD2DInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaMemcpyToSymbolD2DReturnHdr;



typedef struct {
    RCMethod method;
    int payload;
    int moduleid;
    char symbol[128];
    size_t count;
    size_t offset;
} RCDscudaMemcpyFromSymbolD2HInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
    void *dstbuf;
} RCDscudaMemcpyFromSymbolD2HReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int moduleid;
    char symbol[128];
    size_t count;
    size_t offset;
    RCadr dstadr;
} RCDscudaMemcpyFromSymbolD2DInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaMemcpyFromSymbolD2DReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int moduleid;
    char symbol[128];
    size_t count;
    size_t offset;
    RCstream stream;
    void *src;
} RCDscudaMemcpyToSymbolAsyncH2DInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaMemcpyToSymbolAsyncH2DReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int moduleid;
    char symbol[128];
    size_t count;
    size_t offset;
    RCstream stream;
    RCadr srcadr;
} RCDscudaMemcpyToSymbolAsyncD2DInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaMemcpyToSymbolAsyncD2DReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int moduleid;
    char symbol[128];
    size_t count;
    size_t offset;
    RCstream stream;
} RCDscudaMemcpyFromSymbolAsyncD2HInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
    void *dst;
} RCDscudaMemcpyFromSymbolAsyncD2HReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int moduleid;
    char symbol[128];
    size_t count;
    size_t offset;
    RCstream stream;
    RCadr dstadr;
} RCDscudaMemcpyFromSymbolAsyncD2DInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaMemcpyFromSymbolAsyncD2DReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    unsigned long long int ipaddr;
    unsigned long int pid;
    char modulename[128];
    void *moduleimage;
} RCDscudaLoadModuleInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
    int moduleid;
} RCDscudaLoadModuleReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int moduleid;
    int kernelid;
    char kernelname[128];
    unsigned int gdim[3];
    unsigned int bdim[3];
    unsigned int smemsize;
    RCstream stream;
    int narg;
    void *args;
} RCDscudaLaunchKernelInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaLaunchKernelReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int moduleid;
    char texname[128];
    RCtexture texbuf;
    RCadr devptr;
    size_t size;
} RCDscudaBindTextureInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    size_t offset;
    cudaError_t err;
} RCDscudaBindTextureReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int moduleid;
    char texname[128];
} RCDscudaUnbindTextureInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaUnbindTextureReturnHdr;



typedef struct {
    RCMethod method;
    int payload;
    RCadr func;
} RCLaunchInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCLaunchReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    unsigned int gdim[3];
    unsigned int bdim[3];
    unsigned int smemsize;
    RCstream stream;
} RCConfigureCallInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCConfigureCallReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int size;
    int offset;
    void *argbuf;
} RCSetupArgumentInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCSetupArgumentReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    size_t count;
    int m;
    int v;
    char f[256];
    void *fatbinbuf;
} RCDscudaRegisterFatBinaryInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    RCadr handle;
    cudaError_t err;
} RCDscudaRegisterFatBinaryReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    RCadr handle;
    cudaError_t err;
} RCDscudaUnregisterFatBinaryInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaUnregisterFatBinaryReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    RCadr handle;
    RCadr hfunc;
    char dfunc[128];
    char dname[128];
    int tlimit;
} RCDscudaRegisterFunctionInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaRegisterFunctionReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    RCadr handle;
    RCadr hvar;
    char dvar[128];
    char dname[128];
    int ext;
    int size;
    int constant;
    int global;
} RCDscudaRegisterVarInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaRegisterVarReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    int nitems;
    RCadr key;
    RCadr value;
} RCDscudaSortByKeyInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaSortByKeyReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    size_t count;
    RCadr srcadr;
    RCadr dstadr;
    unsigned int dstip;
    int port;
} RCDscudaSendP2PInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaSendP2PReturnHdr;


typedef struct {
    RCMethod method;
    int payload;
    unsigned int srcip;
    int port;
} RCDscudaRecvP2PInvokeHdr;

typedef struct {
    RCMethod method;
    int payload;
    cudaError_t err;
} RCDscudaRecvP2PReturnHdr;


typedef struct {
    RCMethod dummy;
    int payload;
    int size;
    size_t count;
    RCadr dstadr;
    void *srcbuf;
} P2PInvokeHdr;

typedef struct {
    RCMethod dummy;
    int payload;
    int size;
    cudaError_t err;
} P2PReturnHdr;

typedef struct {int m; int v; unsigned long long* d; char* f;} fatDeviceText_t;

enum {
    RC_REMOTECALL_TYPE_TCP,
    RC_REMOTECALL_TYPE_IBV,
};


char *dscudaMemcpyKindName(cudaMemcpyKind kind);

unsigned int dscudaServerNameToAddr(char *svrname);
unsigned int dscudaServerNameToDevid(char *svrname);
unsigned int dscudaServerIpStrToAddr(char *ipstr);
char * dscudaAddrToServerIpStr(unsigned int addr);
int dscudaAlignUp(int off, int align);
unsigned int dscudaRoundUp(unsigned int src, unsigned int by);
double RCgetCputime(double *t0);


void *dscudaUvaOfAdr(void *adr, int devid);
int dscudaDevidOfUva(void *adr);
void *dscudaAdrOfUva(void *adr);
int dscudaNredundancy(void);
void dscudaSetAutoVerb(int verb);
int dscudaRemoteCallType(void);
void dscudaSetErrorHandler(void (*handler)(void *), void *handler_arg);
void dscudaGetMangledFunctionName(char *name, const char *funcif, const char *ptxdata);
int *dscudaLoadModule(char *srcname, char *strdata);
void dscudaLaunchKernelWrapper(int *moduleid, int kid, char *kname,
                               int *gdim, int *bdim, RCsize smemsize, RCstream stream,
                               int narg, RCArg *arg);

cudaError_t dscudaFuncGetAttributesWrapper(int *moduleid, struct cudaFuncAttributes *attr, const char *func);

cudaError_t dscudaMemcpyToSymbolWrapper(int *moduleid, const char *symbol, const void *src,
                                       size_t count, size_t offset = 0,
                                       enum cudaMemcpyKind kind = cudaMemcpyHostToDevice);

cudaError_t dscudaMemcpyToSymbolAsyncWrapper(int *moduleid, const char *symbol, const void *src,
         size_t count, size_t offset = 0,
         enum cudaMemcpyKind kind = cudaMemcpyHostToDevice, cudaStream_t stream = 0);

cudaError_t dscudaMemcpyFromSymbolWrapper(int *moduleid, void *dst, const char *symbol,
      size_t count, size_t offset = 0,
      enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost);

cudaError_t dscudaMemcpyFromSymbolAsyncWrapper(int *moduleid, void *dst, const char *symbol,
           size_t count, size_t offset = 0,
           enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost, cudaStream_t stream = 0);


cudaError_t dscudaBindTextureWrapper(int *moduleid, char *texname,
                                    size_t *offset,
                                    const struct textureReference *tex,
                                    const void *devPtr,
                                    const struct cudaChannelFormatDesc *desc,
                                    size_t size = (2147483647 * 2U + 1U));

template<class T, int dim, enum cudaTextureReadMode readMode>
cudaError_t dscudaBindTextureWrapper(int *moduleid, char *texname,
                                    size_t *offset,
                                    const struct texture<T, dim, readMode> &tex,
                                    const void *devPtr,
                                    const struct cudaChannelFormatDesc &desc,
                                    size_t size = (2147483647 * 2U + 1U))
{
    return dscudaBindTextureWrapper(moduleid, texname, offset, &tex, devPtr, &desc, size);
}

template<class T, int dim, enum cudaTextureReadMode readMode>
cudaError_t dscudaBindTextureWrapper(int *moduleid, char *texname,
                                    size_t *offset,
                                    const struct texture<T, dim, readMode> &tex,
                                    const void *devPtr,
                                    size_t size = (2147483647 * 2U + 1U))
{
    return dscudaBindTextureWrapper(moduleid, texname, offset, &tex, devPtr, &tex.channelDesc, size);
}
# 866 "/usr/local/DSCUDA/dscudapkg1.7.5.1/bin/../include/dscuda.h"
cudaError_t dscudaSortByKey(const int nitems, uint64_t *key, int *value);
# 28682 "./dscudatmp/mr3.cu" 2

# 1 "/usr/include/stdio.h" 1 3 4
# 30 "/usr/include/stdio.h" 3 4
extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include/stddef.h" 1 3 4
# 35 "/usr/include/stdio.h" 2 3 4
# 45 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 65 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 75 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 32 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 83 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4

typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 53 "/usr/include/_G_config.h" 3 4
typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));
typedef int _G_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));
# 33 "/usr/include/libio.h" 2 3 4
# 53 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/4.4.7/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 54 "/usr/include/libio.h" 2 3 4
# 172 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 182 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 205 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 273 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 321 "/usr/include/libio.h" 3 4
  __off64_t _offset;
# 330 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 366 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 462 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 492 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 554 "/usr/include/libio.h" 3 4
}
# 76 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 109 "/usr/include/stdio.h" 3 4


typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 165 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 166 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (__const char *__filename) throw ();

extern int rename (__const char *__old, __const char *__new) throw ();




extern int renameat (int __oldfd, __const char *__old, int __newfd,
       __const char *__new) throw ();








extern FILE *tmpfile (void) ;
# 206 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;





extern char *tmpnam_r (char *__s) throw () ;
# 228 "/usr/include/stdio.h" 3 4
extern char *tempnam (__const char *__dir, __const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 253 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 263 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);









extern FILE *fopen (__const char *__restrict __filename,
      __const char *__restrict __modes) ;




extern FILE *freopen (__const char *__restrict __filename,
        __const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 296 "/usr/include/stdio.h" 3 4


extern FILE *fopen64 (__const char *__restrict __filename,
        __const char *__restrict __modes) ;
extern FILE *freopen64 (__const char *__restrict __filename,
   __const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, __const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     __const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, __const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();








extern int fprintf (FILE *__restrict __stream,
      __const char *__restrict __format, ...);




extern int printf (__const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      __const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (__const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg) throw ();





extern int snprintf (char *__restrict __s, size_t __maxlen,
       __const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        __const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, __const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         __const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       __const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
# 418 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, __const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, __const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     __const char *__restrict __format, ...) ;




extern int scanf (__const char *__restrict __format, ...) ;

extern int sscanf (__const char *__restrict __s,
     __const char *__restrict __format, ...) throw ();
# 469 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (__const char *__restrict __s,
      __const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 528 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 556 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 567 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 600 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;






extern char *gets (char *__s) ;

# 646 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 662 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (__const char *__restrict __s, FILE *__restrict __stream);





extern int puts (__const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 723 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (__const char *__restrict __s,
      FILE *__restrict __stream);
# 734 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (__const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 770 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 789 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, __const fpos_t *__pos);
# 812 "/usr/include/stdio.h" 3 4



extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, __const fpos64_t *__pos);




extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;




extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;








extern void perror (__const char *__s);






# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern __const char *__const sys_errlist[];


extern int _sys_nerr;
extern __const char *__const _sys_errlist[];
# 851 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 870 "/usr/include/stdio.h" 3 4
extern FILE *popen (__const char *__command, __const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      __const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       __const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 940 "/usr/include/stdio.h" 3 4
}
# 28684 "./dscudatmp/mr3.cu" 2


# 1 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h" 1
# 37 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
extern "C" {
# 60 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
    enum CUTBoolean
    {
        CUTFalse = 0,
        CUTTrue = 1
    };





   
    void
   cutFree( void* ptr);
# 88 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    void
    cutCheckBankAccess( unsigned int tidx, unsigned int tidy, unsigned int tidz,
                        unsigned int bdimx, unsigned int bdimy,
                        unsigned int bdimz, const char* file, const int line,
                        const char* aname, const int index);







   
    char*
    cutFindFilePath(const char* filename, const char* executablePath);
# 116 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutReadFilef( const char* filename, float** data, unsigned int* len,
                  bool verbose = false);
# 132 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutReadFiled( const char* filename, double** data, unsigned int* len,
                  bool verbose = false);
# 148 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutReadFilei( const char* filename, int** data, unsigned int* len, bool verbose = false);
# 163 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutReadFileui( const char* filename, unsigned int** data,
                   unsigned int* len, bool verbose = false);
# 179 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutReadFileb( const char* filename, char** data, unsigned int* len,
                  bool verbose = false);
# 195 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutReadFileub( const char* filename, unsigned char** data,
                   unsigned int* len, bool verbose = false);
# 209 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutWriteFilef( const char* filename, const float* data, unsigned int len,
                   const float epsilon, bool verbose = false);
# 223 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutWriteFiled( const char* filename, const float* data, unsigned int len,
                   const double epsilon, bool verbose = false);
# 235 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutWriteFilei( const char* filename, const int* data, unsigned int len,
                   bool verbose = false);
# 247 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutWriteFileui( const char* filename,const unsigned int* data,
                    unsigned int len, bool verbose = false);
# 259 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutWriteFileb( const char* filename, const char* data, unsigned int len,
                   bool verbose = false);
# 271 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutWriteFileub( const char* filename,const unsigned char* data,
                    unsigned int len, bool verbose = false);
# 287 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutLoadPGMub( const char* file, unsigned char** data,
                  unsigned int *w,unsigned int *h);
# 300 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutLoadPPMub( const char* file, unsigned char** data,
                  unsigned int *w,unsigned int *h);
# 314 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutLoadPPM4ub( const char* file, unsigned char** data,
                   unsigned int *w,unsigned int *h);
# 330 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
        cutLoadPGMi( const char* file, unsigned int** data,
                     unsigned int* w, unsigned int* h);
# 346 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
        cutLoadPGMs( const char* file, unsigned short** data,
                     unsigned int* w, unsigned int* h);
# 361 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
        cutLoadPGMf( const char* file, float** data,
                     unsigned int* w, unsigned int* h);
# 373 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
        cutSavePGMub( const char* file, unsigned char* data,
                      unsigned int w, unsigned int h);
# 385 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutSavePPMub( const char* file, unsigned char *data,
                unsigned int w, unsigned int h);
# 398 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutSavePPM4ub( const char* file, unsigned char *data,
                   unsigned int w, unsigned int h);
# 410 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutSavePGMi( const char* file, unsigned int* data,
                 unsigned int w, unsigned int h);
# 422 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutSavePGMs( const char* file, unsigned short* data,
                 unsigned int w, unsigned int h);
# 434 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutSavePGMf( const char* file, float* data,
                 unsigned int w, unsigned int h);
# 455 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutCheckCmdLineFlag( const int argc, const char** argv,
                         const char* flag_name);
# 469 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutGetCmdLineArgumenti( const int argc, const char** argv,
                            const char* arg_name, int* val);
# 483 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutGetCmdLineArgumentf( const int argc, const char** argv,
                            const char* arg_name, float* val);
# 497 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutGetCmdLineArgumentstr( const int argc, const char** argv,
                              const char* arg_name, char** val);
# 512 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutGetCmdLineArgumentListstr( const int argc, const char** argv,
                                  const char* arg_name, char** val,
                                  unsigned int* len);
# 526 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutCheckCondition( int val, const char* file, const int line);
# 538 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutComparef( const float* reference, const float* data,
                 const unsigned int len);
# 551 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutComparei( const int* reference, const int* data,
                 const unsigned int len );
# 565 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutCompareuit( const unsigned int* reference, const unsigned int* data,
                const unsigned int len, const float epsilon, const float threshold );
# 578 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutCompareub( const unsigned char* reference, const unsigned char* data,
                  const unsigned int len );
# 593 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutCompareubt( const unsigned char* reference, const unsigned char* data,
                 const unsigned int len, const float epsilon, const float threshold );
# 607 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutCompareube( const unsigned char* reference, const unsigned char* data,
                 const unsigned int len, const float epsilon );
# 621 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutComparefe( const float* reference, const float* data,
                  const unsigned int len, const float epsilon );
# 636 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutComparefet( const float* reference, const float* data,
                 const unsigned int len, const float epsilon, const float threshold );
# 651 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutCompareL2fe( const float* reference, const float* data,
                    const unsigned int len, const float epsilon );
# 666 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
 cutComparePPM( const char *src_file, const char *ref_file, const float epsilon, const float threshold, bool verboseErrors = false );
# 679 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    CUTBoolean
    cutCreateTimer( unsigned int* name);






   
    CUTBoolean
    cutDeleteTimer( unsigned int name);





   
    CUTBoolean
    cutStartTimer( const unsigned int name);





   
    CUTBoolean
    cutStopTimer( const unsigned int name);





   
    CUTBoolean
    cutResetTimer( const unsigned int name);






   
    float
    cutGetTimerValue( const unsigned int name);
# 732 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
   
    float
    cutGetAverageTimerValue( const unsigned int name);
# 926 "/usr/local/cuda/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
}
# 28687 "./dscudatmp/mr3.cu" 2
# 28701 "./dscudatmp/mr3.cu"
typedef struct {
  float r[3];
  int atype;
} VG_XVEC;

typedef struct {
  float pol;
  float sigm;
  float ipotro;
  float pc;
  float pd;
  float zz;
} VG_MATRIX;

__attribute__((constant)) VG_MATRIX c_matrix[(32 * 32)];

static int Dev=-1;

extern "C"
void MR3init(void)
{
  if(Dev<0){
    char *s;
    s=getenv("VG_DEVICEID");
    if(s!=__null){
      sscanf(s,"%d",&Dev);
      printf("VG_DEVICEID is set %d\n",Dev);
    }
    else{
      Dev=0;
    }
    cudaSetDevice(Dev);
    cudaDeviceProp deviceProp;
    cudaGetDeviceProperties(&deviceProp, Dev);
    printf("Device %d: %s\n", Dev, deviceProp.name);
  }
}

extern "C"
void MR3free(void)
{
}



/*
 * stub for remote call to nacl_kernel.
 */
void
dscudanacl_kernel(dim3 _gdim, dim3 _bdim, size_t _smemsize, cudaStream_t _stream , float *x, int n, int *atype, int nat, float *pol, float *sigm, float *ipotro,
   float *pc, float *pd, float *zz, int tblno, float xmax, int periodicflag,
   float *force)
{
    int _narg = 14;
    int _grid[3], _block[3];
    RCArg _arg[14], *_argp;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (0) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, Ptxdata);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
//        WARN(3, "mangled name : %s\n", mangledname_);
    }


    // a pointer to a device-address 'dscudaAdrOfUva((void *)x)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)x);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // an integer 'n'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = n;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)atype)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)atype);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // an integer 'nat'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = nat;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)pol)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)pol);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)sigm)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)sigm);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)ipotro)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)ipotro);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)pc)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)pc);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)pd)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)pd);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)zz)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)zz);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // an integer 'tblno'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = tblno;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // a float 'xmax'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(float));
    _argp->type = dscudaArgTypeF;
    _argp->offset = _off;
    _argp->val.floatval = xmax;
    _argp->size = sizeof(float);
    _off += _argp->size;


    // an integer 'periodicflag'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = periodicflag;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)force)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)force);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;

        _grid[0] = _gdim.x; _grid[1] = _gdim.y; _grid[2] = _gdim.z;
        _block[0] = _bdim.x; _block[1] = _bdim.y; _block[2] = _gdim.z;
        dscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 0, mangledname_,
                                 _grid, _block, _smemsize, (RCstream)_stream,
                                 _narg, _arg);
    }
 extern "C" 
void nacl_kernel (float *x, int n, int *atype, int nat, float *pol, float *sigm, float *ipotro,
   float *pc, float *pd, float *zz, int tblno, float xmax, int periodicflag,
   float *force)
{
    /* nop */
}




/*
 * stub for remote call to nacl_kernel_kadai8.
 */
void
dscudanacl_kernel_kadai8(dim3 _gdim, dim3 _bdim, size_t _smemsize, cudaStream_t _stream , float *x, int n, int *atype, int nat, float *pol, float *sigm, float *ipotro,
   float *pc, float *pd, float *zz, int tblno, float xmax, int periodicflag,
   float *force)
{
    int _narg = 14;
    int _grid[3], _block[3];
    RCArg _arg[14], *_argp;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (0) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, Ptxdata);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
//        WARN(3, "mangled name : %s\n", mangledname_);
    }


    // a pointer to a device-address 'dscudaAdrOfUva((void *)x)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)x);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // an integer 'n'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = n;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)atype)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)atype);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // an integer 'nat'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = nat;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)pol)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)pol);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)sigm)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)sigm);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)ipotro)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)ipotro);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)pc)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)pc);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)pd)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)pd);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)zz)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)zz);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // an integer 'tblno'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = tblno;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // a float 'xmax'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(float));
    _argp->type = dscudaArgTypeF;
    _argp->offset = _off;
    _argp->val.floatval = xmax;
    _argp->size = sizeof(float);
    _off += _argp->size;


    // an integer 'periodicflag'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = periodicflag;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)force)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)force);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;

        _grid[0] = _gdim.x; _grid[1] = _gdim.y; _grid[2] = _gdim.z;
        _block[0] = _bdim.x; _block[1] = _bdim.y; _block[2] = _gdim.z;
        dscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 1, mangledname_,
                                 _grid, _block, _smemsize, (RCstream)_stream,
                                 _narg, _arg);
    }
 extern "C" 
void nacl_kernel_kadai8 (float *x, int n, int *atype, int nat, float *pol, float *sigm, float *ipotro,
   float *pc, float *pd, float *zz, int tblno, float xmax, int periodicflag,
   float *force)
{
    /* nop */
}



extern "C"
void MR3calcnacl_kadai8(double x[], int n, int atype[], int nat,
   double pol[], double sigm[], double ipotro[],
   double pc[], double pd[], double zz[],
   int tblno, double xmax, int periodicflag,
   double force[])
{
  int i,*d_atype;
  float *d_x,*d_pol,*d_sigm,*d_ipotro,*d_pc,*d_pd,*d_zz,*d_force,xmaxf=xmax;


  if(sizeof(double)*n*3<sizeof(float)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }


  for(int i=0;i<(n*3);i++) ((float *)(force))[i]=(x)[i]; { cudaError err = cudaMalloc((void **)&(d_x),sizeof(float)*(n*3)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28848, cudaGetErrorString( err) ); exit(1); } };; { cudaError err = cudaMemcpy((d_x),(force),sizeof(float)*(n*3),cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28848, cudaGetErrorString( err) ); exit(1); } };;;
  for(int i=0;i<(nat*nat);i++) ((float *)(force))[i]=(pol)[i]; { cudaError err = cudaMalloc((void **)&(d_pol),sizeof(float)*(nat*nat)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28849, cudaGetErrorString( err) ); exit(1); } };; { cudaError err = cudaMemcpy((d_pol),(force),sizeof(float)*(nat*nat),cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28849, cudaGetErrorString( err) ); exit(1); } };;;
  for(int i=0;i<(nat*nat);i++) ((float *)(force))[i]=(sigm)[i]; { cudaError err = cudaMalloc((void **)&(d_sigm),sizeof(float)*(nat*nat)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28850, cudaGetErrorString( err) ); exit(1); } };; { cudaError err = cudaMemcpy((d_sigm),(force),sizeof(float)*(nat*nat),cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28850, cudaGetErrorString( err) ); exit(1); } };;;
  for(int i=0;i<(nat*nat);i++) ((float *)(force))[i]=(ipotro)[i]; { cudaError err = cudaMalloc((void **)&(d_ipotro),sizeof(float)*(nat*nat)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28851, cudaGetErrorString( err) ); exit(1); } };; { cudaError err = cudaMemcpy((d_ipotro),(force),sizeof(float)*(nat*nat),cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28851, cudaGetErrorString( err) ); exit(1); } };;;
  for(int i=0;i<(nat*nat);i++) ((float *)(force))[i]=(pc)[i]; { cudaError err = cudaMalloc((void **)&(d_pc),sizeof(float)*(nat*nat)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28852, cudaGetErrorString( err) ); exit(1); } };; { cudaError err = cudaMemcpy((d_pc),(force),sizeof(float)*(nat*nat),cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28852, cudaGetErrorString( err) ); exit(1); } };;;
  for(int i=0;i<(nat*nat);i++) ((float *)(force))[i]=(pd)[i]; { cudaError err = cudaMalloc((void **)&(d_pd),sizeof(float)*(nat*nat)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28853, cudaGetErrorString( err) ); exit(1); } };; { cudaError err = cudaMemcpy((d_pd),(force),sizeof(float)*(nat*nat),cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28853, cudaGetErrorString( err) ); exit(1); } };;;
  for(int i=0;i<(nat*nat);i++) ((float *)(force))[i]=(zz)[i]; { cudaError err = cudaMalloc((void **)&(d_zz),sizeof(float)*(nat*nat)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28854, cudaGetErrorString( err) ); exit(1); } };; { cudaError err = cudaMemcpy((d_zz),(force),sizeof(float)*(nat*nat),cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28854, cudaGetErrorString( err) ); exit(1); } };;;
  { cudaError err = cudaMalloc((void**)&d_atype,sizeof(int)*n); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28855, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaMemcpy(d_atype,atype,sizeof(int)*n,cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28856, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaMalloc((void**)&d_force,sizeof(float)*n*3); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28857, cudaGetErrorString( err) ); exit(1); } };;


  dim3 threads(64);
  dim3 grid((n+63)/64);
  dscudanacl_kernel_kadai8(grid, threads , 0, 0, d_x, n, d_atype, nat, d_pol, d_sigm, d_ipotro, d_pc, d_pd, d_zz, tblno, xmaxf, periodicflag, d_force);
  { cudaError_t err = cudaGetLastError(); if( cudaSuccess != err) { fprintf(stderr, "Cuda error: %s in file '%s' in line %i : %s.\n", "Kernel execution failed", "./dscudatmp/mr3.cu", 28864, cudaGetErrorString( err) ); exit(1); } };


  { cudaError err = cudaMemcpy(force,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28867, cudaGetErrorString( err) ); exit(1); } };;
  for(i=n*3-1;i>=0;i--) force[i]=((float *)force)[i];


  { cudaError err = cudaFree(d_x); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28871, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaFree(d_atype); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28872, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaFree(d_pol); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28873, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaFree(d_sigm); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28874, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaFree(d_ipotro); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28875, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaFree(d_pc); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28876, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaFree(d_pd); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28877, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaFree(d_zz); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28878, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaFree(d_force); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28879, cudaGetErrorString( err) ); exit(1); } };;
}


__attribute__((device)) __inline__
void inter_kadai91011(float xj[3], float xi[3], float fi[3],
    VG_MATRIX *d_matrix, int t, float xmax, float xmax1)
{
  int k;
  float dn2,r,inr,inr2,inr4,inr8,d3,dr[3];
  float pb=(float)(0.338e-19/(14.39*1.60219e-19)),dphir;

  dn2 = 0.0f;
  for(k=0; k<3; k++){
    dr[k] = xi[k] - xj[k];
    dr[k] -= rintf(dr[k] * xmax1) * xmax;
    dn2 += dr[k] * dr[k];
  }
  if(dn2 != 0.0f){
    r = sqrtf(dn2);
    inr = 1.0f / r;
    inr2 = inr * inr;
    inr4 = inr2 * inr2;
    inr8 = inr4 * inr4;
    d3 = pb * c_matrix[t].pol * expf( (c_matrix[t].sigm - r) * c_matrix[t].ipotro);
    dphir = ( d3 * c_matrix[t].ipotro * inr
     - 6.0f * c_matrix[t].pc * inr8
     - 8.0f * c_matrix[t].pd * inr8 * inr2
     + inr2 * inr * c_matrix[t].zz );
    for(k=0; k<3; k++) fi[k] += dphir * dr[k];
  }
}


/*
 * stub for remote call to nacl_kernel_gpu_kadai9.
 */
void
dscudanacl_kernel_gpu_kadai9(dim3 _gdim, dim3 _bdim, size_t _smemsize, cudaStream_t _stream , VG_XVEC *x, int n, int nat, VG_MATRIX *d_matrix, float xmax, float *fvec)
{
    int _narg = 6;
    int _grid[3], _block[3];
    RCArg _arg[6], *_argp;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (0) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, Ptxdata);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
//        WARN(3, "mangled name : %s\n", mangledname_);
    }


    // a pointer to a device-address 'dscudaAdrOfUva((void *)x)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)x);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // an integer 'n'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = n;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // an integer 'nat'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = nat;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)d_matrix)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)d_matrix);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // a float 'xmax'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(float));
    _argp->type = dscudaArgTypeF;
    _argp->offset = _off;
    _argp->val.floatval = xmax;
    _argp->size = sizeof(float);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)fvec)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)fvec);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;

        _grid[0] = _gdim.x; _grid[1] = _gdim.y; _grid[2] = _gdim.z;
        _block[0] = _bdim.x; _block[1] = _bdim.y; _block[2] = _gdim.z;
        dscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 2, mangledname_,
                                 _grid, _block, _smemsize, (RCstream)_stream,
                                 _narg, _arg);
    }
 extern "C" 
void nacl_kernel_gpu_kadai9 (VG_XVEC *x, int n, int nat, VG_MATRIX *d_matrix, float xmax, float *fvec)
{
    /* nop */
}




extern "C"
void MR3calcnacl_kadai9(double x[], int n, int atype[], int nat,
   double pol[], double sigm[], double ipotro[],
   double pc[], double pd[], double zz[],
   int tblno, double xmax, int periodicflag,
   double force[])
{
  int i,j;
  static VG_XVEC *d_x=__null;
  static float *d_force=__null;
  static VG_MATRIX *d_matrix=__null;
  float xmaxf;
  VG_MATRIX *matrix=(VG_MATRIX *)force;
  VG_XVEC *vec=(VG_XVEC *)force;
  if((periodicflag & 1)==0) xmax*=2.0;
  xmaxf=xmax;
  static float *forcef=__null;
  static int n_bak=0;


  if(sizeof(double)*n*3<sizeof(VG_MATRIX)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }
  if(nat>32){
    fprintf(stderr,"** error : nat is too large **\n");
    exit(1);
  }

  if(n!=n_bak){

    int nalloc;
    static int nalloc_bak=0;
    if(n>8192) nalloc=n;
    else nalloc=8192;
    if(nalloc!=nalloc_bak){
      { cudaError err = cudaFree(d_x); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28969, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaFree(d_force); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28970, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaFree(d_matrix); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28971, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_x,sizeof(VG_XVEC)*(nalloc+256)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28972, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_force,sizeof(float)*nalloc*3); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28973, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_matrix,sizeof(VG_MATRIX)*nat*nat); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28974, cudaGetErrorString( err) ); exit(1); } };;

      free(forcef);
      if((forcef=(float *)malloc(sizeof(float)*nalloc*3))==__null){
 fprintf(stderr,"** error : can't malloc forcef **\n");
 exit(1);
      }
      bzero(forcef,sizeof(float)*nalloc*3);
      nalloc_bak=nalloc;
    }


    for(i=0;i<nat;i++){
      for(j=0;j<nat;j++){
 matrix[i*nat+j].pol=(float)(pol[i*nat+j]);
 matrix[i*nat+j].sigm=(float)(sigm[i*nat+j]);
 matrix[i*nat+j].ipotro=(float)(ipotro[i*nat+j]);
 matrix[i*nat+j].pc=(float)(pc[i*nat+j]);
 matrix[i*nat+j].pd=(float)(pd[i*nat+j]);
 matrix[i*nat+j].zz=(float)(zz[i*nat+j]);
      }
    }

    { cudaError err =     dscudaMemcpyToSymbolWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), "c_matrix", matrix, sizeof(VG_MATRIX)*nat*nat); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 28997, cudaGetErrorString( err) ); exit(1); } };;

    n_bak=n;
  }

  for(i=0;i<n;i++){
    for(j=0;j<3;j++){
      vec[i].r[j]=x[i*3+j];
    }
    vec[i].atype=atype[i];
  }
  { cudaError err = cudaMemcpy(d_x,vec,sizeof(VG_XVEC)*n,cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29008, cudaGetErrorString( err) ); exit(1); } };;


  dim3 threads(256);
  dim3 grid((n+256 -1)/256);
  dscudanacl_kernel_gpu_kadai9(grid, threads , 0, 0, d_x, n, nat, d_matrix, xmaxf, d_force);
  { cudaError_t err = cudaGetLastError(); if( cudaSuccess != err) { fprintf(stderr, "Cuda error: %s in file '%s' in line %i : %s.\n", "Kernel execution failed", "./dscudatmp/mr3.cu", 29014, cudaGetErrorString( err) ); exit(1); } };


  { cudaError err = cudaMemcpy(forcef,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29017, cudaGetErrorString( err) ); exit(1); } };;
  for(i=0;i<n;i++) for(j=0;j<3;j++) force[i*3+j]=forcef[i*3+j];
}


/*
 * stub for remote call to nacl_kernel_gpu_kadai10.
 */
void
dscudanacl_kernel_gpu_kadai10(dim3 _gdim, dim3 _bdim, size_t _smemsize, cudaStream_t _stream , VG_XVEC *x, int n, int nat, VG_MATRIX *d_matrix, float xmax, float *fvec)
{
    int _narg = 6;
    int _grid[3], _block[3];
    RCArg _arg[6], *_argp;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (0) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, Ptxdata);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
//        WARN(3, "mangled name : %s\n", mangledname_);
    }


    // a pointer to a device-address 'dscudaAdrOfUva((void *)x)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)x);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // an integer 'n'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = n;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // an integer 'nat'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = nat;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)d_matrix)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)d_matrix);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // a float 'xmax'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(float));
    _argp->type = dscudaArgTypeF;
    _argp->offset = _off;
    _argp->val.floatval = xmax;
    _argp->size = sizeof(float);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)fvec)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)fvec);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;

        _grid[0] = _gdim.x; _grid[1] = _gdim.y; _grid[2] = _gdim.z;
        _block[0] = _bdim.x; _block[1] = _bdim.y; _block[2] = _gdim.z;
        dscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 3, mangledname_,
                                 _grid, _block, _smemsize, (RCstream)_stream,
                                 _narg, _arg);
    }
 extern "C" 
void nacl_kernel_gpu_kadai10 (VG_XVEC *x, int n, int nat, VG_MATRIX *d_matrix, float xmax, float *fvec)
{
    /* nop */
}



extern "C"
void MR3calcnacl_kadai10(double x[], int n, int atype[], int nat,
   double pol[], double sigm[], double ipotro[],
   double pc[], double pd[], double zz[],
   int tblno, double xmax, int periodicflag,
   double force[])
{
  int i,j;
  static VG_XVEC *d_x=__null;
  static float *d_force=__null;
  static VG_MATRIX *d_matrix=__null;
  float xmaxf;
  VG_MATRIX *matrix=(VG_MATRIX *)force;
  VG_XVEC *vec=(VG_XVEC *)force;
  if((periodicflag & 1)==0) xmax*=2.0;
  xmaxf=xmax;
  static float *forcef=__null;
  static int n_bak=0;


  if(sizeof(double)*n*3<sizeof(VG_MATRIX)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }
  if(nat>32){
    fprintf(stderr,"** error : nat is too large **\n");
    exit(1);
  }

  if(n!=n_bak){

    int nalloc;
    static int nalloc_bak=0;
    if(n>8192) nalloc=n;
    else nalloc=8192;
    if(nalloc!=nalloc_bak){
      { cudaError err = cudaFree(d_x); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29117, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaFree(d_force); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29118, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaFree(d_matrix); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29119, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_x,sizeof(VG_XVEC)*(nalloc+256)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29120, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_force,sizeof(float)*nalloc*3); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29121, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_matrix,sizeof(VG_MATRIX)*nat*nat); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29122, cudaGetErrorString( err) ); exit(1); } };;

      free(forcef);
      if((forcef=(float *)malloc(sizeof(float)*nalloc*3))==__null){
 fprintf(stderr,"** error : can't malloc forcef **\n");
 exit(1);
      }
      bzero(forcef,sizeof(float)*nalloc*3);
      nalloc_bak=nalloc;
    }


    for(i=0;i<nat;i++){
      for(j=0;j<nat;j++){
 matrix[i*nat+j].pol=(float)(pol[i*nat+j]);
 matrix[i*nat+j].sigm=(float)(sigm[i*nat+j]);
 matrix[i*nat+j].ipotro=(float)(ipotro[i*nat+j]);
 matrix[i*nat+j].pc=(float)(pc[i*nat+j]);
 matrix[i*nat+j].pd=(float)(pd[i*nat+j]);
 matrix[i*nat+j].zz=(float)(zz[i*nat+j]);
      }
    }

    { cudaError err =     dscudaMemcpyToSymbolWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), "c_matrix", matrix, sizeof(VG_MATRIX)*nat*nat); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29145, cudaGetErrorString( err) ); exit(1); } };;

    n_bak=n;
  }

  for(i=0;i<n;i++){
    for(j=0;j<3;j++){
      vec[i].r[j]=x[i*3+j];
    }
    vec[i].atype=atype[i];
  }
  { cudaError err = cudaMemcpy(d_x,vec,sizeof(VG_XVEC)*n,cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29156, cudaGetErrorString( err) ); exit(1); } };;


  dim3 threads(256);
  dim3 grid((n+256 -1)/256);
  dscudanacl_kernel_gpu_kadai10(grid, threads , 0, 0, d_x, n, nat, d_matrix, xmaxf, d_force);
  { cudaError_t err = cudaGetLastError(); if( cudaSuccess != err) { fprintf(stderr, "Cuda error: %s in file '%s' in line %i : %s.\n", "Kernel execution failed", "./dscudatmp/mr3.cu", 29162, cudaGetErrorString( err) ); exit(1); } };


  { cudaError err = cudaMemcpy(forcef,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29165, cudaGetErrorString( err) ); exit(1); } };;
  for(i=0;i<n;i++) for(j=0;j<3;j++) force[i*3+j]=forcef[i*3+j];
}


/*
 * stub for remote call to nacl_kernel_gpu_kadai11.
 */
void
dscudanacl_kernel_gpu_kadai11(dim3 _gdim, dim3 _bdim, size_t _smemsize, cudaStream_t _stream , VG_XVEC *x, int n, int nat, VG_MATRIX *d_matrix, float xmax, float *fvec)
{
    int _narg = 6;
    int _grid[3], _block[3];
    RCArg _arg[6], *_argp;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (0) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, Ptxdata);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
//        WARN(3, "mangled name : %s\n", mangledname_);
    }


    // a pointer to a device-address 'dscudaAdrOfUva((void *)x)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)x);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // an integer 'n'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = n;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // an integer 'nat'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = nat;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)d_matrix)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)d_matrix);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // a float 'xmax'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(float));
    _argp->type = dscudaArgTypeF;
    _argp->offset = _off;
    _argp->val.floatval = xmax;
    _argp->size = sizeof(float);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)fvec)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)fvec);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;

        _grid[0] = _gdim.x; _grid[1] = _gdim.y; _grid[2] = _gdim.z;
        _block[0] = _bdim.x; _block[1] = _bdim.y; _block[2] = _gdim.z;
        dscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 4, mangledname_,
                                 _grid, _block, _smemsize, (RCstream)_stream,
                                 _narg, _arg);
    }
 extern "C" 
void nacl_kernel_gpu_kadai11 (VG_XVEC *x, int n, int nat, VG_MATRIX *d_matrix, float xmax, float *fvec)
{
    /* nop */
}




extern "C"
void MR3calcnacl_kadai11(double x[], int n, int atype[], int nat,
   double pol[], double sigm[], double ipotro[],
   double pc[], double pd[], double zz[],
   int tblno, double xmax, int periodicflag,
   double force[])
{
  int i,j;
  static VG_XVEC *d_x=__null;
  static float *d_force=__null;
  static VG_MATRIX *d_matrix=__null;
  float xmaxf;
  VG_MATRIX *matrix=(VG_MATRIX *)force;
  VG_XVEC *vec=(VG_XVEC *)force;
  if((periodicflag & 1)==0) xmax*=2.0;
  xmaxf=xmax;
  static float *forcef=__null;
  static int n_bak=0;


  if(sizeof(double)*n*3<sizeof(VG_MATRIX)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }
  if(nat>32){
    fprintf(stderr,"** error : nat is too large **\n");
    exit(1);
  }

  if(n!=n_bak){

    int nalloc;
    static int nalloc_bak=0;
    if(n>8192) nalloc=n;
    else nalloc=8192;
    if(nalloc!=nalloc_bak){
      { cudaError err = cudaFree(d_x); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29244, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaFree(d_force); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29245, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaFree(d_matrix); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29246, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_x,sizeof(VG_XVEC)*(nalloc+256)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29247, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_force,sizeof(float)*nalloc*3); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29248, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_matrix,sizeof(VG_MATRIX)*nat*nat); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29249, cudaGetErrorString( err) ); exit(1); } };;

      free(forcef);
      if((forcef=(float *)malloc(sizeof(float)*nalloc*3))==__null){
 fprintf(stderr,"** error : can't malloc forcef **\n");
 exit(1);
      }
      bzero(forcef,sizeof(float)*nalloc*3);
      nalloc_bak=nalloc;
    }


    for(i=0;i<nat;i++){
      for(j=0;j<nat;j++){
 matrix[i*nat+j].pol=(float)(pol[i*nat+j]);
 matrix[i*nat+j].sigm=(float)(sigm[i*nat+j]);
 matrix[i*nat+j].ipotro=(float)(ipotro[i*nat+j]);
 matrix[i*nat+j].pc=(float)(pc[i*nat+j]);
 matrix[i*nat+j].pd=(float)(pd[i*nat+j]);
 matrix[i*nat+j].zz=(float)(zz[i*nat+j]);
      }
    }

    { cudaError err =     dscudaMemcpyToSymbolWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), "c_matrix", matrix, sizeof(VG_MATRIX)*nat*nat); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29272, cudaGetErrorString( err) ); exit(1); } };;

    n_bak=n;
  }

  for(i=0;i<n;i++){
    for(j=0;j<3;j++){
      vec[i].r[j]=x[i*3+j];
    }
    vec[i].atype=atype[i];
  }
  { cudaError err = cudaMemcpy(d_x,vec,sizeof(VG_XVEC)*n,cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29283, cudaGetErrorString( err) ); exit(1); } };;


  dim3 threads(256);
  dim3 grid((n+256 -1)/256);
  dscudanacl_kernel_gpu_kadai11(grid, threads , 0, 0, d_x, n, nat, d_matrix, xmaxf, d_force);
  { cudaError_t err = cudaGetLastError(); if( cudaSuccess != err) { fprintf(stderr, "Cuda error: %s in file '%s' in line %i : %s.\n", "Kernel execution failed", "./dscudatmp/mr3.cu", 29289, cudaGetErrorString( err) ); exit(1); } };


  { cudaError err = cudaMemcpy(forcef,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29292, cudaGetErrorString( err) ); exit(1); } };;
  for(i=0;i<n;i++) for(j=0;j<3;j++) force[i*3+j]=forcef[i*3+j];
}

__attribute__((device)) __inline__
void inter_kadai12(float xj[3], float xi[3], float fi[3],
    VG_MATRIX *d_matrix, int t, float xmax, float xmax1)
{
  int k;
  float dn2,r,inr,inr2,inr4,inr8,d3,dr[3];
  float pb=(float)(0.338e-19/(14.39*1.60219e-19)),dphir;

  dn2 = 0.0f;
  for(k=0; k<3; k++){
    dr[k] = xi[k] - xj[k];
    dr[k] -= rintf(dr[k] * xmax1) * xmax;
    dn2 += dr[k] * dr[k];
  }
  r = sqrtf(dn2);




  inr = 1.0f / r;

  inr2 = inr * inr;
  inr4 = inr2 * inr2;
  inr8 = inr4 * inr4;
  d3 = pb * c_matrix[t].pol * expf( (c_matrix[t].sigm - r) * c_matrix[t].ipotro);
  dphir = ( d3 * c_matrix[t].ipotro * inr
     - 6.0f * c_matrix[t].pc * inr8
     - 8.0f * c_matrix[t].pd * inr8 * inr2
     + inr2 * inr * c_matrix[t].zz );

  if(dn2==0.0f) dphir = 0.0f;

  for(k=0; k<3; k++) fi[k] += dphir * dr[k];
}


/*
 * stub for remote call to nacl_kernel_gpu_kadai12.
 */
void
dscudanacl_kernel_gpu_kadai12(dim3 _gdim, dim3 _bdim, size_t _smemsize, cudaStream_t _stream , VG_XVEC *x, int n, int nat, VG_MATRIX *d_matrix, float xmax, float *fvec)
{
    int _narg = 6;
    int _grid[3], _block[3];
    RCArg _arg[6], *_argp;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (0) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, Ptxdata);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
//        WARN(3, "mangled name : %s\n", mangledname_);
    }


    // a pointer to a device-address 'dscudaAdrOfUva((void *)x)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)x);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // an integer 'n'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = n;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // an integer 'nat'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = nat;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)d_matrix)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)d_matrix);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // a float 'xmax'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(float));
    _argp->type = dscudaArgTypeF;
    _argp->offset = _off;
    _argp->val.floatval = xmax;
    _argp->size = sizeof(float);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)fvec)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)fvec);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;

        _grid[0] = _gdim.x; _grid[1] = _gdim.y; _grid[2] = _gdim.z;
        _block[0] = _bdim.x; _block[1] = _bdim.y; _block[2] = _gdim.z;
        dscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 5, mangledname_,
                                 _grid, _block, _smemsize, (RCstream)_stream,
                                 _narg, _arg);
    }
 extern "C" 
void nacl_kernel_gpu_kadai12 (VG_XVEC *x, int n, int nat, VG_MATRIX *d_matrix, float xmax, float *fvec)
{
    /* nop */
}




extern "C"
void MR3calcnacl_kadai12(double x[], int n, int atype[], int nat,
   double pol[], double sigm[], double ipotro[],
   double pc[], double pd[], double zz[],
   int tblno, double xmax, int periodicflag,
   double force[])
{
  int i,j;
  static VG_XVEC *d_x=__null;
  static float *d_force=__null;
  static VG_MATRIX *d_matrix=__null;
  float xmaxf;
  VG_MATRIX *matrix=(VG_MATRIX *)force;
  VG_XVEC *vec=(VG_XVEC *)force;
  if((periodicflag & 1)==0) xmax*=2.0;
  xmaxf=xmax;
  static float *forcef=__null;
  static int n_bak=0;


  if(sizeof(double)*n*3<sizeof(VG_MATRIX)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }
  if(nat>32){
    fprintf(stderr,"** error : nat is too large **\n");
    exit(1);
  }

  if(n!=n_bak){

    int nalloc;
    static int nalloc_bak=0;
    if(n>8192) nalloc=n;
    else nalloc=8192;
    if(nalloc!=nalloc_bak){
      { cudaError err = cudaFree(d_x); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29406, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaFree(d_force); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29407, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaFree(d_matrix); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29408, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_x,sizeof(VG_XVEC)*(nalloc+256)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29409, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_force,sizeof(float)*nalloc*3); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29410, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_matrix,sizeof(VG_MATRIX)*nat*nat); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29411, cudaGetErrorString( err) ); exit(1); } };;

      free(forcef);
      if((forcef=(float *)malloc(sizeof(float)*nalloc*3))==__null){
 fprintf(stderr,"** error : can't malloc forcef **\n");
 exit(1);
      }
      bzero(forcef,sizeof(float)*nalloc*3);
      nalloc_bak=nalloc;
    }


    for(i=0;i<nat;i++){
      for(j=0;j<nat;j++){
 matrix[i*nat+j].pol=(float)(pol[i*nat+j]);
 matrix[i*nat+j].sigm=(float)(sigm[i*nat+j]);
 matrix[i*nat+j].ipotro=(float)(ipotro[i*nat+j]);
 matrix[i*nat+j].pc=(float)(pc[i*nat+j]);
 matrix[i*nat+j].pd=(float)(pd[i*nat+j]);
 matrix[i*nat+j].zz=(float)(zz[i*nat+j]);
      }
    }

    { cudaError err =     dscudaMemcpyToSymbolWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), "c_matrix", matrix, sizeof(VG_MATRIX)*nat*nat); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29434, cudaGetErrorString( err) ); exit(1); } };;

    n_bak=n;
  }

  for(i=0;i<n;i++){
    for(j=0;j<3;j++){
      vec[i].r[j]=x[i*3+j];
    }
    vec[i].atype=atype[i];
  }
  { cudaError err = cudaMemcpy(d_x,vec,sizeof(VG_XVEC)*n,cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29445, cudaGetErrorString( err) ); exit(1); } };;


  dim3 threads(256);
  dim3 grid((n+256 -1)/256);
  dscudanacl_kernel_gpu_kadai12(grid, threads , 0, 0, d_x, n, nat, d_matrix, xmaxf, d_force);
  { cudaError_t err = cudaGetLastError(); if( cudaSuccess != err) { fprintf(stderr, "Cuda error: %s in file '%s' in line %i : %s.\n", "Kernel execution failed", "./dscudatmp/mr3.cu", 29451, cudaGetErrorString( err) ); exit(1); } };


  { cudaError err = cudaMemcpy(forcef,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29454, cudaGetErrorString( err) ); exit(1); } };;
  for(i=0;i<n;i++) for(j=0;j<3;j++) force[i*3+j]=forcef[i*3+j];
}


extern "C"
void MR3calcnacl_kadai13(double x[], int n, int atype[], int nat,
   double pol[], double sigm[], double ipotro[],
   double pc[], double pd[], double zz[],
   int tblno, double xmax, int periodicflag,
   double force[])
{
  int i,j,*index,count[32],offset[32],*atype2;
  double *x2,*f2;

  if((index=(int *)malloc(sizeof(int)*n))==__null){
    fprintf(stderr,"** error : can't malloc index **\n");
    exit(1);
  }
  if((atype2=(int *)malloc(sizeof(int)*n))==__null){
    fprintf(stderr,"** error : can't malloc atype2 **\n");
    exit(1);
  }
  if((x2=(double *)malloc(sizeof(double)*n*3))==__null){
    fprintf(stderr,"** error : can't malloc x2 **\n");
    exit(1);
  }
  if((f2=(double *)malloc(sizeof(double)*n*3))==__null){
    fprintf(stderr,"** error : can't malloc f2 **\n");
    exit(1);
  }
  for(i=0;i<nat;i++) count[i]=0;
  for(i=0;i<n;i++) count[atype[i]]++;
  for(i=1;i<nat;i++) offset[i]=count[i-1];
  offset[0]=0;
  for(i=0;i<n;i++) index[i]=offset[atype[i]]++;
  for(i=0;i<n;i++){
    for(j=0;j<3;j++) x2[index[i]*3+j]=x[i*3+j];
    atype2[index[i]]=atype[i];
  }
  MR3calcnacl_kadai12(x2,n,atype2,nat,pol,sigm,ipotro,pc,pd,zz,
        tblno,xmax,periodicflag,f2);
  for(i=0;i<n;i++){
    for(j=0;j<3;j++) force[i*3+j]=f2[index[i]*3+j];
  }

  free(index);
  free(atype2);
  free(x2);
  free(f2);
}


extern "C"
void MR3calcnacl_org(double x[], int n, int atype[], int nat,
   double pol[], double sigm[], double ipotro[],
   double pc[], double pd[], double zz[],
   int tblno, double xmax, int periodicflag,
   double force[])
{
  int i,*d_atype;
  float *d_x,*d_pol,*d_sigm,*d_ipotro,*d_pc,*d_pd,*d_zz,*d_force,xmaxf=xmax;


  if(sizeof(double)*n*3<sizeof(float)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }


  for(int i=0;i<(n*3);i++) ((float *)(force))[i]=(x)[i]; { cudaError err = cudaMalloc((void **)&(d_x),sizeof(float)*(n*3)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29524, cudaGetErrorString( err) ); exit(1); } };; { cudaError err = cudaMemcpy((d_x),(force),sizeof(float)*(n*3),cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29524, cudaGetErrorString( err) ); exit(1); } };;;
  for(int i=0;i<(nat*nat);i++) ((float *)(force))[i]=(pol)[i]; { cudaError err = cudaMalloc((void **)&(d_pol),sizeof(float)*(nat*nat)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29525, cudaGetErrorString( err) ); exit(1); } };; { cudaError err = cudaMemcpy((d_pol),(force),sizeof(float)*(nat*nat),cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29525, cudaGetErrorString( err) ); exit(1); } };;;
  for(int i=0;i<(nat*nat);i++) ((float *)(force))[i]=(sigm)[i]; { cudaError err = cudaMalloc((void **)&(d_sigm),sizeof(float)*(nat*nat)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29526, cudaGetErrorString( err) ); exit(1); } };; { cudaError err = cudaMemcpy((d_sigm),(force),sizeof(float)*(nat*nat),cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29526, cudaGetErrorString( err) ); exit(1); } };;;
  for(int i=0;i<(nat*nat);i++) ((float *)(force))[i]=(ipotro)[i]; { cudaError err = cudaMalloc((void **)&(d_ipotro),sizeof(float)*(nat*nat)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29527, cudaGetErrorString( err) ); exit(1); } };; { cudaError err = cudaMemcpy((d_ipotro),(force),sizeof(float)*(nat*nat),cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29527, cudaGetErrorString( err) ); exit(1); } };;;
  for(int i=0;i<(nat*nat);i++) ((float *)(force))[i]=(pc)[i]; { cudaError err = cudaMalloc((void **)&(d_pc),sizeof(float)*(nat*nat)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29528, cudaGetErrorString( err) ); exit(1); } };; { cudaError err = cudaMemcpy((d_pc),(force),sizeof(float)*(nat*nat),cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29528, cudaGetErrorString( err) ); exit(1); } };;;
  for(int i=0;i<(nat*nat);i++) ((float *)(force))[i]=(pd)[i]; { cudaError err = cudaMalloc((void **)&(d_pd),sizeof(float)*(nat*nat)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29529, cudaGetErrorString( err) ); exit(1); } };; { cudaError err = cudaMemcpy((d_pd),(force),sizeof(float)*(nat*nat),cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29529, cudaGetErrorString( err) ); exit(1); } };;;
  for(int i=0;i<(nat*nat);i++) ((float *)(force))[i]=(zz)[i]; { cudaError err = cudaMalloc((void **)&(d_zz),sizeof(float)*(nat*nat)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29530, cudaGetErrorString( err) ); exit(1); } };; { cudaError err = cudaMemcpy((d_zz),(force),sizeof(float)*(nat*nat),cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29530, cudaGetErrorString( err) ); exit(1); } };;;
  { cudaError err = cudaMalloc((void**)&d_atype,sizeof(int)*n); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29531, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaMemcpy(d_atype,atype,sizeof(int)*n,cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29532, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaMalloc((void**)&d_force,sizeof(float)*n*3); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29533, cudaGetErrorString( err) ); exit(1); } };;


  dim3 threads(64);
  dim3 grid((n+63)/64);
  dscudanacl_kernel(grid, threads , 0, 0, d_x, n, d_atype, nat, d_pol, d_sigm, d_ipotro, d_pc, d_pd, d_zz, tblno, xmaxf, periodicflag, d_force);
  { cudaError_t err = cudaGetLastError(); if( cudaSuccess != err) { fprintf(stderr, "Cuda error: %s in file '%s' in line %i : %s.\n", "Kernel execution failed", "./dscudatmp/mr3.cu", 29540, cudaGetErrorString( err) ); exit(1); } };


  { cudaError err = cudaMemcpy(force,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29543, cudaGetErrorString( err) ); exit(1); } };;
  for(i=n*3-1;i>=0;i--) force[i]=((float *)force)[i];


  { cudaError err = cudaFree(d_x); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29547, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaFree(d_atype); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29548, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaFree(d_pol); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29549, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaFree(d_sigm); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29550, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaFree(d_ipotro); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29551, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaFree(d_pc); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29552, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaFree(d_pd); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29553, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaFree(d_zz); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29554, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaFree(d_force); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29555, cudaGetErrorString( err) ); exit(1); } };;
}



/*
 * stub for remote call to nacl_kernel_initial.
 */
void
dscudanacl_kernel_initial(dim3 _gdim, dim3 _bdim, size_t _smemsize, cudaStream_t _stream , float *x, int n, int *atype, int nat,
                 float *pol, float *sigm, float *ipotro,
                 float *pc, float *pd, float *zz,
                 int tblno, float xmax, int periodicflag,
                 float *force)
{
    int _narg = 14;
    int _grid[3], _block[3];
    RCArg _arg[14], *_argp;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (0) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, Ptxdata);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
//        WARN(3, "mangled name : %s\n", mangledname_);
    }


    // a pointer to a device-address 'dscudaAdrOfUva((void *)x)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)x);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // an integer 'n'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = n;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)atype)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)atype);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // an integer 'nat'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = nat;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)pol)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)pol);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)sigm)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)sigm);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)ipotro)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)ipotro);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)pc)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)pc);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)pd)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)pd);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)zz)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)zz);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // an integer 'tblno'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = tblno;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // a float 'xmax'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(float));
    _argp->type = dscudaArgTypeF;
    _argp->offset = _off;
    _argp->val.floatval = xmax;
    _argp->size = sizeof(float);
    _off += _argp->size;


    // an integer 'periodicflag'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = periodicflag;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)force)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)force);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;

        _grid[0] = _gdim.x; _grid[1] = _gdim.y; _grid[2] = _gdim.z;
        _block[0] = _bdim.x; _block[1] = _bdim.y; _block[2] = _gdim.z;
        dscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 6, mangledname_,
                                 _grid, _block, _smemsize, (RCstream)_stream,
                                 _narg, _arg);
    }
 extern "C" 
void nacl_kernel_initial (float *x, int n, int *atype, int nat,
                 float *pol, float *sigm, float *ipotro,
                 float *pc, float *pd, float *zz,
                 int tblno, float xmax, int periodicflag,
                 float *force)
{
    /* nop */
}



extern "C"
void MR3calcnacl_initial(double x[], int n, int atype[], int nat,
   double pol[], double sigm[], double ipotro[],
   double pc[], double pd[], double zz[],
   int tblno, double xmax, int periodicflag,
   double force[])
{
  int i,*d_atype;
  float *d_x,*d_pol,*d_sigm,*d_ipotro,*d_pc,*d_pd,*d_zz,*d_force,xmaxf=xmax;


  if(sizeof(double)*n*3<sizeof(float)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }


  for(int i=0;i<(n*3);i++) ((float *)(force))[i]=(x)[i]; { cudaError err = cudaMalloc((void **)&(d_x),sizeof(float)*(n*3)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29618, cudaGetErrorString( err) ); exit(1); } };; { cudaError err = cudaMemcpy((d_x),(force),sizeof(float)*(n*3),cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29618, cudaGetErrorString( err) ); exit(1); } };;;
  for(int i=0;i<(nat*nat);i++) ((float *)(force))[i]=(pol)[i]; { cudaError err = cudaMalloc((void **)&(d_pol),sizeof(float)*(nat*nat)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29619, cudaGetErrorString( err) ); exit(1); } };; { cudaError err = cudaMemcpy((d_pol),(force),sizeof(float)*(nat*nat),cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29619, cudaGetErrorString( err) ); exit(1); } };;;
  for(int i=0;i<(nat*nat);i++) ((float *)(force))[i]=(sigm)[i]; { cudaError err = cudaMalloc((void **)&(d_sigm),sizeof(float)*(nat*nat)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29620, cudaGetErrorString( err) ); exit(1); } };; { cudaError err = cudaMemcpy((d_sigm),(force),sizeof(float)*(nat*nat),cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29620, cudaGetErrorString( err) ); exit(1); } };;;
  for(int i=0;i<(nat*nat);i++) ((float *)(force))[i]=(ipotro)[i]; { cudaError err = cudaMalloc((void **)&(d_ipotro),sizeof(float)*(nat*nat)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29621, cudaGetErrorString( err) ); exit(1); } };; { cudaError err = cudaMemcpy((d_ipotro),(force),sizeof(float)*(nat*nat),cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29621, cudaGetErrorString( err) ); exit(1); } };;;
  for(int i=0;i<(nat*nat);i++) ((float *)(force))[i]=(pc)[i]; { cudaError err = cudaMalloc((void **)&(d_pc),sizeof(float)*(nat*nat)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29622, cudaGetErrorString( err) ); exit(1); } };; { cudaError err = cudaMemcpy((d_pc),(force),sizeof(float)*(nat*nat),cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29622, cudaGetErrorString( err) ); exit(1); } };;;
  for(int i=0;i<(nat*nat);i++) ((float *)(force))[i]=(pd)[i]; { cudaError err = cudaMalloc((void **)&(d_pd),sizeof(float)*(nat*nat)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29623, cudaGetErrorString( err) ); exit(1); } };; { cudaError err = cudaMemcpy((d_pd),(force),sizeof(float)*(nat*nat),cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29623, cudaGetErrorString( err) ); exit(1); } };;;
  for(int i=0;i<(nat*nat);i++) ((float *)(force))[i]=(zz)[i]; { cudaError err = cudaMalloc((void **)&(d_zz),sizeof(float)*(nat*nat)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29624, cudaGetErrorString( err) ); exit(1); } };; { cudaError err = cudaMemcpy((d_zz),(force),sizeof(float)*(nat*nat),cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29624, cudaGetErrorString( err) ); exit(1); } };;;
  { cudaError err = cudaMalloc((void**)&d_atype,sizeof(int)*n); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29625, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaMemcpy(d_atype,atype,sizeof(int)*n,cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29626, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaMalloc((void**)&d_force,sizeof(float)*n*3); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29627, cudaGetErrorString( err) ); exit(1); } };;


  dim3 threads(64);
  dim3 grid((n+63)/64);
  dscudanacl_kernel_initial(grid, threads , 0, 0, d_x, n, d_atype, nat, d_pol, d_sigm, d_ipotro, d_pc, d_pd, d_zz, tblno, xmaxf, periodicflag, d_force);
  { cudaError_t err = cudaGetLastError(); if( cudaSuccess != err) { fprintf(stderr, "Cuda error: %s in file '%s' in line %i : %s.\n", "Kernel execution failed", "./dscudatmp/mr3.cu", 29634, cudaGetErrorString( err) ); exit(1); } };


  { cudaError err = cudaMemcpy(force,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29637, cudaGetErrorString( err) ); exit(1); } };;
  for(i=n*3-1;i>=0;i--) force[i]=((float *)force)[i];


  { cudaError err = cudaFree(d_x); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29641, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaFree(d_atype); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29642, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaFree(d_pol); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29643, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaFree(d_sigm); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29644, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaFree(d_ipotro); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29645, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaFree(d_pc); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29646, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaFree(d_pd); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29647, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaFree(d_zz); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29648, cudaGetErrorString( err) ); exit(1); } };;
  { cudaError err = cudaFree(d_force); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29649, cudaGetErrorString( err) ); exit(1); } };;
}


__attribute__((device)) __inline__
void inter_128bit(float xj[3], float xi[3], float fi[3],
           VG_MATRIX d_matrix[], int t, float xmax, float xmax1)
{
  int k;
  float dn2,r,inr,inr2,inr4,inr8,d3,dr[3];
  float pb=(float)(0.338e-19/(14.39*1.60219e-19)),dphir;

  dn2 = 0.0f;
  for(k=0; k<3; k++){
    dr[k] = xi[k] - xj[k];
    dr[k] -= rintf(dr[k] * xmax1) * xmax;
    dn2 += dr[k] * dr[k];
  }
  if(dn2 != 0.0f){
    r = sqrtf(dn2);
    inr = 1.0f / r;
    inr2 = inr * inr;
    inr4 = inr2 * inr2;
    inr8 = inr4 * inr4;
    d3 = pb * d_matrix[t].pol * expf( (d_matrix[t].sigm - r)
      * d_matrix[t].ipotro);
    dphir = ( d3 * d_matrix[t].ipotro * inr
            - 6.0f * d_matrix[t].pc * inr8
            - 8.0f * d_matrix[t].pd * inr8 * inr2
       + inr2 * inr * d_matrix[t].zz );
    for(k=0; k<3; k++) fi[k] += dphir * dr[k];
  }
}


/*
 * stub for remote call to nacl_kernel_128bit.
 */
void
dscudanacl_kernel_128bit(dim3 _gdim, dim3 _bdim, size_t _smemsize, cudaStream_t _stream , VG_XVEC *x, int n, int nat, VG_MATRIX *d_matrix,
                 float xmax, float *fvec)
{
    int _narg = 6;
    int _grid[3], _block[3];
    RCArg _arg[6], *_argp;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (0) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, Ptxdata);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
//        WARN(3, "mangled name : %s\n", mangledname_);
    }


    // a pointer to a device-address 'dscudaAdrOfUva((void *)x)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)x);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // an integer 'n'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = n;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // an integer 'nat'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = nat;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)d_matrix)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)d_matrix);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // a float 'xmax'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(float));
    _argp->type = dscudaArgTypeF;
    _argp->offset = _off;
    _argp->val.floatval = xmax;
    _argp->size = sizeof(float);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)fvec)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)fvec);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;

        _grid[0] = _gdim.x; _grid[1] = _gdim.y; _grid[2] = _gdim.z;
        _block[0] = _bdim.x; _block[1] = _bdim.y; _block[2] = _gdim.z;
        dscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 7, mangledname_,
                                 _grid, _block, _smemsize, (RCstream)_stream,
                                 _narg, _arg);
    }
 extern "C" 
void nacl_kernel_128bit (VG_XVEC *x, int n, int nat, VG_MATRIX *d_matrix,
                 float xmax, float *fvec)
{
    /* nop */
}



extern "C"
void MR3calcnacl_128bit(double *x, int n, int *atype, int nat,
   double *pol, double *sigm, double *ipotro,
   double *pc, double *pd, double *zz,
   int tblno, double xmax, int periodicflag,
   double *force)
{
  int i,j;
  static VG_XVEC *d_x=__null;
  static float *d_force=__null;
  static VG_MATRIX *d_matrix=__null;
  float xmaxf;
  VG_MATRIX *matrix=(VG_MATRIX *)force;
  static VG_XVEC *vec=__null;
  if((periodicflag & 1)==0) xmax*=2.0;
  xmaxf=xmax;
  static float *forcef=__null;
  static int n_bak=0;


  if(sizeof(double)*n*3<sizeof(VG_MATRIX)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }
  if(nat>32){
    fprintf(stderr,"** error : nat is too large **\n");
    exit(1);
  }

  if(n!=n_bak){

    int nalloc;
    static int nalloc_bak=0;
    if(n>8192) nalloc=n;
    else nalloc=8192;
    if(nalloc!=nalloc_bak){
      { cudaError err = cudaFree(d_x); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29739, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaFree(d_force); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29740, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaFree(d_matrix); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29741, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_x,sizeof(VG_XVEC)*(nalloc+256)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29742, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_force,sizeof(float)*(nalloc+256)*3); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29743, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_matrix,sizeof(VG_MATRIX)*nat*nat); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29744, cudaGetErrorString( err) ); exit(1); } };;

      free(vec);
      if((vec=(VG_XVEC *)malloc(sizeof(VG_XVEC)*(nalloc+256)))==__null){
 fprintf(stderr,"** error : can't malloc vec **\n");
 exit(1);
      }
      free(forcef);
      if((forcef=(float *)malloc(sizeof(float)*nalloc*3))==__null){
 fprintf(stderr,"** error : can't malloc forcef **\n");
 exit(1);
      }
      bzero(forcef,sizeof(float)*nalloc*3);
      nalloc_bak=nalloc;
    }


    for(i=0;i<nat;i++){
      for(j=0;j<nat;j++){
 matrix[i*nat+j].pol=(float)(pol[i*nat+j]);
 matrix[i*nat+j].sigm=(float)(sigm[i*nat+j]);
 matrix[i*nat+j].ipotro=(float)(ipotro[i*nat+j]);
 matrix[i*nat+j].pc=(float)(pc[i*nat+j]);
 matrix[i*nat+j].pd=(float)(pd[i*nat+j]);
 matrix[i*nat+j].zz=(float)(zz[i*nat+j]);
      }
    }
    { cudaError err = cudaMemcpy(d_matrix,matrix,sizeof(VG_MATRIX)*nat*nat,cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29771, cudaGetErrorString( err) ); exit(1); } };;

    n_bak=n;
  }

  for(i=0;i<(n+256 -1)/256*256;i++){
    if(i<n){
      for(j=0;j<3;j++){
 vec[i].r[j]=x[i*3+j];
      }
      vec[i].atype=atype[i];
    }
    else{
      for(j=0;j<3;j++){
 vec[i].r[j]=0.0f;
      }
      vec[i].atype=0;
    }
  }
  { cudaError err = cudaMemcpy(d_x,vec,sizeof(VG_XVEC)*((n+256 -1)/256*256), cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29791, cudaGetErrorString( err) ); exit(1); } };;



  dim3 threads(256);
  dim3 grid((n+256 -1)/256);
  dscudanacl_kernel_128bit(grid, threads , 0, 0, d_x, n, nat, d_matrix, xmaxf, d_force);
  { cudaError_t err = cudaGetLastError(); if( cudaSuccess != err) { fprintf(stderr, "Cuda error: %s in file '%s' in line %i : %s.\n", "Kernel execution failed", "./dscudatmp/mr3.cu", 29797, cudaGetErrorString( err) ); exit(1); } };


  { cudaError err = cudaMemcpy(forcef,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29800, cudaGetErrorString( err) ); exit(1); } };;
  for(i=0;i<n;i++) for(j=0;j<3;j++) force[i*3+j]=forcef[i*3+j];
}


__attribute__((device)) __inline__
void inter_shared(float xj[3], float xi[3], float fi[3],
           VG_MATRIX d_matrix[], int t, float xmax, float xmax1)
{
  int k;
  float dn2,r,inr,inr2,inr4,inr8,d3,dr[3];
  float pb=(float)(0.338e-19/(14.39*1.60219e-19)),dphir;

  dn2 = 0.0f;
  for(k=0; k<3; k++){
    dr[k] = xi[k] - xj[k];
    dr[k] -= rintf(dr[k] * xmax1) * xmax;
    dn2 += dr[k] * dr[k];
  }
  if(dn2 != 0.0f){
    r = sqrtf(dn2);
    inr = 1.0f / r;
    inr2 = inr * inr;
    inr4 = inr2 * inr2;
    inr8 = inr4 * inr4;
    d3 = pb * d_matrix[t].pol * expf( (d_matrix[t].sigm - r)
      * d_matrix[t].ipotro);
    dphir = ( d3 * d_matrix[t].ipotro * inr
            - 6.0f * d_matrix[t].pc * inr8
            - 8.0f * d_matrix[t].pd * inr8 * inr2
       + inr2 * inr * d_matrix[t].zz );
    for(k=0; k<3; k++) fi[k] += dphir * dr[k];
  }
}


/*
 * stub for remote call to nacl_kernel_shared.
 */
void
dscudanacl_kernel_shared(dim3 _gdim, dim3 _bdim, size_t _smemsize, cudaStream_t _stream , VG_XVEC *x, int n, int nat, VG_MATRIX *d_matrix,
                 float xmax, float *fvec)
{
    int _narg = 6;
    int _grid[3], _block[3];
    RCArg _arg[6], *_argp;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (0) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, Ptxdata);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
//        WARN(3, "mangled name : %s\n", mangledname_);
    }


    // a pointer to a device-address 'dscudaAdrOfUva((void *)x)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)x);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // an integer 'n'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = n;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // an integer 'nat'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = nat;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)d_matrix)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)d_matrix);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // a float 'xmax'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(float));
    _argp->type = dscudaArgTypeF;
    _argp->offset = _off;
    _argp->val.floatval = xmax;
    _argp->size = sizeof(float);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)fvec)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)fvec);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;

        _grid[0] = _gdim.x; _grid[1] = _gdim.y; _grid[2] = _gdim.z;
        _block[0] = _bdim.x; _block[1] = _bdim.y; _block[2] = _gdim.z;
        dscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 8, mangledname_,
                                 _grid, _block, _smemsize, (RCstream)_stream,
                                 _narg, _arg);
    }
 extern "C" 
void nacl_kernel_shared (VG_XVEC *x, int n, int nat, VG_MATRIX *d_matrix,
                 float xmax, float *fvec)
{
    /* nop */
}



extern "C"
void MR3calcnacl_shared(double x[], int n, int atype[], int nat,
   double pol[], double sigm[], double ipotro[],
   double pc[], double pd[], double zz[],
   int tblno, double xmax, int periodicflag,
   double force[])
{
  int i,j;
  static VG_XVEC *d_x=__null;
  static float *d_force=__null;
  static VG_MATRIX *d_matrix=__null;
  float xmaxf;
  VG_MATRIX *matrix=(VG_MATRIX *)force;
  static VG_XVEC *vec=__null;
  if((periodicflag & 1)==0) xmax*=2.0;
  xmaxf=xmax;
  static float *forcef=__null;
  static int n_bak=0;


  if(sizeof(double)*n*3<sizeof(VG_MATRIX)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }
  if(nat>32){
    fprintf(stderr,"** error : nat is too large **\n");
    exit(1);
  }

  if(n!=n_bak){

    int nalloc;
    static int nalloc_bak=0;
    if(n>8192) nalloc=n;
    else nalloc=8192;
    if(nalloc!=nalloc_bak){
      { cudaError err = cudaFree(d_x); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29903, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaFree(d_force); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29904, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaFree(d_matrix); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29905, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_x,sizeof(VG_XVEC)*(nalloc+256)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29906, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_force,sizeof(float)*(nalloc+256)*3); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29907, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_matrix,sizeof(VG_MATRIX)*nat*nat); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29908, cudaGetErrorString( err) ); exit(1); } };;

      free(vec);
      if((vec=(VG_XVEC *)malloc(sizeof(VG_XVEC)*(nalloc+256)))==__null){
 fprintf(stderr,"** error : can't malloc vec **\n");
 exit(1);
      }
      free(forcef);
      if((forcef=(float *)malloc(sizeof(float)*nalloc*3))==__null){
 fprintf(stderr,"** error : can't malloc forcef **\n");
 exit(1);
      }
      bzero(forcef,sizeof(float)*nalloc*3);
      nalloc_bak=nalloc;
    }


    for(i=0;i<nat;i++){
      for(j=0;j<nat;j++){
 matrix[i*nat+j].pol=(float)(pol[i*nat+j]);
 matrix[i*nat+j].sigm=(float)(sigm[i*nat+j]);
 matrix[i*nat+j].ipotro=(float)(ipotro[i*nat+j]);
 matrix[i*nat+j].pc=(float)(pc[i*nat+j]);
 matrix[i*nat+j].pd=(float)(pd[i*nat+j]);
 matrix[i*nat+j].zz=(float)(zz[i*nat+j]);
      }
    }
    { cudaError err = cudaMemcpy(d_matrix,matrix,sizeof(VG_MATRIX)*nat*nat,cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29935, cudaGetErrorString( err) ); exit(1); } };;

    n_bak=n;
  }

  for(i=0;i<(n+256 -1)/256*256;i++){
    if(i<n){
      for(j=0;j<3;j++){
 vec[i].r[j]=x[i*3+j];
      }
      vec[i].atype=atype[i];
    }
    else{
      for(j=0;j<3;j++){
 vec[i].r[j]=0.0f;
      }
      vec[i].atype=0;
    }
  }
  { cudaError err = cudaMemcpy(d_x,vec,sizeof(VG_XVEC)*((n+256 -1)/256*256), cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29955, cudaGetErrorString( err) ); exit(1); } };;



  dim3 threads(256);
  dim3 grid((n+256 -1)/256);
  dscudanacl_kernel_shared(grid, threads , 0, 0, d_x, n, nat, d_matrix, xmaxf, d_force);
  { cudaError_t err = cudaGetLastError(); if( cudaSuccess != err) { fprintf(stderr, "Cuda error: %s in file '%s' in line %i : %s.\n", "Kernel execution failed", "./dscudatmp/mr3.cu", 29961, cudaGetErrorString( err) ); exit(1); } };


  { cudaError err = cudaMemcpy(forcef,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 29964, cudaGetErrorString( err) ); exit(1); } };;
  for(i=0;i<n;i++) for(j=0;j<3;j++) force[i*3+j]=forcef[i*3+j];
}

__attribute__((device)) __inline__
void inter_constant(float xj[3], float xi[3], float fi[3],
           int t, float xmax, float xmax1)
{
  int k;
  float dn2,r,inr,inr2,inr4,inr8,d3,dr[3];
  float pb=(float)(0.338e-19/(14.39*1.60219e-19)),dphir;

  dn2 = 0.0f;
  for(k=0; k<3; k++){
    dr[k] = xi[k] - xj[k];
    dr[k] -= rintf(dr[k] * xmax1) * xmax;
    dn2 += dr[k] * dr[k];
  }
  if(dn2 != 0.0f){
    r = sqrtf(dn2);
    inr = 1.0f / r;
    inr2 = inr * inr;
    inr4 = inr2 * inr2;
    inr8 = inr4 * inr4;
    d3 = pb * c_matrix[t].pol * expf( (c_matrix[t].sigm - r)
      * c_matrix[t].ipotro);
    dphir = ( d3 * c_matrix[t].ipotro * inr
            - 6.0f * c_matrix[t].pc * inr8
            - 8.0f * c_matrix[t].pd * inr8 * inr2
       + inr2 * inr * c_matrix[t].zz );
    for(k=0; k<3; k++) fi[k] += dphir * dr[k];
  }
}


/*
 * stub for remote call to nacl_kernel_constant.
 */
void
dscudanacl_kernel_constant(dim3 _gdim, dim3 _bdim, size_t _smemsize, cudaStream_t _stream , VG_XVEC *x, int n, int nat,
                 float xmax, float *fvec)
{
    int _narg = 5;
    int _grid[3], _block[3];
    RCArg _arg[5], *_argp;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (0) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, Ptxdata);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
//        WARN(3, "mangled name : %s\n", mangledname_);
    }


    // a pointer to a device-address 'dscudaAdrOfUva((void *)x)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)x);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // an integer 'n'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = n;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // an integer 'nat'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = nat;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // a float 'xmax'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(float));
    _argp->type = dscudaArgTypeF;
    _argp->offset = _off;
    _argp->val.floatval = xmax;
    _argp->size = sizeof(float);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)fvec)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)fvec);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;

        _grid[0] = _gdim.x; _grid[1] = _gdim.y; _grid[2] = _gdim.z;
        _block[0] = _bdim.x; _block[1] = _bdim.y; _block[2] = _gdim.z;
        dscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 9, mangledname_,
                                 _grid, _block, _smemsize, (RCstream)_stream,
                                 _narg, _arg);
    }
 extern "C" 
void nacl_kernel_constant (VG_XVEC *x, int n, int nat,
                 float xmax, float *fvec)
{
    /* nop */
}



extern "C"
void MR3calcnacl_constant(double x[], int n, int atype[], int nat,
   double pol[], double sigm[], double ipotro[],
   double pc[], double pd[], double zz[],
   int tblno, double xmax, int periodicflag,
   double force[])
{
  int i,j;
  static VG_XVEC *d_x=__null;
  static float *d_force=__null;
  float xmaxf;
  VG_MATRIX *matrix=(VG_MATRIX *)force;
  static VG_XVEC *vec=__null;
  if((periodicflag & 1)==0) xmax*=2.0;
  xmaxf=xmax;
  static float *forcef=__null;
  static int n_bak=0;


  if(sizeof(double)*n*3<sizeof(VG_MATRIX)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }
  if(nat>32){
    fprintf(stderr,"** error : nat is too large **\n");
    exit(1);
  }

  if(n!=n_bak){

    int nalloc;
    static int nalloc_bak=0;
    if(n>8192) nalloc=n;
    else nalloc=8192;
    if(nalloc!=nalloc_bak){
      { cudaError err = cudaFree(d_x); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 30065, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaFree(d_force); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 30066, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_x,sizeof(VG_XVEC)*(nalloc+256)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 30067, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_force,sizeof(float)*(nalloc+256)*3); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 30068, cudaGetErrorString( err) ); exit(1); } };;

      free(vec);
      if((vec=(VG_XVEC *)malloc(sizeof(VG_XVEC)*(nalloc+256)))==__null){
 fprintf(stderr,"** error : can't malloc vec **\n");
 exit(1);
      }
      free(forcef);
      if((forcef=(float *)malloc(sizeof(float)*nalloc*3))==__null){
 fprintf(stderr,"** error : can't malloc forcef **\n");
 exit(1);
      }
      bzero(forcef,sizeof(float)*nalloc*3);
      nalloc_bak=nalloc;
    }


    for(i=0;i<nat;i++){
      for(j=0;j<nat;j++){
 matrix[i*nat+j].pol=(float)(pol[i*nat+j]);
 matrix[i*nat+j].sigm=(float)(sigm[i*nat+j]);
 matrix[i*nat+j].ipotro=(float)(ipotro[i*nat+j]);
 matrix[i*nat+j].pc=(float)(pc[i*nat+j]);
 matrix[i*nat+j].pd=(float)(pd[i*nat+j]);
 matrix[i*nat+j].zz=(float)(zz[i*nat+j]);
      }
    }
    { cudaError err =     dscudaMemcpyToSymbolWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), "c_matrix", matrix, sizeof(VG_MATRIX)*nat*nat); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 30095, cudaGetErrorString( err) ); exit(1); } };;

    n_bak=n;
  }

  for(i=0;i<(n+256 -1)/256*256;i++){
    if(i<n){
      for(j=0;j<3;j++){
 vec[i].r[j]=x[i*3+j];
      }
      vec[i].atype=atype[i];
    }
    else{
      for(j=0;j<3;j++){
 vec[i].r[j]=0.0f;
      }
      vec[i].atype=0;
    }
  }
  { cudaError err = cudaMemcpy(d_x,vec,sizeof(VG_XVEC)*((n+256 -1)/256*256), cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 30115, cudaGetErrorString( err) ); exit(1); } };;



  dim3 threads(256);
  dim3 grid((n+256 -1)/256);
  dscudanacl_kernel_constant(grid, threads , 0, 0, d_x, n, nat, xmaxf, d_force);
  { cudaError_t err = cudaGetLastError(); if( cudaSuccess != err) { fprintf(stderr, "Cuda error: %s in file '%s' in line %i : %s.\n", "Kernel execution failed", "./dscudatmp/mr3.cu", 30121, cudaGetErrorString( err) ); exit(1); } };


  { cudaError err = cudaMemcpy(forcef,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 30124, cudaGetErrorString( err) ); exit(1); } };;
  for(i=0;i<n;i++) for(j=0;j<3;j++) force[i*3+j]=forcef[i*3+j];
}

__attribute__((device)) __inline__
void inter_if(float xj[3], float xi[3], float fi[3],
           int t, float xmax, float xmax1)
{
  int k;
  float dn2,r,inr,inr2,inr4,inr8,d3,dr[3];
  float pb=(float)(0.338e-19/(14.39*1.60219e-19)),dphir;

  dn2 = 0.0f;
  for(k=0; k<3; k++){
    dr[k] = xi[k] - xj[k];
    dr[k] -= rintf(dr[k] * xmax1) * xmax;
    dn2 += dr[k] * dr[k];
  }
  r = sqrtf(dn2);

  inr = 1.0f / r;
# 30155 "./dscudatmp/mr3.cu"
  inr2 = inr * inr;
  inr4 = inr2 * inr2;
  inr8 = inr4 * inr4;
  d3 = pb * c_matrix[t].pol * expf( (c_matrix[t].sigm - r)
                               * c_matrix[t].ipotro);
  dphir = ( d3 * c_matrix[t].ipotro * inr
          - 6.0f * c_matrix[t].pc * inr8
          - 8.0f * c_matrix[t].pd * inr8 * inr2
          + inr2 * inr * c_matrix[t].zz );

  if(dn2 == 0.0f) dphir = 0.0f;

  for(k=0; k<3; k++) fi[k] += dphir * dr[k];
}


/*
 * stub for remote call to nacl_kernel_if.
 */
void
dscudanacl_kernel_if(dim3 _gdim, dim3 _bdim, size_t _smemsize, cudaStream_t _stream , VG_XVEC *x, int n, int nat,
                 float xmax, float *fvec)
{
    int _narg = 5;
    int _grid[3], _block[3];
    RCArg _arg[5], *_argp;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (0) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, Ptxdata);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
//        WARN(3, "mangled name : %s\n", mangledname_);
    }


    // a pointer to a device-address 'dscudaAdrOfUva((void *)x)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)x);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // an integer 'n'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = n;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // an integer 'nat'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = nat;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // a float 'xmax'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(float));
    _argp->type = dscudaArgTypeF;
    _argp->offset = _off;
    _argp->val.floatval = xmax;
    _argp->size = sizeof(float);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)fvec)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)fvec);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;

        _grid[0] = _gdim.x; _grid[1] = _gdim.y; _grid[2] = _gdim.z;
        _block[0] = _bdim.x; _block[1] = _bdim.y; _block[2] = _gdim.z;
        dscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 10, mangledname_,
                                 _grid, _block, _smemsize, (RCstream)_stream,
                                 _narg, _arg);
    }
 extern "C" 
void nacl_kernel_if (VG_XVEC *x, int n, int nat,
                 float xmax, float *fvec)
{
    /* nop */
}



extern "C"
void MR3calcnacl_if(double x[], int n, int atype[], int nat,
   double pol[], double sigm[], double ipotro[],
   double pc[], double pd[], double zz[],
   int tblno, double xmax, int periodicflag,
   double force[])
{
  int i,j;
  static VG_XVEC *d_x=__null;
  static float *d_force=__null;
  float xmaxf;
  VG_MATRIX *matrix=(VG_MATRIX *)force;
  static VG_XVEC *vec=__null;
  if((periodicflag & 1)==0) xmax*=2.0;
  xmaxf=xmax;
  static float *forcef=__null;
  static int n_bak=0;






  if(sizeof(double)*n*3<sizeof(VG_MATRIX)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }
  if(nat>32){
    fprintf(stderr,"** error : nat is too large **\n");
    exit(1);
  }

  if(n!=n_bak){

    int nalloc;
    static int nalloc_bak=0;
    if(n>8192) nalloc=n;
    else nalloc=8192;
    if(nalloc!=nalloc_bak){
      { cudaError err = cudaFree(d_x); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 30241, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaFree(d_force); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 30242, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_x,sizeof(VG_XVEC)*(nalloc+256)); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 30243, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_force,sizeof(float)*(nalloc+256)*3); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 30244, cudaGetErrorString( err) ); exit(1); } };;


      free(vec);
      if((vec=(VG_XVEC *)malloc(sizeof(VG_XVEC)*(nalloc+256)))==__null){
 fprintf(stderr,"** error : can't malloc vec **\n");
 exit(1);
      }

      free(forcef);
      if((forcef=(float *)malloc(sizeof(float)*nalloc*3))==__null){
 fprintf(stderr,"** error : can't malloc forcef **\n");
 exit(1);
      }
      bzero(forcef,sizeof(float)*nalloc*3);
      nalloc_bak=nalloc;
    }


    for(i=0;i<nat;i++){
      for(j=0;j<nat;j++){
 matrix[i*nat+j].pol=(float)(pol[i*nat+j]);
 matrix[i*nat+j].sigm=(float)(sigm[i*nat+j]);
 matrix[i*nat+j].ipotro=(float)(ipotro[i*nat+j]);
 matrix[i*nat+j].pc=(float)(pc[i*nat+j]);
 matrix[i*nat+j].pd=(float)(pd[i*nat+j]);
 matrix[i*nat+j].zz=(float)(zz[i*nat+j]);
      }
    }
    { cudaError err =     dscudaMemcpyToSymbolWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), "c_matrix", matrix, sizeof(VG_MATRIX)*nat*nat); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 30273, cudaGetErrorString( err) ); exit(1); } };;

    n_bak=n;
  }




  for(i=0;i<(n+256 -1)/256*256;i++){

    if(i<n){
      for(j=0;j<3;j++){
 vec[i].r[j]=x[i*3+j];
      }
      vec[i].atype=atype[i];
    }
    else{
      for(j=0;j<3;j++){
 vec[i].r[j]=0.0f;
      }
      vec[i].atype=0;
    }
  }




  { cudaError err = cudaMemcpy(d_x,vec,sizeof(VG_XVEC)*((n+256 -1)/256*256), cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 30301, cudaGetErrorString( err) ); exit(1); } };;




  dim3 threads(256);
  dim3 grid((n+256 -1)/256);
  dscudanacl_kernel_if(grid, threads , 0, 0, d_x, n, nat, xmaxf, d_force);

  { cudaError_t err = cudaGetLastError(); if( cudaSuccess != err) { fprintf(stderr, "Cuda error: %s in file '%s' in line %i : %s.\n", "Kernel execution failed", "./dscudatmp/mr3.cu", 30309, cudaGetErrorString( err) ); exit(1); } };


  { cudaError err = cudaMemcpy(forcef,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 30312, cudaGetErrorString( err) ); exit(1); } };;
  for(i=0;i<n;i++) for(j=0;j<3;j++) force[i*3+j]=forcef[i*3+j];
}



/*
 * stub for remote call to nacl_kernel_if2.
 */
void
dscudanacl_kernel_if2(dim3 _gdim, dim3 _bdim, size_t _smemsize, cudaStream_t _stream , VG_XVEC *x, int n, int nat,
                 float xmax, float *fvec)
{
    int _narg = 5;
    int _grid[3], _block[3];
    RCArg _arg[5], *_argp;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (0) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, Ptxdata);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
//        WARN(3, "mangled name : %s\n", mangledname_);
    }


    // a pointer to a device-address 'dscudaAdrOfUva((void *)x)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)x);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;


    // an integer 'n'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = n;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // an integer 'nat'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(int));
    _argp->type = dscudaArgTypeI;
    _argp->offset = _off;
    _argp->val.intval = nat;
    _argp->size = sizeof(int);
    _off += _argp->size;


    // a float 'xmax'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _off = dscudaAlignUp(_off, __alignof(float));
    _argp->type = dscudaArgTypeF;
    _argp->offset = _off;
    _argp->val.floatval = xmax;
    _argp->size = sizeof(float);
    _off += _argp->size;


    // a pointer to a device-address 'dscudaAdrOfUva((void *)fvec)'.
    _argp = _arg + _rcargc;
    _rcargc++;
    _devptr = (void*)(size_t)dscudaAdrOfUva((void *)fvec);
    _off = dscudaAlignUp(_off, __alignof(_devptr));
    _argp->type = dscudaArgTypeP;
    _argp->offset = _off;
    _argp->val.pointerval = (RCadr)_devptr;
    _argp->size = sizeof(_devptr);
    _off += _argp->size;

        _grid[0] = _gdim.x; _grid[1] = _gdim.y; _grid[2] = _gdim.z;
        _block[0] = _bdim.x; _block[1] = _bdim.y; _block[2] = _gdim.z;
        dscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 11, mangledname_,
                                 _grid, _block, _smemsize, (RCstream)_stream,
                                 _narg, _arg);
    }
 extern "C" 
void nacl_kernel_if2 (VG_XVEC *x, int n, int nat,
                 float xmax, float *fvec)
{
    /* nop */
}



extern "C"
void MR3calcnacl_if2(double x[], int n, int atype[], int nat,
   double pol[], double sigm[], double ipotro[],
   double pc[], double pd[], double zz[],
   int tblno, double xmax, int periodicflag,
   double force[])
{
  int i,j;
  static VG_XVEC *d_x=__null;
  static float *d_force=__null;
  float xmaxf;
  VG_MATRIX *matrix=(VG_MATRIX *)force;
  static VG_XVEC *vec=__null;
  if((periodicflag & 1)==0) xmax*=2.0;
  xmaxf=xmax;
  static float *forcef=__null;
  static int n_bak=0;






  if(sizeof(double)*n*3<sizeof(VG_MATRIX)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }
  if(nat>32){
    fprintf(stderr,"** error : nat is too large **\n");
    exit(1);
  }

  if(n!=n_bak){

    int nalloc;
    static int nalloc_bak=0;
    if(n>8192) nalloc=n;
    else nalloc=8192;
    if(nalloc!=nalloc_bak){
      { cudaError err = cudaFree(d_x); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 30421, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaFree(d_force); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 30422, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_x,sizeof(VG_XVEC)*(nalloc+(256/(1<<4)))); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 30423, cudaGetErrorString( err) ); exit(1); } };;
      { cudaError err = cudaMalloc((void**)&d_force,sizeof(float)*(nalloc+(256/(1<<4)))*3); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 30424, cudaGetErrorString( err) ); exit(1); } };;


      free(vec);
      if((vec=(VG_XVEC *)malloc(sizeof(VG_XVEC)*(nalloc+(256/(1<<4)))))==__null){
 fprintf(stderr,"** error : can't malloc vec **\n");
 exit(1);
      }

      free(forcef);
      if((forcef=(float *)malloc(sizeof(float)*nalloc*3))==__null){
 fprintf(stderr,"** error : can't malloc forcef **\n");
 exit(1);
      }
      bzero(forcef,sizeof(float)*nalloc*3);
      nalloc_bak=nalloc;
    }


    for(i=0;i<nat;i++){
      for(j=0;j<nat;j++){
 matrix[i*nat+j].pol=(float)(pol[i*nat+j]);
 matrix[i*nat+j].sigm=(float)(sigm[i*nat+j]);
 matrix[i*nat+j].ipotro=(float)(ipotro[i*nat+j]);
 matrix[i*nat+j].pc=(float)(pc[i*nat+j]);
 matrix[i*nat+j].pd=(float)(pd[i*nat+j]);
 matrix[i*nat+j].zz=(float)(zz[i*nat+j]);
      }
    }
    { cudaError err =     dscudaMemcpyToSymbolWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), "c_matrix", matrix, sizeof(VG_MATRIX)*nat*nat); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 30453, cudaGetErrorString( err) ); exit(1); } };;

    n_bak=n;
  }

  for(i=0;i<(n+(256/(1<<4))-1)/(256/(1<<4))*(256/(1<<4));i++){
    if(i<n){
      for(j=0;j<3;j++){
 vec[i].r[j]=x[i*3+j];
      }
      vec[i].atype=atype[i];
    }
    else{
      for(j=0;j<3;j++){
 vec[i].r[j]=0.0f;
      }
      vec[i].atype=0;
    }
  }
  { cudaError err = cudaMemcpy(d_x,vec,sizeof(VG_XVEC)*((n+(256/(1<<4))-1)/(256/(1<<4))*(256/(1<<4))), cudaMemcpyHostToDevice); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 30473, cudaGetErrorString( err) ); exit(1); } };;



  dim3 threads(256);
  dim3 grid((n*(1<<4)+256 -1)/256);
  dscudanacl_kernel_if2(grid, threads , 0, 0, d_x, n, nat, xmaxf, d_force);

  { cudaError_t err = cudaGetLastError(); if( cudaSuccess != err) { fprintf(stderr, "Cuda error: %s in file '%s' in line %i : %s.\n", "Kernel execution failed", "./dscudatmp/mr3.cu", 30480, cudaGetErrorString( err) ); exit(1); } };


  { cudaError err = cudaMemcpy(forcef,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost); if( cudaSuccess != err) { fprintf(stderr, "Cuda error in file '%s' in line %i : %s.\n", "./dscudatmp/mr3.cu", 30483, cudaGetErrorString( err) ); exit(1); } };;
  for(i=0;i<n;i++) for(j=0;j<3;j++) force[i*3+j]=forcef[i*3+j];
}


extern "C"
void MR3calcnacl_sort(double x[], int n, int atype[], int nat,
   double pol[], double sigm[], double ipotro[],
   double pc[], double pd[], double zz[],
   int tblno, double xmax, int periodicflag,
   double force[])
{
  int i,j,*index,count[32],offset[32],*atype2;
  double *x2,*f2;

  if((index=(int *)malloc(sizeof(int)*n))==__null){
    fprintf(stderr,"** error : can't malloc index **\n");
    exit(1);
  }
  if((atype2=(int *)malloc(sizeof(int)*n))==__null){
    fprintf(stderr,"** error : can't malloc atype2 **\n");
    exit(1);
  }
  if((x2=(double *)malloc(sizeof(double)*n*3))==__null){
    fprintf(stderr,"** error : can't malloc x2 **\n");
    exit(1);
  }
  if((f2=(double *)malloc(sizeof(double)*n*3))==__null){
    fprintf(stderr,"** error : can't malloc f2 **\n");
    exit(1);
  }
  for(i=0;i<nat;i++) count[i]=0;
  for(i=0;i<n;i++) count[atype[i]]++;
  for(i=1;i<nat;i++) offset[i]=count[i-1];
  offset[0]=0;
  for(i=0;i<n;i++) index[i]=offset[atype[i]]++;
  for(i=0;i<n;i++){
    for(j=0;j<3;j++) x2[index[i]*3+j]=x[i*3+j];
    atype2[index[i]]=atype[i];
  }
  MR3calcnacl_if(x2,n,atype2,nat,pol,sigm,ipotro,pc,pd,zz,
        tblno,xmax,periodicflag,f2);
  for(i=0;i<n;i++){
    for(j=0;j<3;j++) force[i*3+j]=f2[index[i]*3+j];
  }

  free(index);
  free(atype2);
  free(x2);
  free(f2);
}


extern "C"
void MR3calcnacl(double x[], int n, int atype[], int nat,
   double pol[], double sigm[], double ipotro[],
   double pc[], double pd[], double zz[],
   int tblno, double xmax, int periodicflag,
   double force[])
{
  MR3calcnacl_if2(x,n,atype,nat,
    pol,sigm,ipotro,
    pc,pd,zz,
    tblno,xmax,periodicflag,
    force);
}
